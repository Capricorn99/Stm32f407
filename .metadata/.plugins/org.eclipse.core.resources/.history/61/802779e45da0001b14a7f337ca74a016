/*
 * 100ADE_comunicate.c
 *
 *  Created on: Mar 22, 2021
 *      Author: Admin
 */

#include <stdio.h>
#include <string.h>
#include "stm32f4xx.h"
#include "ade7753.h"
#include "lcd5510.h"


#define MAX_LEN 500

SPI_Handle_t SPI2handle, SPI1handle;

char RcvBuff[MAX_LEN];

volatile char ReadByte;

volatile uint8_t rcvStop = 0;

/*This flag will be set in the interrupt handler of the Arduino interrupt GPIO */
volatile uint8_t dataAvailable = 0;

void delay(void)
{
	for(uint32_t i = 0; i < 500000; i++);
}

/*
 * PB14 --> SPI2_MISO
 * PB15 --> SPI2_MOSI
 * PB13 -> SPI2_SCLK
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
	GPIO_Init(&SPIPins);

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
	GPIO_Init(&SPIPins);

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	GPIO_Init(&SPIPins);


	//NSS
 	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	GPIO_Init(&SPIPins);

}


/*
 * PA4 --> SPI1_NSS
 * PA5 --> SPI1_SCLK
 * PA6 -> SPI1_MISO
 * PA7 --> SPI1_MOSI
 * ALT function mode : 5
 */
void SPI1_GPIOInits(void)
{
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
	GPIO_Init(&SPIPins);

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
	GPIO_Init(&SPIPins);

	//NSS
 	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
	GPIO_Init(&SPIPins);

	//DC Pin I/O
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_OD;
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
	GPIO_Init(&SPIPins);

}



void SPI2_Inits(void)
{
	SPI2handle.pSPIx = SPI2;
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;					//CPHA 1
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin

	SPI_Init(&SPI2handle);
}

void SPI1_Inits(void)
{
	SPI1handle.pSPIx = SPI1;
	SPI1handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
	SPI1handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
	SPI1handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
	SPI1handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
	SPI1handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
	SPI1handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
	SPI1handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin

	SPI_Init(&SPI1handle);
}


/*
 * PIN PD5 as input for interrupt
 */
void ZeroX_Inits(void)
{
	//Input pin trigger as falling edge
	GPIO_Handle_t GpioBtn;
	GpioBtn.pGPIOx = GPIOD;
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
	GPIO_Init(&GpioBtn);

	//IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRIO15);
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
}

/*
 * PIN PD5 as input for interrupt
 */

int main (void)
{
//	//Configure Pin interrupt for Zero Crossing
//	ZeroX_Inits();
//
//
//	//this function is used to initialize the GPIO pins to behave as SPI2 pins
//	SPI2_GPIOInits();
//
//
//	//This function is used to initialize the SPI2 peripheral parameters
//	SPI2_Inits();
//	/*
//	* making SSOE 1 does NSS output enable.
//	* The NSS pin is automatically managed by the hardware.
//	* i.e when SPE=1 , NSS will be pulled to low
//	* and NSS pin will be high when SPE=0
//	*/
//	SPI_SSOEConfig(SPI2, ENABLE);

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
  	SPI1_GPIOInits();

	//This function is used to initialize the SPI2 peripheral parameters
	SPI1_Inits();

	/*
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI1, ENABLE);

	//Initialize LCD with 0x38 software contrast
	LCD5510_Init(0x38);

	//Go to x=14, y=3 position
	LCD5510_GotoXY(14, 3);

	//Print data with Pixel Set mode and Fontsize of 5x7px
	LCD5510_Puts("STM32F429", LCD5510_Pixel_Set, LCD5510_FontSize_5x7);
	LCD5510_GotoXY(15, 13);
	LCD5510_Puts("Discovery", LCD5510_Pixel_Set, LCD5510_FontSize_5x7);
	LCD5510_GotoXY(30, 26);
	LCD5510_Puts("2014", LCD5510_Pixel_Set, LCD5510_FontSize_5x7);

	LCD5510_GotoXY(45, 42);
	//Put string with Pixel set mode and Fontsize of 3x5
	LCD5510_Puts("majerle.eu", LCD5510_Pixel_Set, LCD5510_FontSize_3x5);

	//Display data on LCD
	LCD5510_Refresh();


//	uint32_t data = 0x000C;
//	ADE_WriteData(SPI2, MODE, data, 2);
//	data1 = ADE_ReadData(SPI2, MODE, 2);
//	printf("DATA1 : %x \n", data1);
	while(1){
//		delay();
//		printf("MODE : %x \n", ADE_ReadData(SPI2, MODE, 2));

	}



//	while (1)
//	{
//		data1 = ADE_ReadData(SPI2, VRMS, 3);
//		printf("DATA1 : %d \n", data1);
//		data2 = ADE_ReadData(SPI2, MODE, 2);
//		printf("DATA2 : %d \n", data2);
//
//	}
}

void EXTI9_5_IRQHandler(void)
{
	GPIO_IRQHandling(GPIO_PIN_NO_5);// clear the pending event

	printf("VRMS : %x \n", ADE_ReadData(SPI2, VRMS, 3));
	printf("VRMS : %x \n", ADE_ReadData(SPI2, MODE, 2));

}
