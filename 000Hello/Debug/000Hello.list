
000Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002618  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  080027c8  080027c8  000127c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c00  08002c00  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002c00  08002c00  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c00  08002c00  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c00  08002c00  00012c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c04  08002c04  00012c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000078  08002c80  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08002c80  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040ed  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000db3  00000000  00000000  0002418f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003a0  00000000  00000000  00024f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000318  00000000  00000000  000252e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d4e  00000000  00000000  00025600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003b0b  00000000  00000000  0002934e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000dc1b  00000000  00000000  0002ce59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0003aa74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001524  00000000  00000000  0003aac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080027b0 	.word	0x080027b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080027b0 	.word	0x080027b0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:

#include "lcd5110.h"
#include "keypad4x4.h"
#include "ade7753.h"

void delay(void) {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	0007a11f 	.word	0x0007a11f

080002bc <int_to_string>:
    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
}

void int_to_string(int num , char* buf)
{
 80002bc:	b480      	push	{r7}
 80002be:	b087      	sub	sp, #28
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
	int buf_len;
	for (buf_len = 0; num > 0; buf_len++) {
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]
 80002ca:	e01d      	b.n	8000308 <int_to_string+0x4c>
		buf[buf_len] = (num % 10) + 48;
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	4b26      	ldr	r3, [pc, #152]	; (8000368 <int_to_string+0xac>)
 80002d0:	fb83 1302 	smull	r1, r3, r3, r2
 80002d4:	1099      	asrs	r1, r3, #2
 80002d6:	17d3      	asrs	r3, r2, #31
 80002d8:	1ac9      	subs	r1, r1, r3
 80002da:	460b      	mov	r3, r1
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	440b      	add	r3, r1
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	1ad1      	subs	r1, r2, r3
 80002e4:	b2ca      	uxtb	r2, r1
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	6839      	ldr	r1, [r7, #0]
 80002ea:	440b      	add	r3, r1
 80002ec:	3230      	adds	r2, #48	; 0x30
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	701a      	strb	r2, [r3, #0]
		num /= 10;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a1c      	ldr	r2, [pc, #112]	; (8000368 <int_to_string+0xac>)
 80002f6:	fb82 1203 	smull	r1, r2, r2, r3
 80002fa:	1092      	asrs	r2, r2, #2
 80002fc:	17db      	asrs	r3, r3, #31
 80002fe:	1ad3      	subs	r3, r2, r3
 8000300:	607b      	str	r3, [r7, #4]
	for (buf_len = 0; num > 0; buf_len++) {
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	3301      	adds	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2b00      	cmp	r3, #0
 800030c:	dcde      	bgt.n	80002cc <int_to_string+0x10>
	}

	for (int low = 0, high = buf_len - 1; low < high; low++, high--)
 800030e:	2300      	movs	r3, #0
 8000310:	613b      	str	r3, [r7, #16]
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	3b01      	subs	r3, #1
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	e018      	b.n	800034c <int_to_string+0x90>
	{
		int temp = buf[low];
 800031a:	693b      	ldr	r3, [r7, #16]
 800031c:	683a      	ldr	r2, [r7, #0]
 800031e:	4413      	add	r3, r2
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	60bb      	str	r3, [r7, #8]
		buf[low] = buf[high];
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	683a      	ldr	r2, [r7, #0]
 8000328:	441a      	add	r2, r3
 800032a:	693b      	ldr	r3, [r7, #16]
 800032c:	6839      	ldr	r1, [r7, #0]
 800032e:	440b      	add	r3, r1
 8000330:	7812      	ldrb	r2, [r2, #0]
 8000332:	701a      	strb	r2, [r3, #0]
		buf[high] = temp;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	4413      	add	r3, r2
 800033a:	68ba      	ldr	r2, [r7, #8]
 800033c:	b2d2      	uxtb	r2, r2
 800033e:	701a      	strb	r2, [r3, #0]
	for (int low = 0, high = buf_len - 1; low < high; low++, high--)
 8000340:	693b      	ldr	r3, [r7, #16]
 8000342:	3301      	adds	r3, #1
 8000344:	613b      	str	r3, [r7, #16]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	3b01      	subs	r3, #1
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	693a      	ldr	r2, [r7, #16]
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	429a      	cmp	r2, r3
 8000352:	dbe2      	blt.n	800031a <int_to_string+0x5e>
	}
	buf[buf_len] = '\0';
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	683a      	ldr	r2, [r7, #0]
 8000358:	4413      	add	r3, r2
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	371c      	adds	r7, #28
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	66666667 	.word	0x66666667

0800036c <main>:

int main(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
	LCD5110_Init(0x37);
 8000372:	2037      	movs	r0, #55	; 0x37
 8000374:	f000 fba0 	bl	8000ab8 <LCD5110_Init>
	ADE_Inits();
 8000378:	f000 f9aa 	bl	80006d0 <ADE_Inits>
	printf("MODE : %x \n", ADE_ReadData(SPI2, MODE, 2));
 800037c:	2202      	movs	r2, #2
 800037e:	2109      	movs	r1, #9
 8000380:	4811      	ldr	r0, [pc, #68]	; (80003c8 <main+0x5c>)
 8000382:	f000 f9b5 	bl	80006f0 <ADE_ReadData>
 8000386:	4603      	mov	r3, r0
 8000388:	4619      	mov	r1, r3
 800038a:	4810      	ldr	r0, [pc, #64]	; (80003cc <main+0x60>)
 800038c:	f001 fabe 	bl	800190c <iprintf>

	//ADE_WriteData(SPI2, MODE, 0x000C, 2);

	while(1)
	{
		LCD5110_Clear();
 8000390:	f000 fc56 	bl	8000c40 <LCD5110_Clear>
		char* buf;
		uint32_t vrms = ADE_ReadData(SPI2, VRMS, 3);
 8000394:	2203      	movs	r2, #3
 8000396:	2117      	movs	r1, #23
 8000398:	480b      	ldr	r0, [pc, #44]	; (80003c8 <main+0x5c>)
 800039a:	f000 f9a9 	bl	80006f0 <ADE_ReadData>
 800039e:	6078      	str	r0, [r7, #4]
		int_to_string(vrms, buf);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	6839      	ldr	r1, [r7, #0]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff89 	bl	80002bc <int_to_string>
		printf("VRMS : %x \n", vrms);
 80003aa:	6879      	ldr	r1, [r7, #4]
 80003ac:	4808      	ldr	r0, [pc, #32]	; (80003d0 <main+0x64>)
 80003ae:	f001 faad 	bl	800190c <iprintf>
		LCD5110_Puts(buf, LCD5110_Pixel_Set, LCD5110_FontSize_5x7);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2101      	movs	r1, #1
 80003b6:	6838      	ldr	r0, [r7, #0]
 80003b8:	f000 fdd4 	bl	8000f64 <LCD5110_Puts>
		LCD5110_Refresh();
 80003bc:	f000 fc72 	bl	8000ca4 <LCD5110_Refresh>
		delay();
 80003c0:	f7ff ff66 	bl	8000290 <delay>
	{
 80003c4:	e7e4      	b.n	8000390 <main+0x24>
 80003c6:	bf00      	nop
 80003c8:	40003800 	.word	0x40003800
 80003cc:	080027c8 	.word	0x080027c8
 80003d0:	080027d4 	.word	0x080027d4

080003d4 <EXTI15_10_IRQHandler>:
//        last_key = Keypad_Button;
//    }
}

void EXTI15_10_IRQHandler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_11);// clear the pending event
 80003d8:	200b      	movs	r0, #11
 80003da:	f001 f93d 	bl	8001658 <GPIO_IRQHandling>

	printf("VRMS : %x \n", ADE_ReadData(SPI2, VRMS, 3));
 80003de:	2203      	movs	r2, #3
 80003e0:	2117      	movs	r1, #23
 80003e2:	4805      	ldr	r0, [pc, #20]	; (80003f8 <EXTI15_10_IRQHandler+0x24>)
 80003e4:	f000 f984 	bl	80006f0 <ADE_ReadData>
 80003e8:	4603      	mov	r3, r0
 80003ea:	4619      	mov	r1, r3
 80003ec:	4803      	ldr	r0, [pc, #12]	; (80003fc <EXTI15_10_IRQHandler+0x28>)
 80003ee:	f001 fa8d 	bl	800190c <iprintf>


}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40003800 	.word	0x40003800
 80003fc:	080027d4 	.word	0x080027d4

08000400 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
    TM_KEYPAD_Update();
 8000404:	f000 fa80 	bl	8000908 <TM_KEYPAD_Update>
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}

0800040c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <ITM_SendChar+0x44>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a0d      	ldr	r2, [pc, #52]	; (8000450 <ITM_SendChar+0x44>)
 800041c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000420:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <ITM_SendChar+0x48>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a0b      	ldr	r2, [pc, #44]	; (8000454 <ITM_SendChar+0x48>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800042e:	bf00      	nop
 8000430:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f8      	beq.n	8000430 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800043e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	6013      	str	r3, [r2, #0]
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	e000edfc 	.word	0xe000edfc
 8000454:	e0000e00 	.word	0xe0000e00

08000458 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	e00a      	b.n	8000480 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800046a:	f3af 8000 	nop.w
 800046e:	4601      	mov	r1, r0
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	60ba      	str	r2, [r7, #8]
 8000476:	b2ca      	uxtb	r2, r1
 8000478:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	3301      	adds	r3, #1
 800047e:	617b      	str	r3, [r7, #20]
 8000480:	697a      	ldr	r2, [r7, #20]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	429a      	cmp	r2, r3
 8000486:	dbf0      	blt.n	800046a <_read+0x12>
	}

return len;
 8000488:	687b      	ldr	r3, [r7, #4]
}
 800048a:	4618      	mov	r0, r3
 800048c:	3718      	adds	r7, #24
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b086      	sub	sp, #24
 8000496:	af00      	add	r7, sp, #0
 8000498:	60f8      	str	r0, [r7, #12]
 800049a:	60b9      	str	r1, [r7, #8]
 800049c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
 80004a2:	e009      	b.n	80004b8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	1c5a      	adds	r2, r3, #1
 80004a8:	60ba      	str	r2, [r7, #8]
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff ffad 	bl	800040c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	3301      	adds	r3, #1
 80004b6:	617b      	str	r3, [r7, #20]
 80004b8:	697a      	ldr	r2, [r7, #20]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	429a      	cmp	r2, r3
 80004be:	dbf1      	blt.n	80004a4 <_write+0x12>
	}
	return len;
 80004c0:	687b      	ldr	r3, [r7, #4]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3718      	adds	r7, #24
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}

080004ca <_close>:

int _close(int file)
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
	return -1;
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004f0:	605a      	str	r2, [r3, #4]
	return 0;
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr

080004fe <_isatty>:

int _isatty(int file)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
	return 1;
 8000506:	2301      	movs	r3, #1
}
 8000508:	4618      	mov	r0, r3
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr

08000512 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000512:	b480      	push	{r7}
 8000514:	b085      	sub	sp, #20
 8000516:	af00      	add	r7, sp, #0
 8000518:	60f8      	str	r0, [r7, #12]
 800051a:	60b9      	str	r1, [r7, #8]
 800051c:	607a      	str	r2, [r7, #4]
	return 0;
 800051e:	2300      	movs	r3, #0
}
 8000520:	4618      	mov	r0, r3
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
	...

0800052c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000534:	4a14      	ldr	r2, [pc, #80]	; (8000588 <_sbrk+0x5c>)
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <_sbrk+0x60>)
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000540:	4b13      	ldr	r3, [pc, #76]	; (8000590 <_sbrk+0x64>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d102      	bne.n	800054e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <_sbrk+0x64>)
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <_sbrk+0x68>)
 800054c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <_sbrk+0x64>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	693a      	ldr	r2, [r7, #16]
 8000558:	429a      	cmp	r2, r3
 800055a:	d207      	bcs.n	800056c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800055c:	f001 f9a4 	bl	80018a8 <__errno>
 8000560:	4603      	mov	r3, r0
 8000562:	220c      	movs	r2, #12
 8000564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	e009      	b.n	8000580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <_sbrk+0x64>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000572:	4b07      	ldr	r3, [pc, #28]	; (8000590 <_sbrk+0x64>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	4a05      	ldr	r2, [pc, #20]	; (8000590 <_sbrk+0x64>)
 800057c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3718      	adds	r7, #24
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20020000 	.word	0x20020000
 800058c:	00000400 	.word	0x00000400
 8000590:	20000094 	.word	0x20000094
 8000594:	200002f8 	.word	0x200002f8

08000598 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
    ldr   r0, =_estack
 8000598:	480d      	ldr	r0, [pc, #52]	; (80005d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800059a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800059c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a2:	490d      	ldr	r1, [pc, #52]	; (80005d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <LoopForever+0xe>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a8:	e002      	b.n	80005b0 <LoopCopyDataInit>

080005aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ae:	3304      	adds	r3, #4

080005b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b4:	d3f9      	bcc.n	80005aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b8:	4c0a      	ldr	r4, [pc, #40]	; (80005e4 <LoopForever+0x16>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005bc:	e001      	b.n	80005c2 <LoopFillZerobss>

080005be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c0:	3204      	adds	r2, #4

080005c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c4:	d3fb      	bcc.n	80005be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005c6:	f001 f975 	bl	80018b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ca:	f7ff fecf 	bl	800036c <main>

080005ce <LoopForever>:

LoopForever:
    b LoopForever
 80005ce:	e7fe      	b.n	80005ce <LoopForever>
    ldr   r0, =_estack
 80005d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80005dc:	08002c08 	.word	0x08002c08
  ldr r2, =_sbss
 80005e0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80005e4:	200002f8 	.word	0x200002f8

080005e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e8:	e7fe      	b.n	80005e8 <ADC_IRQHandler>
	...

080005ec <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = SPI_PORT;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <SPI2_GPIOInits+0x58>)
 80005f4:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 80005f6:	2302      	movs	r3, #2
 80005f8:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80005fa:	2305      	movs	r3, #5
 80005fc:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 80005fe:	2300      	movs	r3, #0
 8000600:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000602:	2300      	movs	r3, #0
 8000604:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000606:	2302      	movs	r3, #2
 8000608:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = SPI_PIN_SCLK;
 800060a:	230d      	movs	r3, #13
 800060c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fdab 	bl	800116c <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = SPI_PIN_MOSI;
 8000616:	230f      	movs	r3, #15
 8000618:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fda5 	bl	800116c <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = SPI_PIN_MISO;
 8000622:	230e      	movs	r3, #14
 8000624:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fd9f 	bl	800116c <GPIO_Init>

	//NSS
 	SPIPins.GPIO_PinConfig.GPIO_PinNumber = SPI_PIN_NSS;
 800062e:	230c      	movs	r3, #12
 8000630:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fd99 	bl	800116c <GPIO_Init>

}
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40020400 	.word	0x40020400

08000648 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <SPI2_Inits+0x40>)
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <SPI2_Inits+0x44>)
 8000650:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <SPI2_Inits+0x40>)
 8000654:	2201      	movs	r2, #1
 8000656:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <SPI2_Inits+0x40>)
 800065a:	2201      	movs	r2, #1
 800065c:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <SPI2_Inits+0x40>)
 8000660:	2202      	movs	r2, #2
 8000662:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <SPI2_Inits+0x40>)
 8000666:	2200      	movs	r2, #0
 8000668:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <SPI2_Inits+0x40>)
 800066c:	2200      	movs	r2, #0
 800066e:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;					//CPHA 1
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <SPI2_Inits+0x40>)
 8000672:	2201      	movs	r2, #1
 8000674:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <SPI2_Inits+0x40>)
 8000678:	2200      	movs	r2, #0
 800067a:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <SPI2_Inits+0x40>)
 800067e:	f001 f87e 	bl	800177e <SPI_Init>
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200000c8 	.word	0x200000c8
 800068c:	40003800 	.word	0x40003800

08000690 <ZeroX_Inits>:

/*
 * PIN PD5 as input for interrupt
 */
void ZeroX_Inits(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
	//Input pin trigger as falling edge
	GPIO_Handle_t GpioBtn;
	GpioBtn.pGPIOx = IT_PORT;
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <ZeroX_Inits+0x3c>)
 8000698:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = IT_PIN_ZX;
 800069a:	230b      	movs	r3, #11
 800069c:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800069e:	2304      	movs	r3, #4
 80006a0:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80006a2:	2302      	movs	r3, #2
 80006a4:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80006a6:	2301      	movs	r3, #1
 80006a8:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GpioBtn);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fd5d 	bl	800116c <GPIO_Init>

	//IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRIO11);
 80006b2:	210b      	movs	r1, #11
 80006b4:	2028      	movs	r0, #40	; 0x28
 80006b6:	f000 ffa5 	bl	8001604 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
 80006ba:	2101      	movs	r1, #1
 80006bc:	2028      	movs	r0, #40	; 0x28
 80006be:	f000 ff21 	bl	8001504 <GPIO_IRQInterruptConfig>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40020400 	.word	0x40020400

080006d0 <ADE_Inits>:
void ADE_Inits(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	SPI2_GPIOInits();
 80006d4:	f7ff ff8a 	bl	80005ec <SPI2_GPIOInits>
	SPI2_Inits();
 80006d8:	f7ff ffb6 	bl	8000648 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2, ENABLE);
 80006dc:	2101      	movs	r1, #1
 80006de:	4803      	ldr	r0, [pc, #12]	; (80006ec <ADE_Inits+0x1c>)
 80006e0:	f001 f832 	bl	8001748 <SPI_SSOEConfig>
	ZeroX_Inits();
 80006e4:	f7ff ffd4 	bl	8000690 <ZeroX_Inits>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40003800 	.word	0x40003800

080006f0 <ADE_ReadData>:


uint32_t ADE_ReadData( SPI_RegDef_t *pSPIx, uint8_t addr, uint32_t bytes_to_read)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	460b      	mov	r3, r1
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	72fb      	strb	r3, [r7, #11]
	uint32_t data = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
	uint8_t dummy_write = 0xff;
 8000702:	23ff      	movs	r3, #255	; 0xff
 8000704:	75fb      	strb	r3, [r7, #23]
	uint8_t dummy_write2 = 0x00;
 8000706:	2300      	movs	r3, #0
 8000708:	75bb      	strb	r3, [r7, #22]
	SPI_PeripheralControl(pSPIx, ENABLE); //SS pin pull to low
 800070a:	2101      	movs	r1, #1
 800070c:	68f8      	ldr	r0, [r7, #12]
 800070e:	f001 f8af 	bl	8001870 <SPI_PeripheralControl>
//	while( ( (pSPIx->SR & 0x0003) == 0) || (pSPIx->SR & 0x0080) );

	SPI_Transfer(pSPIx, addr);
 8000712:	7afb      	ldrb	r3, [r7, #11]
 8000714:	4619      	mov	r1, r3
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f001 f88c 	bl	8001834 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_read; i++)
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	e00f      	b.n	8000742 <ADE_ReadData+0x52>
	{
		data <<= 8;
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	61fb      	str	r3, [r7, #28]
		data |= SPI_Transfer(pSPIx, dummy_write);
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	4619      	mov	r1, r3
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f001 f881 	bl	8001834 <SPI_Transfer>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	4313      	orrs	r3, r2
 800073a:	61fb      	str	r3, [r7, #28]
	for(uint32_t i = 0; i < bytes_to_read; i++)
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	3301      	adds	r3, #1
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	69ba      	ldr	r2, [r7, #24]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	429a      	cmp	r2, r3
 8000748:	d3eb      	bcc.n	8000722 <ADE_ReadData+0x32>
		//printf("%x\n", data);
	}

	SPI_Transfer(pSPIx, dummy_write2);
 800074a:	7dbb      	ldrb	r3, [r7, #22]
 800074c:	4619      	mov	r1, r3
 800074e:	68f8      	ldr	r0, [r7, #12]
 8000750:	f001 f870 	bl	8001834 <SPI_Transfer>

	SPI_PeripheralControl(pSPIx, DISABLE); //SS pin pull to high
 8000754:	2100      	movs	r1, #0
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f001 f88a 	bl	8001870 <SPI_PeripheralControl>
	return data;
 800075c:	69fb      	ldr	r3, [r7, #28]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <TM_KEYPAD_INT_SetColumn>:

	return temp;
}

/* Private */
void TM_KEYPAD_INT_SetColumn(uint8_t column) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_COLUMN_1_HIGH;
 8000772:	2201      	movs	r2, #1
 8000774:	2100      	movs	r1, #0
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <TM_KEYPAD_INT_SetColumn+0x84>)
 8000778:	f000 fe9f 	bl	80014ba <GPIO_WriteToOutputPin>
	KEYPAD_COLUMN_2_HIGH;
 800077c:	2201      	movs	r2, #1
 800077e:	2101      	movs	r1, #1
 8000780:	481a      	ldr	r0, [pc, #104]	; (80007ec <TM_KEYPAD_INT_SetColumn+0x84>)
 8000782:	f000 fe9a 	bl	80014ba <GPIO_WriteToOutputPin>
	KEYPAD_COLUMN_3_HIGH;
 8000786:	2201      	movs	r2, #1
 8000788:	2102      	movs	r1, #2
 800078a:	4818      	ldr	r0, [pc, #96]	; (80007ec <TM_KEYPAD_INT_SetColumn+0x84>)
 800078c:	f000 fe95 	bl	80014ba <GPIO_WriteToOutputPin>
	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large) {
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <TM_KEYPAD_INT_SetColumn+0x88>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d104      	bne.n	80007a2 <TM_KEYPAD_INT_SetColumn+0x3a>
		KEYPAD_COLUMN_4_HIGH;
 8000798:	2201      	movs	r2, #1
 800079a:	2103      	movs	r1, #3
 800079c:	4813      	ldr	r0, [pc, #76]	; (80007ec <TM_KEYPAD_INT_SetColumn+0x84>)
 800079e:	f000 fe8c 	bl	80014ba <GPIO_WriteToOutputPin>
	}

	/* Set column low */
	if (column == 1) {
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d104      	bne.n	80007b2 <TM_KEYPAD_INT_SetColumn+0x4a>
		KEYPAD_COLUMN_1_LOW;
 80007a8:	2200      	movs	r2, #0
 80007aa:	2100      	movs	r1, #0
 80007ac:	480f      	ldr	r0, [pc, #60]	; (80007ec <TM_KEYPAD_INT_SetColumn+0x84>)
 80007ae:	f000 fe84 	bl	80014ba <GPIO_WriteToOutputPin>
	}
	if (column == 2) {
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d104      	bne.n	80007c2 <TM_KEYPAD_INT_SetColumn+0x5a>
		KEYPAD_COLUMN_2_LOW;
 80007b8:	2200      	movs	r2, #0
 80007ba:	2101      	movs	r1, #1
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <TM_KEYPAD_INT_SetColumn+0x84>)
 80007be:	f000 fe7c 	bl	80014ba <GPIO_WriteToOutputPin>
	}
	if (column == 3) {
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d104      	bne.n	80007d2 <TM_KEYPAD_INT_SetColumn+0x6a>
		KEYPAD_COLUMN_3_LOW;
 80007c8:	2200      	movs	r2, #0
 80007ca:	2102      	movs	r1, #2
 80007cc:	4807      	ldr	r0, [pc, #28]	; (80007ec <TM_KEYPAD_INT_SetColumn+0x84>)
 80007ce:	f000 fe74 	bl	80014ba <GPIO_WriteToOutputPin>
	}
	if (column == 4) {
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	d104      	bne.n	80007e2 <TM_KEYPAD_INT_SetColumn+0x7a>
		KEYPAD_COLUMN_4_LOW;
 80007d8:	2200      	movs	r2, #0
 80007da:	2103      	movs	r1, #3
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <TM_KEYPAD_INT_SetColumn+0x84>)
 80007de:	f000 fe6c 	bl	80014ba <GPIO_WriteToOutputPin>
	}
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	200000e8 	.word	0x200000e8

080007f4 <TM_KEYPAD_INT_CheckRow>:

uint8_t TM_KEYPAD_INT_CheckRow(uint8_t column) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
	/* Read rows */

	/* Scan row 1 */
	if (KEYPAD_ROW_1_CHECK) {
 80007fe:	2100      	movs	r1, #0
 8000800:	481d      	ldr	r0, [pc, #116]	; (8000878 <TM_KEYPAD_INT_CheckRow+0x84>)
 8000802:	f000 fe45 	bl	8001490 <GPIO_ReadFromInputPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d104      	bne.n	8000816 <TM_KEYPAD_INT_CheckRow+0x22>
		return KEYPAD_INT_Buttons[0][column - 1];
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	3b01      	subs	r3, #1
 8000810:	4a1a      	ldr	r2, [pc, #104]	; (800087c <TM_KEYPAD_INT_CheckRow+0x88>)
 8000812:	5cd3      	ldrb	r3, [r2, r3]
 8000814:	e02b      	b.n	800086e <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 2 */
	if (KEYPAD_ROW_2_CHECK) {
 8000816:	2101      	movs	r1, #1
 8000818:	4817      	ldr	r0, [pc, #92]	; (8000878 <TM_KEYPAD_INT_CheckRow+0x84>)
 800081a:	f000 fe39 	bl	8001490 <GPIO_ReadFromInputPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d105      	bne.n	8000830 <TM_KEYPAD_INT_CheckRow+0x3c>
		return KEYPAD_INT_Buttons[1][column - 1];
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	3b01      	subs	r3, #1
 8000828:	4a14      	ldr	r2, [pc, #80]	; (800087c <TM_KEYPAD_INT_CheckRow+0x88>)
 800082a:	4413      	add	r3, r2
 800082c:	791b      	ldrb	r3, [r3, #4]
 800082e:	e01e      	b.n	800086e <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 3 */
	if (KEYPAD_ROW_3_CHECK) {
 8000830:	2102      	movs	r1, #2
 8000832:	4811      	ldr	r0, [pc, #68]	; (8000878 <TM_KEYPAD_INT_CheckRow+0x84>)
 8000834:	f000 fe2c 	bl	8001490 <GPIO_ReadFromInputPin>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d105      	bne.n	800084a <TM_KEYPAD_INT_CheckRow+0x56>
		return KEYPAD_INT_Buttons[2][column - 1];
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	3b01      	subs	r3, #1
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <TM_KEYPAD_INT_CheckRow+0x88>)
 8000844:	4413      	add	r3, r2
 8000846:	7a1b      	ldrb	r3, [r3, #8]
 8000848:	e011      	b.n	800086e <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 4 */
	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large && KEYPAD_ROW_4_CHECK) {
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <TM_KEYPAD_INT_CheckRow+0x8c>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d10c      	bne.n	800086c <TM_KEYPAD_INT_CheckRow+0x78>
 8000852:	2103      	movs	r1, #3
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <TM_KEYPAD_INT_CheckRow+0x84>)
 8000856:	f000 fe1b 	bl	8001490 <GPIO_ReadFromInputPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d105      	bne.n	800086c <TM_KEYPAD_INT_CheckRow+0x78>
		return KEYPAD_INT_Buttons[3][column - 1];
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	3b01      	subs	r3, #1
 8000864:	4a05      	ldr	r2, [pc, #20]	; (800087c <TM_KEYPAD_INT_CheckRow+0x88>)
 8000866:	4413      	add	r3, r2
 8000868:	7b1b      	ldrb	r3, [r3, #12]
 800086a:	e000      	b.n	800086e <TM_KEYPAD_INT_CheckRow+0x7a>
	}

	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 800086c:	23ff      	movs	r3, #255	; 0xff
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40020800 	.word	0x40020800
 800087c:	20000000 	.word	0x20000000
 8000880:	200000e8 	.word	0x200000e8

08000884 <TM_KEYPAD_INT_Read>:

uint8_t TM_KEYPAD_INT_Read(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	TM_KEYPAD_INT_SetColumn(1);
 800088a:	2001      	movs	r0, #1
 800088c:	f7ff ff6c 	bl	8000768 <TM_KEYPAD_INT_SetColumn>
	/* Check rows */
	check = TM_KEYPAD_INT_CheckRow(1);
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff ffaf 	bl	80007f4 <TM_KEYPAD_INT_CheckRow>
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2bff      	cmp	r3, #255	; 0xff
 800089e:	d001      	beq.n	80008a4 <TM_KEYPAD_INT_Read+0x20>
		return check;
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	e02b      	b.n	80008fc <TM_KEYPAD_INT_Read+0x78>
	}

	/* Set row 2 to LOW */
	TM_KEYPAD_INT_SetColumn(2);
 80008a4:	2002      	movs	r0, #2
 80008a6:	f7ff ff5f 	bl	8000768 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(2);
 80008aa:	2002      	movs	r0, #2
 80008ac:	f7ff ffa2 	bl	80007f4 <TM_KEYPAD_INT_CheckRow>
 80008b0:	4603      	mov	r3, r0
 80008b2:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2bff      	cmp	r3, #255	; 0xff
 80008b8:	d001      	beq.n	80008be <TM_KEYPAD_INT_Read+0x3a>
		return check;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	e01e      	b.n	80008fc <TM_KEYPAD_INT_Read+0x78>
	}

	/* Set row 3 to LOW */
	TM_KEYPAD_INT_SetColumn(3);
 80008be:	2003      	movs	r0, #3
 80008c0:	f7ff ff52 	bl	8000768 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(3);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f7ff ff95 	bl	80007f4 <TM_KEYPAD_INT_CheckRow>
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2bff      	cmp	r3, #255	; 0xff
 80008d2:	d001      	beq.n	80008d8 <TM_KEYPAD_INT_Read+0x54>
		return check;
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	e011      	b.n	80008fc <TM_KEYPAD_INT_Read+0x78>
	}

	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large) {
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <TM_KEYPAD_INT_Read+0x80>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d10c      	bne.n	80008fa <TM_KEYPAD_INT_Read+0x76>
		/* Set column 4 to LOW */
		TM_KEYPAD_INT_SetColumn(4);
 80008e0:	2004      	movs	r0, #4
 80008e2:	f7ff ff41 	bl	8000768 <TM_KEYPAD_INT_SetColumn>
		/* Check rows */
		check = TM_KEYPAD_INT_CheckRow(4);
 80008e6:	2004      	movs	r0, #4
 80008e8:	f7ff ff84 	bl	80007f4 <TM_KEYPAD_INT_CheckRow>
 80008ec:	4603      	mov	r3, r0
 80008ee:	71fb      	strb	r3, [r7, #7]
		if (check != KEYPAD_NO_PRESSED) {
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2bff      	cmp	r3, #255	; 0xff
 80008f4:	d001      	beq.n	80008fa <TM_KEYPAD_INT_Read+0x76>
			return check;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	e000      	b.n	80008fc <TM_KEYPAD_INT_Read+0x78>
		}
	}

	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 80008fa:	23ff      	movs	r3, #255	; 0xff
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200000e8 	.word	0x200000e8

08000908 <TM_KEYPAD_Update>:

void TM_KEYPAD_Update(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	static uint16_t millis = 0;

	/* Every X ms read */
	if (++millis >= KEYPAD_READ_INTERVAL) {// && KeypadStatus == TM_KEYPAD_Button_NOPRESSED) {
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <TM_KEYPAD_Update+0x30>)
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	b29a      	uxth	r2, r3
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <TM_KEYPAD_Update+0x30>)
 8000916:	801a      	strh	r2, [r3, #0]
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <TM_KEYPAD_Update+0x30>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	2b31      	cmp	r3, #49	; 0x31
 800091e:	d908      	bls.n	8000932 <TM_KEYPAD_Update+0x2a>
		/* Reset */
		millis = 0;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <TM_KEYPAD_Update+0x30>)
 8000922:	2200      	movs	r2, #0
 8000924:	801a      	strh	r2, [r3, #0]

		/* Read keyboard */
		KeypadStatus = (TM_KEYPAD_Button_t) TM_KEYPAD_INT_Read();
 8000926:	f7ff ffad 	bl	8000884 <TM_KEYPAD_INT_Read>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	4b03      	ldr	r3, [pc, #12]	; (800093c <TM_KEYPAD_Update+0x34>)
 8000930:	701a      	strb	r2, [r3, #0]
	}
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000098 	.word	0x20000098
 800093c:	20000010 	.word	0x20000010

08000940 <SPI1_GPIOInits>:
 *
 * PA6 -> GPIO_OUTPUT_PIN
 * ALT function mode : 0
 */
void SPI1_GPIOInits(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <SPI1_GPIOInits+0x70>)
 8000948:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 800094a:	2302      	movs	r3, #2
 800094c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800094e:	2305      	movs	r3, #5
 8000950:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 8000952:	2300      	movs	r3, #0
 8000954:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000956:	2300      	movs	r3, #0
 8000958:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800095a:	2302      	movs	r3, #2
 800095c:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 800095e:	2305      	movs	r3, #5
 8000960:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fc01 	bl	800116c <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800096a:	2307      	movs	r3, #7
 800096c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fbfb 	bl	800116c <GPIO_Init>

	//NSS
 	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_CE_PIN;
 8000976:	2304      	movs	r3, #4
 8000978:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4618      	mov	r0, r3
 800097e:	f000 fbf5 	bl	800116c <GPIO_Init>

	//DC Pin GPIO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_DC_PIN;
 8000982:	2306      	movs	r3, #6
 8000984:	723b      	strb	r3, [r7, #8]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000986:	2301      	movs	r3, #1
 8000988:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 800098e:	2300      	movs	r3, #0
 8000990:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&SPIPins);
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fbe9 	bl	800116c <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_RST_PIN;
 800099a:	2302      	movs	r3, #2
 800099c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fbe3 	bl	800116c <GPIO_Init>
}
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40020000 	.word	0x40020000

080009b4 <SPI1_Inits>:



void SPI1_Inits(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	SPI1handle.pSPIx = SPI1;
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <SPI1_Inits+0x40>)
 80009ba:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <SPI1_Inits+0x44>)
 80009bc:	601a      	str	r2, [r3, #0]
	SPI1handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <SPI1_Inits+0x40>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	715a      	strb	r2, [r3, #5]
	SPI1handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <SPI1_Inits+0x40>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	711a      	strb	r2, [r3, #4]
	SPI1handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <SPI1_Inits+0x40>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	719a      	strb	r2, [r3, #6]
	SPI1handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <SPI1_Inits+0x40>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	71da      	strb	r2, [r3, #7]
	SPI1handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 80009d6:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <SPI1_Inits+0x40>)
 80009d8:	2200      	movs	r2, #0
 80009da:	721a      	strb	r2, [r3, #8]
	SPI1handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <SPI1_Inits+0x40>)
 80009de:	2200      	movs	r2, #0
 80009e0:	725a      	strb	r2, [r3, #9]
	SPI1handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <SPI1_Inits+0x40>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI1handle);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <SPI1_Inits+0x40>)
 80009ea:	f000 fec8 	bl	800177e <SPI_Init>
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000a8 	.word	0x200000a8
 80009f8:	40013000 	.word	0x40013000

080009fc <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
	SPI_PeripheralControl(SPI1, ENABLE); //SS pin pull to LOW
 8000a06:	2101      	movs	r1, #1
 8000a08:	4807      	ldr	r0, [pc, #28]	; (8000a28 <LCD5110_send+0x2c>)
 8000a0a:	f000 ff31 	bl	8001870 <SPI_PeripheralControl>
	SPI_Transfer(SPI1, data);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4619      	mov	r1, r3
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <LCD5110_send+0x2c>)
 8000a14:	f000 ff0e 	bl	8001834 <SPI_Transfer>
	SPI_PeripheralControl(SPI1, DISABLE); //SS pin pull to HIGH
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <LCD5110_send+0x2c>)
 8000a1c:	f000 ff28 	bl	8001870 <SPI_PeripheralControl>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40013000 	.word	0x40013000

08000a2c <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	460a      	mov	r2, r1
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d002      	beq.n	8000a48 <LCD5110_Pin+0x1c>
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d00f      	beq.n	8000a66 <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 8000a46:	e01d      	b.n	8000a84 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d005      	beq.n	8000a5a <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2106      	movs	r1, #6
 8000a52:	480e      	ldr	r0, [pc, #56]	; (8000a8c <LCD5110_Pin+0x60>)
 8000a54:	f000 fd31 	bl	80014ba <GPIO_WriteToOutputPin>
			break;
 8000a58:	e014      	b.n	8000a84 <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2106      	movs	r1, #6
 8000a5e:	480b      	ldr	r0, [pc, #44]	; (8000a8c <LCD5110_Pin+0x60>)
 8000a60:	f000 fd2b 	bl	80014ba <GPIO_WriteToOutputPin>
			break;
 8000a64:	e00e      	b.n	8000a84 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8000a66:	79bb      	ldrb	r3, [r7, #6]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d005      	beq.n	8000a78 <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2102      	movs	r1, #2
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <LCD5110_Pin+0x60>)
 8000a72:	f000 fd22 	bl	80014ba <GPIO_WriteToOutputPin>
			break;
 8000a76:	e004      	b.n	8000a82 <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <LCD5110_Pin+0x60>)
 8000a7e:	f000 fd1c 	bl	80014ba <GPIO_WriteToOutputPin>
			break;
 8000a82:	bf00      	nop
	}
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40020000 	.word	0x40020000

08000a90 <LCD5110_Delay>:

void LCD5110_Delay(unsigned long micros) {
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++) {
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	e002      	b.n	8000aa4 <LCD5110_Delay+0x14>
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d8f8      	bhi.n	8000a9e <LCD5110_Delay+0xe>
	}
}
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	SPI1_GPIOInits();
 8000ac2:	f7ff ff3d 	bl	8000940 <SPI1_GPIOInits>
	SPI1_Inits();
 8000ac6:	f7ff ff75 	bl	80009b4 <SPI1_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI1, ENABLE);
 8000aca:	2101      	movs	r1, #1
 8000acc:	481c      	ldr	r0, [pc, #112]	; (8000b40 <LCD5110_Init+0x88>)
 8000ace:	f000 fe3b 	bl	8001748 <SPI_SSOEConfig>

	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f7ff ffa9 	bl	8000a2c <LCD5110_Pin>
	LCD5110_Delay(10000);
 8000ada:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ade:	f7ff ffd7 	bl	8000a90 <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f7ff ffa1 	bl	8000a2c <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 8000aea:	2121      	movs	r1, #33	; 0x21
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 f829 	bl	8000b44 <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 8000af2:	2114      	movs	r1, #20
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 f825 	bl	8000b44 <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	da01      	bge.n	8000b06 <LCD5110_Init+0x4e>
		contrast = 0x7F;
 8000b02:	237f      	movs	r3, #127	; 0x7f
 8000b04:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4619      	mov	r1, r3
 8000b10:	2000      	movs	r0, #0
 8000b12:	f000 f817 	bl	8000b44 <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 8000b16:	2120      	movs	r1, #32
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f000 f813 	bl	8000b44 <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8000b1e:	210c      	movs	r1, #12
 8000b20:	2000      	movs	r0, #0
 8000b22:	f000 f80f 	bl	8000b44 <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 8000b26:	f000 f8b1 	bl	8000c8c <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8000b2a:	210c      	movs	r1, #12
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f000 f809 	bl	8000b44 <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 8000b32:	f000 f885 	bl	8000c40 <LCD5110_Clear>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40013000 	.word	0x40013000

08000b44 <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	4613      	mov	r3, r2
 8000b52:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d006      	beq.n	8000b68 <LCD5110_Write+0x24>
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d109      	bne.n	8000b72 <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 8000b5e:	2101      	movs	r1, #1
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff ff63 	bl	8000a2c <LCD5110_Pin>
			break;
 8000b66:	e005      	b.n	8000b74 <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f7ff ff5e 	bl	8000a2c <LCD5110_Pin>
			break;
 8000b70:	e000      	b.n	8000b74 <LCD5110_Write+0x30>
		default: break;
 8000b72:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 8000b74:	79bb      	ldrb	r3, [r7, #6]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff40 	bl	80009fc <LCD5110_send>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <LCD5110_DrawPixel>:

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
}

void LCD5110_DrawPixel(unsigned char x, unsigned char y, LCD5110_Pixel_t pixel) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	71bb      	strb	r3, [r7, #6]
 8000b92:	4613      	mov	r3, r2
 8000b94:	717b      	strb	r3, [r7, #5]
	if (x >= LCD5110_WIDTH) {
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b53      	cmp	r3, #83	; 0x53
 8000b9a:	d849      	bhi.n	8000c30 <LCD5110_DrawPixel+0xac>
		return;
	}
	if (y >= LCD5110_HEIGHT) {
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	2b2f      	cmp	r3, #47	; 0x2f
 8000ba0:	d848      	bhi.n	8000c34 <LCD5110_DrawPixel+0xb0>
		return;
	}

	if (pixel != LCD5110_Pixel_Clear) {
 8000ba2:	797b      	ldrb	r3, [r7, #5]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d01d      	beq.n	8000be4 <LCD5110_DrawPixel+0x60>
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] |= 1 << (y % 8);
 8000ba8:	79fa      	ldrb	r2, [r7, #7]
 8000baa:	79bb      	ldrb	r3, [r7, #6]
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	b2d8      	uxtb	r0, r3
 8000bb0:	4601      	mov	r1, r0
 8000bb2:	2354      	movs	r3, #84	; 0x54
 8000bb4:	fb03 f301 	mul.w	r3, r3, r1
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <LCD5110_DrawPixel+0xb8>)
 8000bbc:	5cd3      	ldrb	r3, [r2, r3]
 8000bbe:	b25a      	sxtb	r2, r3
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	b259      	sxtb	r1, r3
 8000bd2:	79fa      	ldrb	r2, [r7, #7]
 8000bd4:	2354      	movs	r3, #84	; 0x54
 8000bd6:	fb03 f300 	mul.w	r3, r3, r0
 8000bda:	4413      	add	r3, r2
 8000bdc:	b2c9      	uxtb	r1, r1
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <LCD5110_DrawPixel+0xb8>)
 8000be0:	54d1      	strb	r1, [r2, r3]
 8000be2:	e01e      	b.n	8000c22 <LCD5110_DrawPixel+0x9e>
	} else {
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] &= ~(1 << (y % 8));
 8000be4:	79fa      	ldrb	r2, [r7, #7]
 8000be6:	79bb      	ldrb	r3, [r7, #6]
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	b2d8      	uxtb	r0, r3
 8000bec:	4601      	mov	r1, r0
 8000bee:	2354      	movs	r3, #84	; 0x54
 8000bf0:	fb03 f301 	mul.w	r3, r3, r1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <LCD5110_DrawPixel+0xb8>)
 8000bf8:	5cd3      	ldrb	r3, [r2, r3]
 8000bfa:	b25a      	sxtb	r2, r3
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	2101      	movs	r1, #1
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	4013      	ands	r3, r2
 8000c10:	b259      	sxtb	r1, r3
 8000c12:	79fa      	ldrb	r2, [r7, #7]
 8000c14:	2354      	movs	r3, #84	; 0x54
 8000c16:	fb03 f300 	mul.w	r3, r3, r0
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b2c9      	uxtb	r1, r1
 8000c1e:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <LCD5110_DrawPixel+0xb8>)
 8000c20:	54d1      	strb	r1, [r2, r3]
	}
	LCD5110_UpdateArea(x, y, x, y);
 8000c22:	79bb      	ldrb	r3, [r7, #6]
 8000c24:	79fa      	ldrb	r2, [r7, #7]
 8000c26:	79b9      	ldrb	r1, [r7, #6]
 8000c28:	79f8      	ldrb	r0, [r7, #7]
 8000c2a:	f000 f89d 	bl	8000d68 <LCD5110_UpdateArea>
 8000c2e:	e002      	b.n	8000c36 <LCD5110_DrawPixel+0xb2>
		return;
 8000c30:	bf00      	nop
 8000c32:	e000      	b.n	8000c36 <LCD5110_DrawPixel+0xb2>
		return;
 8000c34:	bf00      	nop
}
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200000f0 	.word	0x200000f0

08000c40 <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 8000c46:	f000 f821 	bl	8000c8c <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	e007      	b.n	8000c60 <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <LCD5110_Clear+0x48>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000c66:	d3f3      	bcc.n	8000c50 <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 f8b8 	bl	8000de0 <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 8000c70:	232f      	movs	r3, #47	; 0x2f
 8000c72:	2253      	movs	r2, #83	; 0x53
 8000c74:	2100      	movs	r1, #0
 8000c76:	2000      	movs	r0, #0
 8000c78:	f000 f876 	bl	8000d68 <LCD5110_UpdateArea>
	LCD5110_Refresh();
 8000c7c:	f000 f812 	bl	8000ca4 <LCD5110_Refresh>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200000f0 	.word	0x200000f0

08000c8c <LCD5110_Home>:

void LCD5110_Home(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff ff56 	bl	8000b44 <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 8000c98:	2140      	movs	r1, #64	; 0x40
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff ff52 	bl	8000b44 <LCD5110_Write>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 8000caa:	2300      	movs	r3, #0
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	e03b      	b.n	8000d28 <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <LCD5110_Refresh+0xb0>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dc2f      	bgt.n	8000d20 <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	4a24      	ldr	r2, [pc, #144]	; (8000d58 <LCD5110_Refresh+0xb4>)
 8000cc6:	7812      	ldrb	r2, [r2, #0]
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	dc31      	bgt.n	8000d30 <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff ff34 	bl	8000b44 <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <LCD5110_Refresh+0xb8>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff ff2b 	bl	8000b44 <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <LCD5110_Refresh+0xb8>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	71bb      	strb	r3, [r7, #6]
 8000cf4:	e00e      	b.n	8000d14 <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2254      	movs	r2, #84	; 0x54
 8000cfa:	fb02 f203 	mul.w	r2, r2, r3
 8000cfe:	79bb      	ldrb	r3, [r7, #6]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <LCD5110_Refresh+0xbc>)
 8000d04:	5cd3      	ldrb	r3, [r2, r3]
 8000d06:	4619      	mov	r1, r3
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f7ff ff1b 	bl	8000b44 <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	3301      	adds	r3, #1
 8000d12:	71bb      	strb	r3, [r7, #6]
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <LCD5110_Refresh+0xc0>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	79ba      	ldrb	r2, [r7, #6]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d9eb      	bls.n	8000cf6 <LCD5110_Refresh+0x52>
 8000d1e:	e000      	b.n	8000d22 <LCD5110_Refresh+0x7e>
			continue;
 8000d20:	bf00      	nop
	for (i = 0; i < 6; i++) {
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	3301      	adds	r3, #1
 8000d26:	71fb      	strb	r3, [r7, #7]
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	2b05      	cmp	r3, #5
 8000d2c:	d9c0      	bls.n	8000cb0 <LCD5110_Refresh+0xc>
 8000d2e:	e000      	b.n	8000d32 <LCD5110_Refresh+0x8e>
			break;
 8000d30:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <LCD5110_Refresh+0xb8>)
 8000d34:	2253      	movs	r2, #83	; 0x53
 8000d36:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <LCD5110_Refresh+0xc0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <LCD5110_Refresh+0xb0>)
 8000d40:	222f      	movs	r2, #47	; 0x2f
 8000d42:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <LCD5110_Refresh+0xb4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000009c 	.word	0x2000009c
 8000d58:	2000009d 	.word	0x2000009d
 8000d5c:	2000009a 	.word	0x2000009a
 8000d60:	200000f0 	.word	0x200000f0
 8000d64:	2000009b 	.word	0x2000009b

08000d68 <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 8000d68:	b490      	push	{r4, r7}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	4608      	mov	r0, r1
 8000d72:	4611      	mov	r1, r2
 8000d74:	461a      	mov	r2, r3
 8000d76:	4623      	mov	r3, r4
 8000d78:	71fb      	strb	r3, [r7, #7]
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71bb      	strb	r3, [r7, #6]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	717b      	strb	r3, [r7, #5]
 8000d82:	4613      	mov	r3, r2
 8000d84:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <LCD5110_UpdateArea+0x68>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	79fa      	ldrb	r2, [r7, #7]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d202      	bcs.n	8000d96 <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 8000d90:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <LCD5110_UpdateArea+0x68>)
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <LCD5110_UpdateArea+0x6c>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	797a      	ldrb	r2, [r7, #5]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d902      	bls.n	8000da6 <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 8000da0:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <LCD5110_UpdateArea+0x6c>)
 8000da2:	797b      	ldrb	r3, [r7, #5]
 8000da4:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <LCD5110_UpdateArea+0x70>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	79ba      	ldrb	r2, [r7, #6]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d202      	bcs.n	8000db6 <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 8000db0:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <LCD5110_UpdateArea+0x70>)
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <LCD5110_UpdateArea+0x74>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	793a      	ldrb	r2, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d902      	bls.n	8000dc6 <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <LCD5110_UpdateArea+0x74>)
 8000dc2:	793b      	ldrb	r3, [r7, #4]
 8000dc4:	7013      	strb	r3, [r2, #0]
	}
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc90      	pop	{r4, r7}
 8000dce:	4770      	bx	lr
 8000dd0:	2000009a 	.word	0x2000009a
 8000dd4:	2000009b 	.word	0x2000009b
 8000dd8:	2000009c 	.word	0x2000009c
 8000ddc:	2000009d 	.word	0x2000009d

08000de0 <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	460a      	mov	r2, r1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	4613      	mov	r3, r2
 8000dee:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 8000df0:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <LCD5110_GotoXY+0x28>)
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <LCD5110_GotoXY+0x2c>)
 8000df8:	79bb      	ldrb	r3, [r7, #6]
 8000dfa:	7013      	strb	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200000ec 	.word	0x200000ec
 8000e0c:	200000ed 	.word	0x200000ed

08000e10 <LCD5110_Putc>:

void LCD5110_Putc(char c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	71bb      	strb	r3, [r7, #6]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == LCD5110_FontSize_3x5) {
 8000e22:	797b      	ldrb	r3, [r7, #5]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d104      	bne.n	8000e32 <LCD5110_Putc+0x22>
		c_width = LCD5110_CHAR3x5_WIDTH;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR3x5_HEIGHT;
 8000e2c:	2306      	movs	r3, #6
 8000e2e:	73fb      	strb	r3, [r7, #15]
 8000e30:	e003      	b.n	8000e3a <LCD5110_Putc+0x2a>
	} else {
		c_width = LCD5110_CHAR5x7_WIDTH;
 8000e32:	2306      	movs	r3, #6
 8000e34:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR5x7_HEIGHT;
 8000e36:	2308      	movs	r3, #8
 8000e38:	73fb      	strb	r3, [r7, #15]
	}
	if ((LCD5110_x + c_width) > LCD5110_WIDTH) {
 8000e3a:	4b46      	ldr	r3, [pc, #280]	; (8000f54 <LCD5110_Putc+0x144>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	7bbb      	ldrb	r3, [r7, #14]
 8000e42:	4413      	add	r3, r2
 8000e44:	2b54      	cmp	r3, #84	; 0x54
 8000e46:	dd09      	ble.n	8000e5c <LCD5110_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		LCD5110_y += c_height;
 8000e48:	4b43      	ldr	r3, [pc, #268]	; (8000f58 <LCD5110_Putc+0x148>)
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	4413      	add	r3, r2
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4b41      	ldr	r3, [pc, #260]	; (8000f58 <LCD5110_Putc+0x148>)
 8000e54:	701a      	strb	r2, [r3, #0]
		LCD5110_x = 0;
 8000e56:	4b3f      	ldr	r3, [pc, #252]	; (8000f54 <LCD5110_Putc+0x144>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	737b      	strb	r3, [r7, #13]
 8000e60:	e068      	b.n	8000f34 <LCD5110_Putc+0x124>
		if (c < 32) {
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2b1f      	cmp	r3, #31
 8000e66:	d91c      	bls.n	8000ea2 <LCD5110_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == LCD5110_FontSize_3x5) {
 8000e68:	797b      	ldrb	r3, [r7, #5]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d10c      	bne.n	8000e88 <LCD5110_Putc+0x78>
			b = LCD5110_Font3x5[c - 32][i];
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f1a3 0220 	sub.w	r2, r3, #32
 8000e74:	7b79      	ldrb	r1, [r7, #13]
 8000e76:	4839      	ldr	r0, [pc, #228]	; (8000f5c <LCD5110_Putc+0x14c>)
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4403      	add	r3, r0
 8000e80:	440b      	add	r3, r1
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	733b      	strb	r3, [r7, #12]
 8000e86:	e00c      	b.n	8000ea2 <LCD5110_Putc+0x92>
		} else {
			b = LCD5110_Font5x7[c - 32][i];
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f1a3 0220 	sub.w	r2, r3, #32
 8000e8e:	7b79      	ldrb	r1, [r7, #13]
 8000e90:	4833      	ldr	r0, [pc, #204]	; (8000f60 <LCD5110_Putc+0x150>)
 8000e92:	4613      	mov	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	4403      	add	r3, r0
 8000e9c:	440b      	add	r3, r1
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8000ea2:	7b3b      	ldrb	r3, [r7, #12]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d105      	bne.n	8000eb4 <LCD5110_Putc+0xa4>
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d002      	beq.n	8000eb4 <LCD5110_Putc+0xa4>
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b20      	cmp	r3, #32
 8000eb2:	d13b      	bne.n	8000f2c <LCD5110_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	72fb      	strb	r3, [r7, #11]
 8000eb8:	e02d      	b.n	8000f16 <LCD5110_Putc+0x106>
			if (color == LCD5110_Pixel_Set) {
 8000eba:	79bb      	ldrb	r3, [r7, #6]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d112      	bne.n	8000ee6 <LCD5110_Putc+0xd6>
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Set : LCD5110_Pixel_Clear);
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <LCD5110_Putc+0x144>)
 8000ec2:	7818      	ldrb	r0, [r3, #0]
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <LCD5110_Putc+0x148>)
 8000ec6:	781a      	ldrb	r2, [r3, #0]
 8000ec8:	7afb      	ldrb	r3, [r7, #11]
 8000eca:	4413      	add	r3, r2
 8000ecc:	b2d9      	uxtb	r1, r3
 8000ece:	7b3a      	ldrb	r2, [r7, #12]
 8000ed0:	7afb      	ldrb	r3, [r7, #11]
 8000ed2:	fa42 f303 	asr.w	r3, r2, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	461a      	mov	r2, r3
 8000ee0:	f7ff fe50 	bl	8000b84 <LCD5110_DrawPixel>
 8000ee4:	e014      	b.n	8000f10 <LCD5110_Putc+0x100>
			} else {
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Clear : LCD5110_Pixel_Set);
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <LCD5110_Putc+0x144>)
 8000ee8:	7818      	ldrb	r0, [r3, #0]
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <LCD5110_Putc+0x148>)
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	7afb      	ldrb	r3, [r7, #11]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	b2d9      	uxtb	r1, r3
 8000ef4:	7b3a      	ldrb	r2, [r7, #12]
 8000ef6:	7afb      	ldrb	r3, [r7, #11]
 8000ef8:	fa42 f303 	asr.w	r3, r2, r3
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	bf0c      	ite	eq
 8000f04:	2301      	moveq	r3, #1
 8000f06:	2300      	movne	r3, #0
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f7ff fe3a 	bl	8000b84 <LCD5110_DrawPixel>
		for (j = 0; j < c_height; j++) {
 8000f10:	7afb      	ldrb	r3, [r7, #11]
 8000f12:	3301      	adds	r3, #1
 8000f14:	72fb      	strb	r3, [r7, #11]
 8000f16:	7afa      	ldrb	r2, [r7, #11]
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d3cd      	bcc.n	8000eba <LCD5110_Putc+0xaa>
			}
		}
		LCD5110_x++;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <LCD5110_Putc+0x144>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <LCD5110_Putc+0x144>)
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	e000      	b.n	8000f2e <LCD5110_Putc+0x11e>
			continue;
 8000f2c:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 8000f2e:	7b7b      	ldrb	r3, [r7, #13]
 8000f30:	3301      	adds	r3, #1
 8000f32:	737b      	strb	r3, [r7, #13]
 8000f34:	7b7a      	ldrb	r2, [r7, #13]
 8000f36:	7bbb      	ldrb	r3, [r7, #14]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	db91      	blt.n	8000e62 <LCD5110_Putc+0x52>
	}
	LCD5110_x++;
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <LCD5110_Putc+0x144>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <LCD5110_Putc+0x144>)
 8000f48:	701a      	strb	r2, [r3, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200000ec 	.word	0x200000ec
 8000f58:	200000ed 	.word	0x200000ed
 8000f5c:	08002a28 	.word	0x08002a28
 8000f60:	080027e0 	.word	0x080027e0

08000f64 <LCD5110_Puts>:

void LCD5110_Puts(char *c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	70fb      	strb	r3, [r7, #3]
 8000f70:	4613      	mov	r3, r2
 8000f72:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 8000f74:	e008      	b.n	8000f88 <LCD5110_Puts+0x24>
		LCD5110_Putc(*c++, color, size);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	78ba      	ldrb	r2, [r7, #2]
 8000f80:	78f9      	ldrb	r1, [r7, #3]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff44 	bl	8000e10 <LCD5110_Putc>
	while (*c) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f2      	bne.n	8000f76 <LCD5110_Puts+0x12>
	}
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t*pGPIOx, uint8_t EnorDi)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d162      	bne.n	8001074 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a64      	ldr	r2, [pc, #400]	; (8001144 <GPIO_PeriClockControl+0x1a8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d106      	bne.n	8000fc4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000fb6:	4b64      	ldr	r3, [pc, #400]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a63      	ldr	r2, [pc, #396]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000fc2:	e0b9      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a61      	ldr	r2, [pc, #388]	; (800114c <GPIO_PeriClockControl+0x1b0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d106      	bne.n	8000fda <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000fcc:	4b5e      	ldr	r3, [pc, #376]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a5d      	ldr	r2, [pc, #372]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fd8:	e0ae      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a5c      	ldr	r2, [pc, #368]	; (8001150 <GPIO_PeriClockControl+0x1b4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d106      	bne.n	8000ff0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000fe2:	4b59      	ldr	r3, [pc, #356]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a58      	ldr	r2, [pc, #352]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fee:	e0a3      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a58      	ldr	r2, [pc, #352]	; (8001154 <GPIO_PeriClockControl+0x1b8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d106      	bne.n	8001006 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000ff8:	4b53      	ldr	r3, [pc, #332]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	4a52      	ldr	r2, [pc, #328]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001004:	e098      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a53      	ldr	r2, [pc, #332]	; (8001158 <GPIO_PeriClockControl+0x1bc>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d106      	bne.n	800101c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800100e:	4b4e      	ldr	r3, [pc, #312]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a4d      	ldr	r2, [pc, #308]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8001014:	f043 0310 	orr.w	r3, r3, #16
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
}
 800101a:	e08d      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4f      	ldr	r2, [pc, #316]	; (800115c <GPIO_PeriClockControl+0x1c0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d106      	bne.n	8001032 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8001024:	4b48      	ldr	r3, [pc, #288]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a47      	ldr	r2, [pc, #284]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 800102a:	f043 0320 	orr.w	r3, r3, #32
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001030:	e082      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4a      	ldr	r2, [pc, #296]	; (8001160 <GPIO_PeriClockControl+0x1c4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d106      	bne.n	8001048 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800103a:	4b43      	ldr	r3, [pc, #268]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a42      	ldr	r2, [pc, #264]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8001040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001046:	e077      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a46      	ldr	r2, [pc, #280]	; (8001164 <GPIO_PeriClockControl+0x1c8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d106      	bne.n	800105e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8001050:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	4a3c      	ldr	r2, [pc, #240]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8001056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800105c:	e06c      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a41      	ldr	r2, [pc, #260]	; (8001168 <GPIO_PeriClockControl+0x1cc>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d168      	bne.n	8001138 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8001066:	4b38      	ldr	r3, [pc, #224]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a37      	ldr	r2, [pc, #220]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 800106c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001072:	e061      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a33      	ldr	r2, [pc, #204]	; (8001144 <GPIO_PeriClockControl+0x1a8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d106      	bne.n	800108a <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 800107c:	4b32      	ldr	r3, [pc, #200]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	4a31      	ldr	r2, [pc, #196]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8001082:	f023 0301 	bic.w	r3, r3, #1
 8001086:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001088:	e056      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a2f      	ldr	r2, [pc, #188]	; (800114c <GPIO_PeriClockControl+0x1b0>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d106      	bne.n	80010a0 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8001092:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a2c      	ldr	r2, [pc, #176]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8001098:	f023 0302 	bic.w	r3, r3, #2
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800109e:	e04b      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a2b      	ldr	r2, [pc, #172]	; (8001150 <GPIO_PeriClockControl+0x1b4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d106      	bne.n	80010b6 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	4a26      	ldr	r2, [pc, #152]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 80010ae:	f023 0304 	bic.w	r3, r3, #4
 80010b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010b4:	e040      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a26      	ldr	r2, [pc, #152]	; (8001154 <GPIO_PeriClockControl+0x1b8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d106      	bne.n	80010cc <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 80010c4:	f023 0308 	bic.w	r3, r3, #8
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010ca:	e035      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a22      	ldr	r2, [pc, #136]	; (8001158 <GPIO_PeriClockControl+0x1bc>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d106      	bne.n	80010e2 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 80010da:	f023 0310 	bic.w	r3, r3, #16
 80010de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010e0:	e02a      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a1d      	ldr	r2, [pc, #116]	; (800115c <GPIO_PeriClockControl+0x1c0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d106      	bne.n	80010f8 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a16      	ldr	r2, [pc, #88]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 80010f0:	f023 0320 	bic.w	r3, r3, #32
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010f6:	e01f      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a19      	ldr	r2, [pc, #100]	; (8001160 <GPIO_PeriClockControl+0x1c4>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d106      	bne.n	800110e <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4a10      	ldr	r2, [pc, #64]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8001106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800110a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800110c:	e014      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a14      	ldr	r2, [pc, #80]	; (8001164 <GPIO_PeriClockControl+0x1c8>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d106      	bne.n	8001124 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 800111c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001122:	e009      	b.n	8001138 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a10      	ldr	r2, [pc, #64]	; (8001168 <GPIO_PeriClockControl+0x1cc>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d105      	bne.n	8001138 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4a05      	ldr	r2, [pc, #20]	; (8001148 <GPIO_PeriClockControl+0x1ac>)
 8001132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001136:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40020000 	.word	0x40020000
 8001148:	40023800 	.word	0x40023800
 800114c:	40020400 	.word	0x40020400
 8001150:	40020800 	.word	0x40020800
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40021000 	.word	0x40021000
 800115c:	40021400 	.word	0x40021400
 8001160:	40021800 	.word	0x40021800
 8001164:	40021c00 	.word	0x40021c00
 8001168:	40022000 	.word	0x40022000

0800116c <GPIO_Init>:
//		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
//	}
//}

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2101      	movs	r1, #1
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff0c 	bl	8000f9c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	795b      	ldrb	r3, [r3, #5]
 8001188:	2b03      	cmp	r3, #3
 800118a:	d820      	bhi.n	80011ce <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	795b      	ldrb	r3, [r3, #5]
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	791b      	ldrb	r3, [r3, #4]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	791b      	ldrb	r3, [r3, #4]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2103      	movs	r1, #3
 80011ac:	fa01 f303 	lsl.w	r3, r1, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	4619      	mov	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	400a      	ands	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6819      	ldr	r1, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e0c1      	b.n	8001352 <GPIO_Init+0x1e6>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	795b      	ldrb	r3, [r3, #5]
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d117      	bne.n	8001206 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011d6:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <GPIO_Init+0x188>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	7912      	ldrb	r2, [r2, #4]
 80011de:	4611      	mov	r1, r2
 80011e0:	2201      	movs	r2, #1
 80011e2:	408a      	lsls	r2, r1
 80011e4:	4611      	mov	r1, r2
 80011e6:	4a43      	ldr	r2, [pc, #268]	; (80012f4 <GPIO_Init+0x188>)
 80011e8:	430b      	orrs	r3, r1
 80011ea:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011ec:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <GPIO_Init+0x188>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	7912      	ldrb	r2, [r2, #4]
 80011f4:	4611      	mov	r1, r2
 80011f6:	2201      	movs	r2, #1
 80011f8:	408a      	lsls	r2, r1
 80011fa:	43d2      	mvns	r2, r2
 80011fc:	4611      	mov	r1, r2
 80011fe:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <GPIO_Init+0x188>)
 8001200:	400b      	ands	r3, r1
 8001202:	6093      	str	r3, [r2, #8]
 8001204:	e035      	b.n	8001272 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	795b      	ldrb	r3, [r3, #5]
 800120a:	2b05      	cmp	r3, #5
 800120c:	d117      	bne.n	800123e <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800120e:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <GPIO_Init+0x188>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	7912      	ldrb	r2, [r2, #4]
 8001216:	4611      	mov	r1, r2
 8001218:	2201      	movs	r2, #1
 800121a:	408a      	lsls	r2, r1
 800121c:	4611      	mov	r1, r2
 800121e:	4a35      	ldr	r2, [pc, #212]	; (80012f4 <GPIO_Init+0x188>)
 8001220:	430b      	orrs	r3, r1
 8001222:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001224:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <GPIO_Init+0x188>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	7912      	ldrb	r2, [r2, #4]
 800122c:	4611      	mov	r1, r2
 800122e:	2201      	movs	r2, #1
 8001230:	408a      	lsls	r2, r1
 8001232:	43d2      	mvns	r2, r2
 8001234:	4611      	mov	r1, r2
 8001236:	4a2f      	ldr	r2, [pc, #188]	; (80012f4 <GPIO_Init+0x188>)
 8001238:	400b      	ands	r3, r1
 800123a:	60d3      	str	r3, [r2, #12]
 800123c:	e019      	b.n	8001272 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	795b      	ldrb	r3, [r3, #5]
 8001242:	2b06      	cmp	r3, #6
 8001244:	d115      	bne.n	8001272 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <GPIO_Init+0x188>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	7912      	ldrb	r2, [r2, #4]
 800124e:	4611      	mov	r1, r2
 8001250:	2201      	movs	r2, #1
 8001252:	408a      	lsls	r2, r1
 8001254:	4611      	mov	r1, r2
 8001256:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <GPIO_Init+0x188>)
 8001258:	430b      	orrs	r3, r1
 800125a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <GPIO_Init+0x188>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	7912      	ldrb	r2, [r2, #4]
 8001264:	4611      	mov	r1, r2
 8001266:	2201      	movs	r2, #1
 8001268:	408a      	lsls	r2, r1
 800126a:	4611      	mov	r1, r2
 800126c:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <GPIO_Init+0x188>)
 800126e:	430b      	orrs	r3, r1
 8001270:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	791b      	ldrb	r3, [r3, #4]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	791b      	ldrb	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <GPIO_Init+0x18c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d044      	beq.n	8001318 <GPIO_Init+0x1ac>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a1a      	ldr	r2, [pc, #104]	; (80012fc <GPIO_Init+0x190>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d02b      	beq.n	80012f0 <GPIO_Init+0x184>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a18      	ldr	r2, [pc, #96]	; (8001300 <GPIO_Init+0x194>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d024      	beq.n	80012ec <GPIO_Init+0x180>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <GPIO_Init+0x198>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d01d      	beq.n	80012e8 <GPIO_Init+0x17c>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a15      	ldr	r2, [pc, #84]	; (8001308 <GPIO_Init+0x19c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d016      	beq.n	80012e4 <GPIO_Init+0x178>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a14      	ldr	r2, [pc, #80]	; (800130c <GPIO_Init+0x1a0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d00f      	beq.n	80012e0 <GPIO_Init+0x174>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a12      	ldr	r2, [pc, #72]	; (8001310 <GPIO_Init+0x1a4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d008      	beq.n	80012dc <GPIO_Init+0x170>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a11      	ldr	r2, [pc, #68]	; (8001314 <GPIO_Init+0x1a8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d101      	bne.n	80012d8 <GPIO_Init+0x16c>
 80012d4:	2307      	movs	r3, #7
 80012d6:	e020      	b.n	800131a <GPIO_Init+0x1ae>
 80012d8:	2300      	movs	r3, #0
 80012da:	e01e      	b.n	800131a <GPIO_Init+0x1ae>
 80012dc:	2306      	movs	r3, #6
 80012de:	e01c      	b.n	800131a <GPIO_Init+0x1ae>
 80012e0:	2305      	movs	r3, #5
 80012e2:	e01a      	b.n	800131a <GPIO_Init+0x1ae>
 80012e4:	2304      	movs	r3, #4
 80012e6:	e018      	b.n	800131a <GPIO_Init+0x1ae>
 80012e8:	2303      	movs	r3, #3
 80012ea:	e016      	b.n	800131a <GPIO_Init+0x1ae>
 80012ec:	2302      	movs	r3, #2
 80012ee:	e014      	b.n	800131a <GPIO_Init+0x1ae>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e012      	b.n	800131a <GPIO_Init+0x1ae>
 80012f4:	40013c00 	.word	0x40013c00
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40020400 	.word	0x40020400
 8001300:	40020800 	.word	0x40020800
 8001304:	40020c00 	.word	0x40020c00
 8001308:	40021000 	.word	0x40021000
 800130c:	40021400 	.word	0x40021400
 8001310:	40021800 	.word	0x40021800
 8001314:	40021c00 	.word	0x40021c00
 8001318:	2300      	movs	r3, #0
 800131a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800131c:	4b59      	ldr	r3, [pc, #356]	; (8001484 <GPIO_Init+0x318>)
 800131e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001320:	4a58      	ldr	r2, [pc, #352]	; (8001484 <GPIO_Init+0x318>)
 8001322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001326:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8001328:	7c7a      	ldrb	r2, [r7, #17]
 800132a:	7cbb      	ldrb	r3, [r7, #18]
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	fa02 f103 	lsl.w	r1, r2, r3
 8001332:	4a55      	ldr	r2, [pc, #340]	; (8001488 <GPIO_Init+0x31c>)
 8001334:	7cfb      	ldrb	r3, [r7, #19]
 8001336:	3302      	adds	r3, #2
 8001338:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800133c:	4b53      	ldr	r3, [pc, #332]	; (800148c <GPIO_Init+0x320>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	7912      	ldrb	r2, [r2, #4]
 8001344:	4611      	mov	r1, r2
 8001346:	2201      	movs	r2, #1
 8001348:	408a      	lsls	r2, r1
 800134a:	4611      	mov	r1, r2
 800134c:	4a4f      	ldr	r2, [pc, #316]	; (800148c <GPIO_Init+0x320>)
 800134e:	430b      	orrs	r3, r1
 8001350:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	799b      	ldrb	r3, [r3, #6]
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	791b      	ldrb	r3, [r3, #4]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	791b      	ldrb	r3, [r3, #4]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2103      	movs	r1, #3
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	400a      	ands	r2, r1
 8001380:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6899      	ldr	r1, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	430a      	orrs	r2, r1
 8001390:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	79db      	ldrb	r3, [r3, #7]
 8001396:	461a      	mov	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68da      	ldr	r2, [r3, #12]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	791b      	ldrb	r3, [r3, #4]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	2103      	movs	r1, #3
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	4619      	mov	r1, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	400a      	ands	r2, r1
 80013c0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68d9      	ldr	r1, [r3, #12]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinoType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7a1b      	ldrb	r3, [r3, #8]
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	791b      	ldrb	r3, [r3, #4]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	791b      	ldrb	r3, [r3, #4]
 80013ec:	4619      	mov	r1, r3
 80013ee:	2301      	movs	r3, #1
 80013f0:	408b      	lsls	r3, r1
 80013f2:	43db      	mvns	r3, r3
 80013f4:	4619      	mov	r1, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	400a      	ands	r2, r1
 80013fc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6859      	ldr	r1, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	430a      	orrs	r2, r1
 800140c:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	795b      	ldrb	r3, [r3, #5]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d131      	bne.n	800147a <GPIO_Init+0x30e>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	791b      	ldrb	r3, [r3, #4]
 800141a:	08db      	lsrs	r3, r3, #3
 800141c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	791b      	ldrb	r3, [r3, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	7c3a      	ldrb	r2, [r7, #16]
 800142e:	3208      	adds	r2, #8
 8001430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	220f      	movs	r2, #15
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	4618      	mov	r0, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	7c3a      	ldrb	r2, [r7, #16]
 8001448:	4001      	ands	r1, r0
 800144a:	3208      	adds	r2, #8
 800144c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	7c3a      	ldrb	r2, [r7, #16]
 8001456:	3208      	adds	r2, #8
 8001458:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7a5b      	ldrb	r3, [r3, #9]
 8001460:	461a      	mov	r2, r3
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	7c3a      	ldrb	r2, [r7, #16]
 8001472:	4301      	orrs	r1, r0
 8001474:	3208      	adds	r2, #8
 8001476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	40013800 	.word	0x40013800
 800148c:	40013c00 	.word	0x40013c00

08001490 <GPIO_ReadFromInputPin>:

/*
 * Data read & write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (pGPIOx->IDR >> PinNumber) & 0x00000001;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	fa22 f303 	lsr.w	r3, r2, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	73fb      	strb	r3, [r7, #15]
	return value;
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <GPIO_WriteToOutputPin>:
	uint16_t value;
	value = (uint8_t)pGPIOx->IDR;
	return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	70fb      	strb	r3, [r7, #3]
 80014c6:	4613      	mov	r3, r2
 80014c8:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 80014ca:	78bb      	ldrb	r3, [r7, #2]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d109      	bne.n	80014e4 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx -> ODR |= (1 << PinNumber);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	78fa      	ldrb	r2, [r7, #3]
 80014d6:	2101      	movs	r1, #1
 80014d8:	fa01 f202 	lsl.w	r2, r1, r2
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	615a      	str	r2, [r3, #20]
	} else
	{
		//write 0
		pGPIOx -> ODR &= ~(1 << PinNumber);
	}
}
 80014e2:	e009      	b.n	80014f8 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx -> ODR &= ~(1 << PinNumber);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	78fa      	ldrb	r2, [r7, #3]
 80014ea:	2101      	movs	r1, #1
 80014ec:	fa01 f202 	lsl.w	r2, r1, r2
 80014f0:	43d2      	mvns	r2, r2
 80014f2:	401a      	ands	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	615a      	str	r2, [r3, #20]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
	...

08001504 <GPIO_IRQInterruptConfig>:
}
/*
 * IRQ Configuration & ISR handling
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	460a      	mov	r2, r1
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	4613      	mov	r3, r2
 8001512:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d133      	bne.n	8001582 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <=31)
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2b1f      	cmp	r3, #31
 800151e:	d80a      	bhi.n	8001536 <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8001520:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <GPIO_IRQInterruptConfig+0xf0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	79fa      	ldrb	r2, [r7, #7]
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	4611      	mov	r1, r2
 800152e:	4a31      	ldr	r2, [pc, #196]	; (80015f4 <GPIO_IRQInterruptConfig+0xf0>)
 8001530:	430b      	orrs	r3, r1
 8001532:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
		}
	}

}
 8001534:	e059      	b.n	80015ea <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber >31 && IRQNumber < 64)
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b1f      	cmp	r3, #31
 800153a:	d90f      	bls.n	800155c <GPIO_IRQInterruptConfig+0x58>
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2b3f      	cmp	r3, #63	; 0x3f
 8001540:	d80c      	bhi.n	800155c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER0 |= ( 1 << IRQNumber %32 );
 8001542:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <GPIO_IRQInterruptConfig+0xf0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	79fa      	ldrb	r2, [r7, #7]
 8001548:	f002 021f 	and.w	r2, r2, #31
 800154c:	2101      	movs	r1, #1
 800154e:	fa01 f202 	lsl.w	r2, r1, r2
 8001552:	4611      	mov	r1, r2
 8001554:	4a27      	ldr	r2, [pc, #156]	; (80015f4 <GPIO_IRQInterruptConfig+0xf0>)
 8001556:	430b      	orrs	r3, r1
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e046      	b.n	80015ea <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >=64 && IRQNumber < 96)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2b3f      	cmp	r3, #63	; 0x3f
 8001560:	d943      	bls.n	80015ea <GPIO_IRQInterruptConfig+0xe6>
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b5f      	cmp	r3, #95	; 0x5f
 8001566:	d840      	bhi.n	80015ea <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER0 |= ( 1 << IRQNumber % 64 );
 8001568:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <GPIO_IRQInterruptConfig+0xf0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	79fa      	ldrb	r2, [r7, #7]
 800156e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001572:	2101      	movs	r1, #1
 8001574:	fa01 f202 	lsl.w	r2, r1, r2
 8001578:	4611      	mov	r1, r2
 800157a:	4a1e      	ldr	r2, [pc, #120]	; (80015f4 <GPIO_IRQInterruptConfig+0xf0>)
 800157c:	430b      	orrs	r3, r1
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	e033      	b.n	80015ea <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <=31)
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b1f      	cmp	r3, #31
 8001586:	d80a      	bhi.n	800159e <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <GPIO_IRQInterruptConfig+0xf4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	79fa      	ldrb	r2, [r7, #7]
 800158e:	2101      	movs	r1, #1
 8001590:	fa01 f202 	lsl.w	r2, r1, r2
 8001594:	4611      	mov	r1, r2
 8001596:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <GPIO_IRQInterruptConfig+0xf4>)
 8001598:	430b      	orrs	r3, r1
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	e025      	b.n	80015ea <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber >31 && IRQNumber < 64)
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b1f      	cmp	r3, #31
 80015a2:	d90f      	bls.n	80015c4 <GPIO_IRQInterruptConfig+0xc0>
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2b3f      	cmp	r3, #63	; 0x3f
 80015a8:	d80c      	bhi.n	80015c4 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << IRQNumber % 32 );
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <GPIO_IRQInterruptConfig+0xf8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	79fa      	ldrb	r2, [r7, #7]
 80015b0:	f002 021f 	and.w	r2, r2, #31
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ba:	4611      	mov	r1, r2
 80015bc:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <GPIO_IRQInterruptConfig+0xf8>)
 80015be:	430b      	orrs	r3, r1
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e012      	b.n	80015ea <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >=64 && IRQNumber < 96)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2b3f      	cmp	r3, #63	; 0x3f
 80015c8:	d90f      	bls.n	80015ea <GPIO_IRQInterruptConfig+0xe6>
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b5f      	cmp	r3, #95	; 0x5f
 80015ce:	d80c      	bhi.n	80015ea <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <GPIO_IRQInterruptConfig+0xfc>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	79fa      	ldrb	r2, [r7, #7]
 80015d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80015da:	2101      	movs	r1, #1
 80015dc:	fa01 f202 	lsl.w	r2, r1, r2
 80015e0:	4611      	mov	r1, r2
 80015e2:	4a07      	ldr	r2, [pc, #28]	; (8001600 <GPIO_IRQInterruptConfig+0xfc>)
 80015e4:	430b      	orrs	r3, r1
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	e7ff      	b.n	80015ea <GPIO_IRQInterruptConfig+0xe6>
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000e180 	.word	0xe000e180
 80015fc:	e000e184 	.word	0xe000e184
 8001600:	e000e188 	.word	0xe000e188

08001604 <GPIO_IRQPriorityConfig>:
void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
	//1. First find out the ipr register
	uint8_t iprx = IRQNumber /4;
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber %4;
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * iprx_section) + (8- NO_PR_BITS_IMPLEMENTED);
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	3304      	adds	r3, #4
 8001626:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount );
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001630:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	7b7b      	ldrb	r3, [r7, #13]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	409a      	lsls	r2, r3
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001644:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]

}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
	...

08001658 <GPIO_IRQHandling>:


void GPIO_IRQHandling(uint8_t PinNumber) //interrupt happen, do the action in here
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if(EXTI ->PR & (1<< PinNumber))
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <GPIO_IRQHandling+0x3c>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	79fa      	ldrb	r2, [r7, #7]
 8001668:	2101      	movs	r1, #1
 800166a:	fa01 f202 	lsl.w	r2, r1, r2
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d009      	beq.n	8001688 <GPIO_IRQHandling+0x30>
	{
	//clear
		EXTI -> PR |= (1<< PinNumber);
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <GPIO_IRQHandling+0x3c>)
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	79fa      	ldrb	r2, [r7, #7]
 800167a:	2101      	movs	r1, #1
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	4611      	mov	r1, r2
 8001682:	4a04      	ldr	r2, [pc, #16]	; (8001694 <GPIO_IRQHandling+0x3c>)
 8001684:	430b      	orrs	r3, r1
 8001686:	6153      	str	r3, [r2, #20]
	}

}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40013c00 	.word	0x40013c00

08001698 <SPI_PeriClockControl>:
static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_RegDef_t*pSPIx, uint8_t EnorDi)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d120      	bne.n	80016ec <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a22      	ldr	r2, [pc, #136]	; (8001738 <SPI_PeriClockControl+0xa0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d106      	bne.n	80016c0 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <SPI_PeriClockControl+0xa4>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a21      	ldr	r2, [pc, #132]	; (800173c <SPI_PeriClockControl+0xa4>)
 80016b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI3_PCLK_DI();
		}
	}

}
 80016be:	e035      	b.n	800172c <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a1f      	ldr	r2, [pc, #124]	; (8001740 <SPI_PeriClockControl+0xa8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d106      	bne.n	80016d6 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <SPI_PeriClockControl+0xa4>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	4a1b      	ldr	r2, [pc, #108]	; (800173c <SPI_PeriClockControl+0xa4>)
 80016ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80016d4:	e02a      	b.n	800172c <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a1a      	ldr	r2, [pc, #104]	; (8001744 <SPI_PeriClockControl+0xac>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d126      	bne.n	800172c <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <SPI_PeriClockControl+0xa4>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a16      	ldr	r2, [pc, #88]	; (800173c <SPI_PeriClockControl+0xa4>)
 80016e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80016ea:	e01f      	b.n	800172c <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <SPI_PeriClockControl+0xa0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d106      	bne.n	8001702 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <SPI_PeriClockControl+0xa4>)
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	4a10      	ldr	r2, [pc, #64]	; (800173c <SPI_PeriClockControl+0xa4>)
 80016fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016fe:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001700:	e014      	b.n	800172c <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <SPI_PeriClockControl+0xa8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d106      	bne.n	8001718 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <SPI_PeriClockControl+0xa4>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <SPI_PeriClockControl+0xa4>)
 8001710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001716:	e009      	b.n	800172c <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <SPI_PeriClockControl+0xac>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d105      	bne.n	800172c <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <SPI_PeriClockControl+0xa4>)
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	4a05      	ldr	r2, [pc, #20]	; (800173c <SPI_PeriClockControl+0xa4>)
 8001726:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800172a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40013000 	.word	0x40013000
 800173c:	40023800 	.word	0x40023800
 8001740:	40003800 	.word	0x40003800
 8001744:	40003c00 	.word	0x40003c00

08001748 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d106      	bne.n	8001768 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f043 0204 	orr.w	r2, r3, #4
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8001766:	e005      	b.n	8001774 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f023 0204 	bic.w	r2, r3, #4
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	605a      	str	r2, [r3, #4]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <SPI_Init>:
/************************
 *
 */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2101      	movs	r1, #1
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff83 	bl	8001698 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	791b      	ldrb	r3, [r3, #4]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	461a      	mov	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	795b      	ldrb	r3, [r3, #5]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d104      	bne.n	80017b6 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e014      	b.n	80017e0 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	795b      	ldrb	r3, [r3, #5]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d104      	bne.n	80017c8 <SPI_Init+0x4a>
	{
		//BIDI mode should be set
		tempreg |= ~(1<<SPI_CR1_BIDIMODE);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	e00b      	b.n	80017e0 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	795b      	ldrb	r3, [r3, #5]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d107      	bne.n	80017e0 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017d6:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1<<SPI_CR1_RXONLY);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017de:	60fb      	str	r3, [r7, #12]
	}
	//3. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	799b      	ldrb	r3, [r3, #6]
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	79db      	ldrb	r3, [r3, #7]
 80017f2:	02db      	lsls	r3, r3, #11
 80017f4:	461a      	mov	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7a1b      	ldrb	r3, [r3, #8]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4313      	orrs	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7a5b      	ldrb	r3, [r3, #9]
 800180e:	461a      	mov	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7a9b      	ldrb	r3, [r3, #10]
 800181a:	025b      	lsls	r3, r3, #9
 800181c:	461a      	mov	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4313      	orrs	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	601a      	str	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <SPI_Transfer>:
		}

}

uint8_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
	pSPIx->DR = data;
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60da      	str	r2, [r3, #12]
	while( ( (pSPIx->SR & 0x0003) == 0) || (pSPIx->SR & 0x0080) );
 8001846:	bf00      	nop
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f9      	beq.n	8001848 <SPI_Transfer+0x14>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f3      	bne.n	8001848 <SPI_Transfer+0x14>
	//while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );

	//printf("%x \n", pSPIx->DR);
	return pSPIx->DR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	b2db      	uxtb	r3, r3
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <SPI_PeripheralControl>:
/**************************
 *
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d106      	bne.n	8001890 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
	} else
	{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 800188e:	e005      	b.n	800189c <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	601a      	str	r2, [r3, #0]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
	...

080018a8 <__errno>:
 80018a8:	4b01      	ldr	r3, [pc, #4]	; (80018b0 <__errno+0x8>)
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000014 	.word	0x20000014

080018b4 <__libc_init_array>:
 80018b4:	b570      	push	{r4, r5, r6, lr}
 80018b6:	4d0d      	ldr	r5, [pc, #52]	; (80018ec <__libc_init_array+0x38>)
 80018b8:	4c0d      	ldr	r4, [pc, #52]	; (80018f0 <__libc_init_array+0x3c>)
 80018ba:	1b64      	subs	r4, r4, r5
 80018bc:	10a4      	asrs	r4, r4, #2
 80018be:	2600      	movs	r6, #0
 80018c0:	42a6      	cmp	r6, r4
 80018c2:	d109      	bne.n	80018d8 <__libc_init_array+0x24>
 80018c4:	4d0b      	ldr	r5, [pc, #44]	; (80018f4 <__libc_init_array+0x40>)
 80018c6:	4c0c      	ldr	r4, [pc, #48]	; (80018f8 <__libc_init_array+0x44>)
 80018c8:	f000 ff72 	bl	80027b0 <_init>
 80018cc:	1b64      	subs	r4, r4, r5
 80018ce:	10a4      	asrs	r4, r4, #2
 80018d0:	2600      	movs	r6, #0
 80018d2:	42a6      	cmp	r6, r4
 80018d4:	d105      	bne.n	80018e2 <__libc_init_array+0x2e>
 80018d6:	bd70      	pop	{r4, r5, r6, pc}
 80018d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80018dc:	4798      	blx	r3
 80018de:	3601      	adds	r6, #1
 80018e0:	e7ee      	b.n	80018c0 <__libc_init_array+0xc>
 80018e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e6:	4798      	blx	r3
 80018e8:	3601      	adds	r6, #1
 80018ea:	e7f2      	b.n	80018d2 <__libc_init_array+0x1e>
 80018ec:	08002c00 	.word	0x08002c00
 80018f0:	08002c00 	.word	0x08002c00
 80018f4:	08002c00 	.word	0x08002c00
 80018f8:	08002c04 	.word	0x08002c04

080018fc <memset>:
 80018fc:	4402      	add	r2, r0
 80018fe:	4603      	mov	r3, r0
 8001900:	4293      	cmp	r3, r2
 8001902:	d100      	bne.n	8001906 <memset+0xa>
 8001904:	4770      	bx	lr
 8001906:	f803 1b01 	strb.w	r1, [r3], #1
 800190a:	e7f9      	b.n	8001900 <memset+0x4>

0800190c <iprintf>:
 800190c:	b40f      	push	{r0, r1, r2, r3}
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <iprintf+0x2c>)
 8001910:	b513      	push	{r0, r1, r4, lr}
 8001912:	681c      	ldr	r4, [r3, #0]
 8001914:	b124      	cbz	r4, 8001920 <iprintf+0x14>
 8001916:	69a3      	ldr	r3, [r4, #24]
 8001918:	b913      	cbnz	r3, 8001920 <iprintf+0x14>
 800191a:	4620      	mov	r0, r4
 800191c:	f000 f866 	bl	80019ec <__sinit>
 8001920:	ab05      	add	r3, sp, #20
 8001922:	9a04      	ldr	r2, [sp, #16]
 8001924:	68a1      	ldr	r1, [r4, #8]
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	4620      	mov	r0, r4
 800192a:	f000 f981 	bl	8001c30 <_vfiprintf_r>
 800192e:	b002      	add	sp, #8
 8001930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001934:	b004      	add	sp, #16
 8001936:	4770      	bx	lr
 8001938:	20000014 	.word	0x20000014

0800193c <std>:
 800193c:	2300      	movs	r3, #0
 800193e:	b510      	push	{r4, lr}
 8001940:	4604      	mov	r4, r0
 8001942:	e9c0 3300 	strd	r3, r3, [r0]
 8001946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800194a:	6083      	str	r3, [r0, #8]
 800194c:	8181      	strh	r1, [r0, #12]
 800194e:	6643      	str	r3, [r0, #100]	; 0x64
 8001950:	81c2      	strh	r2, [r0, #14]
 8001952:	6183      	str	r3, [r0, #24]
 8001954:	4619      	mov	r1, r3
 8001956:	2208      	movs	r2, #8
 8001958:	305c      	adds	r0, #92	; 0x5c
 800195a:	f7ff ffcf 	bl	80018fc <memset>
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <std+0x38>)
 8001960:	6263      	str	r3, [r4, #36]	; 0x24
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <std+0x3c>)
 8001964:	62a3      	str	r3, [r4, #40]	; 0x28
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <std+0x40>)
 8001968:	62e3      	str	r3, [r4, #44]	; 0x2c
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <std+0x44>)
 800196c:	6224      	str	r4, [r4, #32]
 800196e:	6323      	str	r3, [r4, #48]	; 0x30
 8001970:	bd10      	pop	{r4, pc}
 8001972:	bf00      	nop
 8001974:	080021d9 	.word	0x080021d9
 8001978:	080021fb 	.word	0x080021fb
 800197c:	08002233 	.word	0x08002233
 8001980:	08002257 	.word	0x08002257

08001984 <_cleanup_r>:
 8001984:	4901      	ldr	r1, [pc, #4]	; (800198c <_cleanup_r+0x8>)
 8001986:	f000 b8af 	b.w	8001ae8 <_fwalk_reent>
 800198a:	bf00      	nop
 800198c:	08002531 	.word	0x08002531

08001990 <__sfmoreglue>:
 8001990:	b570      	push	{r4, r5, r6, lr}
 8001992:	1e4a      	subs	r2, r1, #1
 8001994:	2568      	movs	r5, #104	; 0x68
 8001996:	4355      	muls	r5, r2
 8001998:	460e      	mov	r6, r1
 800199a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800199e:	f000 f8c5 	bl	8001b2c <_malloc_r>
 80019a2:	4604      	mov	r4, r0
 80019a4:	b140      	cbz	r0, 80019b8 <__sfmoreglue+0x28>
 80019a6:	2100      	movs	r1, #0
 80019a8:	e9c0 1600 	strd	r1, r6, [r0]
 80019ac:	300c      	adds	r0, #12
 80019ae:	60a0      	str	r0, [r4, #8]
 80019b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80019b4:	f7ff ffa2 	bl	80018fc <memset>
 80019b8:	4620      	mov	r0, r4
 80019ba:	bd70      	pop	{r4, r5, r6, pc}

080019bc <__sfp_lock_acquire>:
 80019bc:	4801      	ldr	r0, [pc, #4]	; (80019c4 <__sfp_lock_acquire+0x8>)
 80019be:	f000 b8b3 	b.w	8001b28 <__retarget_lock_acquire_recursive>
 80019c2:	bf00      	nop
 80019c4:	200002f0 	.word	0x200002f0

080019c8 <__sfp_lock_release>:
 80019c8:	4801      	ldr	r0, [pc, #4]	; (80019d0 <__sfp_lock_release+0x8>)
 80019ca:	f000 b8ae 	b.w	8001b2a <__retarget_lock_release_recursive>
 80019ce:	bf00      	nop
 80019d0:	200002f0 	.word	0x200002f0

080019d4 <__sinit_lock_acquire>:
 80019d4:	4801      	ldr	r0, [pc, #4]	; (80019dc <__sinit_lock_acquire+0x8>)
 80019d6:	f000 b8a7 	b.w	8001b28 <__retarget_lock_acquire_recursive>
 80019da:	bf00      	nop
 80019dc:	200002eb 	.word	0x200002eb

080019e0 <__sinit_lock_release>:
 80019e0:	4801      	ldr	r0, [pc, #4]	; (80019e8 <__sinit_lock_release+0x8>)
 80019e2:	f000 b8a2 	b.w	8001b2a <__retarget_lock_release_recursive>
 80019e6:	bf00      	nop
 80019e8:	200002eb 	.word	0x200002eb

080019ec <__sinit>:
 80019ec:	b510      	push	{r4, lr}
 80019ee:	4604      	mov	r4, r0
 80019f0:	f7ff fff0 	bl	80019d4 <__sinit_lock_acquire>
 80019f4:	69a3      	ldr	r3, [r4, #24]
 80019f6:	b11b      	cbz	r3, 8001a00 <__sinit+0x14>
 80019f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019fc:	f7ff bff0 	b.w	80019e0 <__sinit_lock_release>
 8001a00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001a04:	6523      	str	r3, [r4, #80]	; 0x50
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <__sinit+0x68>)
 8001a08:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <__sinit+0x6c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8001a0e:	42a3      	cmp	r3, r4
 8001a10:	bf04      	itt	eq
 8001a12:	2301      	moveq	r3, #1
 8001a14:	61a3      	streq	r3, [r4, #24]
 8001a16:	4620      	mov	r0, r4
 8001a18:	f000 f820 	bl	8001a5c <__sfp>
 8001a1c:	6060      	str	r0, [r4, #4]
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f000 f81c 	bl	8001a5c <__sfp>
 8001a24:	60a0      	str	r0, [r4, #8]
 8001a26:	4620      	mov	r0, r4
 8001a28:	f000 f818 	bl	8001a5c <__sfp>
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60e0      	str	r0, [r4, #12]
 8001a30:	2104      	movs	r1, #4
 8001a32:	6860      	ldr	r0, [r4, #4]
 8001a34:	f7ff ff82 	bl	800193c <std>
 8001a38:	68a0      	ldr	r0, [r4, #8]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2109      	movs	r1, #9
 8001a3e:	f7ff ff7d 	bl	800193c <std>
 8001a42:	68e0      	ldr	r0, [r4, #12]
 8001a44:	2202      	movs	r2, #2
 8001a46:	2112      	movs	r1, #18
 8001a48:	f7ff ff78 	bl	800193c <std>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	61a3      	str	r3, [r4, #24]
 8001a50:	e7d2      	b.n	80019f8 <__sinit+0xc>
 8001a52:	bf00      	nop
 8001a54:	08002b68 	.word	0x08002b68
 8001a58:	08001985 	.word	0x08001985

08001a5c <__sfp>:
 8001a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a5e:	4607      	mov	r7, r0
 8001a60:	f7ff ffac 	bl	80019bc <__sfp_lock_acquire>
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <__sfp+0x84>)
 8001a66:	681e      	ldr	r6, [r3, #0]
 8001a68:	69b3      	ldr	r3, [r6, #24]
 8001a6a:	b913      	cbnz	r3, 8001a72 <__sfp+0x16>
 8001a6c:	4630      	mov	r0, r6
 8001a6e:	f7ff ffbd 	bl	80019ec <__sinit>
 8001a72:	3648      	adds	r6, #72	; 0x48
 8001a74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	d503      	bpl.n	8001a84 <__sfp+0x28>
 8001a7c:	6833      	ldr	r3, [r6, #0]
 8001a7e:	b30b      	cbz	r3, 8001ac4 <__sfp+0x68>
 8001a80:	6836      	ldr	r6, [r6, #0]
 8001a82:	e7f7      	b.n	8001a74 <__sfp+0x18>
 8001a84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a88:	b9d5      	cbnz	r5, 8001ac0 <__sfp+0x64>
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <__sfp+0x88>)
 8001a8c:	60e3      	str	r3, [r4, #12]
 8001a8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001a92:	6665      	str	r5, [r4, #100]	; 0x64
 8001a94:	f000 f847 	bl	8001b26 <__retarget_lock_init_recursive>
 8001a98:	f7ff ff96 	bl	80019c8 <__sfp_lock_release>
 8001a9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001aa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001aa4:	6025      	str	r5, [r4, #0]
 8001aa6:	61a5      	str	r5, [r4, #24]
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	4629      	mov	r1, r5
 8001aac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ab0:	f7ff ff24 	bl	80018fc <memset>
 8001ab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001ab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001abc:	4620      	mov	r0, r4
 8001abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ac0:	3468      	adds	r4, #104	; 0x68
 8001ac2:	e7d9      	b.n	8001a78 <__sfp+0x1c>
 8001ac4:	2104      	movs	r1, #4
 8001ac6:	4638      	mov	r0, r7
 8001ac8:	f7ff ff62 	bl	8001990 <__sfmoreglue>
 8001acc:	4604      	mov	r4, r0
 8001ace:	6030      	str	r0, [r6, #0]
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	d1d5      	bne.n	8001a80 <__sfp+0x24>
 8001ad4:	f7ff ff78 	bl	80019c8 <__sfp_lock_release>
 8001ad8:	230c      	movs	r3, #12
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	e7ee      	b.n	8001abc <__sfp+0x60>
 8001ade:	bf00      	nop
 8001ae0:	08002b68 	.word	0x08002b68
 8001ae4:	ffff0001 	.word	0xffff0001

08001ae8 <_fwalk_reent>:
 8001ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001aec:	4606      	mov	r6, r0
 8001aee:	4688      	mov	r8, r1
 8001af0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001af4:	2700      	movs	r7, #0
 8001af6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001afa:	f1b9 0901 	subs.w	r9, r9, #1
 8001afe:	d505      	bpl.n	8001b0c <_fwalk_reent+0x24>
 8001b00:	6824      	ldr	r4, [r4, #0]
 8001b02:	2c00      	cmp	r4, #0
 8001b04:	d1f7      	bne.n	8001af6 <_fwalk_reent+0xe>
 8001b06:	4638      	mov	r0, r7
 8001b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b0c:	89ab      	ldrh	r3, [r5, #12]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d907      	bls.n	8001b22 <_fwalk_reent+0x3a>
 8001b12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b16:	3301      	adds	r3, #1
 8001b18:	d003      	beq.n	8001b22 <_fwalk_reent+0x3a>
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	4630      	mov	r0, r6
 8001b1e:	47c0      	blx	r8
 8001b20:	4307      	orrs	r7, r0
 8001b22:	3568      	adds	r5, #104	; 0x68
 8001b24:	e7e9      	b.n	8001afa <_fwalk_reent+0x12>

08001b26 <__retarget_lock_init_recursive>:
 8001b26:	4770      	bx	lr

08001b28 <__retarget_lock_acquire_recursive>:
 8001b28:	4770      	bx	lr

08001b2a <__retarget_lock_release_recursive>:
 8001b2a:	4770      	bx	lr

08001b2c <_malloc_r>:
 8001b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2e:	1ccd      	adds	r5, r1, #3
 8001b30:	f025 0503 	bic.w	r5, r5, #3
 8001b34:	3508      	adds	r5, #8
 8001b36:	2d0c      	cmp	r5, #12
 8001b38:	bf38      	it	cc
 8001b3a:	250c      	movcc	r5, #12
 8001b3c:	2d00      	cmp	r5, #0
 8001b3e:	4606      	mov	r6, r0
 8001b40:	db01      	blt.n	8001b46 <_malloc_r+0x1a>
 8001b42:	42a9      	cmp	r1, r5
 8001b44:	d903      	bls.n	8001b4e <_malloc_r+0x22>
 8001b46:	230c      	movs	r3, #12
 8001b48:	6033      	str	r3, [r6, #0]
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b4e:	f000 fda1 	bl	8002694 <__malloc_lock>
 8001b52:	4921      	ldr	r1, [pc, #132]	; (8001bd8 <_malloc_r+0xac>)
 8001b54:	680a      	ldr	r2, [r1, #0]
 8001b56:	4614      	mov	r4, r2
 8001b58:	b99c      	cbnz	r4, 8001b82 <_malloc_r+0x56>
 8001b5a:	4f20      	ldr	r7, [pc, #128]	; (8001bdc <_malloc_r+0xb0>)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b923      	cbnz	r3, 8001b6a <_malloc_r+0x3e>
 8001b60:	4621      	mov	r1, r4
 8001b62:	4630      	mov	r0, r6
 8001b64:	f000 fb28 	bl	80021b8 <_sbrk_r>
 8001b68:	6038      	str	r0, [r7, #0]
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	4630      	mov	r0, r6
 8001b6e:	f000 fb23 	bl	80021b8 <_sbrk_r>
 8001b72:	1c43      	adds	r3, r0, #1
 8001b74:	d123      	bne.n	8001bbe <_malloc_r+0x92>
 8001b76:	230c      	movs	r3, #12
 8001b78:	6033      	str	r3, [r6, #0]
 8001b7a:	4630      	mov	r0, r6
 8001b7c:	f000 fd90 	bl	80026a0 <__malloc_unlock>
 8001b80:	e7e3      	b.n	8001b4a <_malloc_r+0x1e>
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	1b5b      	subs	r3, r3, r5
 8001b86:	d417      	bmi.n	8001bb8 <_malloc_r+0x8c>
 8001b88:	2b0b      	cmp	r3, #11
 8001b8a:	d903      	bls.n	8001b94 <_malloc_r+0x68>
 8001b8c:	6023      	str	r3, [r4, #0]
 8001b8e:	441c      	add	r4, r3
 8001b90:	6025      	str	r5, [r4, #0]
 8001b92:	e004      	b.n	8001b9e <_malloc_r+0x72>
 8001b94:	6863      	ldr	r3, [r4, #4]
 8001b96:	42a2      	cmp	r2, r4
 8001b98:	bf0c      	ite	eq
 8001b9a:	600b      	streq	r3, [r1, #0]
 8001b9c:	6053      	strne	r3, [r2, #4]
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	f000 fd7e 	bl	80026a0 <__malloc_unlock>
 8001ba4:	f104 000b 	add.w	r0, r4, #11
 8001ba8:	1d23      	adds	r3, r4, #4
 8001baa:	f020 0007 	bic.w	r0, r0, #7
 8001bae:	1ac2      	subs	r2, r0, r3
 8001bb0:	d0cc      	beq.n	8001b4c <_malloc_r+0x20>
 8001bb2:	1a1b      	subs	r3, r3, r0
 8001bb4:	50a3      	str	r3, [r4, r2]
 8001bb6:	e7c9      	b.n	8001b4c <_malloc_r+0x20>
 8001bb8:	4622      	mov	r2, r4
 8001bba:	6864      	ldr	r4, [r4, #4]
 8001bbc:	e7cc      	b.n	8001b58 <_malloc_r+0x2c>
 8001bbe:	1cc4      	adds	r4, r0, #3
 8001bc0:	f024 0403 	bic.w	r4, r4, #3
 8001bc4:	42a0      	cmp	r0, r4
 8001bc6:	d0e3      	beq.n	8001b90 <_malloc_r+0x64>
 8001bc8:	1a21      	subs	r1, r4, r0
 8001bca:	4630      	mov	r0, r6
 8001bcc:	f000 faf4 	bl	80021b8 <_sbrk_r>
 8001bd0:	3001      	adds	r0, #1
 8001bd2:	d1dd      	bne.n	8001b90 <_malloc_r+0x64>
 8001bd4:	e7cf      	b.n	8001b76 <_malloc_r+0x4a>
 8001bd6:	bf00      	nop
 8001bd8:	200000a0 	.word	0x200000a0
 8001bdc:	200000a4 	.word	0x200000a4

08001be0 <__sfputc_r>:
 8001be0:	6893      	ldr	r3, [r2, #8]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	b410      	push	{r4}
 8001be8:	6093      	str	r3, [r2, #8]
 8001bea:	da07      	bge.n	8001bfc <__sfputc_r+0x1c>
 8001bec:	6994      	ldr	r4, [r2, #24]
 8001bee:	42a3      	cmp	r3, r4
 8001bf0:	db01      	blt.n	8001bf6 <__sfputc_r+0x16>
 8001bf2:	290a      	cmp	r1, #10
 8001bf4:	d102      	bne.n	8001bfc <__sfputc_r+0x1c>
 8001bf6:	bc10      	pop	{r4}
 8001bf8:	f000 bb32 	b.w	8002260 <__swbuf_r>
 8001bfc:	6813      	ldr	r3, [r2, #0]
 8001bfe:	1c58      	adds	r0, r3, #1
 8001c00:	6010      	str	r0, [r2, #0]
 8001c02:	7019      	strb	r1, [r3, #0]
 8001c04:	4608      	mov	r0, r1
 8001c06:	bc10      	pop	{r4}
 8001c08:	4770      	bx	lr

08001c0a <__sfputs_r>:
 8001c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c0c:	4606      	mov	r6, r0
 8001c0e:	460f      	mov	r7, r1
 8001c10:	4614      	mov	r4, r2
 8001c12:	18d5      	adds	r5, r2, r3
 8001c14:	42ac      	cmp	r4, r5
 8001c16:	d101      	bne.n	8001c1c <__sfputs_r+0x12>
 8001c18:	2000      	movs	r0, #0
 8001c1a:	e007      	b.n	8001c2c <__sfputs_r+0x22>
 8001c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c20:	463a      	mov	r2, r7
 8001c22:	4630      	mov	r0, r6
 8001c24:	f7ff ffdc 	bl	8001be0 <__sfputc_r>
 8001c28:	1c43      	adds	r3, r0, #1
 8001c2a:	d1f3      	bne.n	8001c14 <__sfputs_r+0xa>
 8001c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c30 <_vfiprintf_r>:
 8001c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c34:	460d      	mov	r5, r1
 8001c36:	b09d      	sub	sp, #116	; 0x74
 8001c38:	4614      	mov	r4, r2
 8001c3a:	4698      	mov	r8, r3
 8001c3c:	4606      	mov	r6, r0
 8001c3e:	b118      	cbz	r0, 8001c48 <_vfiprintf_r+0x18>
 8001c40:	6983      	ldr	r3, [r0, #24]
 8001c42:	b90b      	cbnz	r3, 8001c48 <_vfiprintf_r+0x18>
 8001c44:	f7ff fed2 	bl	80019ec <__sinit>
 8001c48:	4b89      	ldr	r3, [pc, #548]	; (8001e70 <_vfiprintf_r+0x240>)
 8001c4a:	429d      	cmp	r5, r3
 8001c4c:	d11b      	bne.n	8001c86 <_vfiprintf_r+0x56>
 8001c4e:	6875      	ldr	r5, [r6, #4]
 8001c50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c52:	07d9      	lsls	r1, r3, #31
 8001c54:	d405      	bmi.n	8001c62 <_vfiprintf_r+0x32>
 8001c56:	89ab      	ldrh	r3, [r5, #12]
 8001c58:	059a      	lsls	r2, r3, #22
 8001c5a:	d402      	bmi.n	8001c62 <_vfiprintf_r+0x32>
 8001c5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c5e:	f7ff ff63 	bl	8001b28 <__retarget_lock_acquire_recursive>
 8001c62:	89ab      	ldrh	r3, [r5, #12]
 8001c64:	071b      	lsls	r3, r3, #28
 8001c66:	d501      	bpl.n	8001c6c <_vfiprintf_r+0x3c>
 8001c68:	692b      	ldr	r3, [r5, #16]
 8001c6a:	b9eb      	cbnz	r3, 8001ca8 <_vfiprintf_r+0x78>
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	4630      	mov	r0, r6
 8001c70:	f000 fb5a 	bl	8002328 <__swsetup_r>
 8001c74:	b1c0      	cbz	r0, 8001ca8 <_vfiprintf_r+0x78>
 8001c76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c78:	07dc      	lsls	r4, r3, #31
 8001c7a:	d50e      	bpl.n	8001c9a <_vfiprintf_r+0x6a>
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	b01d      	add	sp, #116	; 0x74
 8001c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c86:	4b7b      	ldr	r3, [pc, #492]	; (8001e74 <_vfiprintf_r+0x244>)
 8001c88:	429d      	cmp	r5, r3
 8001c8a:	d101      	bne.n	8001c90 <_vfiprintf_r+0x60>
 8001c8c:	68b5      	ldr	r5, [r6, #8]
 8001c8e:	e7df      	b.n	8001c50 <_vfiprintf_r+0x20>
 8001c90:	4b79      	ldr	r3, [pc, #484]	; (8001e78 <_vfiprintf_r+0x248>)
 8001c92:	429d      	cmp	r5, r3
 8001c94:	bf08      	it	eq
 8001c96:	68f5      	ldreq	r5, [r6, #12]
 8001c98:	e7da      	b.n	8001c50 <_vfiprintf_r+0x20>
 8001c9a:	89ab      	ldrh	r3, [r5, #12]
 8001c9c:	0598      	lsls	r0, r3, #22
 8001c9e:	d4ed      	bmi.n	8001c7c <_vfiprintf_r+0x4c>
 8001ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ca2:	f7ff ff42 	bl	8001b2a <__retarget_lock_release_recursive>
 8001ca6:	e7e9      	b.n	8001c7c <_vfiprintf_r+0x4c>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9309      	str	r3, [sp, #36]	; 0x24
 8001cac:	2320      	movs	r3, #32
 8001cae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001cb6:	2330      	movs	r3, #48	; 0x30
 8001cb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001e7c <_vfiprintf_r+0x24c>
 8001cbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cc0:	f04f 0901 	mov.w	r9, #1
 8001cc4:	4623      	mov	r3, r4
 8001cc6:	469a      	mov	sl, r3
 8001cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ccc:	b10a      	cbz	r2, 8001cd2 <_vfiprintf_r+0xa2>
 8001cce:	2a25      	cmp	r2, #37	; 0x25
 8001cd0:	d1f9      	bne.n	8001cc6 <_vfiprintf_r+0x96>
 8001cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8001cd6:	d00b      	beq.n	8001cf0 <_vfiprintf_r+0xc0>
 8001cd8:	465b      	mov	r3, fp
 8001cda:	4622      	mov	r2, r4
 8001cdc:	4629      	mov	r1, r5
 8001cde:	4630      	mov	r0, r6
 8001ce0:	f7ff ff93 	bl	8001c0a <__sfputs_r>
 8001ce4:	3001      	adds	r0, #1
 8001ce6:	f000 80aa 	beq.w	8001e3e <_vfiprintf_r+0x20e>
 8001cea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001cec:	445a      	add	r2, fp
 8001cee:	9209      	str	r2, [sp, #36]	; 0x24
 8001cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80a2 	beq.w	8001e3e <_vfiprintf_r+0x20e>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d04:	f10a 0a01 	add.w	sl, sl, #1
 8001d08:	9304      	str	r3, [sp, #16]
 8001d0a:	9307      	str	r3, [sp, #28]
 8001d0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d10:	931a      	str	r3, [sp, #104]	; 0x68
 8001d12:	4654      	mov	r4, sl
 8001d14:	2205      	movs	r2, #5
 8001d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d1a:	4858      	ldr	r0, [pc, #352]	; (8001e7c <_vfiprintf_r+0x24c>)
 8001d1c:	f7fe fa68 	bl	80001f0 <memchr>
 8001d20:	9a04      	ldr	r2, [sp, #16]
 8001d22:	b9d8      	cbnz	r0, 8001d5c <_vfiprintf_r+0x12c>
 8001d24:	06d1      	lsls	r1, r2, #27
 8001d26:	bf44      	itt	mi
 8001d28:	2320      	movmi	r3, #32
 8001d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d2e:	0713      	lsls	r3, r2, #28
 8001d30:	bf44      	itt	mi
 8001d32:	232b      	movmi	r3, #43	; 0x2b
 8001d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d38:	f89a 3000 	ldrb.w	r3, [sl]
 8001d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8001d3e:	d015      	beq.n	8001d6c <_vfiprintf_r+0x13c>
 8001d40:	9a07      	ldr	r2, [sp, #28]
 8001d42:	4654      	mov	r4, sl
 8001d44:	2000      	movs	r0, #0
 8001d46:	f04f 0c0a 	mov.w	ip, #10
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d50:	3b30      	subs	r3, #48	; 0x30
 8001d52:	2b09      	cmp	r3, #9
 8001d54:	d94e      	bls.n	8001df4 <_vfiprintf_r+0x1c4>
 8001d56:	b1b0      	cbz	r0, 8001d86 <_vfiprintf_r+0x156>
 8001d58:	9207      	str	r2, [sp, #28]
 8001d5a:	e014      	b.n	8001d86 <_vfiprintf_r+0x156>
 8001d5c:	eba0 0308 	sub.w	r3, r0, r8
 8001d60:	fa09 f303 	lsl.w	r3, r9, r3
 8001d64:	4313      	orrs	r3, r2
 8001d66:	9304      	str	r3, [sp, #16]
 8001d68:	46a2      	mov	sl, r4
 8001d6a:	e7d2      	b.n	8001d12 <_vfiprintf_r+0xe2>
 8001d6c:	9b03      	ldr	r3, [sp, #12]
 8001d6e:	1d19      	adds	r1, r3, #4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	9103      	str	r1, [sp, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bfbb      	ittet	lt
 8001d78:	425b      	neglt	r3, r3
 8001d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8001d7e:	9307      	strge	r3, [sp, #28]
 8001d80:	9307      	strlt	r3, [sp, #28]
 8001d82:	bfb8      	it	lt
 8001d84:	9204      	strlt	r2, [sp, #16]
 8001d86:	7823      	ldrb	r3, [r4, #0]
 8001d88:	2b2e      	cmp	r3, #46	; 0x2e
 8001d8a:	d10c      	bne.n	8001da6 <_vfiprintf_r+0x176>
 8001d8c:	7863      	ldrb	r3, [r4, #1]
 8001d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8001d90:	d135      	bne.n	8001dfe <_vfiprintf_r+0x1ce>
 8001d92:	9b03      	ldr	r3, [sp, #12]
 8001d94:	1d1a      	adds	r2, r3, #4
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	9203      	str	r2, [sp, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	bfb8      	it	lt
 8001d9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001da2:	3402      	adds	r4, #2
 8001da4:	9305      	str	r3, [sp, #20]
 8001da6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001e8c <_vfiprintf_r+0x25c>
 8001daa:	7821      	ldrb	r1, [r4, #0]
 8001dac:	2203      	movs	r2, #3
 8001dae:	4650      	mov	r0, sl
 8001db0:	f7fe fa1e 	bl	80001f0 <memchr>
 8001db4:	b140      	cbz	r0, 8001dc8 <_vfiprintf_r+0x198>
 8001db6:	2340      	movs	r3, #64	; 0x40
 8001db8:	eba0 000a 	sub.w	r0, r0, sl
 8001dbc:	fa03 f000 	lsl.w	r0, r3, r0
 8001dc0:	9b04      	ldr	r3, [sp, #16]
 8001dc2:	4303      	orrs	r3, r0
 8001dc4:	3401      	adds	r4, #1
 8001dc6:	9304      	str	r3, [sp, #16]
 8001dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dcc:	482c      	ldr	r0, [pc, #176]	; (8001e80 <_vfiprintf_r+0x250>)
 8001dce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001dd2:	2206      	movs	r2, #6
 8001dd4:	f7fe fa0c 	bl	80001f0 <memchr>
 8001dd8:	2800      	cmp	r0, #0
 8001dda:	d03f      	beq.n	8001e5c <_vfiprintf_r+0x22c>
 8001ddc:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <_vfiprintf_r+0x254>)
 8001dde:	bb1b      	cbnz	r3, 8001e28 <_vfiprintf_r+0x1f8>
 8001de0:	9b03      	ldr	r3, [sp, #12]
 8001de2:	3307      	adds	r3, #7
 8001de4:	f023 0307 	bic.w	r3, r3, #7
 8001de8:	3308      	adds	r3, #8
 8001dea:	9303      	str	r3, [sp, #12]
 8001dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001dee:	443b      	add	r3, r7
 8001df0:	9309      	str	r3, [sp, #36]	; 0x24
 8001df2:	e767      	b.n	8001cc4 <_vfiprintf_r+0x94>
 8001df4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001df8:	460c      	mov	r4, r1
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	e7a5      	b.n	8001d4a <_vfiprintf_r+0x11a>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	3401      	adds	r4, #1
 8001e02:	9305      	str	r3, [sp, #20]
 8001e04:	4619      	mov	r1, r3
 8001e06:	f04f 0c0a 	mov.w	ip, #10
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e10:	3a30      	subs	r2, #48	; 0x30
 8001e12:	2a09      	cmp	r2, #9
 8001e14:	d903      	bls.n	8001e1e <_vfiprintf_r+0x1ee>
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0c5      	beq.n	8001da6 <_vfiprintf_r+0x176>
 8001e1a:	9105      	str	r1, [sp, #20]
 8001e1c:	e7c3      	b.n	8001da6 <_vfiprintf_r+0x176>
 8001e1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e22:	4604      	mov	r4, r0
 8001e24:	2301      	movs	r3, #1
 8001e26:	e7f0      	b.n	8001e0a <_vfiprintf_r+0x1da>
 8001e28:	ab03      	add	r3, sp, #12
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	462a      	mov	r2, r5
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <_vfiprintf_r+0x258>)
 8001e30:	a904      	add	r1, sp, #16
 8001e32:	4630      	mov	r0, r6
 8001e34:	f3af 8000 	nop.w
 8001e38:	4607      	mov	r7, r0
 8001e3a:	1c78      	adds	r0, r7, #1
 8001e3c:	d1d6      	bne.n	8001dec <_vfiprintf_r+0x1bc>
 8001e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e40:	07d9      	lsls	r1, r3, #31
 8001e42:	d405      	bmi.n	8001e50 <_vfiprintf_r+0x220>
 8001e44:	89ab      	ldrh	r3, [r5, #12]
 8001e46:	059a      	lsls	r2, r3, #22
 8001e48:	d402      	bmi.n	8001e50 <_vfiprintf_r+0x220>
 8001e4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e4c:	f7ff fe6d 	bl	8001b2a <__retarget_lock_release_recursive>
 8001e50:	89ab      	ldrh	r3, [r5, #12]
 8001e52:	065b      	lsls	r3, r3, #25
 8001e54:	f53f af12 	bmi.w	8001c7c <_vfiprintf_r+0x4c>
 8001e58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e5a:	e711      	b.n	8001c80 <_vfiprintf_r+0x50>
 8001e5c:	ab03      	add	r3, sp, #12
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	462a      	mov	r2, r5
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <_vfiprintf_r+0x258>)
 8001e64:	a904      	add	r1, sp, #16
 8001e66:	4630      	mov	r0, r6
 8001e68:	f000 f880 	bl	8001f6c <_printf_i>
 8001e6c:	e7e4      	b.n	8001e38 <_vfiprintf_r+0x208>
 8001e6e:	bf00      	nop
 8001e70:	08002b8c 	.word	0x08002b8c
 8001e74:	08002bac 	.word	0x08002bac
 8001e78:	08002b6c 	.word	0x08002b6c
 8001e7c:	08002bcc 	.word	0x08002bcc
 8001e80:	08002bd6 	.word	0x08002bd6
 8001e84:	00000000 	.word	0x00000000
 8001e88:	08001c0b 	.word	0x08001c0b
 8001e8c:	08002bd2 	.word	0x08002bd2

08001e90 <_printf_common>:
 8001e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e94:	4616      	mov	r6, r2
 8001e96:	4699      	mov	r9, r3
 8001e98:	688a      	ldr	r2, [r1, #8]
 8001e9a:	690b      	ldr	r3, [r1, #16]
 8001e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	bfb8      	it	lt
 8001ea4:	4613      	movlt	r3, r2
 8001ea6:	6033      	str	r3, [r6, #0]
 8001ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001eac:	4607      	mov	r7, r0
 8001eae:	460c      	mov	r4, r1
 8001eb0:	b10a      	cbz	r2, 8001eb6 <_printf_common+0x26>
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	6033      	str	r3, [r6, #0]
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	0699      	lsls	r1, r3, #26
 8001eba:	bf42      	ittt	mi
 8001ebc:	6833      	ldrmi	r3, [r6, #0]
 8001ebe:	3302      	addmi	r3, #2
 8001ec0:	6033      	strmi	r3, [r6, #0]
 8001ec2:	6825      	ldr	r5, [r4, #0]
 8001ec4:	f015 0506 	ands.w	r5, r5, #6
 8001ec8:	d106      	bne.n	8001ed8 <_printf_common+0x48>
 8001eca:	f104 0a19 	add.w	sl, r4, #25
 8001ece:	68e3      	ldr	r3, [r4, #12]
 8001ed0:	6832      	ldr	r2, [r6, #0]
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	42ab      	cmp	r3, r5
 8001ed6:	dc26      	bgt.n	8001f26 <_printf_common+0x96>
 8001ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001edc:	1e13      	subs	r3, r2, #0
 8001ede:	6822      	ldr	r2, [r4, #0]
 8001ee0:	bf18      	it	ne
 8001ee2:	2301      	movne	r3, #1
 8001ee4:	0692      	lsls	r2, r2, #26
 8001ee6:	d42b      	bmi.n	8001f40 <_printf_common+0xb0>
 8001ee8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001eec:	4649      	mov	r1, r9
 8001eee:	4638      	mov	r0, r7
 8001ef0:	47c0      	blx	r8
 8001ef2:	3001      	adds	r0, #1
 8001ef4:	d01e      	beq.n	8001f34 <_printf_common+0xa4>
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	68e5      	ldr	r5, [r4, #12]
 8001efa:	6832      	ldr	r2, [r6, #0]
 8001efc:	f003 0306 	and.w	r3, r3, #6
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	bf08      	it	eq
 8001f04:	1aad      	subeq	r5, r5, r2
 8001f06:	68a3      	ldr	r3, [r4, #8]
 8001f08:	6922      	ldr	r2, [r4, #16]
 8001f0a:	bf0c      	ite	eq
 8001f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f10:	2500      	movne	r5, #0
 8001f12:	4293      	cmp	r3, r2
 8001f14:	bfc4      	itt	gt
 8001f16:	1a9b      	subgt	r3, r3, r2
 8001f18:	18ed      	addgt	r5, r5, r3
 8001f1a:	2600      	movs	r6, #0
 8001f1c:	341a      	adds	r4, #26
 8001f1e:	42b5      	cmp	r5, r6
 8001f20:	d11a      	bne.n	8001f58 <_printf_common+0xc8>
 8001f22:	2000      	movs	r0, #0
 8001f24:	e008      	b.n	8001f38 <_printf_common+0xa8>
 8001f26:	2301      	movs	r3, #1
 8001f28:	4652      	mov	r2, sl
 8001f2a:	4649      	mov	r1, r9
 8001f2c:	4638      	mov	r0, r7
 8001f2e:	47c0      	blx	r8
 8001f30:	3001      	adds	r0, #1
 8001f32:	d103      	bne.n	8001f3c <_printf_common+0xac>
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f3c:	3501      	adds	r5, #1
 8001f3e:	e7c6      	b.n	8001ece <_printf_common+0x3e>
 8001f40:	18e1      	adds	r1, r4, r3
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	2030      	movs	r0, #48	; 0x30
 8001f46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f4a:	4422      	add	r2, r4
 8001f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f54:	3302      	adds	r3, #2
 8001f56:	e7c7      	b.n	8001ee8 <_printf_common+0x58>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	4622      	mov	r2, r4
 8001f5c:	4649      	mov	r1, r9
 8001f5e:	4638      	mov	r0, r7
 8001f60:	47c0      	blx	r8
 8001f62:	3001      	adds	r0, #1
 8001f64:	d0e6      	beq.n	8001f34 <_printf_common+0xa4>
 8001f66:	3601      	adds	r6, #1
 8001f68:	e7d9      	b.n	8001f1e <_printf_common+0x8e>
	...

08001f6c <_printf_i>:
 8001f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f70:	460c      	mov	r4, r1
 8001f72:	4691      	mov	r9, r2
 8001f74:	7e27      	ldrb	r7, [r4, #24]
 8001f76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001f78:	2f78      	cmp	r7, #120	; 0x78
 8001f7a:	4680      	mov	r8, r0
 8001f7c:	469a      	mov	sl, r3
 8001f7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f82:	d807      	bhi.n	8001f94 <_printf_i+0x28>
 8001f84:	2f62      	cmp	r7, #98	; 0x62
 8001f86:	d80a      	bhi.n	8001f9e <_printf_i+0x32>
 8001f88:	2f00      	cmp	r7, #0
 8001f8a:	f000 80d8 	beq.w	800213e <_printf_i+0x1d2>
 8001f8e:	2f58      	cmp	r7, #88	; 0x58
 8001f90:	f000 80a3 	beq.w	80020da <_printf_i+0x16e>
 8001f94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f9c:	e03a      	b.n	8002014 <_printf_i+0xa8>
 8001f9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001fa2:	2b15      	cmp	r3, #21
 8001fa4:	d8f6      	bhi.n	8001f94 <_printf_i+0x28>
 8001fa6:	a001      	add	r0, pc, #4	; (adr r0, 8001fac <_printf_i+0x40>)
 8001fa8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001fac:	08002005 	.word	0x08002005
 8001fb0:	08002019 	.word	0x08002019
 8001fb4:	08001f95 	.word	0x08001f95
 8001fb8:	08001f95 	.word	0x08001f95
 8001fbc:	08001f95 	.word	0x08001f95
 8001fc0:	08001f95 	.word	0x08001f95
 8001fc4:	08002019 	.word	0x08002019
 8001fc8:	08001f95 	.word	0x08001f95
 8001fcc:	08001f95 	.word	0x08001f95
 8001fd0:	08001f95 	.word	0x08001f95
 8001fd4:	08001f95 	.word	0x08001f95
 8001fd8:	08002125 	.word	0x08002125
 8001fdc:	08002049 	.word	0x08002049
 8001fe0:	08002107 	.word	0x08002107
 8001fe4:	08001f95 	.word	0x08001f95
 8001fe8:	08001f95 	.word	0x08001f95
 8001fec:	08002147 	.word	0x08002147
 8001ff0:	08001f95 	.word	0x08001f95
 8001ff4:	08002049 	.word	0x08002049
 8001ff8:	08001f95 	.word	0x08001f95
 8001ffc:	08001f95 	.word	0x08001f95
 8002000:	0800210f 	.word	0x0800210f
 8002004:	680b      	ldr	r3, [r1, #0]
 8002006:	1d1a      	adds	r2, r3, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	600a      	str	r2, [r1, #0]
 800200c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002014:	2301      	movs	r3, #1
 8002016:	e0a3      	b.n	8002160 <_printf_i+0x1f4>
 8002018:	6825      	ldr	r5, [r4, #0]
 800201a:	6808      	ldr	r0, [r1, #0]
 800201c:	062e      	lsls	r6, r5, #24
 800201e:	f100 0304 	add.w	r3, r0, #4
 8002022:	d50a      	bpl.n	800203a <_printf_i+0xce>
 8002024:	6805      	ldr	r5, [r0, #0]
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	2d00      	cmp	r5, #0
 800202a:	da03      	bge.n	8002034 <_printf_i+0xc8>
 800202c:	232d      	movs	r3, #45	; 0x2d
 800202e:	426d      	negs	r5, r5
 8002030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002034:	485e      	ldr	r0, [pc, #376]	; (80021b0 <_printf_i+0x244>)
 8002036:	230a      	movs	r3, #10
 8002038:	e019      	b.n	800206e <_printf_i+0x102>
 800203a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800203e:	6805      	ldr	r5, [r0, #0]
 8002040:	600b      	str	r3, [r1, #0]
 8002042:	bf18      	it	ne
 8002044:	b22d      	sxthne	r5, r5
 8002046:	e7ef      	b.n	8002028 <_printf_i+0xbc>
 8002048:	680b      	ldr	r3, [r1, #0]
 800204a:	6825      	ldr	r5, [r4, #0]
 800204c:	1d18      	adds	r0, r3, #4
 800204e:	6008      	str	r0, [r1, #0]
 8002050:	0628      	lsls	r0, r5, #24
 8002052:	d501      	bpl.n	8002058 <_printf_i+0xec>
 8002054:	681d      	ldr	r5, [r3, #0]
 8002056:	e002      	b.n	800205e <_printf_i+0xf2>
 8002058:	0669      	lsls	r1, r5, #25
 800205a:	d5fb      	bpl.n	8002054 <_printf_i+0xe8>
 800205c:	881d      	ldrh	r5, [r3, #0]
 800205e:	4854      	ldr	r0, [pc, #336]	; (80021b0 <_printf_i+0x244>)
 8002060:	2f6f      	cmp	r7, #111	; 0x6f
 8002062:	bf0c      	ite	eq
 8002064:	2308      	moveq	r3, #8
 8002066:	230a      	movne	r3, #10
 8002068:	2100      	movs	r1, #0
 800206a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800206e:	6866      	ldr	r6, [r4, #4]
 8002070:	60a6      	str	r6, [r4, #8]
 8002072:	2e00      	cmp	r6, #0
 8002074:	bfa2      	ittt	ge
 8002076:	6821      	ldrge	r1, [r4, #0]
 8002078:	f021 0104 	bicge.w	r1, r1, #4
 800207c:	6021      	strge	r1, [r4, #0]
 800207e:	b90d      	cbnz	r5, 8002084 <_printf_i+0x118>
 8002080:	2e00      	cmp	r6, #0
 8002082:	d04d      	beq.n	8002120 <_printf_i+0x1b4>
 8002084:	4616      	mov	r6, r2
 8002086:	fbb5 f1f3 	udiv	r1, r5, r3
 800208a:	fb03 5711 	mls	r7, r3, r1, r5
 800208e:	5dc7      	ldrb	r7, [r0, r7]
 8002090:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002094:	462f      	mov	r7, r5
 8002096:	42bb      	cmp	r3, r7
 8002098:	460d      	mov	r5, r1
 800209a:	d9f4      	bls.n	8002086 <_printf_i+0x11a>
 800209c:	2b08      	cmp	r3, #8
 800209e:	d10b      	bne.n	80020b8 <_printf_i+0x14c>
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	07df      	lsls	r7, r3, #31
 80020a4:	d508      	bpl.n	80020b8 <_printf_i+0x14c>
 80020a6:	6923      	ldr	r3, [r4, #16]
 80020a8:	6861      	ldr	r1, [r4, #4]
 80020aa:	4299      	cmp	r1, r3
 80020ac:	bfde      	ittt	le
 80020ae:	2330      	movle	r3, #48	; 0x30
 80020b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80020b8:	1b92      	subs	r2, r2, r6
 80020ba:	6122      	str	r2, [r4, #16]
 80020bc:	f8cd a000 	str.w	sl, [sp]
 80020c0:	464b      	mov	r3, r9
 80020c2:	aa03      	add	r2, sp, #12
 80020c4:	4621      	mov	r1, r4
 80020c6:	4640      	mov	r0, r8
 80020c8:	f7ff fee2 	bl	8001e90 <_printf_common>
 80020cc:	3001      	adds	r0, #1
 80020ce:	d14c      	bne.n	800216a <_printf_i+0x1fe>
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	b004      	add	sp, #16
 80020d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020da:	4835      	ldr	r0, [pc, #212]	; (80021b0 <_printf_i+0x244>)
 80020dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	680e      	ldr	r6, [r1, #0]
 80020e4:	061f      	lsls	r7, r3, #24
 80020e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80020ea:	600e      	str	r6, [r1, #0]
 80020ec:	d514      	bpl.n	8002118 <_printf_i+0x1ac>
 80020ee:	07d9      	lsls	r1, r3, #31
 80020f0:	bf44      	itt	mi
 80020f2:	f043 0320 	orrmi.w	r3, r3, #32
 80020f6:	6023      	strmi	r3, [r4, #0]
 80020f8:	b91d      	cbnz	r5, 8002102 <_printf_i+0x196>
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	f023 0320 	bic.w	r3, r3, #32
 8002100:	6023      	str	r3, [r4, #0]
 8002102:	2310      	movs	r3, #16
 8002104:	e7b0      	b.n	8002068 <_printf_i+0xfc>
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	f043 0320 	orr.w	r3, r3, #32
 800210c:	6023      	str	r3, [r4, #0]
 800210e:	2378      	movs	r3, #120	; 0x78
 8002110:	4828      	ldr	r0, [pc, #160]	; (80021b4 <_printf_i+0x248>)
 8002112:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002116:	e7e3      	b.n	80020e0 <_printf_i+0x174>
 8002118:	065e      	lsls	r6, r3, #25
 800211a:	bf48      	it	mi
 800211c:	b2ad      	uxthmi	r5, r5
 800211e:	e7e6      	b.n	80020ee <_printf_i+0x182>
 8002120:	4616      	mov	r6, r2
 8002122:	e7bb      	b.n	800209c <_printf_i+0x130>
 8002124:	680b      	ldr	r3, [r1, #0]
 8002126:	6826      	ldr	r6, [r4, #0]
 8002128:	6960      	ldr	r0, [r4, #20]
 800212a:	1d1d      	adds	r5, r3, #4
 800212c:	600d      	str	r5, [r1, #0]
 800212e:	0635      	lsls	r5, r6, #24
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	d501      	bpl.n	8002138 <_printf_i+0x1cc>
 8002134:	6018      	str	r0, [r3, #0]
 8002136:	e002      	b.n	800213e <_printf_i+0x1d2>
 8002138:	0671      	lsls	r1, r6, #25
 800213a:	d5fb      	bpl.n	8002134 <_printf_i+0x1c8>
 800213c:	8018      	strh	r0, [r3, #0]
 800213e:	2300      	movs	r3, #0
 8002140:	6123      	str	r3, [r4, #16]
 8002142:	4616      	mov	r6, r2
 8002144:	e7ba      	b.n	80020bc <_printf_i+0x150>
 8002146:	680b      	ldr	r3, [r1, #0]
 8002148:	1d1a      	adds	r2, r3, #4
 800214a:	600a      	str	r2, [r1, #0]
 800214c:	681e      	ldr	r6, [r3, #0]
 800214e:	6862      	ldr	r2, [r4, #4]
 8002150:	2100      	movs	r1, #0
 8002152:	4630      	mov	r0, r6
 8002154:	f7fe f84c 	bl	80001f0 <memchr>
 8002158:	b108      	cbz	r0, 800215e <_printf_i+0x1f2>
 800215a:	1b80      	subs	r0, r0, r6
 800215c:	6060      	str	r0, [r4, #4]
 800215e:	6863      	ldr	r3, [r4, #4]
 8002160:	6123      	str	r3, [r4, #16]
 8002162:	2300      	movs	r3, #0
 8002164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002168:	e7a8      	b.n	80020bc <_printf_i+0x150>
 800216a:	6923      	ldr	r3, [r4, #16]
 800216c:	4632      	mov	r2, r6
 800216e:	4649      	mov	r1, r9
 8002170:	4640      	mov	r0, r8
 8002172:	47d0      	blx	sl
 8002174:	3001      	adds	r0, #1
 8002176:	d0ab      	beq.n	80020d0 <_printf_i+0x164>
 8002178:	6823      	ldr	r3, [r4, #0]
 800217a:	079b      	lsls	r3, r3, #30
 800217c:	d413      	bmi.n	80021a6 <_printf_i+0x23a>
 800217e:	68e0      	ldr	r0, [r4, #12]
 8002180:	9b03      	ldr	r3, [sp, #12]
 8002182:	4298      	cmp	r0, r3
 8002184:	bfb8      	it	lt
 8002186:	4618      	movlt	r0, r3
 8002188:	e7a4      	b.n	80020d4 <_printf_i+0x168>
 800218a:	2301      	movs	r3, #1
 800218c:	4632      	mov	r2, r6
 800218e:	4649      	mov	r1, r9
 8002190:	4640      	mov	r0, r8
 8002192:	47d0      	blx	sl
 8002194:	3001      	adds	r0, #1
 8002196:	d09b      	beq.n	80020d0 <_printf_i+0x164>
 8002198:	3501      	adds	r5, #1
 800219a:	68e3      	ldr	r3, [r4, #12]
 800219c:	9903      	ldr	r1, [sp, #12]
 800219e:	1a5b      	subs	r3, r3, r1
 80021a0:	42ab      	cmp	r3, r5
 80021a2:	dcf2      	bgt.n	800218a <_printf_i+0x21e>
 80021a4:	e7eb      	b.n	800217e <_printf_i+0x212>
 80021a6:	2500      	movs	r5, #0
 80021a8:	f104 0619 	add.w	r6, r4, #25
 80021ac:	e7f5      	b.n	800219a <_printf_i+0x22e>
 80021ae:	bf00      	nop
 80021b0:	08002bdd 	.word	0x08002bdd
 80021b4:	08002bee 	.word	0x08002bee

080021b8 <_sbrk_r>:
 80021b8:	b538      	push	{r3, r4, r5, lr}
 80021ba:	4d06      	ldr	r5, [pc, #24]	; (80021d4 <_sbrk_r+0x1c>)
 80021bc:	2300      	movs	r3, #0
 80021be:	4604      	mov	r4, r0
 80021c0:	4608      	mov	r0, r1
 80021c2:	602b      	str	r3, [r5, #0]
 80021c4:	f7fe f9b2 	bl	800052c <_sbrk>
 80021c8:	1c43      	adds	r3, r0, #1
 80021ca:	d102      	bne.n	80021d2 <_sbrk_r+0x1a>
 80021cc:	682b      	ldr	r3, [r5, #0]
 80021ce:	b103      	cbz	r3, 80021d2 <_sbrk_r+0x1a>
 80021d0:	6023      	str	r3, [r4, #0]
 80021d2:	bd38      	pop	{r3, r4, r5, pc}
 80021d4:	200002f4 	.word	0x200002f4

080021d8 <__sread>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	460c      	mov	r4, r1
 80021dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021e0:	f000 fab2 	bl	8002748 <_read_r>
 80021e4:	2800      	cmp	r0, #0
 80021e6:	bfab      	itete	ge
 80021e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021ea:	89a3      	ldrhlt	r3, [r4, #12]
 80021ec:	181b      	addge	r3, r3, r0
 80021ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021f2:	bfac      	ite	ge
 80021f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80021f6:	81a3      	strhlt	r3, [r4, #12]
 80021f8:	bd10      	pop	{r4, pc}

080021fa <__swrite>:
 80021fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021fe:	461f      	mov	r7, r3
 8002200:	898b      	ldrh	r3, [r1, #12]
 8002202:	05db      	lsls	r3, r3, #23
 8002204:	4605      	mov	r5, r0
 8002206:	460c      	mov	r4, r1
 8002208:	4616      	mov	r6, r2
 800220a:	d505      	bpl.n	8002218 <__swrite+0x1e>
 800220c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002210:	2302      	movs	r3, #2
 8002212:	2200      	movs	r2, #0
 8002214:	f000 f9c8 	bl	80025a8 <_lseek_r>
 8002218:	89a3      	ldrh	r3, [r4, #12]
 800221a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800221e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002222:	81a3      	strh	r3, [r4, #12]
 8002224:	4632      	mov	r2, r6
 8002226:	463b      	mov	r3, r7
 8002228:	4628      	mov	r0, r5
 800222a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800222e:	f000 b869 	b.w	8002304 <_write_r>

08002232 <__sseek>:
 8002232:	b510      	push	{r4, lr}
 8002234:	460c      	mov	r4, r1
 8002236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800223a:	f000 f9b5 	bl	80025a8 <_lseek_r>
 800223e:	1c43      	adds	r3, r0, #1
 8002240:	89a3      	ldrh	r3, [r4, #12]
 8002242:	bf15      	itete	ne
 8002244:	6560      	strne	r0, [r4, #84]	; 0x54
 8002246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800224a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800224e:	81a3      	strheq	r3, [r4, #12]
 8002250:	bf18      	it	ne
 8002252:	81a3      	strhne	r3, [r4, #12]
 8002254:	bd10      	pop	{r4, pc}

08002256 <__sclose>:
 8002256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800225a:	f000 b8d3 	b.w	8002404 <_close_r>
	...

08002260 <__swbuf_r>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	460e      	mov	r6, r1
 8002264:	4614      	mov	r4, r2
 8002266:	4605      	mov	r5, r0
 8002268:	b118      	cbz	r0, 8002272 <__swbuf_r+0x12>
 800226a:	6983      	ldr	r3, [r0, #24]
 800226c:	b90b      	cbnz	r3, 8002272 <__swbuf_r+0x12>
 800226e:	f7ff fbbd 	bl	80019ec <__sinit>
 8002272:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <__swbuf_r+0x98>)
 8002274:	429c      	cmp	r4, r3
 8002276:	d12b      	bne.n	80022d0 <__swbuf_r+0x70>
 8002278:	686c      	ldr	r4, [r5, #4]
 800227a:	69a3      	ldr	r3, [r4, #24]
 800227c:	60a3      	str	r3, [r4, #8]
 800227e:	89a3      	ldrh	r3, [r4, #12]
 8002280:	071a      	lsls	r2, r3, #28
 8002282:	d52f      	bpl.n	80022e4 <__swbuf_r+0x84>
 8002284:	6923      	ldr	r3, [r4, #16]
 8002286:	b36b      	cbz	r3, 80022e4 <__swbuf_r+0x84>
 8002288:	6923      	ldr	r3, [r4, #16]
 800228a:	6820      	ldr	r0, [r4, #0]
 800228c:	1ac0      	subs	r0, r0, r3
 800228e:	6963      	ldr	r3, [r4, #20]
 8002290:	b2f6      	uxtb	r6, r6
 8002292:	4283      	cmp	r3, r0
 8002294:	4637      	mov	r7, r6
 8002296:	dc04      	bgt.n	80022a2 <__swbuf_r+0x42>
 8002298:	4621      	mov	r1, r4
 800229a:	4628      	mov	r0, r5
 800229c:	f000 f948 	bl	8002530 <_fflush_r>
 80022a0:	bb30      	cbnz	r0, 80022f0 <__swbuf_r+0x90>
 80022a2:	68a3      	ldr	r3, [r4, #8]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	60a3      	str	r3, [r4, #8]
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	6022      	str	r2, [r4, #0]
 80022ae:	701e      	strb	r6, [r3, #0]
 80022b0:	6963      	ldr	r3, [r4, #20]
 80022b2:	3001      	adds	r0, #1
 80022b4:	4283      	cmp	r3, r0
 80022b6:	d004      	beq.n	80022c2 <__swbuf_r+0x62>
 80022b8:	89a3      	ldrh	r3, [r4, #12]
 80022ba:	07db      	lsls	r3, r3, #31
 80022bc:	d506      	bpl.n	80022cc <__swbuf_r+0x6c>
 80022be:	2e0a      	cmp	r6, #10
 80022c0:	d104      	bne.n	80022cc <__swbuf_r+0x6c>
 80022c2:	4621      	mov	r1, r4
 80022c4:	4628      	mov	r0, r5
 80022c6:	f000 f933 	bl	8002530 <_fflush_r>
 80022ca:	b988      	cbnz	r0, 80022f0 <__swbuf_r+0x90>
 80022cc:	4638      	mov	r0, r7
 80022ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <__swbuf_r+0x9c>)
 80022d2:	429c      	cmp	r4, r3
 80022d4:	d101      	bne.n	80022da <__swbuf_r+0x7a>
 80022d6:	68ac      	ldr	r4, [r5, #8]
 80022d8:	e7cf      	b.n	800227a <__swbuf_r+0x1a>
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <__swbuf_r+0xa0>)
 80022dc:	429c      	cmp	r4, r3
 80022de:	bf08      	it	eq
 80022e0:	68ec      	ldreq	r4, [r5, #12]
 80022e2:	e7ca      	b.n	800227a <__swbuf_r+0x1a>
 80022e4:	4621      	mov	r1, r4
 80022e6:	4628      	mov	r0, r5
 80022e8:	f000 f81e 	bl	8002328 <__swsetup_r>
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d0cb      	beq.n	8002288 <__swbuf_r+0x28>
 80022f0:	f04f 37ff 	mov.w	r7, #4294967295
 80022f4:	e7ea      	b.n	80022cc <__swbuf_r+0x6c>
 80022f6:	bf00      	nop
 80022f8:	08002b8c 	.word	0x08002b8c
 80022fc:	08002bac 	.word	0x08002bac
 8002300:	08002b6c 	.word	0x08002b6c

08002304 <_write_r>:
 8002304:	b538      	push	{r3, r4, r5, lr}
 8002306:	4d07      	ldr	r5, [pc, #28]	; (8002324 <_write_r+0x20>)
 8002308:	4604      	mov	r4, r0
 800230a:	4608      	mov	r0, r1
 800230c:	4611      	mov	r1, r2
 800230e:	2200      	movs	r2, #0
 8002310:	602a      	str	r2, [r5, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	f7fe f8bd 	bl	8000492 <_write>
 8002318:	1c43      	adds	r3, r0, #1
 800231a:	d102      	bne.n	8002322 <_write_r+0x1e>
 800231c:	682b      	ldr	r3, [r5, #0]
 800231e:	b103      	cbz	r3, 8002322 <_write_r+0x1e>
 8002320:	6023      	str	r3, [r4, #0]
 8002322:	bd38      	pop	{r3, r4, r5, pc}
 8002324:	200002f4 	.word	0x200002f4

08002328 <__swsetup_r>:
 8002328:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <__swsetup_r+0xcc>)
 800232a:	b570      	push	{r4, r5, r6, lr}
 800232c:	681d      	ldr	r5, [r3, #0]
 800232e:	4606      	mov	r6, r0
 8002330:	460c      	mov	r4, r1
 8002332:	b125      	cbz	r5, 800233e <__swsetup_r+0x16>
 8002334:	69ab      	ldr	r3, [r5, #24]
 8002336:	b913      	cbnz	r3, 800233e <__swsetup_r+0x16>
 8002338:	4628      	mov	r0, r5
 800233a:	f7ff fb57 	bl	80019ec <__sinit>
 800233e:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <__swsetup_r+0xd0>)
 8002340:	429c      	cmp	r4, r3
 8002342:	d10f      	bne.n	8002364 <__swsetup_r+0x3c>
 8002344:	686c      	ldr	r4, [r5, #4]
 8002346:	89a3      	ldrh	r3, [r4, #12]
 8002348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800234c:	0719      	lsls	r1, r3, #28
 800234e:	d42c      	bmi.n	80023aa <__swsetup_r+0x82>
 8002350:	06dd      	lsls	r5, r3, #27
 8002352:	d411      	bmi.n	8002378 <__swsetup_r+0x50>
 8002354:	2309      	movs	r3, #9
 8002356:	6033      	str	r3, [r6, #0]
 8002358:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800235c:	81a3      	strh	r3, [r4, #12]
 800235e:	f04f 30ff 	mov.w	r0, #4294967295
 8002362:	e03e      	b.n	80023e2 <__swsetup_r+0xba>
 8002364:	4b25      	ldr	r3, [pc, #148]	; (80023fc <__swsetup_r+0xd4>)
 8002366:	429c      	cmp	r4, r3
 8002368:	d101      	bne.n	800236e <__swsetup_r+0x46>
 800236a:	68ac      	ldr	r4, [r5, #8]
 800236c:	e7eb      	b.n	8002346 <__swsetup_r+0x1e>
 800236e:	4b24      	ldr	r3, [pc, #144]	; (8002400 <__swsetup_r+0xd8>)
 8002370:	429c      	cmp	r4, r3
 8002372:	bf08      	it	eq
 8002374:	68ec      	ldreq	r4, [r5, #12]
 8002376:	e7e6      	b.n	8002346 <__swsetup_r+0x1e>
 8002378:	0758      	lsls	r0, r3, #29
 800237a:	d512      	bpl.n	80023a2 <__swsetup_r+0x7a>
 800237c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800237e:	b141      	cbz	r1, 8002392 <__swsetup_r+0x6a>
 8002380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002384:	4299      	cmp	r1, r3
 8002386:	d002      	beq.n	800238e <__swsetup_r+0x66>
 8002388:	4630      	mov	r0, r6
 800238a:	f000 f98f 	bl	80026ac <_free_r>
 800238e:	2300      	movs	r3, #0
 8002390:	6363      	str	r3, [r4, #52]	; 0x34
 8002392:	89a3      	ldrh	r3, [r4, #12]
 8002394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002398:	81a3      	strh	r3, [r4, #12]
 800239a:	2300      	movs	r3, #0
 800239c:	6063      	str	r3, [r4, #4]
 800239e:	6923      	ldr	r3, [r4, #16]
 80023a0:	6023      	str	r3, [r4, #0]
 80023a2:	89a3      	ldrh	r3, [r4, #12]
 80023a4:	f043 0308 	orr.w	r3, r3, #8
 80023a8:	81a3      	strh	r3, [r4, #12]
 80023aa:	6923      	ldr	r3, [r4, #16]
 80023ac:	b94b      	cbnz	r3, 80023c2 <__swsetup_r+0x9a>
 80023ae:	89a3      	ldrh	r3, [r4, #12]
 80023b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b8:	d003      	beq.n	80023c2 <__swsetup_r+0x9a>
 80023ba:	4621      	mov	r1, r4
 80023bc:	4630      	mov	r0, r6
 80023be:	f000 f929 	bl	8002614 <__smakebuf_r>
 80023c2:	89a0      	ldrh	r0, [r4, #12]
 80023c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023c8:	f010 0301 	ands.w	r3, r0, #1
 80023cc:	d00a      	beq.n	80023e4 <__swsetup_r+0xbc>
 80023ce:	2300      	movs	r3, #0
 80023d0:	60a3      	str	r3, [r4, #8]
 80023d2:	6963      	ldr	r3, [r4, #20]
 80023d4:	425b      	negs	r3, r3
 80023d6:	61a3      	str	r3, [r4, #24]
 80023d8:	6923      	ldr	r3, [r4, #16]
 80023da:	b943      	cbnz	r3, 80023ee <__swsetup_r+0xc6>
 80023dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80023e0:	d1ba      	bne.n	8002358 <__swsetup_r+0x30>
 80023e2:	bd70      	pop	{r4, r5, r6, pc}
 80023e4:	0781      	lsls	r1, r0, #30
 80023e6:	bf58      	it	pl
 80023e8:	6963      	ldrpl	r3, [r4, #20]
 80023ea:	60a3      	str	r3, [r4, #8]
 80023ec:	e7f4      	b.n	80023d8 <__swsetup_r+0xb0>
 80023ee:	2000      	movs	r0, #0
 80023f0:	e7f7      	b.n	80023e2 <__swsetup_r+0xba>
 80023f2:	bf00      	nop
 80023f4:	20000014 	.word	0x20000014
 80023f8:	08002b8c 	.word	0x08002b8c
 80023fc:	08002bac 	.word	0x08002bac
 8002400:	08002b6c 	.word	0x08002b6c

08002404 <_close_r>:
 8002404:	b538      	push	{r3, r4, r5, lr}
 8002406:	4d06      	ldr	r5, [pc, #24]	; (8002420 <_close_r+0x1c>)
 8002408:	2300      	movs	r3, #0
 800240a:	4604      	mov	r4, r0
 800240c:	4608      	mov	r0, r1
 800240e:	602b      	str	r3, [r5, #0]
 8002410:	f7fe f85b 	bl	80004ca <_close>
 8002414:	1c43      	adds	r3, r0, #1
 8002416:	d102      	bne.n	800241e <_close_r+0x1a>
 8002418:	682b      	ldr	r3, [r5, #0]
 800241a:	b103      	cbz	r3, 800241e <_close_r+0x1a>
 800241c:	6023      	str	r3, [r4, #0]
 800241e:	bd38      	pop	{r3, r4, r5, pc}
 8002420:	200002f4 	.word	0x200002f4

08002424 <__sflush_r>:
 8002424:	898a      	ldrh	r2, [r1, #12]
 8002426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800242a:	4605      	mov	r5, r0
 800242c:	0710      	lsls	r0, r2, #28
 800242e:	460c      	mov	r4, r1
 8002430:	d458      	bmi.n	80024e4 <__sflush_r+0xc0>
 8002432:	684b      	ldr	r3, [r1, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	dc05      	bgt.n	8002444 <__sflush_r+0x20>
 8002438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	dc02      	bgt.n	8002444 <__sflush_r+0x20>
 800243e:	2000      	movs	r0, #0
 8002440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002446:	2e00      	cmp	r6, #0
 8002448:	d0f9      	beq.n	800243e <__sflush_r+0x1a>
 800244a:	2300      	movs	r3, #0
 800244c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002450:	682f      	ldr	r7, [r5, #0]
 8002452:	602b      	str	r3, [r5, #0]
 8002454:	d032      	beq.n	80024bc <__sflush_r+0x98>
 8002456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002458:	89a3      	ldrh	r3, [r4, #12]
 800245a:	075a      	lsls	r2, r3, #29
 800245c:	d505      	bpl.n	800246a <__sflush_r+0x46>
 800245e:	6863      	ldr	r3, [r4, #4]
 8002460:	1ac0      	subs	r0, r0, r3
 8002462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002464:	b10b      	cbz	r3, 800246a <__sflush_r+0x46>
 8002466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002468:	1ac0      	subs	r0, r0, r3
 800246a:	2300      	movs	r3, #0
 800246c:	4602      	mov	r2, r0
 800246e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002470:	6a21      	ldr	r1, [r4, #32]
 8002472:	4628      	mov	r0, r5
 8002474:	47b0      	blx	r6
 8002476:	1c43      	adds	r3, r0, #1
 8002478:	89a3      	ldrh	r3, [r4, #12]
 800247a:	d106      	bne.n	800248a <__sflush_r+0x66>
 800247c:	6829      	ldr	r1, [r5, #0]
 800247e:	291d      	cmp	r1, #29
 8002480:	d82c      	bhi.n	80024dc <__sflush_r+0xb8>
 8002482:	4a2a      	ldr	r2, [pc, #168]	; (800252c <__sflush_r+0x108>)
 8002484:	40ca      	lsrs	r2, r1
 8002486:	07d6      	lsls	r6, r2, #31
 8002488:	d528      	bpl.n	80024dc <__sflush_r+0xb8>
 800248a:	2200      	movs	r2, #0
 800248c:	6062      	str	r2, [r4, #4]
 800248e:	04d9      	lsls	r1, r3, #19
 8002490:	6922      	ldr	r2, [r4, #16]
 8002492:	6022      	str	r2, [r4, #0]
 8002494:	d504      	bpl.n	80024a0 <__sflush_r+0x7c>
 8002496:	1c42      	adds	r2, r0, #1
 8002498:	d101      	bne.n	800249e <__sflush_r+0x7a>
 800249a:	682b      	ldr	r3, [r5, #0]
 800249c:	b903      	cbnz	r3, 80024a0 <__sflush_r+0x7c>
 800249e:	6560      	str	r0, [r4, #84]	; 0x54
 80024a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024a2:	602f      	str	r7, [r5, #0]
 80024a4:	2900      	cmp	r1, #0
 80024a6:	d0ca      	beq.n	800243e <__sflush_r+0x1a>
 80024a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024ac:	4299      	cmp	r1, r3
 80024ae:	d002      	beq.n	80024b6 <__sflush_r+0x92>
 80024b0:	4628      	mov	r0, r5
 80024b2:	f000 f8fb 	bl	80026ac <_free_r>
 80024b6:	2000      	movs	r0, #0
 80024b8:	6360      	str	r0, [r4, #52]	; 0x34
 80024ba:	e7c1      	b.n	8002440 <__sflush_r+0x1c>
 80024bc:	6a21      	ldr	r1, [r4, #32]
 80024be:	2301      	movs	r3, #1
 80024c0:	4628      	mov	r0, r5
 80024c2:	47b0      	blx	r6
 80024c4:	1c41      	adds	r1, r0, #1
 80024c6:	d1c7      	bne.n	8002458 <__sflush_r+0x34>
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0c4      	beq.n	8002458 <__sflush_r+0x34>
 80024ce:	2b1d      	cmp	r3, #29
 80024d0:	d001      	beq.n	80024d6 <__sflush_r+0xb2>
 80024d2:	2b16      	cmp	r3, #22
 80024d4:	d101      	bne.n	80024da <__sflush_r+0xb6>
 80024d6:	602f      	str	r7, [r5, #0]
 80024d8:	e7b1      	b.n	800243e <__sflush_r+0x1a>
 80024da:	89a3      	ldrh	r3, [r4, #12]
 80024dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e0:	81a3      	strh	r3, [r4, #12]
 80024e2:	e7ad      	b.n	8002440 <__sflush_r+0x1c>
 80024e4:	690f      	ldr	r7, [r1, #16]
 80024e6:	2f00      	cmp	r7, #0
 80024e8:	d0a9      	beq.n	800243e <__sflush_r+0x1a>
 80024ea:	0793      	lsls	r3, r2, #30
 80024ec:	680e      	ldr	r6, [r1, #0]
 80024ee:	bf08      	it	eq
 80024f0:	694b      	ldreq	r3, [r1, #20]
 80024f2:	600f      	str	r7, [r1, #0]
 80024f4:	bf18      	it	ne
 80024f6:	2300      	movne	r3, #0
 80024f8:	eba6 0807 	sub.w	r8, r6, r7
 80024fc:	608b      	str	r3, [r1, #8]
 80024fe:	f1b8 0f00 	cmp.w	r8, #0
 8002502:	dd9c      	ble.n	800243e <__sflush_r+0x1a>
 8002504:	6a21      	ldr	r1, [r4, #32]
 8002506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002508:	4643      	mov	r3, r8
 800250a:	463a      	mov	r2, r7
 800250c:	4628      	mov	r0, r5
 800250e:	47b0      	blx	r6
 8002510:	2800      	cmp	r0, #0
 8002512:	dc06      	bgt.n	8002522 <__sflush_r+0xfe>
 8002514:	89a3      	ldrh	r3, [r4, #12]
 8002516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800251a:	81a3      	strh	r3, [r4, #12]
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	e78e      	b.n	8002440 <__sflush_r+0x1c>
 8002522:	4407      	add	r7, r0
 8002524:	eba8 0800 	sub.w	r8, r8, r0
 8002528:	e7e9      	b.n	80024fe <__sflush_r+0xda>
 800252a:	bf00      	nop
 800252c:	20400001 	.word	0x20400001

08002530 <_fflush_r>:
 8002530:	b538      	push	{r3, r4, r5, lr}
 8002532:	690b      	ldr	r3, [r1, #16]
 8002534:	4605      	mov	r5, r0
 8002536:	460c      	mov	r4, r1
 8002538:	b913      	cbnz	r3, 8002540 <_fflush_r+0x10>
 800253a:	2500      	movs	r5, #0
 800253c:	4628      	mov	r0, r5
 800253e:	bd38      	pop	{r3, r4, r5, pc}
 8002540:	b118      	cbz	r0, 800254a <_fflush_r+0x1a>
 8002542:	6983      	ldr	r3, [r0, #24]
 8002544:	b90b      	cbnz	r3, 800254a <_fflush_r+0x1a>
 8002546:	f7ff fa51 	bl	80019ec <__sinit>
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <_fflush_r+0x6c>)
 800254c:	429c      	cmp	r4, r3
 800254e:	d11b      	bne.n	8002588 <_fflush_r+0x58>
 8002550:	686c      	ldr	r4, [r5, #4]
 8002552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0ef      	beq.n	800253a <_fflush_r+0xa>
 800255a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800255c:	07d0      	lsls	r0, r2, #31
 800255e:	d404      	bmi.n	800256a <_fflush_r+0x3a>
 8002560:	0599      	lsls	r1, r3, #22
 8002562:	d402      	bmi.n	800256a <_fflush_r+0x3a>
 8002564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002566:	f7ff fadf 	bl	8001b28 <__retarget_lock_acquire_recursive>
 800256a:	4628      	mov	r0, r5
 800256c:	4621      	mov	r1, r4
 800256e:	f7ff ff59 	bl	8002424 <__sflush_r>
 8002572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002574:	07da      	lsls	r2, r3, #31
 8002576:	4605      	mov	r5, r0
 8002578:	d4e0      	bmi.n	800253c <_fflush_r+0xc>
 800257a:	89a3      	ldrh	r3, [r4, #12]
 800257c:	059b      	lsls	r3, r3, #22
 800257e:	d4dd      	bmi.n	800253c <_fflush_r+0xc>
 8002580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002582:	f7ff fad2 	bl	8001b2a <__retarget_lock_release_recursive>
 8002586:	e7d9      	b.n	800253c <_fflush_r+0xc>
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <_fflush_r+0x70>)
 800258a:	429c      	cmp	r4, r3
 800258c:	d101      	bne.n	8002592 <_fflush_r+0x62>
 800258e:	68ac      	ldr	r4, [r5, #8]
 8002590:	e7df      	b.n	8002552 <_fflush_r+0x22>
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <_fflush_r+0x74>)
 8002594:	429c      	cmp	r4, r3
 8002596:	bf08      	it	eq
 8002598:	68ec      	ldreq	r4, [r5, #12]
 800259a:	e7da      	b.n	8002552 <_fflush_r+0x22>
 800259c:	08002b8c 	.word	0x08002b8c
 80025a0:	08002bac 	.word	0x08002bac
 80025a4:	08002b6c 	.word	0x08002b6c

080025a8 <_lseek_r>:
 80025a8:	b538      	push	{r3, r4, r5, lr}
 80025aa:	4d07      	ldr	r5, [pc, #28]	; (80025c8 <_lseek_r+0x20>)
 80025ac:	4604      	mov	r4, r0
 80025ae:	4608      	mov	r0, r1
 80025b0:	4611      	mov	r1, r2
 80025b2:	2200      	movs	r2, #0
 80025b4:	602a      	str	r2, [r5, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	f7fd ffab 	bl	8000512 <_lseek>
 80025bc:	1c43      	adds	r3, r0, #1
 80025be:	d102      	bne.n	80025c6 <_lseek_r+0x1e>
 80025c0:	682b      	ldr	r3, [r5, #0]
 80025c2:	b103      	cbz	r3, 80025c6 <_lseek_r+0x1e>
 80025c4:	6023      	str	r3, [r4, #0]
 80025c6:	bd38      	pop	{r3, r4, r5, pc}
 80025c8:	200002f4 	.word	0x200002f4

080025cc <__swhatbuf_r>:
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	460e      	mov	r6, r1
 80025d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025d4:	2900      	cmp	r1, #0
 80025d6:	b096      	sub	sp, #88	; 0x58
 80025d8:	4614      	mov	r4, r2
 80025da:	461d      	mov	r5, r3
 80025dc:	da07      	bge.n	80025ee <__swhatbuf_r+0x22>
 80025de:	2300      	movs	r3, #0
 80025e0:	602b      	str	r3, [r5, #0]
 80025e2:	89b3      	ldrh	r3, [r6, #12]
 80025e4:	061a      	lsls	r2, r3, #24
 80025e6:	d410      	bmi.n	800260a <__swhatbuf_r+0x3e>
 80025e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ec:	e00e      	b.n	800260c <__swhatbuf_r+0x40>
 80025ee:	466a      	mov	r2, sp
 80025f0:	f000 f8bc 	bl	800276c <_fstat_r>
 80025f4:	2800      	cmp	r0, #0
 80025f6:	dbf2      	blt.n	80025de <__swhatbuf_r+0x12>
 80025f8:	9a01      	ldr	r2, [sp, #4]
 80025fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80025fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002602:	425a      	negs	r2, r3
 8002604:	415a      	adcs	r2, r3
 8002606:	602a      	str	r2, [r5, #0]
 8002608:	e7ee      	b.n	80025e8 <__swhatbuf_r+0x1c>
 800260a:	2340      	movs	r3, #64	; 0x40
 800260c:	2000      	movs	r0, #0
 800260e:	6023      	str	r3, [r4, #0]
 8002610:	b016      	add	sp, #88	; 0x58
 8002612:	bd70      	pop	{r4, r5, r6, pc}

08002614 <__smakebuf_r>:
 8002614:	898b      	ldrh	r3, [r1, #12]
 8002616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002618:	079d      	lsls	r5, r3, #30
 800261a:	4606      	mov	r6, r0
 800261c:	460c      	mov	r4, r1
 800261e:	d507      	bpl.n	8002630 <__smakebuf_r+0x1c>
 8002620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002624:	6023      	str	r3, [r4, #0]
 8002626:	6123      	str	r3, [r4, #16]
 8002628:	2301      	movs	r3, #1
 800262a:	6163      	str	r3, [r4, #20]
 800262c:	b002      	add	sp, #8
 800262e:	bd70      	pop	{r4, r5, r6, pc}
 8002630:	ab01      	add	r3, sp, #4
 8002632:	466a      	mov	r2, sp
 8002634:	f7ff ffca 	bl	80025cc <__swhatbuf_r>
 8002638:	9900      	ldr	r1, [sp, #0]
 800263a:	4605      	mov	r5, r0
 800263c:	4630      	mov	r0, r6
 800263e:	f7ff fa75 	bl	8001b2c <_malloc_r>
 8002642:	b948      	cbnz	r0, 8002658 <__smakebuf_r+0x44>
 8002644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002648:	059a      	lsls	r2, r3, #22
 800264a:	d4ef      	bmi.n	800262c <__smakebuf_r+0x18>
 800264c:	f023 0303 	bic.w	r3, r3, #3
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	81a3      	strh	r3, [r4, #12]
 8002656:	e7e3      	b.n	8002620 <__smakebuf_r+0xc>
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <__smakebuf_r+0x7c>)
 800265a:	62b3      	str	r3, [r6, #40]	; 0x28
 800265c:	89a3      	ldrh	r3, [r4, #12]
 800265e:	6020      	str	r0, [r4, #0]
 8002660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002664:	81a3      	strh	r3, [r4, #12]
 8002666:	9b00      	ldr	r3, [sp, #0]
 8002668:	6163      	str	r3, [r4, #20]
 800266a:	9b01      	ldr	r3, [sp, #4]
 800266c:	6120      	str	r0, [r4, #16]
 800266e:	b15b      	cbz	r3, 8002688 <__smakebuf_r+0x74>
 8002670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002674:	4630      	mov	r0, r6
 8002676:	f000 f88b 	bl	8002790 <_isatty_r>
 800267a:	b128      	cbz	r0, 8002688 <__smakebuf_r+0x74>
 800267c:	89a3      	ldrh	r3, [r4, #12]
 800267e:	f023 0303 	bic.w	r3, r3, #3
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	81a3      	strh	r3, [r4, #12]
 8002688:	89a0      	ldrh	r0, [r4, #12]
 800268a:	4305      	orrs	r5, r0
 800268c:	81a5      	strh	r5, [r4, #12]
 800268e:	e7cd      	b.n	800262c <__smakebuf_r+0x18>
 8002690:	08001985 	.word	0x08001985

08002694 <__malloc_lock>:
 8002694:	4801      	ldr	r0, [pc, #4]	; (800269c <__malloc_lock+0x8>)
 8002696:	f7ff ba47 	b.w	8001b28 <__retarget_lock_acquire_recursive>
 800269a:	bf00      	nop
 800269c:	200002ec 	.word	0x200002ec

080026a0 <__malloc_unlock>:
 80026a0:	4801      	ldr	r0, [pc, #4]	; (80026a8 <__malloc_unlock+0x8>)
 80026a2:	f7ff ba42 	b.w	8001b2a <__retarget_lock_release_recursive>
 80026a6:	bf00      	nop
 80026a8:	200002ec 	.word	0x200002ec

080026ac <_free_r>:
 80026ac:	b538      	push	{r3, r4, r5, lr}
 80026ae:	4605      	mov	r5, r0
 80026b0:	2900      	cmp	r1, #0
 80026b2:	d045      	beq.n	8002740 <_free_r+0x94>
 80026b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026b8:	1f0c      	subs	r4, r1, #4
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bfb8      	it	lt
 80026be:	18e4      	addlt	r4, r4, r3
 80026c0:	f7ff ffe8 	bl	8002694 <__malloc_lock>
 80026c4:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <_free_r+0x98>)
 80026c6:	6813      	ldr	r3, [r2, #0]
 80026c8:	4610      	mov	r0, r2
 80026ca:	b933      	cbnz	r3, 80026da <_free_r+0x2e>
 80026cc:	6063      	str	r3, [r4, #4]
 80026ce:	6014      	str	r4, [r2, #0]
 80026d0:	4628      	mov	r0, r5
 80026d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026d6:	f7ff bfe3 	b.w	80026a0 <__malloc_unlock>
 80026da:	42a3      	cmp	r3, r4
 80026dc:	d90b      	bls.n	80026f6 <_free_r+0x4a>
 80026de:	6821      	ldr	r1, [r4, #0]
 80026e0:	1862      	adds	r2, r4, r1
 80026e2:	4293      	cmp	r3, r2
 80026e4:	bf04      	itt	eq
 80026e6:	681a      	ldreq	r2, [r3, #0]
 80026e8:	685b      	ldreq	r3, [r3, #4]
 80026ea:	6063      	str	r3, [r4, #4]
 80026ec:	bf04      	itt	eq
 80026ee:	1852      	addeq	r2, r2, r1
 80026f0:	6022      	streq	r2, [r4, #0]
 80026f2:	6004      	str	r4, [r0, #0]
 80026f4:	e7ec      	b.n	80026d0 <_free_r+0x24>
 80026f6:	461a      	mov	r2, r3
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	b10b      	cbz	r3, 8002700 <_free_r+0x54>
 80026fc:	42a3      	cmp	r3, r4
 80026fe:	d9fa      	bls.n	80026f6 <_free_r+0x4a>
 8002700:	6811      	ldr	r1, [r2, #0]
 8002702:	1850      	adds	r0, r2, r1
 8002704:	42a0      	cmp	r0, r4
 8002706:	d10b      	bne.n	8002720 <_free_r+0x74>
 8002708:	6820      	ldr	r0, [r4, #0]
 800270a:	4401      	add	r1, r0
 800270c:	1850      	adds	r0, r2, r1
 800270e:	4283      	cmp	r3, r0
 8002710:	6011      	str	r1, [r2, #0]
 8002712:	d1dd      	bne.n	80026d0 <_free_r+0x24>
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	6053      	str	r3, [r2, #4]
 800271a:	4401      	add	r1, r0
 800271c:	6011      	str	r1, [r2, #0]
 800271e:	e7d7      	b.n	80026d0 <_free_r+0x24>
 8002720:	d902      	bls.n	8002728 <_free_r+0x7c>
 8002722:	230c      	movs	r3, #12
 8002724:	602b      	str	r3, [r5, #0]
 8002726:	e7d3      	b.n	80026d0 <_free_r+0x24>
 8002728:	6820      	ldr	r0, [r4, #0]
 800272a:	1821      	adds	r1, r4, r0
 800272c:	428b      	cmp	r3, r1
 800272e:	bf04      	itt	eq
 8002730:	6819      	ldreq	r1, [r3, #0]
 8002732:	685b      	ldreq	r3, [r3, #4]
 8002734:	6063      	str	r3, [r4, #4]
 8002736:	bf04      	itt	eq
 8002738:	1809      	addeq	r1, r1, r0
 800273a:	6021      	streq	r1, [r4, #0]
 800273c:	6054      	str	r4, [r2, #4]
 800273e:	e7c7      	b.n	80026d0 <_free_r+0x24>
 8002740:	bd38      	pop	{r3, r4, r5, pc}
 8002742:	bf00      	nop
 8002744:	200000a0 	.word	0x200000a0

08002748 <_read_r>:
 8002748:	b538      	push	{r3, r4, r5, lr}
 800274a:	4d07      	ldr	r5, [pc, #28]	; (8002768 <_read_r+0x20>)
 800274c:	4604      	mov	r4, r0
 800274e:	4608      	mov	r0, r1
 8002750:	4611      	mov	r1, r2
 8002752:	2200      	movs	r2, #0
 8002754:	602a      	str	r2, [r5, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	f7fd fe7e 	bl	8000458 <_read>
 800275c:	1c43      	adds	r3, r0, #1
 800275e:	d102      	bne.n	8002766 <_read_r+0x1e>
 8002760:	682b      	ldr	r3, [r5, #0]
 8002762:	b103      	cbz	r3, 8002766 <_read_r+0x1e>
 8002764:	6023      	str	r3, [r4, #0]
 8002766:	bd38      	pop	{r3, r4, r5, pc}
 8002768:	200002f4 	.word	0x200002f4

0800276c <_fstat_r>:
 800276c:	b538      	push	{r3, r4, r5, lr}
 800276e:	4d07      	ldr	r5, [pc, #28]	; (800278c <_fstat_r+0x20>)
 8002770:	2300      	movs	r3, #0
 8002772:	4604      	mov	r4, r0
 8002774:	4608      	mov	r0, r1
 8002776:	4611      	mov	r1, r2
 8002778:	602b      	str	r3, [r5, #0]
 800277a:	f7fd feb1 	bl	80004e0 <_fstat>
 800277e:	1c43      	adds	r3, r0, #1
 8002780:	d102      	bne.n	8002788 <_fstat_r+0x1c>
 8002782:	682b      	ldr	r3, [r5, #0]
 8002784:	b103      	cbz	r3, 8002788 <_fstat_r+0x1c>
 8002786:	6023      	str	r3, [r4, #0]
 8002788:	bd38      	pop	{r3, r4, r5, pc}
 800278a:	bf00      	nop
 800278c:	200002f4 	.word	0x200002f4

08002790 <_isatty_r>:
 8002790:	b538      	push	{r3, r4, r5, lr}
 8002792:	4d06      	ldr	r5, [pc, #24]	; (80027ac <_isatty_r+0x1c>)
 8002794:	2300      	movs	r3, #0
 8002796:	4604      	mov	r4, r0
 8002798:	4608      	mov	r0, r1
 800279a:	602b      	str	r3, [r5, #0]
 800279c:	f7fd feaf 	bl	80004fe <_isatty>
 80027a0:	1c43      	adds	r3, r0, #1
 80027a2:	d102      	bne.n	80027aa <_isatty_r+0x1a>
 80027a4:	682b      	ldr	r3, [r5, #0]
 80027a6:	b103      	cbz	r3, 80027aa <_isatty_r+0x1a>
 80027a8:	6023      	str	r3, [r4, #0]
 80027aa:	bd38      	pop	{r3, r4, r5, pc}
 80027ac:	200002f4 	.word	0x200002f4

080027b0 <_init>:
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	bf00      	nop
 80027b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b6:	bc08      	pop	{r3}
 80027b8:	469e      	mov	lr, r3
 80027ba:	4770      	bx	lr

080027bc <_fini>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	bf00      	nop
 80027c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c2:	bc08      	pop	{r3}
 80027c4:	469e      	mov	lr, r3
 80027c6:	4770      	bx	lr
