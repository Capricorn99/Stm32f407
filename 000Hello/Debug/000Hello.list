
000Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e8c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800203c  0800203c  0001203c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020e0  080020e0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080020e0  080020e0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020e0  080020e0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020e0  080020e0  000120e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020e4  080020e4  000120e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080020e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000078  08002160  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002160  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003d02  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b2e  00000000  00000000  00023da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c0  00000000  00000000  000248d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000258  00000000  00000000  00024b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039c9  00000000  00000000  00024df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000030fb  00000000  00000000  000287b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000caa0  00000000  00000000  0002b8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00038354  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000120c  00000000  00000000  000383a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002024 	.word	0x08002024

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08002024 	.word	0x08002024

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:
#define MY_ADDR 0x61;

#define SLAVE_ADDR  0x68

void delay(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	0003d08f 	.word	0x0003d08f

080002bc <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <I2C1_GPIOInits+0x40>)
 80002c4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 80002c6:	2302      	movs	r3, #2
 80002c8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_OD;
 80002ca:	2301      	movs	r3, #1
 80002cc:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002ce:	2301      	movs	r3, #1
 80002d0:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002d2:	2304      	movs	r3, #4
 80002d4:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d6:	2302      	movs	r3, #2
 80002d8:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002da:	2306      	movs	r3, #6
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fa6d 	bl	80007c0 <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002e6:	2307      	movs	r3, #7
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fa67 	bl	80007c0 <GPIO_Init>


}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40020400 	.word	0x40020400

08000300 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <I2C1_Inits+0x2c>)
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <I2C1_Inits+0x30>)
 8000308:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <I2C1_Inits+0x2c>)
 800030c:	2201      	movs	r2, #1
 800030e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <I2C1_Inits+0x2c>)
 8000312:	2261      	movs	r2, #97	; 0x61
 8000314:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <I2C1_Inits+0x2c>)
 8000318:	2200      	movs	r2, #0
 800031a:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <I2C1_Inits+0x2c>)
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <I2C1_Inits+0x34>)
 8000320:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <I2C1_Inits+0x2c>)
 8000324:	f000 fcc4 	bl	8000cb0 <I2C_Init>

}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200000a0 	.word	0x200000a0
 8000330:	40005400 	.word	0x40005400
 8000334:	000186a0 	.word	0x000186a0

08000338 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <GPIO_ButtonInit+0x2c>)
 8000340:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000342:	2300      	movs	r3, #0
 8000344:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000346:	2300      	movs	r3, #0
 8000348:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800034a:	2302      	movs	r3, #2
 800034c:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800034e:	2300      	movs	r3, #0
 8000350:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fa33 	bl	80007c0 <GPIO_Init>

}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40020000 	.word	0x40020000

08000368 <main>:


int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af02      	add	r7, sp, #8

	//initialise_monitor_handles();

	//printf("Application is running\n");

	GPIO_ButtonInit();
 800036e:	f7ff ffe3 	bl	8000338 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 8000372:	f7ff ffa3 	bl	80002bc <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 8000376:	f7ff ffc3 	bl	8000300 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 800037a:	2101      	movs	r1, #1
 800037c:	481f      	ldr	r0, [pc, #124]	; (80003fc <main+0x94>)
 800037e:	f000 fc45 	bl	8000c0c <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 8000382:	2101      	movs	r1, #1
 8000384:	481d      	ldr	r0, [pc, #116]	; (80003fc <main+0x94>)
 8000386:	f000 fe4d 	bl	8001024 <I2C_ManageAcking>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800038a:	bf00      	nop
 800038c:	2100      	movs	r1, #0
 800038e:	481c      	ldr	r0, [pc, #112]	; (8000400 <main+0x98>)
 8000390:	f000 fba8 	bl	8000ae4 <GPIO_ReadFromInputPin>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f8      	beq.n	800038c <main+0x24>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800039a:	f7ff ff79 	bl	8000290 <delay>

		commandcode = 0x51;
 800039e:	2351      	movs	r3, #81	; 0x51
 80003a0:	71fb      	strb	r3, [r7, #7]

		I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR);
 80003a2:	1df9      	adds	r1, r7, #7
 80003a4:	2301      	movs	r3, #1
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	2368      	movs	r3, #104	; 0x68
 80003aa:	2201      	movs	r2, #1
 80003ac:	4815      	ldr	r0, [pc, #84]	; (8000404 <main+0x9c>)
 80003ae:	f000 fd44 	bl	8000e3a <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle,&len,1,SLAVE_ADDR,I2C_ENABLE_SR);
 80003b2:	1db9      	adds	r1, r7, #6
 80003b4:	2301      	movs	r3, #1
 80003b6:	9300      	str	r3, [sp, #0]
 80003b8:	2368      	movs	r3, #104	; 0x68
 80003ba:	2201      	movs	r2, #1
 80003bc:	4811      	ldr	r0, [pc, #68]	; (8000404 <main+0x9c>)
 80003be:	f000 fd9f 	bl	8000f00 <I2C_MasterReceiveData>

		commandcode = 0x52;
 80003c2:	2352      	movs	r3, #82	; 0x52
 80003c4:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR);
 80003c6:	1df9      	adds	r1, r7, #7
 80003c8:	2301      	movs	r3, #1
 80003ca:	9300      	str	r3, [sp, #0]
 80003cc:	2368      	movs	r3, #104	; 0x68
 80003ce:	2201      	movs	r2, #1
 80003d0:	480c      	ldr	r0, [pc, #48]	; (8000404 <main+0x9c>)
 80003d2:	f000 fd32 	bl	8000e3a <I2C_MasterSendData>


		I2C_MasterReceiveData(&I2C1Handle,rcv_buf,len,SLAVE_ADDR,I2C_DISABLE_SR);
 80003d6:	79ba      	ldrb	r2, [r7, #6]
 80003d8:	2300      	movs	r3, #0
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	2368      	movs	r3, #104	; 0x68
 80003de:	490a      	ldr	r1, [pc, #40]	; (8000408 <main+0xa0>)
 80003e0:	4808      	ldr	r0, [pc, #32]	; (8000404 <main+0x9c>)
 80003e2:	f000 fd8d 	bl	8000f00 <I2C_MasterReceiveData>

		rcv_buf[len+1] = '\0';
 80003e6:	79bb      	ldrb	r3, [r7, #6]
 80003e8:	3301      	adds	r3, #1
 80003ea:	4a07      	ldr	r2, [pc, #28]	; (8000408 <main+0xa0>)
 80003ec:	2100      	movs	r1, #0
 80003ee:	54d1      	strb	r1, [r2, r3]

		printf("Data : %s",rcv_buf);
 80003f0:	4905      	ldr	r1, [pc, #20]	; (8000408 <main+0xa0>)
 80003f2:	4806      	ldr	r0, [pc, #24]	; (800040c <main+0xa4>)
 80003f4:	f000 fec4 	bl	8001180 <iprintf>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80003f8:	e7c7      	b.n	800038a <main+0x22>
 80003fa:	bf00      	nop
 80003fc:	40005400 	.word	0x40005400
 8000400:	40020000 	.word	0x40020000
 8000404:	200000a0 	.word	0x200000a0
 8000408:	200000c8 	.word	0x200000c8
 800040c:	0800203c 	.word	0x0800203c

08000410 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <ITM_SendChar+0x44>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <ITM_SendChar+0x44>)
 8000420:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000424:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <ITM_SendChar+0x48>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <ITM_SendChar+0x48>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000432:	bf00      	nop
 8000434:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	2b00      	cmp	r3, #0
 8000440:	d0f8      	beq.n	8000434 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000442:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	6013      	str	r3, [r2, #0]
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	e000edfc 	.word	0xe000edfc
 8000458:	e0000e00 	.word	0xe0000e00

0800045c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	e00a      	b.n	8000484 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800046e:	f3af 8000 	nop.w
 8000472:	4601      	mov	r1, r0
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	60ba      	str	r2, [r7, #8]
 800047a:	b2ca      	uxtb	r2, r1
 800047c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	3301      	adds	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	697a      	ldr	r2, [r7, #20]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	dbf0      	blt.n	800046e <_read+0x12>
	}

return len;
 800048c:	687b      	ldr	r3, [r7, #4]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	b086      	sub	sp, #24
 800049a:	af00      	add	r7, sp, #0
 800049c:	60f8      	str	r0, [r7, #12]
 800049e:	60b9      	str	r1, [r7, #8]
 80004a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
 80004a6:	e009      	b.n	80004bc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	1c5a      	adds	r2, r3, #1
 80004ac:	60ba      	str	r2, [r7, #8]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff ffad 	bl	8000410 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	3301      	adds	r3, #1
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	697a      	ldr	r2, [r7, #20]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	dbf1      	blt.n	80004a8 <_write+0x12>
	}
	return len;
 80004c4:	687b      	ldr	r3, [r7, #4]
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3718      	adds	r7, #24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <_close>:

int _close(int file)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
	return -1;
 80004d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004da:	4618      	mov	r0, r3
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004f4:	605a      	str	r2, [r3, #4]
	return 0;
 80004f6:	2300      	movs	r3, #0
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <_isatty>:

int _isatty(int file)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
	return 1;
 800050a:	2301      	movs	r3, #1
}
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr

08000516 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000516:	b480      	push	{r7}
 8000518:	b085      	sub	sp, #20
 800051a:	af00      	add	r7, sp, #0
 800051c:	60f8      	str	r0, [r7, #12]
 800051e:	60b9      	str	r1, [r7, #8]
 8000520:	607a      	str	r2, [r7, #4]
	return 0;
 8000522:	2300      	movs	r3, #0
}
 8000524:	4618      	mov	r0, r3
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
	...

08000530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000538:	4a14      	ldr	r2, [pc, #80]	; (800058c <_sbrk+0x5c>)
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <_sbrk+0x60>)
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <_sbrk+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d102      	bne.n	8000552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <_sbrk+0x64>)
 800054e:	4a12      	ldr	r2, [pc, #72]	; (8000598 <_sbrk+0x68>)
 8000550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <_sbrk+0x64>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	693a      	ldr	r2, [r7, #16]
 800055c:	429a      	cmp	r2, r3
 800055e:	d207      	bcs.n	8000570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000560:	f000 fddc 	bl	800111c <__errno>
 8000564:	4603      	mov	r3, r0
 8000566:	220c      	movs	r2, #12
 8000568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	e009      	b.n	8000584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <_sbrk+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <_sbrk+0x64>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <_sbrk+0x64>)
 8000580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20020000 	.word	0x20020000
 8000590:	00000400 	.word	0x00000400
 8000594:	20000094 	.word	0x20000094
 8000598:	200000f8 	.word	0x200000f8

0800059c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
    ldr   r0, =_estack
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800059e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a6:	490d      	ldr	r1, [pc, #52]	; (80005dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <LoopForever+0xe>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005bc:	4c0a      	ldr	r4, [pc, #40]	; (80005e8 <LoopForever+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ca:	f000 fdad 	bl	8001128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ce:	f7ff fecb 	bl	8000368 <main>

080005d2 <LoopForever>:

LoopForever:
    b LoopForever
 80005d2:	e7fe      	b.n	80005d2 <LoopForever>
    ldr   r0, =_estack
 80005d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80005e0:	080020e8 	.word	0x080020e8
  ldr r2, =_sbss
 80005e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80005e8:	200000f8 	.word	0x200000f8

080005ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC_IRQHandler>
	...

080005f0 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t*pGPIOx, uint8_t EnorDi)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d162      	bne.n	80006c8 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a64      	ldr	r2, [pc, #400]	; (8000798 <GPIO_PeriClockControl+0x1a8>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800060a:	4b64      	ldr	r3, [pc, #400]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a63      	ldr	r2, [pc, #396]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000616:	e0b9      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a61      	ldr	r2, [pc, #388]	; (80007a0 <GPIO_PeriClockControl+0x1b0>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000620:	4b5e      	ldr	r3, [pc, #376]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	4a5d      	ldr	r2, [pc, #372]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000626:	f043 0302 	orr.w	r3, r3, #2
 800062a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062c:	e0ae      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a5c      	ldr	r2, [pc, #368]	; (80007a4 <GPIO_PeriClockControl+0x1b4>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000636:	4b59      	ldr	r3, [pc, #356]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a58      	ldr	r2, [pc, #352]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000642:	e0a3      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a58      	ldr	r2, [pc, #352]	; (80007a8 <GPIO_PeriClockControl+0x1b8>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d106      	bne.n	800065a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800064c:	4b53      	ldr	r3, [pc, #332]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	4a52      	ldr	r2, [pc, #328]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000658:	e098      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a53      	ldr	r2, [pc, #332]	; (80007ac <GPIO_PeriClockControl+0x1bc>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d106      	bne.n	8000670 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000662:	4b4e      	ldr	r3, [pc, #312]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a4d      	ldr	r2, [pc, #308]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000668:	f043 0310 	orr.w	r3, r3, #16
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800066e:	e08d      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a4f      	ldr	r2, [pc, #316]	; (80007b0 <GPIO_PeriClockControl+0x1c0>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d106      	bne.n	8000686 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000678:	4b48      	ldr	r3, [pc, #288]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	4a47      	ldr	r2, [pc, #284]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 800067e:	f043 0320 	orr.w	r3, r3, #32
 8000682:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000684:	e082      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a4a      	ldr	r2, [pc, #296]	; (80007b4 <GPIO_PeriClockControl+0x1c4>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d106      	bne.n	800069c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800068e:	4b43      	ldr	r3, [pc, #268]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a42      	ldr	r2, [pc, #264]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
}
 800069a:	e077      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a46      	ldr	r2, [pc, #280]	; (80007b8 <GPIO_PeriClockControl+0x1c8>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d106      	bne.n	80006b2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80006a4:	4b3d      	ldr	r3, [pc, #244]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	4a3c      	ldr	r2, [pc, #240]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 80006aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006b0:	e06c      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a41      	ldr	r2, [pc, #260]	; (80007bc <GPIO_PeriClockControl+0x1cc>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d168      	bne.n	800078c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80006ba:	4b38      	ldr	r3, [pc, #224]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a37      	ldr	r2, [pc, #220]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 80006c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006c6:	e061      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a33      	ldr	r2, [pc, #204]	; (8000798 <GPIO_PeriClockControl+0x1a8>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d106      	bne.n	80006de <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80006d0:	4b32      	ldr	r3, [pc, #200]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	4a31      	ldr	r2, [pc, #196]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 80006d6:	f023 0301 	bic.w	r3, r3, #1
 80006da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006dc:	e056      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a2f      	ldr	r2, [pc, #188]	; (80007a0 <GPIO_PeriClockControl+0x1b0>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d106      	bne.n	80006f4 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a2c      	ldr	r2, [pc, #176]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 80006ec:	f023 0302 	bic.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006f2:	e04b      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a2b      	ldr	r2, [pc, #172]	; (80007a4 <GPIO_PeriClockControl+0x1b4>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d106      	bne.n	800070a <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000700:	4a26      	ldr	r2, [pc, #152]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000702:	f023 0304 	bic.w	r3, r3, #4
 8000706:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000708:	e040      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a26      	ldr	r2, [pc, #152]	; (80007a8 <GPIO_PeriClockControl+0x1b8>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d106      	bne.n	8000720 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000718:	f023 0308 	bic.w	r3, r3, #8
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800071e:	e035      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a22      	ldr	r2, [pc, #136]	; (80007ac <GPIO_PeriClockControl+0x1bc>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d106      	bne.n	8000736 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000728:	4b1c      	ldr	r3, [pc, #112]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 800072a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072c:	4a1b      	ldr	r2, [pc, #108]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 800072e:	f023 0310 	bic.w	r3, r3, #16
 8000732:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000734:	e02a      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a1d      	ldr	r2, [pc, #116]	; (80007b0 <GPIO_PeriClockControl+0x1c0>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d106      	bne.n	800074c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000744:	f023 0320 	bic.w	r3, r3, #32
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
}
 800074a:	e01f      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <GPIO_PeriClockControl+0x1c4>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d106      	bne.n	8000762 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000758:	4a10      	ldr	r2, [pc, #64]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 800075a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800075e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000760:	e014      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <GPIO_PeriClockControl+0x1c8>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d106      	bne.n	8000778 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a0b      	ldr	r2, [pc, #44]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000776:	e009      	b.n	800078c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <GPIO_PeriClockControl+0x1cc>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d105      	bne.n	800078c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000784:	4a05      	ldr	r2, [pc, #20]	; (800079c <GPIO_PeriClockControl+0x1ac>)
 8000786:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800078a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40020000 	.word	0x40020000
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020400 	.word	0x40020400
 80007a4:	40020800 	.word	0x40020800
 80007a8:	40020c00 	.word	0x40020c00
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40021400 	.word	0x40021400
 80007b4:	40021800 	.word	0x40021800
 80007b8:	40021c00 	.word	0x40021c00
 80007bc:	40022000 	.word	0x40022000

080007c0 <GPIO_Init>:
//		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
//	}
//}

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2101      	movs	r1, #1
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff0c 	bl	80005f0 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	795b      	ldrb	r3, [r3, #5]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d820      	bhi.n	8000822 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	795b      	ldrb	r3, [r3, #5]
 80007e4:	461a      	mov	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	791b      	ldrb	r3, [r3, #4]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	2103      	movs	r1, #3
 8000800:	fa01 f303 	lsl.w	r3, r1, r3
 8000804:	43db      	mvns	r3, r3
 8000806:	4619      	mov	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	400a      	ands	r2, r1
 800080e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	6819      	ldr	r1, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	697a      	ldr	r2, [r7, #20]
 800081c:	430a      	orrs	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	e0c1      	b.n	80009a6 <GPIO_Init+0x1e6>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	795b      	ldrb	r3, [r3, #5]
 8000826:	2b04      	cmp	r3, #4
 8000828:	d117      	bne.n	800085a <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800082a:	4b47      	ldr	r3, [pc, #284]	; (8000948 <GPIO_Init+0x188>)
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	7912      	ldrb	r2, [r2, #4]
 8000832:	4611      	mov	r1, r2
 8000834:	2201      	movs	r2, #1
 8000836:	408a      	lsls	r2, r1
 8000838:	4611      	mov	r1, r2
 800083a:	4a43      	ldr	r2, [pc, #268]	; (8000948 <GPIO_Init+0x188>)
 800083c:	430b      	orrs	r3, r1
 800083e:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000840:	4b41      	ldr	r3, [pc, #260]	; (8000948 <GPIO_Init+0x188>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	7912      	ldrb	r2, [r2, #4]
 8000848:	4611      	mov	r1, r2
 800084a:	2201      	movs	r2, #1
 800084c:	408a      	lsls	r2, r1
 800084e:	43d2      	mvns	r2, r2
 8000850:	4611      	mov	r1, r2
 8000852:	4a3d      	ldr	r2, [pc, #244]	; (8000948 <GPIO_Init+0x188>)
 8000854:	400b      	ands	r3, r1
 8000856:	6093      	str	r3, [r2, #8]
 8000858:	e035      	b.n	80008c6 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	795b      	ldrb	r3, [r3, #5]
 800085e:	2b05      	cmp	r3, #5
 8000860:	d117      	bne.n	8000892 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000862:	4b39      	ldr	r3, [pc, #228]	; (8000948 <GPIO_Init+0x188>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	7912      	ldrb	r2, [r2, #4]
 800086a:	4611      	mov	r1, r2
 800086c:	2201      	movs	r2, #1
 800086e:	408a      	lsls	r2, r1
 8000870:	4611      	mov	r1, r2
 8000872:	4a35      	ldr	r2, [pc, #212]	; (8000948 <GPIO_Init+0x188>)
 8000874:	430b      	orrs	r3, r1
 8000876:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000878:	4b33      	ldr	r3, [pc, #204]	; (8000948 <GPIO_Init+0x188>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	7912      	ldrb	r2, [r2, #4]
 8000880:	4611      	mov	r1, r2
 8000882:	2201      	movs	r2, #1
 8000884:	408a      	lsls	r2, r1
 8000886:	43d2      	mvns	r2, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <GPIO_Init+0x188>)
 800088c:	400b      	ands	r3, r1
 800088e:	60d3      	str	r3, [r2, #12]
 8000890:	e019      	b.n	80008c6 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	795b      	ldrb	r3, [r3, #5]
 8000896:	2b06      	cmp	r3, #6
 8000898:	d115      	bne.n	80008c6 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800089a:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <GPIO_Init+0x188>)
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	7912      	ldrb	r2, [r2, #4]
 80008a2:	4611      	mov	r1, r2
 80008a4:	2201      	movs	r2, #1
 80008a6:	408a      	lsls	r2, r1
 80008a8:	4611      	mov	r1, r2
 80008aa:	4a27      	ldr	r2, [pc, #156]	; (8000948 <GPIO_Init+0x188>)
 80008ac:	430b      	orrs	r3, r1
 80008ae:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008b0:	4b25      	ldr	r3, [pc, #148]	; (8000948 <GPIO_Init+0x188>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	7912      	ldrb	r2, [r2, #4]
 80008b8:	4611      	mov	r1, r2
 80008ba:	2201      	movs	r2, #1
 80008bc:	408a      	lsls	r2, r1
 80008be:	4611      	mov	r1, r2
 80008c0:	4a21      	ldr	r2, [pc, #132]	; (8000948 <GPIO_Init+0x188>)
 80008c2:	430b      	orrs	r3, r1
 80008c4:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	791b      	ldrb	r3, [r3, #4]
 80008d2:	f003 0303 	and.w	r3, r3, #3
 80008d6:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <GPIO_Init+0x18c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d044      	beq.n	800096c <GPIO_Init+0x1ac>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a1a      	ldr	r2, [pc, #104]	; (8000950 <GPIO_Init+0x190>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d02b      	beq.n	8000944 <GPIO_Init+0x184>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a18      	ldr	r2, [pc, #96]	; (8000954 <GPIO_Init+0x194>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d024      	beq.n	8000940 <GPIO_Init+0x180>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a17      	ldr	r2, [pc, #92]	; (8000958 <GPIO_Init+0x198>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d01d      	beq.n	800093c <GPIO_Init+0x17c>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a15      	ldr	r2, [pc, #84]	; (800095c <GPIO_Init+0x19c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d016      	beq.n	8000938 <GPIO_Init+0x178>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <GPIO_Init+0x1a0>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d00f      	beq.n	8000934 <GPIO_Init+0x174>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a12      	ldr	r2, [pc, #72]	; (8000964 <GPIO_Init+0x1a4>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d008      	beq.n	8000930 <GPIO_Init+0x170>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a11      	ldr	r2, [pc, #68]	; (8000968 <GPIO_Init+0x1a8>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d101      	bne.n	800092c <GPIO_Init+0x16c>
 8000928:	2307      	movs	r3, #7
 800092a:	e020      	b.n	800096e <GPIO_Init+0x1ae>
 800092c:	2300      	movs	r3, #0
 800092e:	e01e      	b.n	800096e <GPIO_Init+0x1ae>
 8000930:	2306      	movs	r3, #6
 8000932:	e01c      	b.n	800096e <GPIO_Init+0x1ae>
 8000934:	2305      	movs	r3, #5
 8000936:	e01a      	b.n	800096e <GPIO_Init+0x1ae>
 8000938:	2304      	movs	r3, #4
 800093a:	e018      	b.n	800096e <GPIO_Init+0x1ae>
 800093c:	2303      	movs	r3, #3
 800093e:	e016      	b.n	800096e <GPIO_Init+0x1ae>
 8000940:	2302      	movs	r3, #2
 8000942:	e014      	b.n	800096e <GPIO_Init+0x1ae>
 8000944:	2301      	movs	r3, #1
 8000946:	e012      	b.n	800096e <GPIO_Init+0x1ae>
 8000948:	40013c00 	.word	0x40013c00
 800094c:	40020000 	.word	0x40020000
 8000950:	40020400 	.word	0x40020400
 8000954:	40020800 	.word	0x40020800
 8000958:	40020c00 	.word	0x40020c00
 800095c:	40021000 	.word	0x40021000
 8000960:	40021400 	.word	0x40021400
 8000964:	40021800 	.word	0x40021800
 8000968:	40021c00 	.word	0x40021c00
 800096c:	2300      	movs	r3, #0
 800096e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000970:	4b59      	ldr	r3, [pc, #356]	; (8000ad8 <GPIO_Init+0x318>)
 8000972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000974:	4a58      	ldr	r2, [pc, #352]	; (8000ad8 <GPIO_Init+0x318>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 800097c:	7c7a      	ldrb	r2, [r7, #17]
 800097e:	7cbb      	ldrb	r3, [r7, #18]
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	fa02 f103 	lsl.w	r1, r2, r3
 8000986:	4a55      	ldr	r2, [pc, #340]	; (8000adc <GPIO_Init+0x31c>)
 8000988:	7cfb      	ldrb	r3, [r7, #19]
 800098a:	3302      	adds	r3, #2
 800098c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000990:	4b53      	ldr	r3, [pc, #332]	; (8000ae0 <GPIO_Init+0x320>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	7912      	ldrb	r2, [r2, #4]
 8000998:	4611      	mov	r1, r2
 800099a:	2201      	movs	r2, #1
 800099c:	408a      	lsls	r2, r1
 800099e:	4611      	mov	r1, r2
 80009a0:	4a4f      	ldr	r2, [pc, #316]	; (8000ae0 <GPIO_Init+0x320>)
 80009a2:	430b      	orrs	r3, r1
 80009a4:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	799b      	ldrb	r3, [r3, #6]
 80009aa:	461a      	mov	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	689a      	ldr	r2, [r3, #8]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	791b      	ldrb	r3, [r3, #4]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	2103      	movs	r1, #3
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	4619      	mov	r1, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	400a      	ands	r2, r1
 80009d4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6899      	ldr	r1, [r3, #8]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	430a      	orrs	r2, r1
 80009e4:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	79db      	ldrb	r3, [r3, #7]
 80009ea:	461a      	mov	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	791b      	ldrb	r3, [r3, #4]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	68da      	ldr	r2, [r3, #12]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	791b      	ldrb	r3, [r3, #4]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	2103      	movs	r1, #3
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	400a      	ands	r2, r1
 8000a14:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	68d9      	ldr	r1, [r3, #12]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	430a      	orrs	r2, r1
 8000a24:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinoType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7a1b      	ldrb	r3, [r3, #8]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	791b      	ldrb	r3, [r3, #4]
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	791b      	ldrb	r3, [r3, #4]
 8000a40:	4619      	mov	r1, r3
 8000a42:	2301      	movs	r3, #1
 8000a44:	408b      	lsls	r3, r1
 8000a46:	43db      	mvns	r3, r3
 8000a48:	4619      	mov	r1, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	400a      	ands	r2, r1
 8000a50:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6859      	ldr	r1, [r3, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	795b      	ldrb	r3, [r3, #5]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d131      	bne.n	8000ace <GPIO_Init+0x30e>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	791b      	ldrb	r3, [r3, #4]
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	791b      	ldrb	r3, [r3, #4]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	7c3a      	ldrb	r2, [r7, #16]
 8000a82:	3208      	adds	r2, #8
 8000a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	220f      	movs	r2, #15
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	4618      	mov	r0, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	7c3a      	ldrb	r2, [r7, #16]
 8000a9c:	4001      	ands	r1, r0
 8000a9e:	3208      	adds	r2, #8
 8000aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	7c3a      	ldrb	r2, [r7, #16]
 8000aaa:	3208      	adds	r2, #8
 8000aac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7a5b      	ldrb	r3, [r3, #9]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	7c3a      	ldrb	r2, [r7, #16]
 8000ac6:	4301      	orrs	r1, r0
 8000ac8:	3208      	adds	r2, #8
 8000aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000ace:	bf00      	nop
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40013800 	.word	0x40013800
 8000ae0:	40013c00 	.word	0x40013c00

08000ae4 <GPIO_ReadFromInputPin>:

/*
 * Data read & write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (pGPIOx->IDR >> PinNumber) & 0x00000001;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	691a      	ldr	r2, [r3, #16]
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	fa22 f303 	lsr.w	r3, r2, r3
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	73fb      	strb	r3, [r7, #15]
	return value;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	601a      	str	r2, [r3, #0]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000b3e:	78fb      	ldrb	r3, [r7, #3]
 8000b40:	f023 0301 	bic.w	r3, r3, #1
 8000b44:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000b46:	78fa      	ldrb	r2, [r7, #3]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	611a      	str	r2, [r3, #16]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000b62:	78fb      	ldrb	r3, [r7, #3]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000b68:	78fb      	ldrb	r3, [r7, #3]
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000b70:	78fa      	ldrb	r2, [r7, #3]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	611a      	str	r2, [r3, #16]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d01f      	beq.n	8000bd6 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7f1b      	ldrb	r3, [r3, #28]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d112      	bne.n	8000bc4 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a1b      	ldr	r3, [r3, #32]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d11f      	bne.n	8000be6 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fa39 	bl	8001024 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 8000bc2:	e010      	b.n	8000be6 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	60fb      	str	r3, [r7, #12]
}
 8000bd4:	e007      	b.n	8000be6 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	60fb      	str	r3, [r7, #12]
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	601a      	str	r2, [r3, #0]
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <I2C_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d106      	bne.n	8000c2c <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f043 0201 	orr.w	r2, r3, #1
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000c2a:	e005      	b.n	8000c38 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f023 0201 	bic.w	r2, r3, #1
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	601a      	str	r2, [r3, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
	...

08000c44 <I2C_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d11f      	bne.n	8000c96 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <I2C_PeriClockControl+0x5c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d106      	bne.n	8000c6c <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <I2C_PeriClockControl+0x60>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <I2C_PeriClockControl+0x60>)
 8000c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
	else
	{
		//TODO
	}

}
 8000c6a:	e014      	b.n	8000c96 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <I2C_PeriClockControl+0x64>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d106      	bne.n	8000c82 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <I2C_PeriClockControl+0x60>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <I2C_PeriClockControl+0x60>)
 8000c7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c7e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c80:	e009      	b.n	8000c96 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a09      	ldr	r2, [pc, #36]	; (8000cac <I2C_PeriClockControl+0x68>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d105      	bne.n	8000c96 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <I2C_PeriClockControl+0x60>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <I2C_PeriClockControl+0x60>)
 8000c90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40005800 	.word	0x40005800
 8000cac:	40005c00 	.word	0x40005c00

08000cb0 <I2C_Init>:
 * @return            -
 *
 * @Note              -
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ffbe 	bl	8000c44 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7a5b      	ldrb	r3, [r3, #9]
 8000ccc:	029b      	lsls	r3, r3, #10
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000ce2:	f000 f9bb 	bl	800105c <RCC_GetPCLK1Value>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4a47      	ldr	r2, [pc, #284]	; (8000e08 <I2C_Init+0x158>)
 8000cea:	fba2 2303 	umull	r2, r3, r2, r3
 8000cee:	0c9b      	lsrs	r3, r3, #18
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d00:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	7a1b      	ldrb	r3, [r3, #8]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4a36      	ldr	r2, [pc, #216]	; (8000e0c <I2C_Init+0x15c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d80f      	bhi.n	8000d56 <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000d36:	f000 f991 	bl	800105c <RCC_GetPCLK1Value>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000d48:	897b      	ldrh	r3, [r7, #10]
 8000d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	e02d      	b.n	8000db2 <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d5c:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7a9b      	ldrb	r3, [r3, #10]
 8000d62:	039b      	lsls	r3, r3, #14
 8000d64:	461a      	mov	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7a9b      	ldrb	r3, [r3, #10]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10b      	bne.n	8000d8c <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000d74:	f000 f972 	bl	800105c <RCC_GetPCLK1Value>
 8000d78:	4601      	mov	r1, r0
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4413      	add	r3, r2
 8000d84:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d88:	817b      	strh	r3, [r7, #10]
 8000d8a:	e00c      	b.n	8000da6 <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000d8c:	f000 f966 	bl	800105c <RCC_GetPCLK1Value>
 8000d90:	4601      	mov	r1, r0
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009a      	lsls	r2, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000da4:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000da6:	897b      	ldrh	r3, [r7, #10]
 8000da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <I2C_Init+0x15c>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d809      	bhi.n	8000dd8 <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000dc4:	f000 f94a 	bl	800105c <RCC_GetPCLK1Value>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <I2C_Init+0x158>)
 8000dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd0:	0c9b      	lsrs	r3, r3, #18
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	e00d      	b.n	8000df4 <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000dd8:	f000 f940 	bl	800105c <RCC_GetPCLK1Value>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000de2:	fb02 f303 	mul.w	r3, r2, r3
 8000de6:	0a5b      	lsrs	r3, r3, #9
 8000de8:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <I2C_Init+0x160>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	09db      	lsrs	r3, r3, #7
 8000df0:	3301      	adds	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000dfe:	621a      	str	r2, [r3, #32]

}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	431bde83 	.word	0x431bde83
 8000e0c:	000186a0 	.word	0x000186a0
 8000e10:	00044b83 	.word	0x00044b83

08000e14 <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	695a      	ldr	r2, [r3, #20]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe5e 	bl	8000b0e <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000e52:	bf00      	nop
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ffda 	bl	8000e14 <I2C_GetFlagStatus>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f6      	beq.n	8000e54 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	78fa      	ldrb	r2, [r7, #3]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fe5c 	bl	8000b2c <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000e74:	bf00      	nop
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ffc9 	bl	8000e14 <I2C_GetFlagStatus>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f6      	beq.n	8000e76 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f7ff fe79 	bl	8000b80 <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8000e8e:	e014      	b.n	8000eba <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8000e90:	bf00      	nop
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2180      	movs	r1, #128	; 0x80
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ffbb 	bl	8000e14 <I2C_GetFlagStatus>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0f6      	beq.n	8000e92 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	781a      	ldrb	r2, [r3, #0]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
		Len--;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1e7      	bne.n	8000e90 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8000ec0:	bf00      	nop
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ffa3 	bl	8000e14 <I2C_GetFlagStatus>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f6      	beq.n	8000ec2 <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8000ed4:	bf00      	nop
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2104      	movs	r1, #4
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff99 	bl	8000e14 <I2C_GetFlagStatus>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0f6      	beq.n	8000ed6 <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8000ee8:	7e3b      	ldrb	r3, [r7, #24]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d104      	bne.n	8000ef8 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fe7b 	bl	8000bee <I2C_GenerateStopCondition>

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	460b      	mov	r3, r1
 8000f10:	71fb      	strb	r3, [r7, #7]
 8000f12:	4613      	mov	r3, r2
 8000f14:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fdf7 	bl	8000b0e <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000f20:	bf00      	nop
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2101      	movs	r1, #1
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff73 	bl	8000e14 <I2C_GetFlagStatus>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f6      	beq.n	8000f22 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	79ba      	ldrb	r2, [r7, #6]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fe0a 	bl	8000b56 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000f42:	bf00      	nop
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff62 	bl	8000e14 <I2C_GetFlagStatus>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f6      	beq.n	8000f44 <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len == 1)
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d121      	bne.n	8000fa0 <I2C_MasterReceiveData+0xa0>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f85e 	bl	8001024 <I2C_ManageAcking>


		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f7ff fe09 	bl	8000b80 <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8000f6e:	bf00      	nop
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2140      	movs	r1, #64	; 0x40
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff4c 	bl	8000e14 <I2C_GetFlagStatus>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f6      	beq.n	8000f70 <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 8000f82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d104      	bne.n	8000f94 <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fe2d 	bl	8000bee <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d930      	bls.n	8001008 <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f7ff fdea 	bl	8000b80 <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	e027      	b.n	8001002 <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8000fb2:	bf00      	nop
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2140      	movs	r1, #64	; 0x40
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ff2a 	bl	8000e14 <I2C_GetFlagStatus>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f6      	beq.n	8000fb4 <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d10e      	bne.n	8000fea <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f826 	bl	8001024 <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 8000fd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d104      	bne.n	8000fea <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fe02 	bl	8000bee <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1d4      	bne.n	8000fb2 <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	7a5b      	ldrb	r3, [r3, #9]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d105      	bne.n	800101c <I2C_MasterReceiveData+0x11c>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2101      	movs	r1, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f804 	bl	8001024 <I2C_ManageAcking>
	}

}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d106      	bne.n	8001044 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8001042:	e005      	b.n	8001050 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	601a      	str	r2, [r3, #0]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
	...

0800105c <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8001062:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <RCC_GetPCLK1Value+0x9c>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	b2db      	uxtb	r3, r3
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8001070:	7a7b      	ldrb	r3, [r7, #9]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d102      	bne.n	800107c <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <RCC_GetPCLK1Value+0xa0>)
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	e00b      	b.n	8001094 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 800107c:	7a7b      	ldrb	r3, [r7, #9]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d102      	bne.n	8001088 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <RCC_GetPCLK1Value+0xa4>)
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e005      	b.n	8001094 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8001088:	7a7b      	ldrb	r3, [r7, #9]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d102      	bne.n	8001094 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 800108e:	f000 f83d 	bl	800110c <RCC_GetPLLOutputClock>
 8001092:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <RCC_GetPCLK1Value+0x9c>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	b2db      	uxtb	r3, r3
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80010a2:	7a3b      	ldrb	r3, [r7, #8]
 80010a4:	2b07      	cmp	r3, #7
 80010a6:	d802      	bhi.n	80010ae <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	72fb      	strb	r3, [r7, #11]
 80010ac:	e005      	b.n	80010ba <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 80010ae:	7a3b      	ldrb	r3, [r7, #8]
 80010b0:	3b08      	subs	r3, #8
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <RCC_GetPCLK1Value+0xa8>)
 80010b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b8:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <RCC_GetPCLK1Value+0x9c>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	0a9b      	lsrs	r3, r3, #10
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 80010c8:	7a3b      	ldrb	r3, [r7, #8]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d802      	bhi.n	80010d4 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	72bb      	strb	r3, [r7, #10]
 80010d2:	e004      	b.n	80010de <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 80010d4:	7a3b      	ldrb	r3, [r7, #8]
 80010d6:	3b04      	subs	r3, #4
 80010d8:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <RCC_GetPCLK1Value+0xac>)
 80010da:	5cd3      	ldrb	r3, [r2, r3]
 80010dc:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80010e6:	7abb      	ldrb	r3, [r7, #10]
 80010e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ec:	607b      	str	r3, [r7, #4]

	return pclk1;
 80010ee:	687b      	ldr	r3, [r7, #4]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40023800 	.word	0x40023800
 80010fc:	00f42400 	.word	0x00f42400
 8001100:	007a1200 	.word	0x007a1200
 8001104:	20000000 	.word	0x20000000
 8001108:	20000010 	.word	0x20000010

0800110c <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

	return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
	...

0800111c <__errno>:
 800111c:	4b01      	ldr	r3, [pc, #4]	; (8001124 <__errno+0x8>)
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000014 	.word	0x20000014

08001128 <__libc_init_array>:
 8001128:	b570      	push	{r4, r5, r6, lr}
 800112a:	4d0d      	ldr	r5, [pc, #52]	; (8001160 <__libc_init_array+0x38>)
 800112c:	4c0d      	ldr	r4, [pc, #52]	; (8001164 <__libc_init_array+0x3c>)
 800112e:	1b64      	subs	r4, r4, r5
 8001130:	10a4      	asrs	r4, r4, #2
 8001132:	2600      	movs	r6, #0
 8001134:	42a6      	cmp	r6, r4
 8001136:	d109      	bne.n	800114c <__libc_init_array+0x24>
 8001138:	4d0b      	ldr	r5, [pc, #44]	; (8001168 <__libc_init_array+0x40>)
 800113a:	4c0c      	ldr	r4, [pc, #48]	; (800116c <__libc_init_array+0x44>)
 800113c:	f000 ff72 	bl	8002024 <_init>
 8001140:	1b64      	subs	r4, r4, r5
 8001142:	10a4      	asrs	r4, r4, #2
 8001144:	2600      	movs	r6, #0
 8001146:	42a6      	cmp	r6, r4
 8001148:	d105      	bne.n	8001156 <__libc_init_array+0x2e>
 800114a:	bd70      	pop	{r4, r5, r6, pc}
 800114c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001150:	4798      	blx	r3
 8001152:	3601      	adds	r6, #1
 8001154:	e7ee      	b.n	8001134 <__libc_init_array+0xc>
 8001156:	f855 3b04 	ldr.w	r3, [r5], #4
 800115a:	4798      	blx	r3
 800115c:	3601      	adds	r6, #1
 800115e:	e7f2      	b.n	8001146 <__libc_init_array+0x1e>
 8001160:	080020e0 	.word	0x080020e0
 8001164:	080020e0 	.word	0x080020e0
 8001168:	080020e0 	.word	0x080020e0
 800116c:	080020e4 	.word	0x080020e4

08001170 <memset>:
 8001170:	4402      	add	r2, r0
 8001172:	4603      	mov	r3, r0
 8001174:	4293      	cmp	r3, r2
 8001176:	d100      	bne.n	800117a <memset+0xa>
 8001178:	4770      	bx	lr
 800117a:	f803 1b01 	strb.w	r1, [r3], #1
 800117e:	e7f9      	b.n	8001174 <memset+0x4>

08001180 <iprintf>:
 8001180:	b40f      	push	{r0, r1, r2, r3}
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <iprintf+0x2c>)
 8001184:	b513      	push	{r0, r1, r4, lr}
 8001186:	681c      	ldr	r4, [r3, #0]
 8001188:	b124      	cbz	r4, 8001194 <iprintf+0x14>
 800118a:	69a3      	ldr	r3, [r4, #24]
 800118c:	b913      	cbnz	r3, 8001194 <iprintf+0x14>
 800118e:	4620      	mov	r0, r4
 8001190:	f000 f866 	bl	8001260 <__sinit>
 8001194:	ab05      	add	r3, sp, #20
 8001196:	9a04      	ldr	r2, [sp, #16]
 8001198:	68a1      	ldr	r1, [r4, #8]
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	4620      	mov	r0, r4
 800119e:	f000 f981 	bl	80014a4 <_vfiprintf_r>
 80011a2:	b002      	add	sp, #8
 80011a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011a8:	b004      	add	sp, #16
 80011aa:	4770      	bx	lr
 80011ac:	20000014 	.word	0x20000014

080011b0 <std>:
 80011b0:	2300      	movs	r3, #0
 80011b2:	b510      	push	{r4, lr}
 80011b4:	4604      	mov	r4, r0
 80011b6:	e9c0 3300 	strd	r3, r3, [r0]
 80011ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80011be:	6083      	str	r3, [r0, #8]
 80011c0:	8181      	strh	r1, [r0, #12]
 80011c2:	6643      	str	r3, [r0, #100]	; 0x64
 80011c4:	81c2      	strh	r2, [r0, #14]
 80011c6:	6183      	str	r3, [r0, #24]
 80011c8:	4619      	mov	r1, r3
 80011ca:	2208      	movs	r2, #8
 80011cc:	305c      	adds	r0, #92	; 0x5c
 80011ce:	f7ff ffcf 	bl	8001170 <memset>
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <std+0x38>)
 80011d4:	6263      	str	r3, [r4, #36]	; 0x24
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <std+0x3c>)
 80011d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <std+0x40>)
 80011dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <std+0x44>)
 80011e0:	6224      	str	r4, [r4, #32]
 80011e2:	6323      	str	r3, [r4, #48]	; 0x30
 80011e4:	bd10      	pop	{r4, pc}
 80011e6:	bf00      	nop
 80011e8:	08001a4d 	.word	0x08001a4d
 80011ec:	08001a6f 	.word	0x08001a6f
 80011f0:	08001aa7 	.word	0x08001aa7
 80011f4:	08001acb 	.word	0x08001acb

080011f8 <_cleanup_r>:
 80011f8:	4901      	ldr	r1, [pc, #4]	; (8001200 <_cleanup_r+0x8>)
 80011fa:	f000 b8af 	b.w	800135c <_fwalk_reent>
 80011fe:	bf00      	nop
 8001200:	08001da5 	.word	0x08001da5

08001204 <__sfmoreglue>:
 8001204:	b570      	push	{r4, r5, r6, lr}
 8001206:	1e4a      	subs	r2, r1, #1
 8001208:	2568      	movs	r5, #104	; 0x68
 800120a:	4355      	muls	r5, r2
 800120c:	460e      	mov	r6, r1
 800120e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001212:	f000 f8c5 	bl	80013a0 <_malloc_r>
 8001216:	4604      	mov	r4, r0
 8001218:	b140      	cbz	r0, 800122c <__sfmoreglue+0x28>
 800121a:	2100      	movs	r1, #0
 800121c:	e9c0 1600 	strd	r1, r6, [r0]
 8001220:	300c      	adds	r0, #12
 8001222:	60a0      	str	r0, [r4, #8]
 8001224:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001228:	f7ff ffa2 	bl	8001170 <memset>
 800122c:	4620      	mov	r0, r4
 800122e:	bd70      	pop	{r4, r5, r6, pc}

08001230 <__sfp_lock_acquire>:
 8001230:	4801      	ldr	r0, [pc, #4]	; (8001238 <__sfp_lock_acquire+0x8>)
 8001232:	f000 b8b3 	b.w	800139c <__retarget_lock_acquire_recursive>
 8001236:	bf00      	nop
 8001238:	200000f0 	.word	0x200000f0

0800123c <__sfp_lock_release>:
 800123c:	4801      	ldr	r0, [pc, #4]	; (8001244 <__sfp_lock_release+0x8>)
 800123e:	f000 b8ae 	b.w	800139e <__retarget_lock_release_recursive>
 8001242:	bf00      	nop
 8001244:	200000f0 	.word	0x200000f0

08001248 <__sinit_lock_acquire>:
 8001248:	4801      	ldr	r0, [pc, #4]	; (8001250 <__sinit_lock_acquire+0x8>)
 800124a:	f000 b8a7 	b.w	800139c <__retarget_lock_acquire_recursive>
 800124e:	bf00      	nop
 8001250:	200000eb 	.word	0x200000eb

08001254 <__sinit_lock_release>:
 8001254:	4801      	ldr	r0, [pc, #4]	; (800125c <__sinit_lock_release+0x8>)
 8001256:	f000 b8a2 	b.w	800139e <__retarget_lock_release_recursive>
 800125a:	bf00      	nop
 800125c:	200000eb 	.word	0x200000eb

08001260 <__sinit>:
 8001260:	b510      	push	{r4, lr}
 8001262:	4604      	mov	r4, r0
 8001264:	f7ff fff0 	bl	8001248 <__sinit_lock_acquire>
 8001268:	69a3      	ldr	r3, [r4, #24]
 800126a:	b11b      	cbz	r3, 8001274 <__sinit+0x14>
 800126c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001270:	f7ff bff0 	b.w	8001254 <__sinit_lock_release>
 8001274:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001278:	6523      	str	r3, [r4, #80]	; 0x50
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <__sinit+0x68>)
 800127c:	4a13      	ldr	r2, [pc, #76]	; (80012cc <__sinit+0x6c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	62a2      	str	r2, [r4, #40]	; 0x28
 8001282:	42a3      	cmp	r3, r4
 8001284:	bf04      	itt	eq
 8001286:	2301      	moveq	r3, #1
 8001288:	61a3      	streq	r3, [r4, #24]
 800128a:	4620      	mov	r0, r4
 800128c:	f000 f820 	bl	80012d0 <__sfp>
 8001290:	6060      	str	r0, [r4, #4]
 8001292:	4620      	mov	r0, r4
 8001294:	f000 f81c 	bl	80012d0 <__sfp>
 8001298:	60a0      	str	r0, [r4, #8]
 800129a:	4620      	mov	r0, r4
 800129c:	f000 f818 	bl	80012d0 <__sfp>
 80012a0:	2200      	movs	r2, #0
 80012a2:	60e0      	str	r0, [r4, #12]
 80012a4:	2104      	movs	r1, #4
 80012a6:	6860      	ldr	r0, [r4, #4]
 80012a8:	f7ff ff82 	bl	80011b0 <std>
 80012ac:	68a0      	ldr	r0, [r4, #8]
 80012ae:	2201      	movs	r2, #1
 80012b0:	2109      	movs	r1, #9
 80012b2:	f7ff ff7d 	bl	80011b0 <std>
 80012b6:	68e0      	ldr	r0, [r4, #12]
 80012b8:	2202      	movs	r2, #2
 80012ba:	2112      	movs	r1, #18
 80012bc:	f7ff ff78 	bl	80011b0 <std>
 80012c0:	2301      	movs	r3, #1
 80012c2:	61a3      	str	r3, [r4, #24]
 80012c4:	e7d2      	b.n	800126c <__sinit+0xc>
 80012c6:	bf00      	nop
 80012c8:	08002048 	.word	0x08002048
 80012cc:	080011f9 	.word	0x080011f9

080012d0 <__sfp>:
 80012d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d2:	4607      	mov	r7, r0
 80012d4:	f7ff ffac 	bl	8001230 <__sfp_lock_acquire>
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <__sfp+0x84>)
 80012da:	681e      	ldr	r6, [r3, #0]
 80012dc:	69b3      	ldr	r3, [r6, #24]
 80012de:	b913      	cbnz	r3, 80012e6 <__sfp+0x16>
 80012e0:	4630      	mov	r0, r6
 80012e2:	f7ff ffbd 	bl	8001260 <__sinit>
 80012e6:	3648      	adds	r6, #72	; 0x48
 80012e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	d503      	bpl.n	80012f8 <__sfp+0x28>
 80012f0:	6833      	ldr	r3, [r6, #0]
 80012f2:	b30b      	cbz	r3, 8001338 <__sfp+0x68>
 80012f4:	6836      	ldr	r6, [r6, #0]
 80012f6:	e7f7      	b.n	80012e8 <__sfp+0x18>
 80012f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80012fc:	b9d5      	cbnz	r5, 8001334 <__sfp+0x64>
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <__sfp+0x88>)
 8001300:	60e3      	str	r3, [r4, #12]
 8001302:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001306:	6665      	str	r5, [r4, #100]	; 0x64
 8001308:	f000 f847 	bl	800139a <__retarget_lock_init_recursive>
 800130c:	f7ff ff96 	bl	800123c <__sfp_lock_release>
 8001310:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001314:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001318:	6025      	str	r5, [r4, #0]
 800131a:	61a5      	str	r5, [r4, #24]
 800131c:	2208      	movs	r2, #8
 800131e:	4629      	mov	r1, r5
 8001320:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001324:	f7ff ff24 	bl	8001170 <memset>
 8001328:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800132c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001330:	4620      	mov	r0, r4
 8001332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001334:	3468      	adds	r4, #104	; 0x68
 8001336:	e7d9      	b.n	80012ec <__sfp+0x1c>
 8001338:	2104      	movs	r1, #4
 800133a:	4638      	mov	r0, r7
 800133c:	f7ff ff62 	bl	8001204 <__sfmoreglue>
 8001340:	4604      	mov	r4, r0
 8001342:	6030      	str	r0, [r6, #0]
 8001344:	2800      	cmp	r0, #0
 8001346:	d1d5      	bne.n	80012f4 <__sfp+0x24>
 8001348:	f7ff ff78 	bl	800123c <__sfp_lock_release>
 800134c:	230c      	movs	r3, #12
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	e7ee      	b.n	8001330 <__sfp+0x60>
 8001352:	bf00      	nop
 8001354:	08002048 	.word	0x08002048
 8001358:	ffff0001 	.word	0xffff0001

0800135c <_fwalk_reent>:
 800135c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001360:	4606      	mov	r6, r0
 8001362:	4688      	mov	r8, r1
 8001364:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001368:	2700      	movs	r7, #0
 800136a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800136e:	f1b9 0901 	subs.w	r9, r9, #1
 8001372:	d505      	bpl.n	8001380 <_fwalk_reent+0x24>
 8001374:	6824      	ldr	r4, [r4, #0]
 8001376:	2c00      	cmp	r4, #0
 8001378:	d1f7      	bne.n	800136a <_fwalk_reent+0xe>
 800137a:	4638      	mov	r0, r7
 800137c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001380:	89ab      	ldrh	r3, [r5, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d907      	bls.n	8001396 <_fwalk_reent+0x3a>
 8001386:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800138a:	3301      	adds	r3, #1
 800138c:	d003      	beq.n	8001396 <_fwalk_reent+0x3a>
 800138e:	4629      	mov	r1, r5
 8001390:	4630      	mov	r0, r6
 8001392:	47c0      	blx	r8
 8001394:	4307      	orrs	r7, r0
 8001396:	3568      	adds	r5, #104	; 0x68
 8001398:	e7e9      	b.n	800136e <_fwalk_reent+0x12>

0800139a <__retarget_lock_init_recursive>:
 800139a:	4770      	bx	lr

0800139c <__retarget_lock_acquire_recursive>:
 800139c:	4770      	bx	lr

0800139e <__retarget_lock_release_recursive>:
 800139e:	4770      	bx	lr

080013a0 <_malloc_r>:
 80013a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a2:	1ccd      	adds	r5, r1, #3
 80013a4:	f025 0503 	bic.w	r5, r5, #3
 80013a8:	3508      	adds	r5, #8
 80013aa:	2d0c      	cmp	r5, #12
 80013ac:	bf38      	it	cc
 80013ae:	250c      	movcc	r5, #12
 80013b0:	2d00      	cmp	r5, #0
 80013b2:	4606      	mov	r6, r0
 80013b4:	db01      	blt.n	80013ba <_malloc_r+0x1a>
 80013b6:	42a9      	cmp	r1, r5
 80013b8:	d903      	bls.n	80013c2 <_malloc_r+0x22>
 80013ba:	230c      	movs	r3, #12
 80013bc:	6033      	str	r3, [r6, #0]
 80013be:	2000      	movs	r0, #0
 80013c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013c2:	f000 fda1 	bl	8001f08 <__malloc_lock>
 80013c6:	4921      	ldr	r1, [pc, #132]	; (800144c <_malloc_r+0xac>)
 80013c8:	680a      	ldr	r2, [r1, #0]
 80013ca:	4614      	mov	r4, r2
 80013cc:	b99c      	cbnz	r4, 80013f6 <_malloc_r+0x56>
 80013ce:	4f20      	ldr	r7, [pc, #128]	; (8001450 <_malloc_r+0xb0>)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b923      	cbnz	r3, 80013de <_malloc_r+0x3e>
 80013d4:	4621      	mov	r1, r4
 80013d6:	4630      	mov	r0, r6
 80013d8:	f000 fb28 	bl	8001a2c <_sbrk_r>
 80013dc:	6038      	str	r0, [r7, #0]
 80013de:	4629      	mov	r1, r5
 80013e0:	4630      	mov	r0, r6
 80013e2:	f000 fb23 	bl	8001a2c <_sbrk_r>
 80013e6:	1c43      	adds	r3, r0, #1
 80013e8:	d123      	bne.n	8001432 <_malloc_r+0x92>
 80013ea:	230c      	movs	r3, #12
 80013ec:	6033      	str	r3, [r6, #0]
 80013ee:	4630      	mov	r0, r6
 80013f0:	f000 fd90 	bl	8001f14 <__malloc_unlock>
 80013f4:	e7e3      	b.n	80013be <_malloc_r+0x1e>
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	1b5b      	subs	r3, r3, r5
 80013fa:	d417      	bmi.n	800142c <_malloc_r+0x8c>
 80013fc:	2b0b      	cmp	r3, #11
 80013fe:	d903      	bls.n	8001408 <_malloc_r+0x68>
 8001400:	6023      	str	r3, [r4, #0]
 8001402:	441c      	add	r4, r3
 8001404:	6025      	str	r5, [r4, #0]
 8001406:	e004      	b.n	8001412 <_malloc_r+0x72>
 8001408:	6863      	ldr	r3, [r4, #4]
 800140a:	42a2      	cmp	r2, r4
 800140c:	bf0c      	ite	eq
 800140e:	600b      	streq	r3, [r1, #0]
 8001410:	6053      	strne	r3, [r2, #4]
 8001412:	4630      	mov	r0, r6
 8001414:	f000 fd7e 	bl	8001f14 <__malloc_unlock>
 8001418:	f104 000b 	add.w	r0, r4, #11
 800141c:	1d23      	adds	r3, r4, #4
 800141e:	f020 0007 	bic.w	r0, r0, #7
 8001422:	1ac2      	subs	r2, r0, r3
 8001424:	d0cc      	beq.n	80013c0 <_malloc_r+0x20>
 8001426:	1a1b      	subs	r3, r3, r0
 8001428:	50a3      	str	r3, [r4, r2]
 800142a:	e7c9      	b.n	80013c0 <_malloc_r+0x20>
 800142c:	4622      	mov	r2, r4
 800142e:	6864      	ldr	r4, [r4, #4]
 8001430:	e7cc      	b.n	80013cc <_malloc_r+0x2c>
 8001432:	1cc4      	adds	r4, r0, #3
 8001434:	f024 0403 	bic.w	r4, r4, #3
 8001438:	42a0      	cmp	r0, r4
 800143a:	d0e3      	beq.n	8001404 <_malloc_r+0x64>
 800143c:	1a21      	subs	r1, r4, r0
 800143e:	4630      	mov	r0, r6
 8001440:	f000 faf4 	bl	8001a2c <_sbrk_r>
 8001444:	3001      	adds	r0, #1
 8001446:	d1dd      	bne.n	8001404 <_malloc_r+0x64>
 8001448:	e7cf      	b.n	80013ea <_malloc_r+0x4a>
 800144a:	bf00      	nop
 800144c:	20000098 	.word	0x20000098
 8001450:	2000009c 	.word	0x2000009c

08001454 <__sfputc_r>:
 8001454:	6893      	ldr	r3, [r2, #8]
 8001456:	3b01      	subs	r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	b410      	push	{r4}
 800145c:	6093      	str	r3, [r2, #8]
 800145e:	da07      	bge.n	8001470 <__sfputc_r+0x1c>
 8001460:	6994      	ldr	r4, [r2, #24]
 8001462:	42a3      	cmp	r3, r4
 8001464:	db01      	blt.n	800146a <__sfputc_r+0x16>
 8001466:	290a      	cmp	r1, #10
 8001468:	d102      	bne.n	8001470 <__sfputc_r+0x1c>
 800146a:	bc10      	pop	{r4}
 800146c:	f000 bb32 	b.w	8001ad4 <__swbuf_r>
 8001470:	6813      	ldr	r3, [r2, #0]
 8001472:	1c58      	adds	r0, r3, #1
 8001474:	6010      	str	r0, [r2, #0]
 8001476:	7019      	strb	r1, [r3, #0]
 8001478:	4608      	mov	r0, r1
 800147a:	bc10      	pop	{r4}
 800147c:	4770      	bx	lr

0800147e <__sfputs_r>:
 800147e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001480:	4606      	mov	r6, r0
 8001482:	460f      	mov	r7, r1
 8001484:	4614      	mov	r4, r2
 8001486:	18d5      	adds	r5, r2, r3
 8001488:	42ac      	cmp	r4, r5
 800148a:	d101      	bne.n	8001490 <__sfputs_r+0x12>
 800148c:	2000      	movs	r0, #0
 800148e:	e007      	b.n	80014a0 <__sfputs_r+0x22>
 8001490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001494:	463a      	mov	r2, r7
 8001496:	4630      	mov	r0, r6
 8001498:	f7ff ffdc 	bl	8001454 <__sfputc_r>
 800149c:	1c43      	adds	r3, r0, #1
 800149e:	d1f3      	bne.n	8001488 <__sfputs_r+0xa>
 80014a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080014a4 <_vfiprintf_r>:
 80014a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014a8:	460d      	mov	r5, r1
 80014aa:	b09d      	sub	sp, #116	; 0x74
 80014ac:	4614      	mov	r4, r2
 80014ae:	4698      	mov	r8, r3
 80014b0:	4606      	mov	r6, r0
 80014b2:	b118      	cbz	r0, 80014bc <_vfiprintf_r+0x18>
 80014b4:	6983      	ldr	r3, [r0, #24]
 80014b6:	b90b      	cbnz	r3, 80014bc <_vfiprintf_r+0x18>
 80014b8:	f7ff fed2 	bl	8001260 <__sinit>
 80014bc:	4b89      	ldr	r3, [pc, #548]	; (80016e4 <_vfiprintf_r+0x240>)
 80014be:	429d      	cmp	r5, r3
 80014c0:	d11b      	bne.n	80014fa <_vfiprintf_r+0x56>
 80014c2:	6875      	ldr	r5, [r6, #4]
 80014c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014c6:	07d9      	lsls	r1, r3, #31
 80014c8:	d405      	bmi.n	80014d6 <_vfiprintf_r+0x32>
 80014ca:	89ab      	ldrh	r3, [r5, #12]
 80014cc:	059a      	lsls	r2, r3, #22
 80014ce:	d402      	bmi.n	80014d6 <_vfiprintf_r+0x32>
 80014d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80014d2:	f7ff ff63 	bl	800139c <__retarget_lock_acquire_recursive>
 80014d6:	89ab      	ldrh	r3, [r5, #12]
 80014d8:	071b      	lsls	r3, r3, #28
 80014da:	d501      	bpl.n	80014e0 <_vfiprintf_r+0x3c>
 80014dc:	692b      	ldr	r3, [r5, #16]
 80014de:	b9eb      	cbnz	r3, 800151c <_vfiprintf_r+0x78>
 80014e0:	4629      	mov	r1, r5
 80014e2:	4630      	mov	r0, r6
 80014e4:	f000 fb5a 	bl	8001b9c <__swsetup_r>
 80014e8:	b1c0      	cbz	r0, 800151c <_vfiprintf_r+0x78>
 80014ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014ec:	07dc      	lsls	r4, r3, #31
 80014ee:	d50e      	bpl.n	800150e <_vfiprintf_r+0x6a>
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	b01d      	add	sp, #116	; 0x74
 80014f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014fa:	4b7b      	ldr	r3, [pc, #492]	; (80016e8 <_vfiprintf_r+0x244>)
 80014fc:	429d      	cmp	r5, r3
 80014fe:	d101      	bne.n	8001504 <_vfiprintf_r+0x60>
 8001500:	68b5      	ldr	r5, [r6, #8]
 8001502:	e7df      	b.n	80014c4 <_vfiprintf_r+0x20>
 8001504:	4b79      	ldr	r3, [pc, #484]	; (80016ec <_vfiprintf_r+0x248>)
 8001506:	429d      	cmp	r5, r3
 8001508:	bf08      	it	eq
 800150a:	68f5      	ldreq	r5, [r6, #12]
 800150c:	e7da      	b.n	80014c4 <_vfiprintf_r+0x20>
 800150e:	89ab      	ldrh	r3, [r5, #12]
 8001510:	0598      	lsls	r0, r3, #22
 8001512:	d4ed      	bmi.n	80014f0 <_vfiprintf_r+0x4c>
 8001514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001516:	f7ff ff42 	bl	800139e <__retarget_lock_release_recursive>
 800151a:	e7e9      	b.n	80014f0 <_vfiprintf_r+0x4c>
 800151c:	2300      	movs	r3, #0
 800151e:	9309      	str	r3, [sp, #36]	; 0x24
 8001520:	2320      	movs	r3, #32
 8001522:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001526:	f8cd 800c 	str.w	r8, [sp, #12]
 800152a:	2330      	movs	r3, #48	; 0x30
 800152c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80016f0 <_vfiprintf_r+0x24c>
 8001530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001534:	f04f 0901 	mov.w	r9, #1
 8001538:	4623      	mov	r3, r4
 800153a:	469a      	mov	sl, r3
 800153c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001540:	b10a      	cbz	r2, 8001546 <_vfiprintf_r+0xa2>
 8001542:	2a25      	cmp	r2, #37	; 0x25
 8001544:	d1f9      	bne.n	800153a <_vfiprintf_r+0x96>
 8001546:	ebba 0b04 	subs.w	fp, sl, r4
 800154a:	d00b      	beq.n	8001564 <_vfiprintf_r+0xc0>
 800154c:	465b      	mov	r3, fp
 800154e:	4622      	mov	r2, r4
 8001550:	4629      	mov	r1, r5
 8001552:	4630      	mov	r0, r6
 8001554:	f7ff ff93 	bl	800147e <__sfputs_r>
 8001558:	3001      	adds	r0, #1
 800155a:	f000 80aa 	beq.w	80016b2 <_vfiprintf_r+0x20e>
 800155e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001560:	445a      	add	r2, fp
 8001562:	9209      	str	r2, [sp, #36]	; 0x24
 8001564:	f89a 3000 	ldrb.w	r3, [sl]
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80a2 	beq.w	80016b2 <_vfiprintf_r+0x20e>
 800156e:	2300      	movs	r3, #0
 8001570:	f04f 32ff 	mov.w	r2, #4294967295
 8001574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001578:	f10a 0a01 	add.w	sl, sl, #1
 800157c:	9304      	str	r3, [sp, #16]
 800157e:	9307      	str	r3, [sp, #28]
 8001580:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001584:	931a      	str	r3, [sp, #104]	; 0x68
 8001586:	4654      	mov	r4, sl
 8001588:	2205      	movs	r2, #5
 800158a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800158e:	4858      	ldr	r0, [pc, #352]	; (80016f0 <_vfiprintf_r+0x24c>)
 8001590:	f7fe fe2e 	bl	80001f0 <memchr>
 8001594:	9a04      	ldr	r2, [sp, #16]
 8001596:	b9d8      	cbnz	r0, 80015d0 <_vfiprintf_r+0x12c>
 8001598:	06d1      	lsls	r1, r2, #27
 800159a:	bf44      	itt	mi
 800159c:	2320      	movmi	r3, #32
 800159e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015a2:	0713      	lsls	r3, r2, #28
 80015a4:	bf44      	itt	mi
 80015a6:	232b      	movmi	r3, #43	; 0x2b
 80015a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015ac:	f89a 3000 	ldrb.w	r3, [sl]
 80015b0:	2b2a      	cmp	r3, #42	; 0x2a
 80015b2:	d015      	beq.n	80015e0 <_vfiprintf_r+0x13c>
 80015b4:	9a07      	ldr	r2, [sp, #28]
 80015b6:	4654      	mov	r4, sl
 80015b8:	2000      	movs	r0, #0
 80015ba:	f04f 0c0a 	mov.w	ip, #10
 80015be:	4621      	mov	r1, r4
 80015c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80015c4:	3b30      	subs	r3, #48	; 0x30
 80015c6:	2b09      	cmp	r3, #9
 80015c8:	d94e      	bls.n	8001668 <_vfiprintf_r+0x1c4>
 80015ca:	b1b0      	cbz	r0, 80015fa <_vfiprintf_r+0x156>
 80015cc:	9207      	str	r2, [sp, #28]
 80015ce:	e014      	b.n	80015fa <_vfiprintf_r+0x156>
 80015d0:	eba0 0308 	sub.w	r3, r0, r8
 80015d4:	fa09 f303 	lsl.w	r3, r9, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	9304      	str	r3, [sp, #16]
 80015dc:	46a2      	mov	sl, r4
 80015de:	e7d2      	b.n	8001586 <_vfiprintf_r+0xe2>
 80015e0:	9b03      	ldr	r3, [sp, #12]
 80015e2:	1d19      	adds	r1, r3, #4
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	9103      	str	r1, [sp, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bfbb      	ittet	lt
 80015ec:	425b      	neglt	r3, r3
 80015ee:	f042 0202 	orrlt.w	r2, r2, #2
 80015f2:	9307      	strge	r3, [sp, #28]
 80015f4:	9307      	strlt	r3, [sp, #28]
 80015f6:	bfb8      	it	lt
 80015f8:	9204      	strlt	r2, [sp, #16]
 80015fa:	7823      	ldrb	r3, [r4, #0]
 80015fc:	2b2e      	cmp	r3, #46	; 0x2e
 80015fe:	d10c      	bne.n	800161a <_vfiprintf_r+0x176>
 8001600:	7863      	ldrb	r3, [r4, #1]
 8001602:	2b2a      	cmp	r3, #42	; 0x2a
 8001604:	d135      	bne.n	8001672 <_vfiprintf_r+0x1ce>
 8001606:	9b03      	ldr	r3, [sp, #12]
 8001608:	1d1a      	adds	r2, r3, #4
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	9203      	str	r2, [sp, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	bfb8      	it	lt
 8001612:	f04f 33ff 	movlt.w	r3, #4294967295
 8001616:	3402      	adds	r4, #2
 8001618:	9305      	str	r3, [sp, #20]
 800161a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001700 <_vfiprintf_r+0x25c>
 800161e:	7821      	ldrb	r1, [r4, #0]
 8001620:	2203      	movs	r2, #3
 8001622:	4650      	mov	r0, sl
 8001624:	f7fe fde4 	bl	80001f0 <memchr>
 8001628:	b140      	cbz	r0, 800163c <_vfiprintf_r+0x198>
 800162a:	2340      	movs	r3, #64	; 0x40
 800162c:	eba0 000a 	sub.w	r0, r0, sl
 8001630:	fa03 f000 	lsl.w	r0, r3, r0
 8001634:	9b04      	ldr	r3, [sp, #16]
 8001636:	4303      	orrs	r3, r0
 8001638:	3401      	adds	r4, #1
 800163a:	9304      	str	r3, [sp, #16]
 800163c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001640:	482c      	ldr	r0, [pc, #176]	; (80016f4 <_vfiprintf_r+0x250>)
 8001642:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001646:	2206      	movs	r2, #6
 8001648:	f7fe fdd2 	bl	80001f0 <memchr>
 800164c:	2800      	cmp	r0, #0
 800164e:	d03f      	beq.n	80016d0 <_vfiprintf_r+0x22c>
 8001650:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <_vfiprintf_r+0x254>)
 8001652:	bb1b      	cbnz	r3, 800169c <_vfiprintf_r+0x1f8>
 8001654:	9b03      	ldr	r3, [sp, #12]
 8001656:	3307      	adds	r3, #7
 8001658:	f023 0307 	bic.w	r3, r3, #7
 800165c:	3308      	adds	r3, #8
 800165e:	9303      	str	r3, [sp, #12]
 8001660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001662:	443b      	add	r3, r7
 8001664:	9309      	str	r3, [sp, #36]	; 0x24
 8001666:	e767      	b.n	8001538 <_vfiprintf_r+0x94>
 8001668:	fb0c 3202 	mla	r2, ip, r2, r3
 800166c:	460c      	mov	r4, r1
 800166e:	2001      	movs	r0, #1
 8001670:	e7a5      	b.n	80015be <_vfiprintf_r+0x11a>
 8001672:	2300      	movs	r3, #0
 8001674:	3401      	adds	r4, #1
 8001676:	9305      	str	r3, [sp, #20]
 8001678:	4619      	mov	r1, r3
 800167a:	f04f 0c0a 	mov.w	ip, #10
 800167e:	4620      	mov	r0, r4
 8001680:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001684:	3a30      	subs	r2, #48	; 0x30
 8001686:	2a09      	cmp	r2, #9
 8001688:	d903      	bls.n	8001692 <_vfiprintf_r+0x1ee>
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0c5      	beq.n	800161a <_vfiprintf_r+0x176>
 800168e:	9105      	str	r1, [sp, #20]
 8001690:	e7c3      	b.n	800161a <_vfiprintf_r+0x176>
 8001692:	fb0c 2101 	mla	r1, ip, r1, r2
 8001696:	4604      	mov	r4, r0
 8001698:	2301      	movs	r3, #1
 800169a:	e7f0      	b.n	800167e <_vfiprintf_r+0x1da>
 800169c:	ab03      	add	r3, sp, #12
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	462a      	mov	r2, r5
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <_vfiprintf_r+0x258>)
 80016a4:	a904      	add	r1, sp, #16
 80016a6:	4630      	mov	r0, r6
 80016a8:	f3af 8000 	nop.w
 80016ac:	4607      	mov	r7, r0
 80016ae:	1c78      	adds	r0, r7, #1
 80016b0:	d1d6      	bne.n	8001660 <_vfiprintf_r+0x1bc>
 80016b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016b4:	07d9      	lsls	r1, r3, #31
 80016b6:	d405      	bmi.n	80016c4 <_vfiprintf_r+0x220>
 80016b8:	89ab      	ldrh	r3, [r5, #12]
 80016ba:	059a      	lsls	r2, r3, #22
 80016bc:	d402      	bmi.n	80016c4 <_vfiprintf_r+0x220>
 80016be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016c0:	f7ff fe6d 	bl	800139e <__retarget_lock_release_recursive>
 80016c4:	89ab      	ldrh	r3, [r5, #12]
 80016c6:	065b      	lsls	r3, r3, #25
 80016c8:	f53f af12 	bmi.w	80014f0 <_vfiprintf_r+0x4c>
 80016cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80016ce:	e711      	b.n	80014f4 <_vfiprintf_r+0x50>
 80016d0:	ab03      	add	r3, sp, #12
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	462a      	mov	r2, r5
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <_vfiprintf_r+0x258>)
 80016d8:	a904      	add	r1, sp, #16
 80016da:	4630      	mov	r0, r6
 80016dc:	f000 f880 	bl	80017e0 <_printf_i>
 80016e0:	e7e4      	b.n	80016ac <_vfiprintf_r+0x208>
 80016e2:	bf00      	nop
 80016e4:	0800206c 	.word	0x0800206c
 80016e8:	0800208c 	.word	0x0800208c
 80016ec:	0800204c 	.word	0x0800204c
 80016f0:	080020ac 	.word	0x080020ac
 80016f4:	080020b6 	.word	0x080020b6
 80016f8:	00000000 	.word	0x00000000
 80016fc:	0800147f 	.word	0x0800147f
 8001700:	080020b2 	.word	0x080020b2

08001704 <_printf_common>:
 8001704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001708:	4616      	mov	r6, r2
 800170a:	4699      	mov	r9, r3
 800170c:	688a      	ldr	r2, [r1, #8]
 800170e:	690b      	ldr	r3, [r1, #16]
 8001710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001714:	4293      	cmp	r3, r2
 8001716:	bfb8      	it	lt
 8001718:	4613      	movlt	r3, r2
 800171a:	6033      	str	r3, [r6, #0]
 800171c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001720:	4607      	mov	r7, r0
 8001722:	460c      	mov	r4, r1
 8001724:	b10a      	cbz	r2, 800172a <_printf_common+0x26>
 8001726:	3301      	adds	r3, #1
 8001728:	6033      	str	r3, [r6, #0]
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	0699      	lsls	r1, r3, #26
 800172e:	bf42      	ittt	mi
 8001730:	6833      	ldrmi	r3, [r6, #0]
 8001732:	3302      	addmi	r3, #2
 8001734:	6033      	strmi	r3, [r6, #0]
 8001736:	6825      	ldr	r5, [r4, #0]
 8001738:	f015 0506 	ands.w	r5, r5, #6
 800173c:	d106      	bne.n	800174c <_printf_common+0x48>
 800173e:	f104 0a19 	add.w	sl, r4, #25
 8001742:	68e3      	ldr	r3, [r4, #12]
 8001744:	6832      	ldr	r2, [r6, #0]
 8001746:	1a9b      	subs	r3, r3, r2
 8001748:	42ab      	cmp	r3, r5
 800174a:	dc26      	bgt.n	800179a <_printf_common+0x96>
 800174c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001750:	1e13      	subs	r3, r2, #0
 8001752:	6822      	ldr	r2, [r4, #0]
 8001754:	bf18      	it	ne
 8001756:	2301      	movne	r3, #1
 8001758:	0692      	lsls	r2, r2, #26
 800175a:	d42b      	bmi.n	80017b4 <_printf_common+0xb0>
 800175c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001760:	4649      	mov	r1, r9
 8001762:	4638      	mov	r0, r7
 8001764:	47c0      	blx	r8
 8001766:	3001      	adds	r0, #1
 8001768:	d01e      	beq.n	80017a8 <_printf_common+0xa4>
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	68e5      	ldr	r5, [r4, #12]
 800176e:	6832      	ldr	r2, [r6, #0]
 8001770:	f003 0306 	and.w	r3, r3, #6
 8001774:	2b04      	cmp	r3, #4
 8001776:	bf08      	it	eq
 8001778:	1aad      	subeq	r5, r5, r2
 800177a:	68a3      	ldr	r3, [r4, #8]
 800177c:	6922      	ldr	r2, [r4, #16]
 800177e:	bf0c      	ite	eq
 8001780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001784:	2500      	movne	r5, #0
 8001786:	4293      	cmp	r3, r2
 8001788:	bfc4      	itt	gt
 800178a:	1a9b      	subgt	r3, r3, r2
 800178c:	18ed      	addgt	r5, r5, r3
 800178e:	2600      	movs	r6, #0
 8001790:	341a      	adds	r4, #26
 8001792:	42b5      	cmp	r5, r6
 8001794:	d11a      	bne.n	80017cc <_printf_common+0xc8>
 8001796:	2000      	movs	r0, #0
 8001798:	e008      	b.n	80017ac <_printf_common+0xa8>
 800179a:	2301      	movs	r3, #1
 800179c:	4652      	mov	r2, sl
 800179e:	4649      	mov	r1, r9
 80017a0:	4638      	mov	r0, r7
 80017a2:	47c0      	blx	r8
 80017a4:	3001      	adds	r0, #1
 80017a6:	d103      	bne.n	80017b0 <_printf_common+0xac>
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017b0:	3501      	adds	r5, #1
 80017b2:	e7c6      	b.n	8001742 <_printf_common+0x3e>
 80017b4:	18e1      	adds	r1, r4, r3
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	2030      	movs	r0, #48	; 0x30
 80017ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80017be:	4422      	add	r2, r4
 80017c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80017c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80017c8:	3302      	adds	r3, #2
 80017ca:	e7c7      	b.n	800175c <_printf_common+0x58>
 80017cc:	2301      	movs	r3, #1
 80017ce:	4622      	mov	r2, r4
 80017d0:	4649      	mov	r1, r9
 80017d2:	4638      	mov	r0, r7
 80017d4:	47c0      	blx	r8
 80017d6:	3001      	adds	r0, #1
 80017d8:	d0e6      	beq.n	80017a8 <_printf_common+0xa4>
 80017da:	3601      	adds	r6, #1
 80017dc:	e7d9      	b.n	8001792 <_printf_common+0x8e>
	...

080017e0 <_printf_i>:
 80017e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80017e4:	460c      	mov	r4, r1
 80017e6:	4691      	mov	r9, r2
 80017e8:	7e27      	ldrb	r7, [r4, #24]
 80017ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80017ec:	2f78      	cmp	r7, #120	; 0x78
 80017ee:	4680      	mov	r8, r0
 80017f0:	469a      	mov	sl, r3
 80017f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80017f6:	d807      	bhi.n	8001808 <_printf_i+0x28>
 80017f8:	2f62      	cmp	r7, #98	; 0x62
 80017fa:	d80a      	bhi.n	8001812 <_printf_i+0x32>
 80017fc:	2f00      	cmp	r7, #0
 80017fe:	f000 80d8 	beq.w	80019b2 <_printf_i+0x1d2>
 8001802:	2f58      	cmp	r7, #88	; 0x58
 8001804:	f000 80a3 	beq.w	800194e <_printf_i+0x16e>
 8001808:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800180c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001810:	e03a      	b.n	8001888 <_printf_i+0xa8>
 8001812:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001816:	2b15      	cmp	r3, #21
 8001818:	d8f6      	bhi.n	8001808 <_printf_i+0x28>
 800181a:	a001      	add	r0, pc, #4	; (adr r0, 8001820 <_printf_i+0x40>)
 800181c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001820:	08001879 	.word	0x08001879
 8001824:	0800188d 	.word	0x0800188d
 8001828:	08001809 	.word	0x08001809
 800182c:	08001809 	.word	0x08001809
 8001830:	08001809 	.word	0x08001809
 8001834:	08001809 	.word	0x08001809
 8001838:	0800188d 	.word	0x0800188d
 800183c:	08001809 	.word	0x08001809
 8001840:	08001809 	.word	0x08001809
 8001844:	08001809 	.word	0x08001809
 8001848:	08001809 	.word	0x08001809
 800184c:	08001999 	.word	0x08001999
 8001850:	080018bd 	.word	0x080018bd
 8001854:	0800197b 	.word	0x0800197b
 8001858:	08001809 	.word	0x08001809
 800185c:	08001809 	.word	0x08001809
 8001860:	080019bb 	.word	0x080019bb
 8001864:	08001809 	.word	0x08001809
 8001868:	080018bd 	.word	0x080018bd
 800186c:	08001809 	.word	0x08001809
 8001870:	08001809 	.word	0x08001809
 8001874:	08001983 	.word	0x08001983
 8001878:	680b      	ldr	r3, [r1, #0]
 800187a:	1d1a      	adds	r2, r3, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	600a      	str	r2, [r1, #0]
 8001880:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001888:	2301      	movs	r3, #1
 800188a:	e0a3      	b.n	80019d4 <_printf_i+0x1f4>
 800188c:	6825      	ldr	r5, [r4, #0]
 800188e:	6808      	ldr	r0, [r1, #0]
 8001890:	062e      	lsls	r6, r5, #24
 8001892:	f100 0304 	add.w	r3, r0, #4
 8001896:	d50a      	bpl.n	80018ae <_printf_i+0xce>
 8001898:	6805      	ldr	r5, [r0, #0]
 800189a:	600b      	str	r3, [r1, #0]
 800189c:	2d00      	cmp	r5, #0
 800189e:	da03      	bge.n	80018a8 <_printf_i+0xc8>
 80018a0:	232d      	movs	r3, #45	; 0x2d
 80018a2:	426d      	negs	r5, r5
 80018a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018a8:	485e      	ldr	r0, [pc, #376]	; (8001a24 <_printf_i+0x244>)
 80018aa:	230a      	movs	r3, #10
 80018ac:	e019      	b.n	80018e2 <_printf_i+0x102>
 80018ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80018b2:	6805      	ldr	r5, [r0, #0]
 80018b4:	600b      	str	r3, [r1, #0]
 80018b6:	bf18      	it	ne
 80018b8:	b22d      	sxthne	r5, r5
 80018ba:	e7ef      	b.n	800189c <_printf_i+0xbc>
 80018bc:	680b      	ldr	r3, [r1, #0]
 80018be:	6825      	ldr	r5, [r4, #0]
 80018c0:	1d18      	adds	r0, r3, #4
 80018c2:	6008      	str	r0, [r1, #0]
 80018c4:	0628      	lsls	r0, r5, #24
 80018c6:	d501      	bpl.n	80018cc <_printf_i+0xec>
 80018c8:	681d      	ldr	r5, [r3, #0]
 80018ca:	e002      	b.n	80018d2 <_printf_i+0xf2>
 80018cc:	0669      	lsls	r1, r5, #25
 80018ce:	d5fb      	bpl.n	80018c8 <_printf_i+0xe8>
 80018d0:	881d      	ldrh	r5, [r3, #0]
 80018d2:	4854      	ldr	r0, [pc, #336]	; (8001a24 <_printf_i+0x244>)
 80018d4:	2f6f      	cmp	r7, #111	; 0x6f
 80018d6:	bf0c      	ite	eq
 80018d8:	2308      	moveq	r3, #8
 80018da:	230a      	movne	r3, #10
 80018dc:	2100      	movs	r1, #0
 80018de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80018e2:	6866      	ldr	r6, [r4, #4]
 80018e4:	60a6      	str	r6, [r4, #8]
 80018e6:	2e00      	cmp	r6, #0
 80018e8:	bfa2      	ittt	ge
 80018ea:	6821      	ldrge	r1, [r4, #0]
 80018ec:	f021 0104 	bicge.w	r1, r1, #4
 80018f0:	6021      	strge	r1, [r4, #0]
 80018f2:	b90d      	cbnz	r5, 80018f8 <_printf_i+0x118>
 80018f4:	2e00      	cmp	r6, #0
 80018f6:	d04d      	beq.n	8001994 <_printf_i+0x1b4>
 80018f8:	4616      	mov	r6, r2
 80018fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80018fe:	fb03 5711 	mls	r7, r3, r1, r5
 8001902:	5dc7      	ldrb	r7, [r0, r7]
 8001904:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001908:	462f      	mov	r7, r5
 800190a:	42bb      	cmp	r3, r7
 800190c:	460d      	mov	r5, r1
 800190e:	d9f4      	bls.n	80018fa <_printf_i+0x11a>
 8001910:	2b08      	cmp	r3, #8
 8001912:	d10b      	bne.n	800192c <_printf_i+0x14c>
 8001914:	6823      	ldr	r3, [r4, #0]
 8001916:	07df      	lsls	r7, r3, #31
 8001918:	d508      	bpl.n	800192c <_printf_i+0x14c>
 800191a:	6923      	ldr	r3, [r4, #16]
 800191c:	6861      	ldr	r1, [r4, #4]
 800191e:	4299      	cmp	r1, r3
 8001920:	bfde      	ittt	le
 8001922:	2330      	movle	r3, #48	; 0x30
 8001924:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001928:	f106 36ff 	addle.w	r6, r6, #4294967295
 800192c:	1b92      	subs	r2, r2, r6
 800192e:	6122      	str	r2, [r4, #16]
 8001930:	f8cd a000 	str.w	sl, [sp]
 8001934:	464b      	mov	r3, r9
 8001936:	aa03      	add	r2, sp, #12
 8001938:	4621      	mov	r1, r4
 800193a:	4640      	mov	r0, r8
 800193c:	f7ff fee2 	bl	8001704 <_printf_common>
 8001940:	3001      	adds	r0, #1
 8001942:	d14c      	bne.n	80019de <_printf_i+0x1fe>
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	b004      	add	sp, #16
 800194a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800194e:	4835      	ldr	r0, [pc, #212]	; (8001a24 <_printf_i+0x244>)
 8001950:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	680e      	ldr	r6, [r1, #0]
 8001958:	061f      	lsls	r7, r3, #24
 800195a:	f856 5b04 	ldr.w	r5, [r6], #4
 800195e:	600e      	str	r6, [r1, #0]
 8001960:	d514      	bpl.n	800198c <_printf_i+0x1ac>
 8001962:	07d9      	lsls	r1, r3, #31
 8001964:	bf44      	itt	mi
 8001966:	f043 0320 	orrmi.w	r3, r3, #32
 800196a:	6023      	strmi	r3, [r4, #0]
 800196c:	b91d      	cbnz	r5, 8001976 <_printf_i+0x196>
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	f023 0320 	bic.w	r3, r3, #32
 8001974:	6023      	str	r3, [r4, #0]
 8001976:	2310      	movs	r3, #16
 8001978:	e7b0      	b.n	80018dc <_printf_i+0xfc>
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	f043 0320 	orr.w	r3, r3, #32
 8001980:	6023      	str	r3, [r4, #0]
 8001982:	2378      	movs	r3, #120	; 0x78
 8001984:	4828      	ldr	r0, [pc, #160]	; (8001a28 <_printf_i+0x248>)
 8001986:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800198a:	e7e3      	b.n	8001954 <_printf_i+0x174>
 800198c:	065e      	lsls	r6, r3, #25
 800198e:	bf48      	it	mi
 8001990:	b2ad      	uxthmi	r5, r5
 8001992:	e7e6      	b.n	8001962 <_printf_i+0x182>
 8001994:	4616      	mov	r6, r2
 8001996:	e7bb      	b.n	8001910 <_printf_i+0x130>
 8001998:	680b      	ldr	r3, [r1, #0]
 800199a:	6826      	ldr	r6, [r4, #0]
 800199c:	6960      	ldr	r0, [r4, #20]
 800199e:	1d1d      	adds	r5, r3, #4
 80019a0:	600d      	str	r5, [r1, #0]
 80019a2:	0635      	lsls	r5, r6, #24
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	d501      	bpl.n	80019ac <_printf_i+0x1cc>
 80019a8:	6018      	str	r0, [r3, #0]
 80019aa:	e002      	b.n	80019b2 <_printf_i+0x1d2>
 80019ac:	0671      	lsls	r1, r6, #25
 80019ae:	d5fb      	bpl.n	80019a8 <_printf_i+0x1c8>
 80019b0:	8018      	strh	r0, [r3, #0]
 80019b2:	2300      	movs	r3, #0
 80019b4:	6123      	str	r3, [r4, #16]
 80019b6:	4616      	mov	r6, r2
 80019b8:	e7ba      	b.n	8001930 <_printf_i+0x150>
 80019ba:	680b      	ldr	r3, [r1, #0]
 80019bc:	1d1a      	adds	r2, r3, #4
 80019be:	600a      	str	r2, [r1, #0]
 80019c0:	681e      	ldr	r6, [r3, #0]
 80019c2:	6862      	ldr	r2, [r4, #4]
 80019c4:	2100      	movs	r1, #0
 80019c6:	4630      	mov	r0, r6
 80019c8:	f7fe fc12 	bl	80001f0 <memchr>
 80019cc:	b108      	cbz	r0, 80019d2 <_printf_i+0x1f2>
 80019ce:	1b80      	subs	r0, r0, r6
 80019d0:	6060      	str	r0, [r4, #4]
 80019d2:	6863      	ldr	r3, [r4, #4]
 80019d4:	6123      	str	r3, [r4, #16]
 80019d6:	2300      	movs	r3, #0
 80019d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019dc:	e7a8      	b.n	8001930 <_printf_i+0x150>
 80019de:	6923      	ldr	r3, [r4, #16]
 80019e0:	4632      	mov	r2, r6
 80019e2:	4649      	mov	r1, r9
 80019e4:	4640      	mov	r0, r8
 80019e6:	47d0      	blx	sl
 80019e8:	3001      	adds	r0, #1
 80019ea:	d0ab      	beq.n	8001944 <_printf_i+0x164>
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	079b      	lsls	r3, r3, #30
 80019f0:	d413      	bmi.n	8001a1a <_printf_i+0x23a>
 80019f2:	68e0      	ldr	r0, [r4, #12]
 80019f4:	9b03      	ldr	r3, [sp, #12]
 80019f6:	4298      	cmp	r0, r3
 80019f8:	bfb8      	it	lt
 80019fa:	4618      	movlt	r0, r3
 80019fc:	e7a4      	b.n	8001948 <_printf_i+0x168>
 80019fe:	2301      	movs	r3, #1
 8001a00:	4632      	mov	r2, r6
 8001a02:	4649      	mov	r1, r9
 8001a04:	4640      	mov	r0, r8
 8001a06:	47d0      	blx	sl
 8001a08:	3001      	adds	r0, #1
 8001a0a:	d09b      	beq.n	8001944 <_printf_i+0x164>
 8001a0c:	3501      	adds	r5, #1
 8001a0e:	68e3      	ldr	r3, [r4, #12]
 8001a10:	9903      	ldr	r1, [sp, #12]
 8001a12:	1a5b      	subs	r3, r3, r1
 8001a14:	42ab      	cmp	r3, r5
 8001a16:	dcf2      	bgt.n	80019fe <_printf_i+0x21e>
 8001a18:	e7eb      	b.n	80019f2 <_printf_i+0x212>
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	f104 0619 	add.w	r6, r4, #25
 8001a20:	e7f5      	b.n	8001a0e <_printf_i+0x22e>
 8001a22:	bf00      	nop
 8001a24:	080020bd 	.word	0x080020bd
 8001a28:	080020ce 	.word	0x080020ce

08001a2c <_sbrk_r>:
 8001a2c:	b538      	push	{r3, r4, r5, lr}
 8001a2e:	4d06      	ldr	r5, [pc, #24]	; (8001a48 <_sbrk_r+0x1c>)
 8001a30:	2300      	movs	r3, #0
 8001a32:	4604      	mov	r4, r0
 8001a34:	4608      	mov	r0, r1
 8001a36:	602b      	str	r3, [r5, #0]
 8001a38:	f7fe fd7a 	bl	8000530 <_sbrk>
 8001a3c:	1c43      	adds	r3, r0, #1
 8001a3e:	d102      	bne.n	8001a46 <_sbrk_r+0x1a>
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	b103      	cbz	r3, 8001a46 <_sbrk_r+0x1a>
 8001a44:	6023      	str	r3, [r4, #0]
 8001a46:	bd38      	pop	{r3, r4, r5, pc}
 8001a48:	200000f4 	.word	0x200000f4

08001a4c <__sread>:
 8001a4c:	b510      	push	{r4, lr}
 8001a4e:	460c      	mov	r4, r1
 8001a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a54:	f000 fab2 	bl	8001fbc <_read_r>
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	bfab      	itete	ge
 8001a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8001a60:	181b      	addge	r3, r3, r0
 8001a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a66:	bfac      	ite	ge
 8001a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a6a:	81a3      	strhlt	r3, [r4, #12]
 8001a6c:	bd10      	pop	{r4, pc}

08001a6e <__swrite>:
 8001a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a72:	461f      	mov	r7, r3
 8001a74:	898b      	ldrh	r3, [r1, #12]
 8001a76:	05db      	lsls	r3, r3, #23
 8001a78:	4605      	mov	r5, r0
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	4616      	mov	r6, r2
 8001a7e:	d505      	bpl.n	8001a8c <__swrite+0x1e>
 8001a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a84:	2302      	movs	r3, #2
 8001a86:	2200      	movs	r2, #0
 8001a88:	f000 f9c8 	bl	8001e1c <_lseek_r>
 8001a8c:	89a3      	ldrh	r3, [r4, #12]
 8001a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a96:	81a3      	strh	r3, [r4, #12]
 8001a98:	4632      	mov	r2, r6
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001aa2:	f000 b869 	b.w	8001b78 <_write_r>

08001aa6 <__sseek>:
 8001aa6:	b510      	push	{r4, lr}
 8001aa8:	460c      	mov	r4, r1
 8001aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aae:	f000 f9b5 	bl	8001e1c <_lseek_r>
 8001ab2:	1c43      	adds	r3, r0, #1
 8001ab4:	89a3      	ldrh	r3, [r4, #12]
 8001ab6:	bf15      	itete	ne
 8001ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8001aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ac2:	81a3      	strheq	r3, [r4, #12]
 8001ac4:	bf18      	it	ne
 8001ac6:	81a3      	strhne	r3, [r4, #12]
 8001ac8:	bd10      	pop	{r4, pc}

08001aca <__sclose>:
 8001aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ace:	f000 b8d3 	b.w	8001c78 <_close_r>
	...

08001ad4 <__swbuf_r>:
 8001ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ad6:	460e      	mov	r6, r1
 8001ad8:	4614      	mov	r4, r2
 8001ada:	4605      	mov	r5, r0
 8001adc:	b118      	cbz	r0, 8001ae6 <__swbuf_r+0x12>
 8001ade:	6983      	ldr	r3, [r0, #24]
 8001ae0:	b90b      	cbnz	r3, 8001ae6 <__swbuf_r+0x12>
 8001ae2:	f7ff fbbd 	bl	8001260 <__sinit>
 8001ae6:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <__swbuf_r+0x98>)
 8001ae8:	429c      	cmp	r4, r3
 8001aea:	d12b      	bne.n	8001b44 <__swbuf_r+0x70>
 8001aec:	686c      	ldr	r4, [r5, #4]
 8001aee:	69a3      	ldr	r3, [r4, #24]
 8001af0:	60a3      	str	r3, [r4, #8]
 8001af2:	89a3      	ldrh	r3, [r4, #12]
 8001af4:	071a      	lsls	r2, r3, #28
 8001af6:	d52f      	bpl.n	8001b58 <__swbuf_r+0x84>
 8001af8:	6923      	ldr	r3, [r4, #16]
 8001afa:	b36b      	cbz	r3, 8001b58 <__swbuf_r+0x84>
 8001afc:	6923      	ldr	r3, [r4, #16]
 8001afe:	6820      	ldr	r0, [r4, #0]
 8001b00:	1ac0      	subs	r0, r0, r3
 8001b02:	6963      	ldr	r3, [r4, #20]
 8001b04:	b2f6      	uxtb	r6, r6
 8001b06:	4283      	cmp	r3, r0
 8001b08:	4637      	mov	r7, r6
 8001b0a:	dc04      	bgt.n	8001b16 <__swbuf_r+0x42>
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	4628      	mov	r0, r5
 8001b10:	f000 f948 	bl	8001da4 <_fflush_r>
 8001b14:	bb30      	cbnz	r0, 8001b64 <__swbuf_r+0x90>
 8001b16:	68a3      	ldr	r3, [r4, #8]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	60a3      	str	r3, [r4, #8]
 8001b1c:	6823      	ldr	r3, [r4, #0]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	6022      	str	r2, [r4, #0]
 8001b22:	701e      	strb	r6, [r3, #0]
 8001b24:	6963      	ldr	r3, [r4, #20]
 8001b26:	3001      	adds	r0, #1
 8001b28:	4283      	cmp	r3, r0
 8001b2a:	d004      	beq.n	8001b36 <__swbuf_r+0x62>
 8001b2c:	89a3      	ldrh	r3, [r4, #12]
 8001b2e:	07db      	lsls	r3, r3, #31
 8001b30:	d506      	bpl.n	8001b40 <__swbuf_r+0x6c>
 8001b32:	2e0a      	cmp	r6, #10
 8001b34:	d104      	bne.n	8001b40 <__swbuf_r+0x6c>
 8001b36:	4621      	mov	r1, r4
 8001b38:	4628      	mov	r0, r5
 8001b3a:	f000 f933 	bl	8001da4 <_fflush_r>
 8001b3e:	b988      	cbnz	r0, 8001b64 <__swbuf_r+0x90>
 8001b40:	4638      	mov	r0, r7
 8001b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <__swbuf_r+0x9c>)
 8001b46:	429c      	cmp	r4, r3
 8001b48:	d101      	bne.n	8001b4e <__swbuf_r+0x7a>
 8001b4a:	68ac      	ldr	r4, [r5, #8]
 8001b4c:	e7cf      	b.n	8001aee <__swbuf_r+0x1a>
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <__swbuf_r+0xa0>)
 8001b50:	429c      	cmp	r4, r3
 8001b52:	bf08      	it	eq
 8001b54:	68ec      	ldreq	r4, [r5, #12]
 8001b56:	e7ca      	b.n	8001aee <__swbuf_r+0x1a>
 8001b58:	4621      	mov	r1, r4
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	f000 f81e 	bl	8001b9c <__swsetup_r>
 8001b60:	2800      	cmp	r0, #0
 8001b62:	d0cb      	beq.n	8001afc <__swbuf_r+0x28>
 8001b64:	f04f 37ff 	mov.w	r7, #4294967295
 8001b68:	e7ea      	b.n	8001b40 <__swbuf_r+0x6c>
 8001b6a:	bf00      	nop
 8001b6c:	0800206c 	.word	0x0800206c
 8001b70:	0800208c 	.word	0x0800208c
 8001b74:	0800204c 	.word	0x0800204c

08001b78 <_write_r>:
 8001b78:	b538      	push	{r3, r4, r5, lr}
 8001b7a:	4d07      	ldr	r5, [pc, #28]	; (8001b98 <_write_r+0x20>)
 8001b7c:	4604      	mov	r4, r0
 8001b7e:	4608      	mov	r0, r1
 8001b80:	4611      	mov	r1, r2
 8001b82:	2200      	movs	r2, #0
 8001b84:	602a      	str	r2, [r5, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	f7fe fc85 	bl	8000496 <_write>
 8001b8c:	1c43      	adds	r3, r0, #1
 8001b8e:	d102      	bne.n	8001b96 <_write_r+0x1e>
 8001b90:	682b      	ldr	r3, [r5, #0]
 8001b92:	b103      	cbz	r3, 8001b96 <_write_r+0x1e>
 8001b94:	6023      	str	r3, [r4, #0]
 8001b96:	bd38      	pop	{r3, r4, r5, pc}
 8001b98:	200000f4 	.word	0x200000f4

08001b9c <__swsetup_r>:
 8001b9c:	4b32      	ldr	r3, [pc, #200]	; (8001c68 <__swsetup_r+0xcc>)
 8001b9e:	b570      	push	{r4, r5, r6, lr}
 8001ba0:	681d      	ldr	r5, [r3, #0]
 8001ba2:	4606      	mov	r6, r0
 8001ba4:	460c      	mov	r4, r1
 8001ba6:	b125      	cbz	r5, 8001bb2 <__swsetup_r+0x16>
 8001ba8:	69ab      	ldr	r3, [r5, #24]
 8001baa:	b913      	cbnz	r3, 8001bb2 <__swsetup_r+0x16>
 8001bac:	4628      	mov	r0, r5
 8001bae:	f7ff fb57 	bl	8001260 <__sinit>
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <__swsetup_r+0xd0>)
 8001bb4:	429c      	cmp	r4, r3
 8001bb6:	d10f      	bne.n	8001bd8 <__swsetup_r+0x3c>
 8001bb8:	686c      	ldr	r4, [r5, #4]
 8001bba:	89a3      	ldrh	r3, [r4, #12]
 8001bbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bc0:	0719      	lsls	r1, r3, #28
 8001bc2:	d42c      	bmi.n	8001c1e <__swsetup_r+0x82>
 8001bc4:	06dd      	lsls	r5, r3, #27
 8001bc6:	d411      	bmi.n	8001bec <__swsetup_r+0x50>
 8001bc8:	2309      	movs	r3, #9
 8001bca:	6033      	str	r3, [r6, #0]
 8001bcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001bd0:	81a3      	strh	r3, [r4, #12]
 8001bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd6:	e03e      	b.n	8001c56 <__swsetup_r+0xba>
 8001bd8:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <__swsetup_r+0xd4>)
 8001bda:	429c      	cmp	r4, r3
 8001bdc:	d101      	bne.n	8001be2 <__swsetup_r+0x46>
 8001bde:	68ac      	ldr	r4, [r5, #8]
 8001be0:	e7eb      	b.n	8001bba <__swsetup_r+0x1e>
 8001be2:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <__swsetup_r+0xd8>)
 8001be4:	429c      	cmp	r4, r3
 8001be6:	bf08      	it	eq
 8001be8:	68ec      	ldreq	r4, [r5, #12]
 8001bea:	e7e6      	b.n	8001bba <__swsetup_r+0x1e>
 8001bec:	0758      	lsls	r0, r3, #29
 8001bee:	d512      	bpl.n	8001c16 <__swsetup_r+0x7a>
 8001bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bf2:	b141      	cbz	r1, 8001c06 <__swsetup_r+0x6a>
 8001bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bf8:	4299      	cmp	r1, r3
 8001bfa:	d002      	beq.n	8001c02 <__swsetup_r+0x66>
 8001bfc:	4630      	mov	r0, r6
 8001bfe:	f000 f98f 	bl	8001f20 <_free_r>
 8001c02:	2300      	movs	r3, #0
 8001c04:	6363      	str	r3, [r4, #52]	; 0x34
 8001c06:	89a3      	ldrh	r3, [r4, #12]
 8001c08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c0c:	81a3      	strh	r3, [r4, #12]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	6063      	str	r3, [r4, #4]
 8001c12:	6923      	ldr	r3, [r4, #16]
 8001c14:	6023      	str	r3, [r4, #0]
 8001c16:	89a3      	ldrh	r3, [r4, #12]
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	81a3      	strh	r3, [r4, #12]
 8001c1e:	6923      	ldr	r3, [r4, #16]
 8001c20:	b94b      	cbnz	r3, 8001c36 <__swsetup_r+0x9a>
 8001c22:	89a3      	ldrh	r3, [r4, #12]
 8001c24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c2c:	d003      	beq.n	8001c36 <__swsetup_r+0x9a>
 8001c2e:	4621      	mov	r1, r4
 8001c30:	4630      	mov	r0, r6
 8001c32:	f000 f929 	bl	8001e88 <__smakebuf_r>
 8001c36:	89a0      	ldrh	r0, [r4, #12]
 8001c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c3c:	f010 0301 	ands.w	r3, r0, #1
 8001c40:	d00a      	beq.n	8001c58 <__swsetup_r+0xbc>
 8001c42:	2300      	movs	r3, #0
 8001c44:	60a3      	str	r3, [r4, #8]
 8001c46:	6963      	ldr	r3, [r4, #20]
 8001c48:	425b      	negs	r3, r3
 8001c4a:	61a3      	str	r3, [r4, #24]
 8001c4c:	6923      	ldr	r3, [r4, #16]
 8001c4e:	b943      	cbnz	r3, 8001c62 <__swsetup_r+0xc6>
 8001c50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c54:	d1ba      	bne.n	8001bcc <__swsetup_r+0x30>
 8001c56:	bd70      	pop	{r4, r5, r6, pc}
 8001c58:	0781      	lsls	r1, r0, #30
 8001c5a:	bf58      	it	pl
 8001c5c:	6963      	ldrpl	r3, [r4, #20]
 8001c5e:	60a3      	str	r3, [r4, #8]
 8001c60:	e7f4      	b.n	8001c4c <__swsetup_r+0xb0>
 8001c62:	2000      	movs	r0, #0
 8001c64:	e7f7      	b.n	8001c56 <__swsetup_r+0xba>
 8001c66:	bf00      	nop
 8001c68:	20000014 	.word	0x20000014
 8001c6c:	0800206c 	.word	0x0800206c
 8001c70:	0800208c 	.word	0x0800208c
 8001c74:	0800204c 	.word	0x0800204c

08001c78 <_close_r>:
 8001c78:	b538      	push	{r3, r4, r5, lr}
 8001c7a:	4d06      	ldr	r5, [pc, #24]	; (8001c94 <_close_r+0x1c>)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	4604      	mov	r4, r0
 8001c80:	4608      	mov	r0, r1
 8001c82:	602b      	str	r3, [r5, #0]
 8001c84:	f7fe fc23 	bl	80004ce <_close>
 8001c88:	1c43      	adds	r3, r0, #1
 8001c8a:	d102      	bne.n	8001c92 <_close_r+0x1a>
 8001c8c:	682b      	ldr	r3, [r5, #0]
 8001c8e:	b103      	cbz	r3, 8001c92 <_close_r+0x1a>
 8001c90:	6023      	str	r3, [r4, #0]
 8001c92:	bd38      	pop	{r3, r4, r5, pc}
 8001c94:	200000f4 	.word	0x200000f4

08001c98 <__sflush_r>:
 8001c98:	898a      	ldrh	r2, [r1, #12]
 8001c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c9e:	4605      	mov	r5, r0
 8001ca0:	0710      	lsls	r0, r2, #28
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	d458      	bmi.n	8001d58 <__sflush_r+0xc0>
 8001ca6:	684b      	ldr	r3, [r1, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	dc05      	bgt.n	8001cb8 <__sflush_r+0x20>
 8001cac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	dc02      	bgt.n	8001cb8 <__sflush_r+0x20>
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cba:	2e00      	cmp	r6, #0
 8001cbc:	d0f9      	beq.n	8001cb2 <__sflush_r+0x1a>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001cc4:	682f      	ldr	r7, [r5, #0]
 8001cc6:	602b      	str	r3, [r5, #0]
 8001cc8:	d032      	beq.n	8001d30 <__sflush_r+0x98>
 8001cca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ccc:	89a3      	ldrh	r3, [r4, #12]
 8001cce:	075a      	lsls	r2, r3, #29
 8001cd0:	d505      	bpl.n	8001cde <__sflush_r+0x46>
 8001cd2:	6863      	ldr	r3, [r4, #4]
 8001cd4:	1ac0      	subs	r0, r0, r3
 8001cd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cd8:	b10b      	cbz	r3, 8001cde <__sflush_r+0x46>
 8001cda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cdc:	1ac0      	subs	r0, r0, r3
 8001cde:	2300      	movs	r3, #0
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ce4:	6a21      	ldr	r1, [r4, #32]
 8001ce6:	4628      	mov	r0, r5
 8001ce8:	47b0      	blx	r6
 8001cea:	1c43      	adds	r3, r0, #1
 8001cec:	89a3      	ldrh	r3, [r4, #12]
 8001cee:	d106      	bne.n	8001cfe <__sflush_r+0x66>
 8001cf0:	6829      	ldr	r1, [r5, #0]
 8001cf2:	291d      	cmp	r1, #29
 8001cf4:	d82c      	bhi.n	8001d50 <__sflush_r+0xb8>
 8001cf6:	4a2a      	ldr	r2, [pc, #168]	; (8001da0 <__sflush_r+0x108>)
 8001cf8:	40ca      	lsrs	r2, r1
 8001cfa:	07d6      	lsls	r6, r2, #31
 8001cfc:	d528      	bpl.n	8001d50 <__sflush_r+0xb8>
 8001cfe:	2200      	movs	r2, #0
 8001d00:	6062      	str	r2, [r4, #4]
 8001d02:	04d9      	lsls	r1, r3, #19
 8001d04:	6922      	ldr	r2, [r4, #16]
 8001d06:	6022      	str	r2, [r4, #0]
 8001d08:	d504      	bpl.n	8001d14 <__sflush_r+0x7c>
 8001d0a:	1c42      	adds	r2, r0, #1
 8001d0c:	d101      	bne.n	8001d12 <__sflush_r+0x7a>
 8001d0e:	682b      	ldr	r3, [r5, #0]
 8001d10:	b903      	cbnz	r3, 8001d14 <__sflush_r+0x7c>
 8001d12:	6560      	str	r0, [r4, #84]	; 0x54
 8001d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d16:	602f      	str	r7, [r5, #0]
 8001d18:	2900      	cmp	r1, #0
 8001d1a:	d0ca      	beq.n	8001cb2 <__sflush_r+0x1a>
 8001d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d20:	4299      	cmp	r1, r3
 8001d22:	d002      	beq.n	8001d2a <__sflush_r+0x92>
 8001d24:	4628      	mov	r0, r5
 8001d26:	f000 f8fb 	bl	8001f20 <_free_r>
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	6360      	str	r0, [r4, #52]	; 0x34
 8001d2e:	e7c1      	b.n	8001cb4 <__sflush_r+0x1c>
 8001d30:	6a21      	ldr	r1, [r4, #32]
 8001d32:	2301      	movs	r3, #1
 8001d34:	4628      	mov	r0, r5
 8001d36:	47b0      	blx	r6
 8001d38:	1c41      	adds	r1, r0, #1
 8001d3a:	d1c7      	bne.n	8001ccc <__sflush_r+0x34>
 8001d3c:	682b      	ldr	r3, [r5, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0c4      	beq.n	8001ccc <__sflush_r+0x34>
 8001d42:	2b1d      	cmp	r3, #29
 8001d44:	d001      	beq.n	8001d4a <__sflush_r+0xb2>
 8001d46:	2b16      	cmp	r3, #22
 8001d48:	d101      	bne.n	8001d4e <__sflush_r+0xb6>
 8001d4a:	602f      	str	r7, [r5, #0]
 8001d4c:	e7b1      	b.n	8001cb2 <__sflush_r+0x1a>
 8001d4e:	89a3      	ldrh	r3, [r4, #12]
 8001d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d54:	81a3      	strh	r3, [r4, #12]
 8001d56:	e7ad      	b.n	8001cb4 <__sflush_r+0x1c>
 8001d58:	690f      	ldr	r7, [r1, #16]
 8001d5a:	2f00      	cmp	r7, #0
 8001d5c:	d0a9      	beq.n	8001cb2 <__sflush_r+0x1a>
 8001d5e:	0793      	lsls	r3, r2, #30
 8001d60:	680e      	ldr	r6, [r1, #0]
 8001d62:	bf08      	it	eq
 8001d64:	694b      	ldreq	r3, [r1, #20]
 8001d66:	600f      	str	r7, [r1, #0]
 8001d68:	bf18      	it	ne
 8001d6a:	2300      	movne	r3, #0
 8001d6c:	eba6 0807 	sub.w	r8, r6, r7
 8001d70:	608b      	str	r3, [r1, #8]
 8001d72:	f1b8 0f00 	cmp.w	r8, #0
 8001d76:	dd9c      	ble.n	8001cb2 <__sflush_r+0x1a>
 8001d78:	6a21      	ldr	r1, [r4, #32]
 8001d7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d7c:	4643      	mov	r3, r8
 8001d7e:	463a      	mov	r2, r7
 8001d80:	4628      	mov	r0, r5
 8001d82:	47b0      	blx	r6
 8001d84:	2800      	cmp	r0, #0
 8001d86:	dc06      	bgt.n	8001d96 <__sflush_r+0xfe>
 8001d88:	89a3      	ldrh	r3, [r4, #12]
 8001d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d8e:	81a3      	strh	r3, [r4, #12]
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	e78e      	b.n	8001cb4 <__sflush_r+0x1c>
 8001d96:	4407      	add	r7, r0
 8001d98:	eba8 0800 	sub.w	r8, r8, r0
 8001d9c:	e7e9      	b.n	8001d72 <__sflush_r+0xda>
 8001d9e:	bf00      	nop
 8001da0:	20400001 	.word	0x20400001

08001da4 <_fflush_r>:
 8001da4:	b538      	push	{r3, r4, r5, lr}
 8001da6:	690b      	ldr	r3, [r1, #16]
 8001da8:	4605      	mov	r5, r0
 8001daa:	460c      	mov	r4, r1
 8001dac:	b913      	cbnz	r3, 8001db4 <_fflush_r+0x10>
 8001dae:	2500      	movs	r5, #0
 8001db0:	4628      	mov	r0, r5
 8001db2:	bd38      	pop	{r3, r4, r5, pc}
 8001db4:	b118      	cbz	r0, 8001dbe <_fflush_r+0x1a>
 8001db6:	6983      	ldr	r3, [r0, #24]
 8001db8:	b90b      	cbnz	r3, 8001dbe <_fflush_r+0x1a>
 8001dba:	f7ff fa51 	bl	8001260 <__sinit>
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <_fflush_r+0x6c>)
 8001dc0:	429c      	cmp	r4, r3
 8001dc2:	d11b      	bne.n	8001dfc <_fflush_r+0x58>
 8001dc4:	686c      	ldr	r4, [r5, #4]
 8001dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0ef      	beq.n	8001dae <_fflush_r+0xa>
 8001dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001dd0:	07d0      	lsls	r0, r2, #31
 8001dd2:	d404      	bmi.n	8001dde <_fflush_r+0x3a>
 8001dd4:	0599      	lsls	r1, r3, #22
 8001dd6:	d402      	bmi.n	8001dde <_fflush_r+0x3a>
 8001dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dda:	f7ff fadf 	bl	800139c <__retarget_lock_acquire_recursive>
 8001dde:	4628      	mov	r0, r5
 8001de0:	4621      	mov	r1, r4
 8001de2:	f7ff ff59 	bl	8001c98 <__sflush_r>
 8001de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001de8:	07da      	lsls	r2, r3, #31
 8001dea:	4605      	mov	r5, r0
 8001dec:	d4e0      	bmi.n	8001db0 <_fflush_r+0xc>
 8001dee:	89a3      	ldrh	r3, [r4, #12]
 8001df0:	059b      	lsls	r3, r3, #22
 8001df2:	d4dd      	bmi.n	8001db0 <_fflush_r+0xc>
 8001df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001df6:	f7ff fad2 	bl	800139e <__retarget_lock_release_recursive>
 8001dfa:	e7d9      	b.n	8001db0 <_fflush_r+0xc>
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <_fflush_r+0x70>)
 8001dfe:	429c      	cmp	r4, r3
 8001e00:	d101      	bne.n	8001e06 <_fflush_r+0x62>
 8001e02:	68ac      	ldr	r4, [r5, #8]
 8001e04:	e7df      	b.n	8001dc6 <_fflush_r+0x22>
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <_fflush_r+0x74>)
 8001e08:	429c      	cmp	r4, r3
 8001e0a:	bf08      	it	eq
 8001e0c:	68ec      	ldreq	r4, [r5, #12]
 8001e0e:	e7da      	b.n	8001dc6 <_fflush_r+0x22>
 8001e10:	0800206c 	.word	0x0800206c
 8001e14:	0800208c 	.word	0x0800208c
 8001e18:	0800204c 	.word	0x0800204c

08001e1c <_lseek_r>:
 8001e1c:	b538      	push	{r3, r4, r5, lr}
 8001e1e:	4d07      	ldr	r5, [pc, #28]	; (8001e3c <_lseek_r+0x20>)
 8001e20:	4604      	mov	r4, r0
 8001e22:	4608      	mov	r0, r1
 8001e24:	4611      	mov	r1, r2
 8001e26:	2200      	movs	r2, #0
 8001e28:	602a      	str	r2, [r5, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	f7fe fb73 	bl	8000516 <_lseek>
 8001e30:	1c43      	adds	r3, r0, #1
 8001e32:	d102      	bne.n	8001e3a <_lseek_r+0x1e>
 8001e34:	682b      	ldr	r3, [r5, #0]
 8001e36:	b103      	cbz	r3, 8001e3a <_lseek_r+0x1e>
 8001e38:	6023      	str	r3, [r4, #0]
 8001e3a:	bd38      	pop	{r3, r4, r5, pc}
 8001e3c:	200000f4 	.word	0x200000f4

08001e40 <__swhatbuf_r>:
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	460e      	mov	r6, r1
 8001e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e48:	2900      	cmp	r1, #0
 8001e4a:	b096      	sub	sp, #88	; 0x58
 8001e4c:	4614      	mov	r4, r2
 8001e4e:	461d      	mov	r5, r3
 8001e50:	da07      	bge.n	8001e62 <__swhatbuf_r+0x22>
 8001e52:	2300      	movs	r3, #0
 8001e54:	602b      	str	r3, [r5, #0]
 8001e56:	89b3      	ldrh	r3, [r6, #12]
 8001e58:	061a      	lsls	r2, r3, #24
 8001e5a:	d410      	bmi.n	8001e7e <__swhatbuf_r+0x3e>
 8001e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e60:	e00e      	b.n	8001e80 <__swhatbuf_r+0x40>
 8001e62:	466a      	mov	r2, sp
 8001e64:	f000 f8bc 	bl	8001fe0 <_fstat_r>
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	dbf2      	blt.n	8001e52 <__swhatbuf_r+0x12>
 8001e6c:	9a01      	ldr	r2, [sp, #4]
 8001e6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e76:	425a      	negs	r2, r3
 8001e78:	415a      	adcs	r2, r3
 8001e7a:	602a      	str	r2, [r5, #0]
 8001e7c:	e7ee      	b.n	8001e5c <__swhatbuf_r+0x1c>
 8001e7e:	2340      	movs	r3, #64	; 0x40
 8001e80:	2000      	movs	r0, #0
 8001e82:	6023      	str	r3, [r4, #0]
 8001e84:	b016      	add	sp, #88	; 0x58
 8001e86:	bd70      	pop	{r4, r5, r6, pc}

08001e88 <__smakebuf_r>:
 8001e88:	898b      	ldrh	r3, [r1, #12]
 8001e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e8c:	079d      	lsls	r5, r3, #30
 8001e8e:	4606      	mov	r6, r0
 8001e90:	460c      	mov	r4, r1
 8001e92:	d507      	bpl.n	8001ea4 <__smakebuf_r+0x1c>
 8001e94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e98:	6023      	str	r3, [r4, #0]
 8001e9a:	6123      	str	r3, [r4, #16]
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	6163      	str	r3, [r4, #20]
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd70      	pop	{r4, r5, r6, pc}
 8001ea4:	ab01      	add	r3, sp, #4
 8001ea6:	466a      	mov	r2, sp
 8001ea8:	f7ff ffca 	bl	8001e40 <__swhatbuf_r>
 8001eac:	9900      	ldr	r1, [sp, #0]
 8001eae:	4605      	mov	r5, r0
 8001eb0:	4630      	mov	r0, r6
 8001eb2:	f7ff fa75 	bl	80013a0 <_malloc_r>
 8001eb6:	b948      	cbnz	r0, 8001ecc <__smakebuf_r+0x44>
 8001eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ebc:	059a      	lsls	r2, r3, #22
 8001ebe:	d4ef      	bmi.n	8001ea0 <__smakebuf_r+0x18>
 8001ec0:	f023 0303 	bic.w	r3, r3, #3
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	81a3      	strh	r3, [r4, #12]
 8001eca:	e7e3      	b.n	8001e94 <__smakebuf_r+0xc>
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <__smakebuf_r+0x7c>)
 8001ece:	62b3      	str	r3, [r6, #40]	; 0x28
 8001ed0:	89a3      	ldrh	r3, [r4, #12]
 8001ed2:	6020      	str	r0, [r4, #0]
 8001ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed8:	81a3      	strh	r3, [r4, #12]
 8001eda:	9b00      	ldr	r3, [sp, #0]
 8001edc:	6163      	str	r3, [r4, #20]
 8001ede:	9b01      	ldr	r3, [sp, #4]
 8001ee0:	6120      	str	r0, [r4, #16]
 8001ee2:	b15b      	cbz	r3, 8001efc <__smakebuf_r+0x74>
 8001ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ee8:	4630      	mov	r0, r6
 8001eea:	f000 f88b 	bl	8002004 <_isatty_r>
 8001eee:	b128      	cbz	r0, 8001efc <__smakebuf_r+0x74>
 8001ef0:	89a3      	ldrh	r3, [r4, #12]
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	81a3      	strh	r3, [r4, #12]
 8001efc:	89a0      	ldrh	r0, [r4, #12]
 8001efe:	4305      	orrs	r5, r0
 8001f00:	81a5      	strh	r5, [r4, #12]
 8001f02:	e7cd      	b.n	8001ea0 <__smakebuf_r+0x18>
 8001f04:	080011f9 	.word	0x080011f9

08001f08 <__malloc_lock>:
 8001f08:	4801      	ldr	r0, [pc, #4]	; (8001f10 <__malloc_lock+0x8>)
 8001f0a:	f7ff ba47 	b.w	800139c <__retarget_lock_acquire_recursive>
 8001f0e:	bf00      	nop
 8001f10:	200000ec 	.word	0x200000ec

08001f14 <__malloc_unlock>:
 8001f14:	4801      	ldr	r0, [pc, #4]	; (8001f1c <__malloc_unlock+0x8>)
 8001f16:	f7ff ba42 	b.w	800139e <__retarget_lock_release_recursive>
 8001f1a:	bf00      	nop
 8001f1c:	200000ec 	.word	0x200000ec

08001f20 <_free_r>:
 8001f20:	b538      	push	{r3, r4, r5, lr}
 8001f22:	4605      	mov	r5, r0
 8001f24:	2900      	cmp	r1, #0
 8001f26:	d045      	beq.n	8001fb4 <_free_r+0x94>
 8001f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f2c:	1f0c      	subs	r4, r1, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bfb8      	it	lt
 8001f32:	18e4      	addlt	r4, r4, r3
 8001f34:	f7ff ffe8 	bl	8001f08 <__malloc_lock>
 8001f38:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <_free_r+0x98>)
 8001f3a:	6813      	ldr	r3, [r2, #0]
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	b933      	cbnz	r3, 8001f4e <_free_r+0x2e>
 8001f40:	6063      	str	r3, [r4, #4]
 8001f42:	6014      	str	r4, [r2, #0]
 8001f44:	4628      	mov	r0, r5
 8001f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f4a:	f7ff bfe3 	b.w	8001f14 <__malloc_unlock>
 8001f4e:	42a3      	cmp	r3, r4
 8001f50:	d90b      	bls.n	8001f6a <_free_r+0x4a>
 8001f52:	6821      	ldr	r1, [r4, #0]
 8001f54:	1862      	adds	r2, r4, r1
 8001f56:	4293      	cmp	r3, r2
 8001f58:	bf04      	itt	eq
 8001f5a:	681a      	ldreq	r2, [r3, #0]
 8001f5c:	685b      	ldreq	r3, [r3, #4]
 8001f5e:	6063      	str	r3, [r4, #4]
 8001f60:	bf04      	itt	eq
 8001f62:	1852      	addeq	r2, r2, r1
 8001f64:	6022      	streq	r2, [r4, #0]
 8001f66:	6004      	str	r4, [r0, #0]
 8001f68:	e7ec      	b.n	8001f44 <_free_r+0x24>
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	b10b      	cbz	r3, 8001f74 <_free_r+0x54>
 8001f70:	42a3      	cmp	r3, r4
 8001f72:	d9fa      	bls.n	8001f6a <_free_r+0x4a>
 8001f74:	6811      	ldr	r1, [r2, #0]
 8001f76:	1850      	adds	r0, r2, r1
 8001f78:	42a0      	cmp	r0, r4
 8001f7a:	d10b      	bne.n	8001f94 <_free_r+0x74>
 8001f7c:	6820      	ldr	r0, [r4, #0]
 8001f7e:	4401      	add	r1, r0
 8001f80:	1850      	adds	r0, r2, r1
 8001f82:	4283      	cmp	r3, r0
 8001f84:	6011      	str	r1, [r2, #0]
 8001f86:	d1dd      	bne.n	8001f44 <_free_r+0x24>
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	6053      	str	r3, [r2, #4]
 8001f8e:	4401      	add	r1, r0
 8001f90:	6011      	str	r1, [r2, #0]
 8001f92:	e7d7      	b.n	8001f44 <_free_r+0x24>
 8001f94:	d902      	bls.n	8001f9c <_free_r+0x7c>
 8001f96:	230c      	movs	r3, #12
 8001f98:	602b      	str	r3, [r5, #0]
 8001f9a:	e7d3      	b.n	8001f44 <_free_r+0x24>
 8001f9c:	6820      	ldr	r0, [r4, #0]
 8001f9e:	1821      	adds	r1, r4, r0
 8001fa0:	428b      	cmp	r3, r1
 8001fa2:	bf04      	itt	eq
 8001fa4:	6819      	ldreq	r1, [r3, #0]
 8001fa6:	685b      	ldreq	r3, [r3, #4]
 8001fa8:	6063      	str	r3, [r4, #4]
 8001faa:	bf04      	itt	eq
 8001fac:	1809      	addeq	r1, r1, r0
 8001fae:	6021      	streq	r1, [r4, #0]
 8001fb0:	6054      	str	r4, [r2, #4]
 8001fb2:	e7c7      	b.n	8001f44 <_free_r+0x24>
 8001fb4:	bd38      	pop	{r3, r4, r5, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000098 	.word	0x20000098

08001fbc <_read_r>:
 8001fbc:	b538      	push	{r3, r4, r5, lr}
 8001fbe:	4d07      	ldr	r5, [pc, #28]	; (8001fdc <_read_r+0x20>)
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	4608      	mov	r0, r1
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	602a      	str	r2, [r5, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f7fe fa46 	bl	800045c <_read>
 8001fd0:	1c43      	adds	r3, r0, #1
 8001fd2:	d102      	bne.n	8001fda <_read_r+0x1e>
 8001fd4:	682b      	ldr	r3, [r5, #0]
 8001fd6:	b103      	cbz	r3, 8001fda <_read_r+0x1e>
 8001fd8:	6023      	str	r3, [r4, #0]
 8001fda:	bd38      	pop	{r3, r4, r5, pc}
 8001fdc:	200000f4 	.word	0x200000f4

08001fe0 <_fstat_r>:
 8001fe0:	b538      	push	{r3, r4, r5, lr}
 8001fe2:	4d07      	ldr	r5, [pc, #28]	; (8002000 <_fstat_r+0x20>)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	4608      	mov	r0, r1
 8001fea:	4611      	mov	r1, r2
 8001fec:	602b      	str	r3, [r5, #0]
 8001fee:	f7fe fa79 	bl	80004e4 <_fstat>
 8001ff2:	1c43      	adds	r3, r0, #1
 8001ff4:	d102      	bne.n	8001ffc <_fstat_r+0x1c>
 8001ff6:	682b      	ldr	r3, [r5, #0]
 8001ff8:	b103      	cbz	r3, 8001ffc <_fstat_r+0x1c>
 8001ffa:	6023      	str	r3, [r4, #0]
 8001ffc:	bd38      	pop	{r3, r4, r5, pc}
 8001ffe:	bf00      	nop
 8002000:	200000f4 	.word	0x200000f4

08002004 <_isatty_r>:
 8002004:	b538      	push	{r3, r4, r5, lr}
 8002006:	4d06      	ldr	r5, [pc, #24]	; (8002020 <_isatty_r+0x1c>)
 8002008:	2300      	movs	r3, #0
 800200a:	4604      	mov	r4, r0
 800200c:	4608      	mov	r0, r1
 800200e:	602b      	str	r3, [r5, #0]
 8002010:	f7fe fa77 	bl	8000502 <_isatty>
 8002014:	1c43      	adds	r3, r0, #1
 8002016:	d102      	bne.n	800201e <_isatty_r+0x1a>
 8002018:	682b      	ldr	r3, [r5, #0]
 800201a:	b103      	cbz	r3, 800201e <_isatty_r+0x1a>
 800201c:	6023      	str	r3, [r4, #0]
 800201e:	bd38      	pop	{r3, r4, r5, pc}
 8002020:	200000f4 	.word	0x200000f4

08002024 <_init>:
 8002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002026:	bf00      	nop
 8002028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202a:	bc08      	pop	{r3}
 800202c:	469e      	mov	lr, r3
 800202e:	4770      	bx	lr

08002030 <_fini>:
 8002030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002032:	bf00      	nop
 8002034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002036:	bc08      	pop	{r3}
 8002038:	469e      	mov	lr, r3
 800203a:	4770      	bx	lr
