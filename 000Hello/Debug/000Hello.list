
000Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002514  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080026c4  080026c4  000126c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027bc  080027bc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080027bc  080027bc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027bc  080027bc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027bc  080027bc  000127bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027c0  080027c0  000127c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080027c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000078  0800283c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  0800283c  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000041dd  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000df0  00000000  00000000  0002427f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003b8  00000000  00000000  00025070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000330  00000000  00000000  00025428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003dc4  00000000  00000000  00025758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003c39  00000000  00000000  0002951c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000dcca  00000000  00000000  0002d155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0003ae1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000159c  00000000  00000000  0003ae74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080026ac 	.word	0x080026ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080026ac 	.word	0x080026ac

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:

#include "lcd5110.h"
#include "keypad4x4.h"
#include "ade7753.h"

void delay(void) {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	0007a11f 	.word	0x0007a11f

080002bc <main>:
		}
	}
	buf[buf_len] = '\0';
}

int main(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	char* buf;
	LCD5110_Init(0x37);
 80002c0:	2037      	movs	r0, #55	; 0x37
 80002c2:	f000 fca1 	bl	8000c08 <LCD5110_Init>
	ADE_Inits();
 80002c6:	f000 f9e1 	bl	800068c <ADE_Inits>

	printf("MODE2 : %x \n", ADE_ReadData(SPI2, MODE, 2));
 80002ca:	2202      	movs	r2, #2
 80002cc:	2109      	movs	r1, #9
 80002ce:	480a      	ldr	r0, [pc, #40]	; (80002f8 <main+0x3c>)
 80002d0:	f000 fa06 	bl	80006e0 <ADE_ReadData>
 80002d4:	4603      	mov	r3, r0
 80002d6:	4619      	mov	r1, r3
 80002d8:	4808      	ldr	r0, [pc, #32]	; (80002fc <main+0x40>)
 80002da:	f001 fa95 	bl	8001808 <iprintf>
	printf("IRQEN : %x \n", ADE_ReadData(SPI2, IRQEN, 2));
 80002de:	2202      	movs	r2, #2
 80002e0:	210a      	movs	r1, #10
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <main+0x3c>)
 80002e4:	f000 f9fc 	bl	80006e0 <ADE_ReadData>
 80002e8:	4603      	mov	r3, r0
 80002ea:	4619      	mov	r1, r3
 80002ec:	4804      	ldr	r0, [pc, #16]	; (8000300 <main+0x44>)
 80002ee:	f001 fa8b 	bl	8001808 <iprintf>
 80002f2:	2300      	movs	r3, #0
//        	LCD5110_Puts(buf, LCD5110_Pixel_Set, LCD5110_FontSize_5x7);
//        	LCD5110_Refresh();
//		}
//        last_key = Keypad_Button;
//    }
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40003800 	.word	0x40003800
 80002fc:	080026c4 	.word	0x080026c4
 8000300:	080026d4 	.word	0x080026d4

08000304 <SysTick_Handler>:



void SysTick_Handler(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
    TM_KEYPAD_Update();
 8000308:	f000 fb7c 	bl	8000a04 <TM_KEYPAD_Update>
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}

08000310 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <ITM_SendChar+0x44>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <ITM_SendChar+0x44>)
 8000320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000324:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000326:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <ITM_SendChar+0x48>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <ITM_SendChar+0x48>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000332:	bf00      	nop
 8000334:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0f8      	beq.n	8000334 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000342:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	6013      	str	r3, [r2, #0]
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	e000edfc 	.word	0xe000edfc
 8000358:	e0000e00 	.word	0xe0000e00

0800035c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	e00a      	b.n	8000384 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800036e:	f3af 8000 	nop.w
 8000372:	4601      	mov	r1, r0
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	60ba      	str	r2, [r7, #8]
 800037a:	b2ca      	uxtb	r2, r1
 800037c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	3301      	adds	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	429a      	cmp	r2, r3
 800038a:	dbf0      	blt.n	800036e <_read+0x12>
	}

return len;
 800038c:	687b      	ldr	r3, [r7, #4]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b086      	sub	sp, #24
 800039a:	af00      	add	r7, sp, #0
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
 80003a6:	e009      	b.n	80003bc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	1c5a      	adds	r2, r3, #1
 80003ac:	60ba      	str	r2, [r7, #8]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ffad 	bl	8000310 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	3301      	adds	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	697a      	ldr	r2, [r7, #20]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	429a      	cmp	r2, r3
 80003c2:	dbf1      	blt.n	80003a8 <_write+0x12>
	}
	return len;
 80003c4:	687b      	ldr	r3, [r7, #4]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <_close>:

int _close(int file)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
	return -1;
 80003d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003da:	4618      	mov	r0, r3
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr

080003e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003f4:	605a      	str	r2, [r3, #4]
	return 0;
 80003f6:	2300      	movs	r3, #0
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <_isatty>:

int _isatty(int file)
{
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
	return 1;
 800040a:	2301      	movs	r3, #1
}
 800040c:	4618      	mov	r0, r3
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr

08000416 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000416:	b480      	push	{r7}
 8000418:	b085      	sub	sp, #20
 800041a:	af00      	add	r7, sp, #0
 800041c:	60f8      	str	r0, [r7, #12]
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	607a      	str	r2, [r7, #4]
	return 0;
 8000422:	2300      	movs	r3, #0
}
 8000424:	4618      	mov	r0, r3
 8000426:	3714      	adds	r7, #20
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
	...

08000430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000438:	4a14      	ldr	r2, [pc, #80]	; (800048c <_sbrk+0x5c>)
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <_sbrk+0x60>)
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <_sbrk+0x64>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d102      	bne.n	8000452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <_sbrk+0x64>)
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <_sbrk+0x68>)
 8000450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <_sbrk+0x64>)
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4413      	add	r3, r2
 800045a:	693a      	ldr	r2, [r7, #16]
 800045c:	429a      	cmp	r2, r3
 800045e:	d207      	bcs.n	8000470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000460:	f001 f9a0 	bl	80017a4 <__errno>
 8000464:	4603      	mov	r3, r0
 8000466:	220c      	movs	r2, #12
 8000468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800046a:	f04f 33ff 	mov.w	r3, #4294967295
 800046e:	e009      	b.n	8000484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <_sbrk+0x64>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000476:	4b07      	ldr	r3, [pc, #28]	; (8000494 <_sbrk+0x64>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4413      	add	r3, r2
 800047e:	4a05      	ldr	r2, [pc, #20]	; (8000494 <_sbrk+0x64>)
 8000480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000482:	68fb      	ldr	r3, [r7, #12]
}
 8000484:	4618      	mov	r0, r3
 8000486:	3718      	adds	r7, #24
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20020000 	.word	0x20020000
 8000490:	00000400 	.word	0x00000400
 8000494:	20000094 	.word	0x20000094
 8000498:	200002d8 	.word	0x200002d8

0800049c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
    ldr   r0, =_estack
 800049c:	480d      	ldr	r0, [pc, #52]	; (80004d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a6:	490d      	ldr	r1, [pc, #52]	; (80004dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a8:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <LoopForever+0xe>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ac:	e002      	b.n	80004b4 <LoopCopyDataInit>

080004ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b2:	3304      	adds	r3, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b8:	d3f9      	bcc.n	80004ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ba:	4a0a      	ldr	r2, [pc, #40]	; (80004e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004bc:	4c0a      	ldr	r4, [pc, #40]	; (80004e8 <LoopForever+0x16>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c0:	e001      	b.n	80004c6 <LoopFillZerobss>

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c4:	3204      	adds	r2, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ca:	f001 f971 	bl	80017b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ce:	f7ff fef5 	bl	80002bc <main>

080004d2 <LoopForever>:

LoopForever:
    b LoopForever
 80004d2:	e7fe      	b.n	80004d2 <LoopForever>
    ldr   r0, =_estack
 80004d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80004e0:	080027c4 	.word	0x080027c4
  ldr r2, =_sbss
 80004e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80004e8:	200002d8 	.word	0x200002d8

080004ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC_IRQHandler>
	...

080004f0 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80004f6:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <SPI2_GPIOInits+0x70>)
 80004f8:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 80004fa:	2302      	movs	r3, #2
 80004fc:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80004fe:	2305      	movs	r3, #5
 8000500:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 8000502:	2300      	movs	r3, #0
 8000504:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000506:	2300      	movs	r3, #0
 8000508:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800050a:	2302      	movs	r3, #2
 800050c:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 13;
 800050e:	230d      	movs	r3, #13
 8000510:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fdad 	bl	8001074 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 15;
 800051a:	230f      	movs	r3, #15
 800051c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4618      	mov	r0, r3
 8000522:	f000 fda7 	bl	8001074 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 14;
 8000526:	230e      	movs	r3, #14
 8000528:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fda1 	bl	8001074 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 12;
 8000532:	230c      	movs	r3, #12
 8000534:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fd9b 	bl	8001074 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = PORT_RST;
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <SPI2_GPIOInits+0x74>)
 8000540:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = PIN_RST;
 8000542:	230f      	movs	r3, #15
 8000544:	723b      	strb	r3, [r7, #8]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000546:	2301      	movs	r3, #1
 8000548:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	737b      	strb	r3, [r7, #13]
	GPIO_Init(&SPIPins);
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fd8f 	bl	8001074 <GPIO_Init>

}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40020400 	.word	0x40020400
 8000564:	40020c00 	.word	0x40020c00

08000568 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <SPI2_Inits+0x50>)
 8000570:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 8000572:	2301      	movs	r3, #1
 8000574:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 8000576:	2301      	movs	r3, #1
 8000578:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;		// clock 1MHz
 800057a:	2303      	movs	r3, #3
 800057c:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 800057e:	2300      	movs	r3, #0
 8000580:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 8000582:	2300      	movs	r3, #0
 8000584:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;					//CPHA 1
 8000586:	2301      	movs	r3, #1
 8000588:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 800058a:	2300      	movs	r3, #0
 800058c:	72bb      	strb	r3, [r7, #10]

	SPI2->CR1 &= ~((uint16_t)0x0040);
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <SPI2_Inits+0x50>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <SPI2_Inits+0x50>)
 8000594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000598:	6013      	str	r3, [r2, #0]
	SPI_Init(&SPI2handle);
 800059a:	463b      	mov	r3, r7
 800059c:	4618      	mov	r0, r3
 800059e:	f001 f860 	bl	8001662 <SPI_Init>
	SPI2->CR1 |= ((uint16_t)0x0040);
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <SPI2_Inits+0x50>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <SPI2_Inits+0x50>)
 80005a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ac:	6013      	str	r3, [r2, #0]
}
 80005ae:	bf00      	nop
 80005b0:	3720      	adds	r7, #32
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40003800 	.word	0x40003800

080005bc <IRQ_Inits>:
	ADE_WriteData(SPI2, SAGLVL, 0x17, 1);

}

void IRQ_Inits()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
	//Input pin trigger as falling edge
	GPIO_Handle_t GpioIRQ;
	GpioIRQ.pGPIOx = PORT_IRQ_IT;
 80005c2:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <IRQ_Inits+0xbc>)
 80005c4:	60fb      	str	r3, [r7, #12]
	GpioIRQ.GPIO_PinConfig.GPIO_PinNumber = PIN_IRQ_IT;
 80005c6:	2309      	movs	r3, #9
 80005c8:	743b      	strb	r3, [r7, #16]
	GpioIRQ.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 80005ca:	2304      	movs	r3, #4
 80005cc:	747b      	strb	r3, [r7, #17]
	GpioIRQ.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80005ce:	2302      	movs	r3, #2
 80005d0:	74bb      	strb	r3, [r7, #18]
	GpioIRQ.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80005d2:	2301      	movs	r3, #1
 80005d4:	74fb      	strb	r3, [r7, #19]
	GPIO_Init(&GpioIRQ);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fd4a 	bl	8001074 <GPIO_Init>

	//IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRIO0);
 80005e0:	2100      	movs	r1, #0
 80005e2:	2017      	movs	r0, #23
 80005e4:	f000 ffa0 	bl	8001528 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 80005e8:	2101      	movs	r1, #1
 80005ea:	2017      	movs	r0, #23
 80005ec:	f000 ff18 	bl	8001420 <GPIO_IRQInterruptConfig>

	//Output led
	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx = PORT_VP_LED;
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <IRQ_Inits+0xc0>)
 80005f2:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_VP_LED;
 80005f4:	2303      	movs	r3, #3
 80005f6:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80005f8:	2301      	movs	r3, #1
 80005fa:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80005fc:	2302      	movs	r3, #2
 80005fe:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 8000600:	2300      	movs	r3, #0
 8000602:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000604:	2300      	movs	r3, #0
 8000606:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(&GpioLed);
 8000608:	463b      	mov	r3, r7
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fd32 	bl	8001074 <GPIO_Init>

	GpioLed.pGPIOx = PORT_IP_LED;
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <IRQ_Inits+0xc0>)
 8000612:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_IP_LED;
 8000614:	2301      	movs	r3, #1
 8000616:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GpioLed);
 8000618:	463b      	mov	r3, r7
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fd2a 	bl	8001074 <GPIO_Init>

	//ADE side
	printf("IRQEN0 : %x \n", ADE_ReadData(SPI2, IRQEN, 2));
 8000620:	2202      	movs	r2, #2
 8000622:	210a      	movs	r1, #10
 8000624:	4816      	ldr	r0, [pc, #88]	; (8000680 <IRQ_Inits+0xc4>)
 8000626:	f000 f85b 	bl	80006e0 <ADE_ReadData>
 800062a:	4603      	mov	r3, r0
 800062c:	4619      	mov	r1, r3
 800062e:	4815      	ldr	r0, [pc, #84]	; (8000684 <IRQ_Inits+0xc8>)
 8000630:	f001 f8ea 	bl	8001808 <iprintf>
	ADE_WriteData(SPI2, IRQEN, 0x0340, 2);
 8000634:	2302      	movs	r3, #2
 8000636:	f44f 7250 	mov.w	r2, #832	; 0x340
 800063a:	210a      	movs	r1, #10
 800063c:	4810      	ldr	r0, [pc, #64]	; (8000680 <IRQ_Inits+0xc4>)
 800063e:	f000 f883 	bl	8000748 <ADE_WriteData>
	printf("IRQEN1 : %x \n", ADE_ReadData(SPI2, IRQEN, 2));
 8000642:	2202      	movs	r2, #2
 8000644:	210a      	movs	r1, #10
 8000646:	480e      	ldr	r0, [pc, #56]	; (8000680 <IRQ_Inits+0xc4>)
 8000648:	f000 f84a 	bl	80006e0 <ADE_ReadData>
 800064c:	4603      	mov	r3, r0
 800064e:	4619      	mov	r1, r3
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <IRQ_Inits+0xcc>)
 8000652:	f001 f8d9 	bl	8001808 <iprintf>
	ADE_WriteData(SPI2, VPKLVL, 0x29, 1);
 8000656:	2301      	movs	r3, #1
 8000658:	2229      	movs	r2, #41	; 0x29
 800065a:	2121      	movs	r1, #33	; 0x21
 800065c:	4808      	ldr	r0, [pc, #32]	; (8000680 <IRQ_Inits+0xc4>)
 800065e:	f000 f873 	bl	8000748 <ADE_WriteData>
	ADE_WriteData(SPI2, IPKLVL, 0x2D, 1);
 8000662:	2301      	movs	r3, #1
 8000664:	222d      	movs	r2, #45	; 0x2d
 8000666:	2120      	movs	r1, #32
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <IRQ_Inits+0xc4>)
 800066a:	f000 f86d 	bl	8000748 <ADE_WriteData>

}
 800066e:	bf00      	nop
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40020c00 	.word	0x40020c00
 800067c:	40021000 	.word	0x40021000
 8000680:	40003800 	.word	0x40003800
 8000684:	080026e4 	.word	0x080026e4
 8000688:	080026f4 	.word	0x080026f4

0800068c <ADE_Inits>:

void ADE_Inits(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	SPI2_GPIOInits();
 8000690:	f7ff ff2e 	bl	80004f0 <SPI2_GPIOInits>


	SPI2_Inits();
 8000694:	f7ff ff68 	bl	8000568 <SPI2_Inits>
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/

	SPI_SSOEConfig(SPI2, ENABLE);
 8000698:	2101      	movs	r1, #1
 800069a:	480f      	ldr	r0, [pc, #60]	; (80006d8 <ADE_Inits+0x4c>)
 800069c:	f000 ffc6 	bl	800162c <SPI_SSOEConfig>

	//Reset
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	210f      	movs	r1, #15
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <ADE_Inits+0x50>)
 80006a6:	f000 fe96 	bl	80013d6 <GPIO_WriteToOutputPin>
	delay();
 80006aa:	f7ff fdf1 	bl	8000290 <delay>
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	210f      	movs	r1, #15
 80006b2:	480a      	ldr	r0, [pc, #40]	; (80006dc <ADE_Inits+0x50>)
 80006b4:	f000 fe8f 	bl	80013d6 <GPIO_WriteToOutputPin>
	delay();
 80006b8:	f7ff fdea 	bl	8000290 <delay>
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	210f      	movs	r1, #15
 80006c0:	4806      	ldr	r0, [pc, #24]	; (80006dc <ADE_Inits+0x50>)
 80006c2:	f000 fe88 	bl	80013d6 <GPIO_WriteToOutputPin>
	delay();
 80006c6:	f7ff fde3 	bl	8000290 <delay>
//	delay();

//	SAG_Inits();
//	delay();

	IRQ_Inits();
 80006ca:	f7ff ff77 	bl	80005bc <IRQ_Inits>
	delay();
 80006ce:	f7ff fddf 	bl	8000290 <delay>

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40003800 	.word	0x40003800
 80006dc:	40020c00 	.word	0x40020c00

080006e0 <ADE_ReadData>:


uint32_t ADE_ReadData( SPI_RegDef_t *pSPIx, uint8_t addr, uint32_t bytes_to_read)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	460b      	mov	r3, r1
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	72fb      	strb	r3, [r7, #11]
	uint32_t data = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
	uint8_t dummy_write = 0xff;
 80006f2:	23ff      	movs	r3, #255	; 0xff
 80006f4:	75fb      	strb	r3, [r7, #23]
//	uint8_t dummy_write2 = 0x00;
	SPI_PeripheralControl(pSPIx, ENABLE); //SS pin pull to low
 80006f6:	2101      	movs	r1, #1
 80006f8:	68f8      	ldr	r0, [r7, #12]
 80006fa:	f001 f838 	bl	800176e <SPI_PeripheralControl>
	SPI_Transfer(pSPIx, addr);
 80006fe:	7afb      	ldrb	r3, [r7, #11]
 8000700:	4619      	mov	r1, r3
 8000702:	68f8      	ldr	r0, [r7, #12]
 8000704:	f001 f808 	bl	8001718 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_read; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
 800070c:	e00f      	b.n	800072e <ADE_ReadData+0x4e>
	{
		data <<= 8;
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	021b      	lsls	r3, r3, #8
 8000712:	61fb      	str	r3, [r7, #28]
		data |= SPI_Transfer(pSPIx, dummy_write);
 8000714:	7dfb      	ldrb	r3, [r7, #23]
 8000716:	4619      	mov	r1, r3
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f000 fffd 	bl	8001718 <SPI_Transfer>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	4313      	orrs	r3, r2
 8000726:	61fb      	str	r3, [r7, #28]
	for(uint32_t i = 0; i < bytes_to_read; i++)
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	3301      	adds	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
 800072e:	69ba      	ldr	r2, [r7, #24]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	429a      	cmp	r2, r3
 8000734:	d3eb      	bcc.n	800070e <ADE_ReadData+0x2e>
		//printf("%x\n", data);
	}

//	SPI_Transfer(pSPIx, dummy_write2);

	SPI_PeripheralControl(pSPIx, DISABLE); //SS pin pull to high
 8000736:	2100      	movs	r1, #0
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	f001 f818 	bl	800176e <SPI_PeripheralControl>
	return data;
 800073e:	69fb      	ldr	r3, [r7, #28]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <ADE_WriteData>:
 *
 * @Note              -
 */

void ADE_WriteData(SPI_RegDef_t *pSPIx, uint8_t address, uint32_t write_buffer, uint32_t bytes_to_write)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	460b      	mov	r3, r1
 8000756:	72fb      	strb	r3, [r7, #11]
	uint8_t data = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	74fb      	strb	r3, [r7, #19]
	address |= 0x80;
 800075c:	7afb      	ldrb	r3, [r7, #11]
 800075e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000762:	72fb      	strb	r3, [r7, #11]
//	uint8_t dummy_write2 = 0x00;
	SPI_PeripheralControl(pSPIx, ENABLE); //SS pin pull to low
 8000764:	2101      	movs	r1, #1
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f001 f801 	bl	800176e <SPI_PeripheralControl>
	SPI_Transfer(pSPIx, address);
 800076c:	7afb      	ldrb	r3, [r7, #11]
 800076e:	4619      	mov	r1, r3
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f000 ffd1 	bl	8001718 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_write; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	e010      	b.n	800079e <ADE_WriteData+0x56>
	{
		data = (uint8_t)(write_buffer >> 8*(bytes_to_write - i - 1));
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	3b01      	subs	r3, #1
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	fa22 f303 	lsr.w	r3, r2, r3
 800078c:	74fb      	strb	r3, [r7, #19]
		SPI_Transfer(pSPIx, data);
 800078e:	7cfb      	ldrb	r3, [r7, #19]
 8000790:	4619      	mov	r1, r3
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	f000 ffc0 	bl	8001718 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_write; i++)
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	3301      	adds	r3, #1
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d3ea      	bcc.n	800077c <ADE_WriteData+0x34>
	}
//	SPI_Transfer(pSPIx, dummy_write2);

	SPI_PeripheralControl(pSPIx, DISABLE);; //SS pin pull to high
 80007a6:	2100      	movs	r1, #0
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f000 ffe0 	bl	800176e <SPI_PeripheralControl>
}
 80007ae:	bf00      	nop
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0

    uint32_t pending = EXTI->PR;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <EXTI15_10_IRQHandler+0x40>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	607b      	str	r3, [r7, #4]
//		if(GPIO_ReadFromInputPin(PORT_SAG, PIN_SAG) ==  0)
//		{
//			GPIO_WriteToOutputPin(PORT_SAG_LED, PIN_SAG_LED, 1);
//		}
//    }
    if(pending & (1 << PIN_ZX_IT))
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00f      	beq.n	80007ee <EXTI15_10_IRQHandler+0x36>
    {
        EXTI->PR |= 1 << PIN_ZX_IT; // clear pending flag, otherwise we'd get endless interrupts
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <EXTI15_10_IRQHandler+0x40>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <EXTI15_10_IRQHandler+0x40>)
 80007d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007d8:	6153      	str	r3, [r2, #20]
        // handle pin ZX here
    	printf("VRMS : %x \n", ADE_ReadData(SPI2, VRMS, 3));
 80007da:	2203      	movs	r2, #3
 80007dc:	2117      	movs	r1, #23
 80007de:	4807      	ldr	r0, [pc, #28]	; (80007fc <EXTI15_10_IRQHandler+0x44>)
 80007e0:	f7ff ff7e 	bl	80006e0 <ADE_ReadData>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <EXTI15_10_IRQHandler+0x48>)
 80007ea:	f001 f80d 	bl	8001808 <iprintf>
    }

}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40013c00 	.word	0x40013c00
 80007fc:	40003800 	.word	0x40003800
 8000800:	08002704 	.word	0x08002704

08000804 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0

    uint32_t pending = EXTI->PR;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <EXTI9_5_IRQHandler+0x54>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	603b      	str	r3, [r7, #0]
    if(pending & (1 << PIN_IRQ_IT))
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000816:	2b00      	cmp	r3, #0
 8000818:	d01a      	beq.n	8000850 <EXTI9_5_IRQHandler+0x4c>
    {
        EXTI->PR |= 1 << PIN_IRQ_IT; // clear pending flag, otherwise we'd get endless interrupts
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <EXTI9_5_IRQHandler+0x54>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <EXTI9_5_IRQHandler+0x54>)
 8000820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000824:	6153      	str	r3, [r2, #20]
        // handle pin ZX here
        for(int i = 0; i < 5000; i++);
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	e002      	b.n	8000832 <EXTI9_5_IRQHandler+0x2e>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3301      	adds	r3, #1
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f241 3287 	movw	r2, #4999	; 0x1387
 8000838:	4293      	cmp	r3, r2
 800083a:	ddf7      	ble.n	800082c <EXTI9_5_IRQHandler+0x28>
        printf("RSTSTATUS : %x \n", ADE_ReadData(SPI2, RSTSTATUS, 2));
 800083c:	2202      	movs	r2, #2
 800083e:	210c      	movs	r1, #12
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <EXTI9_5_IRQHandler+0x58>)
 8000842:	f7ff ff4d 	bl	80006e0 <ADE_ReadData>
 8000846:	4603      	mov	r3, r0
 8000848:	4619      	mov	r1, r3
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <EXTI9_5_IRQHandler+0x5c>)
 800084c:	f000 ffdc 	bl	8001808 <iprintf>



    }

}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40013c00 	.word	0x40013c00
 800085c:	40003800 	.word	0x40003800
 8000860:	08002710 	.word	0x08002710

08000864 <TM_KEYPAD_INT_SetColumn>:

	return temp;
}

/* Private */
void TM_KEYPAD_INT_SetColumn(uint8_t column) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_COLUMN_1_HIGH;
 800086e:	2201      	movs	r2, #1
 8000870:	2100      	movs	r1, #0
 8000872:	481d      	ldr	r0, [pc, #116]	; (80008e8 <TM_KEYPAD_INT_SetColumn+0x84>)
 8000874:	f000 fdaf 	bl	80013d6 <GPIO_WriteToOutputPin>
	KEYPAD_COLUMN_2_HIGH;
 8000878:	2201      	movs	r2, #1
 800087a:	2101      	movs	r1, #1
 800087c:	481a      	ldr	r0, [pc, #104]	; (80008e8 <TM_KEYPAD_INT_SetColumn+0x84>)
 800087e:	f000 fdaa 	bl	80013d6 <GPIO_WriteToOutputPin>
	KEYPAD_COLUMN_3_HIGH;
 8000882:	2201      	movs	r2, #1
 8000884:	2102      	movs	r1, #2
 8000886:	4818      	ldr	r0, [pc, #96]	; (80008e8 <TM_KEYPAD_INT_SetColumn+0x84>)
 8000888:	f000 fda5 	bl	80013d6 <GPIO_WriteToOutputPin>
	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large) {
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <TM_KEYPAD_INT_SetColumn+0x88>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d104      	bne.n	800089e <TM_KEYPAD_INT_SetColumn+0x3a>
		KEYPAD_COLUMN_4_HIGH;
 8000894:	2201      	movs	r2, #1
 8000896:	2103      	movs	r1, #3
 8000898:	4813      	ldr	r0, [pc, #76]	; (80008e8 <TM_KEYPAD_INT_SetColumn+0x84>)
 800089a:	f000 fd9c 	bl	80013d6 <GPIO_WriteToOutputPin>
	}

	/* Set column low */
	if (column == 1) {
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d104      	bne.n	80008ae <TM_KEYPAD_INT_SetColumn+0x4a>
		KEYPAD_COLUMN_1_LOW;
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	480f      	ldr	r0, [pc, #60]	; (80008e8 <TM_KEYPAD_INT_SetColumn+0x84>)
 80008aa:	f000 fd94 	bl	80013d6 <GPIO_WriteToOutputPin>
	}
	if (column == 2) {
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d104      	bne.n	80008be <TM_KEYPAD_INT_SetColumn+0x5a>
		KEYPAD_COLUMN_2_LOW;
 80008b4:	2200      	movs	r2, #0
 80008b6:	2101      	movs	r1, #1
 80008b8:	480b      	ldr	r0, [pc, #44]	; (80008e8 <TM_KEYPAD_INT_SetColumn+0x84>)
 80008ba:	f000 fd8c 	bl	80013d6 <GPIO_WriteToOutputPin>
	}
	if (column == 3) {
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	d104      	bne.n	80008ce <TM_KEYPAD_INT_SetColumn+0x6a>
		KEYPAD_COLUMN_3_LOW;
 80008c4:	2200      	movs	r2, #0
 80008c6:	2102      	movs	r1, #2
 80008c8:	4807      	ldr	r0, [pc, #28]	; (80008e8 <TM_KEYPAD_INT_SetColumn+0x84>)
 80008ca:	f000 fd84 	bl	80013d6 <GPIO_WriteToOutputPin>
	}
	if (column == 4) {
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d104      	bne.n	80008de <TM_KEYPAD_INT_SetColumn+0x7a>
		KEYPAD_COLUMN_4_LOW;
 80008d4:	2200      	movs	r2, #0
 80008d6:	2103      	movs	r1, #3
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <TM_KEYPAD_INT_SetColumn+0x84>)
 80008da:	f000 fd7c 	bl	80013d6 <GPIO_WriteToOutputPin>
	}
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	200000c8 	.word	0x200000c8

080008f0 <TM_KEYPAD_INT_CheckRow>:

uint8_t TM_KEYPAD_INT_CheckRow(uint8_t column) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	/* Read rows */

	/* Scan row 1 */
	if (KEYPAD_ROW_1_CHECK) {
 80008fa:	2100      	movs	r1, #0
 80008fc:	481d      	ldr	r0, [pc, #116]	; (8000974 <TM_KEYPAD_INT_CheckRow+0x84>)
 80008fe:	f000 fd55 	bl	80013ac <GPIO_ReadFromInputPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d104      	bne.n	8000912 <TM_KEYPAD_INT_CheckRow+0x22>
		return KEYPAD_INT_Buttons[0][column - 1];
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	3b01      	subs	r3, #1
 800090c:	4a1a      	ldr	r2, [pc, #104]	; (8000978 <TM_KEYPAD_INT_CheckRow+0x88>)
 800090e:	5cd3      	ldrb	r3, [r2, r3]
 8000910:	e02b      	b.n	800096a <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 2 */
	if (KEYPAD_ROW_2_CHECK) {
 8000912:	2101      	movs	r1, #1
 8000914:	4817      	ldr	r0, [pc, #92]	; (8000974 <TM_KEYPAD_INT_CheckRow+0x84>)
 8000916:	f000 fd49 	bl	80013ac <GPIO_ReadFromInputPin>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d105      	bne.n	800092c <TM_KEYPAD_INT_CheckRow+0x3c>
		return KEYPAD_INT_Buttons[1][column - 1];
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	3b01      	subs	r3, #1
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <TM_KEYPAD_INT_CheckRow+0x88>)
 8000926:	4413      	add	r3, r2
 8000928:	791b      	ldrb	r3, [r3, #4]
 800092a:	e01e      	b.n	800096a <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 3 */
	if (KEYPAD_ROW_3_CHECK) {
 800092c:	2102      	movs	r1, #2
 800092e:	4811      	ldr	r0, [pc, #68]	; (8000974 <TM_KEYPAD_INT_CheckRow+0x84>)
 8000930:	f000 fd3c 	bl	80013ac <GPIO_ReadFromInputPin>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d105      	bne.n	8000946 <TM_KEYPAD_INT_CheckRow+0x56>
		return KEYPAD_INT_Buttons[2][column - 1];
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	3b01      	subs	r3, #1
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <TM_KEYPAD_INT_CheckRow+0x88>)
 8000940:	4413      	add	r3, r2
 8000942:	7a1b      	ldrb	r3, [r3, #8]
 8000944:	e011      	b.n	800096a <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 4 */
	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large && KEYPAD_ROW_4_CHECK) {
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <TM_KEYPAD_INT_CheckRow+0x8c>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d10c      	bne.n	8000968 <TM_KEYPAD_INT_CheckRow+0x78>
 800094e:	2103      	movs	r1, #3
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <TM_KEYPAD_INT_CheckRow+0x84>)
 8000952:	f000 fd2b 	bl	80013ac <GPIO_ReadFromInputPin>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d105      	bne.n	8000968 <TM_KEYPAD_INT_CheckRow+0x78>
		return KEYPAD_INT_Buttons[3][column - 1];
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	3b01      	subs	r3, #1
 8000960:	4a05      	ldr	r2, [pc, #20]	; (8000978 <TM_KEYPAD_INT_CheckRow+0x88>)
 8000962:	4413      	add	r3, r2
 8000964:	7b1b      	ldrb	r3, [r3, #12]
 8000966:	e000      	b.n	800096a <TM_KEYPAD_INT_CheckRow+0x7a>
	}

	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 8000968:	23ff      	movs	r3, #255	; 0xff
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40020800 	.word	0x40020800
 8000978:	20000000 	.word	0x20000000
 800097c:	200000c8 	.word	0x200000c8

08000980 <TM_KEYPAD_INT_Read>:

uint8_t TM_KEYPAD_INT_Read(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	TM_KEYPAD_INT_SetColumn(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff ff6c 	bl	8000864 <TM_KEYPAD_INT_SetColumn>
	/* Check rows */
	check = TM_KEYPAD_INT_CheckRow(1);
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff ffaf 	bl	80008f0 <TM_KEYPAD_INT_CheckRow>
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2bff      	cmp	r3, #255	; 0xff
 800099a:	d001      	beq.n	80009a0 <TM_KEYPAD_INT_Read+0x20>
		return check;
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	e02b      	b.n	80009f8 <TM_KEYPAD_INT_Read+0x78>
	}

	/* Set row 2 to LOW */
	TM_KEYPAD_INT_SetColumn(2);
 80009a0:	2002      	movs	r0, #2
 80009a2:	f7ff ff5f 	bl	8000864 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(2);
 80009a6:	2002      	movs	r0, #2
 80009a8:	f7ff ffa2 	bl	80008f0 <TM_KEYPAD_INT_CheckRow>
 80009ac:	4603      	mov	r3, r0
 80009ae:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2bff      	cmp	r3, #255	; 0xff
 80009b4:	d001      	beq.n	80009ba <TM_KEYPAD_INT_Read+0x3a>
		return check;
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	e01e      	b.n	80009f8 <TM_KEYPAD_INT_Read+0x78>
	}

	/* Set row 3 to LOW */
	TM_KEYPAD_INT_SetColumn(3);
 80009ba:	2003      	movs	r0, #3
 80009bc:	f7ff ff52 	bl	8000864 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(3);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f7ff ff95 	bl	80008f0 <TM_KEYPAD_INT_CheckRow>
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2bff      	cmp	r3, #255	; 0xff
 80009ce:	d001      	beq.n	80009d4 <TM_KEYPAD_INT_Read+0x54>
		return check;
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	e011      	b.n	80009f8 <TM_KEYPAD_INT_Read+0x78>
	}

	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large) {
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <TM_KEYPAD_INT_Read+0x80>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d10c      	bne.n	80009f6 <TM_KEYPAD_INT_Read+0x76>
		/* Set column 4 to LOW */
		TM_KEYPAD_INT_SetColumn(4);
 80009dc:	2004      	movs	r0, #4
 80009de:	f7ff ff41 	bl	8000864 <TM_KEYPAD_INT_SetColumn>
		/* Check rows */
		check = TM_KEYPAD_INT_CheckRow(4);
 80009e2:	2004      	movs	r0, #4
 80009e4:	f7ff ff84 	bl	80008f0 <TM_KEYPAD_INT_CheckRow>
 80009e8:	4603      	mov	r3, r0
 80009ea:	71fb      	strb	r3, [r7, #7]
		if (check != KEYPAD_NO_PRESSED) {
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2bff      	cmp	r3, #255	; 0xff
 80009f0:	d001      	beq.n	80009f6 <TM_KEYPAD_INT_Read+0x76>
			return check;
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	e000      	b.n	80009f8 <TM_KEYPAD_INT_Read+0x78>
		}
	}

	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 80009f6:	23ff      	movs	r3, #255	; 0xff
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200000c8 	.word	0x200000c8

08000a04 <TM_KEYPAD_Update>:

void TM_KEYPAD_Update(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	static uint16_t millis = 0;

	/* Every X ms read */
	if (++millis >= KEYPAD_READ_INTERVAL) {// && KeypadStatus == TM_KEYPAD_Button_NOPRESSED) {
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <TM_KEYPAD_Update+0x30>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <TM_KEYPAD_Update+0x30>)
 8000a12:	801a      	strh	r2, [r3, #0]
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <TM_KEYPAD_Update+0x30>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	2b31      	cmp	r3, #49	; 0x31
 8000a1a:	d908      	bls.n	8000a2e <TM_KEYPAD_Update+0x2a>
		/* Reset */
		millis = 0;
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <TM_KEYPAD_Update+0x30>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	801a      	strh	r2, [r3, #0]

		/* Read keyboard */
		KeypadStatus = (TM_KEYPAD_Button_t) TM_KEYPAD_INT_Read();
 8000a22:	f7ff ffad 	bl	8000980 <TM_KEYPAD_INT_Read>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <TM_KEYPAD_Update+0x34>)
 8000a2c:	701a      	strb	r2, [r3, #0]
	}
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000098 	.word	0x20000098
 8000a38:	20000010 	.word	0x20000010

08000a3c <SPI1_GPIOInits>:
 *
 * PA6 -> GPIO_OUTPUT_PIN
 * ALT function mode : 0
 */
void SPI1_GPIOInits(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <SPI1_GPIOInits+0xa0>)
 8000a44:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 8000a46:	2302      	movs	r3, #2
 8000a48:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a52:	2300      	movs	r3, #0
 8000a54:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a56:	2302      	movs	r3, #2
 8000a58:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000a5a:	2305      	movs	r3, #5
 8000a5c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fb07 	bl	8001074 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000a66:	2307      	movs	r3, #7
 8000a68:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fb01 	bl	8001074 <GPIO_Init>

	//MISO
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000a72:	2306      	movs	r3, #6
 8000a74:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fafb 	bl	8001074 <GPIO_Init>

	//NSS
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 faf5 	bl	8001074 <GPIO_Init>

	//CE
	SPIPins.pGPIOx = LCD5110_CE_PORT;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <SPI1_GPIOInits+0xa4>)
 8000a8c:	607b      	str	r3, [r7, #4]
 	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_CE_PIN;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	723b      	strb	r3, [r7, #8]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000a92:	2301      	movs	r3, #1
 8000a94:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&SPIPins);
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fae7 	bl	8001074 <GPIO_Init>

	//DC Pin GPIO
	SPIPins.pGPIOx = LCD5110_DC_PORT;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <SPI1_GPIOInits+0xa8>)
 8000aa8:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_DC_PIN;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	723b      	strb	r3, [r7, #8]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&SPIPins);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 fad9 	bl	8001074 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = LCD5110_RST_PORT;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <SPI1_GPIOInits+0xa0>)
 8000ac4:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_RST_PIN;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fad1 	bl	8001074 <GPIO_Init>
}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020400 	.word	0x40020400
 8000ae4:	40020800 	.word	0x40020800

08000ae8 <SPI1_Inits>:



void SPI1_Inits(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	SPI1handle.pSPIx = SPI1;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <SPI1_Inits+0x40>)
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <SPI1_Inits+0x44>)
 8000af0:	601a      	str	r2, [r3, #0]
	SPI1handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <SPI1_Inits+0x40>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	715a      	strb	r2, [r3, #5]
	SPI1handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <SPI1_Inits+0x40>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	711a      	strb	r2, [r3, #4]
	SPI1handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <SPI1_Inits+0x40>)
 8000b00:	2202      	movs	r2, #2
 8000b02:	719a      	strb	r2, [r3, #6]
	SPI1handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <SPI1_Inits+0x40>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	71da      	strb	r2, [r3, #7]
	SPI1handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <SPI1_Inits+0x40>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	721a      	strb	r2, [r3, #8]
	SPI1handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <SPI1_Inits+0x40>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	725a      	strb	r2, [r3, #9]
	SPI1handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SPI1_Inits+0x40>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI1handle);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <SPI1_Inits+0x40>)
 8000b1e:	f000 fda0 	bl	8001662 <SPI_Init>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000a8 	.word	0x200000a8
 8000b2c:	40013000 	.word	0x40013000

08000b30 <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]

	SPI_PeripheralControl(SPI1, ENABLE); //SS pin pull to LOW
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <LCD5110_send+0x40>)
 8000b3e:	f000 fe16 	bl	800176e <SPI_PeripheralControl>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2101      	movs	r1, #1
 8000b46:	480b      	ldr	r0, [pc, #44]	; (8000b74 <LCD5110_send+0x44>)
 8000b48:	f000 fc45 	bl	80013d6 <GPIO_WriteToOutputPin>

	SPI_Transfer(SPI1, data);
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4807      	ldr	r0, [pc, #28]	; (8000b70 <LCD5110_send+0x40>)
 8000b52:	f000 fde1 	bl	8001718 <SPI_Transfer>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 1);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <LCD5110_send+0x44>)
 8000b5c:	f000 fc3b 	bl	80013d6 <GPIO_WriteToOutputPin>

	SPI_PeripheralControl(SPI1, DISABLE); //SS pin pull to HIGH
 8000b60:	2100      	movs	r1, #0
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <LCD5110_send+0x40>)
 8000b64:	f000 fe03 	bl	800176e <SPI_PeripheralControl>
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40013000 	.word	0x40013000
 8000b74:	40020400 	.word	0x40020400

08000b78 <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	460a      	mov	r2, r1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	4613      	mov	r3, r2
 8000b86:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d002      	beq.n	8000b94 <LCD5110_Pin+0x1c>
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d00f      	beq.n	8000bb2 <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 8000b92:	e01d      	b.n	8000bd0 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8000b94:	79bb      	ldrb	r3, [r7, #6]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d005      	beq.n	8000ba6 <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2105      	movs	r1, #5
 8000b9e:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <LCD5110_Pin+0x60>)
 8000ba0:	f000 fc19 	bl	80013d6 <GPIO_WriteToOutputPin>
			break;
 8000ba4:	e014      	b.n	8000bd0 <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2105      	movs	r1, #5
 8000baa:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <LCD5110_Pin+0x60>)
 8000bac:	f000 fc13 	bl	80013d6 <GPIO_WriteToOutputPin>
			break;
 8000bb0:	e00e      	b.n	8000bd0 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8000bb2:	79bb      	ldrb	r3, [r7, #6]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d005      	beq.n	8000bc4 <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2103      	movs	r1, #3
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <LCD5110_Pin+0x64>)
 8000bbe:	f000 fc0a 	bl	80013d6 <GPIO_WriteToOutputPin>
			break;
 8000bc2:	e004      	b.n	8000bce <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2103      	movs	r1, #3
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <LCD5110_Pin+0x64>)
 8000bca:	f000 fc04 	bl	80013d6 <GPIO_WriteToOutputPin>
			break;
 8000bce:	bf00      	nop
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020000 	.word	0x40020000

08000be0 <LCD5110_Delay>:

void LCD5110_Delay(unsigned long micros) {
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++) {
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	e002      	b.n	8000bf4 <LCD5110_Delay+0x14>
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f8      	bhi.n	8000bee <LCD5110_Delay+0xe>
	}
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	SPI1_GPIOInits();
 8000c12:	f7ff ff13 	bl	8000a3c <SPI1_GPIOInits>
	SPI1_Inits();
 8000c16:	f7ff ff67 	bl	8000ae8 <SPI1_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI1, ENABLE);
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	481c      	ldr	r0, [pc, #112]	; (8000c90 <LCD5110_Init+0x88>)
 8000c1e:	f000 fd05 	bl	800162c <SPI_SSOEConfig>

	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 8000c22:	2100      	movs	r1, #0
 8000c24:	2002      	movs	r0, #2
 8000c26:	f7ff ffa7 	bl	8000b78 <LCD5110_Pin>
	LCD5110_Delay(10000);
 8000c2a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c2e:	f7ff ffd7 	bl	8000be0 <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 8000c32:	2101      	movs	r1, #1
 8000c34:	2002      	movs	r0, #2
 8000c36:	f7ff ff9f 	bl	8000b78 <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 8000c3a:	2121      	movs	r1, #33	; 0x21
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 f829 	bl	8000c94 <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 8000c42:	2114      	movs	r1, #20
 8000c44:	2000      	movs	r0, #0
 8000c46:	f000 f825 	bl	8000c94 <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	da01      	bge.n	8000c56 <LCD5110_Init+0x4e>
		contrast = 0x7F;
 8000c52:	237f      	movs	r3, #127	; 0x7f
 8000c54:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4619      	mov	r1, r3
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 f817 	bl	8000c94 <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 8000c66:	2120      	movs	r1, #32
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f000 f813 	bl	8000c94 <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8000c6e:	210c      	movs	r1, #12
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 f80f 	bl	8000c94 <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 8000c76:	f000 f853 	bl	8000d20 <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8000c7a:	210c      	movs	r1, #12
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f000 f809 	bl	8000c94 <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 8000c82:	f000 f827 	bl	8000cd4 <LCD5110_Clear>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40013000 	.word	0x40013000

08000c94 <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	71fb      	strb	r3, [r7, #7]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d006      	beq.n	8000cb8 <LCD5110_Write+0x24>
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d109      	bne.n	8000cc2 <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 8000cae:	2101      	movs	r1, #1
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff ff61 	bl	8000b78 <LCD5110_Pin>
			break;
 8000cb6:	e005      	b.n	8000cc4 <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f7ff ff5c 	bl	8000b78 <LCD5110_Pin>
			break;
 8000cc0:	e000      	b.n	8000cc4 <LCD5110_Write+0x30>
		default: break;
 8000cc2:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 8000cc4:	79bb      	ldrb	r3, [r7, #6]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff32 	bl	8000b30 <LCD5110_send>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 8000cda:	f000 f821 	bl	8000d20 <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	e007      	b.n	8000cf4 <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <LCD5110_Clear+0x48>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000cfa:	d3f3      	bcc.n	8000ce4 <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f8b8 	bl	8000e74 <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 8000d04:	232f      	movs	r3, #47	; 0x2f
 8000d06:	2253      	movs	r2, #83	; 0x53
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f876 	bl	8000dfc <LCD5110_UpdateArea>
	LCD5110_Refresh();
 8000d10:	f000 f812 	bl	8000d38 <LCD5110_Refresh>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000d0 	.word	0x200000d0

08000d20 <LCD5110_Home>:

void LCD5110_Home(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff ffb4 	bl	8000c94 <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff ffb0 	bl	8000c94 <LCD5110_Write>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 8000d3e:	2300      	movs	r3, #0
 8000d40:	71fb      	strb	r3, [r7, #7]
 8000d42:	e03b      	b.n	8000dbc <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 8000d44:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <LCD5110_Refresh+0xb0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dc2f      	bgt.n	8000db4 <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	4a24      	ldr	r2, [pc, #144]	; (8000dec <LCD5110_Refresh+0xb4>)
 8000d5a:	7812      	ldrb	r2, [r2, #0]
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	dc31      	bgt.n	8000dc4 <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4619      	mov	r1, r3
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff ff92 	bl	8000c94 <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <LCD5110_Refresh+0xb8>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff ff89 	bl	8000c94 <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8000d82:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <LCD5110_Refresh+0xb8>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	71bb      	strb	r3, [r7, #6]
 8000d88:	e00e      	b.n	8000da8 <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2254      	movs	r2, #84	; 0x54
 8000d8e:	fb02 f203 	mul.w	r2, r2, r3
 8000d92:	79bb      	ldrb	r3, [r7, #6]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <LCD5110_Refresh+0xbc>)
 8000d98:	5cd3      	ldrb	r3, [r2, r3]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff ff79 	bl	8000c94 <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8000da2:	79bb      	ldrb	r3, [r7, #6]
 8000da4:	3301      	adds	r3, #1
 8000da6:	71bb      	strb	r3, [r7, #6]
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <LCD5110_Refresh+0xc0>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	79ba      	ldrb	r2, [r7, #6]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d9eb      	bls.n	8000d8a <LCD5110_Refresh+0x52>
 8000db2:	e000      	b.n	8000db6 <LCD5110_Refresh+0x7e>
			continue;
 8000db4:	bf00      	nop
	for (i = 0; i < 6; i++) {
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	3301      	adds	r3, #1
 8000dba:	71fb      	strb	r3, [r7, #7]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b05      	cmp	r3, #5
 8000dc0:	d9c0      	bls.n	8000d44 <LCD5110_Refresh+0xc>
 8000dc2:	e000      	b.n	8000dc6 <LCD5110_Refresh+0x8e>
			break;
 8000dc4:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <LCD5110_Refresh+0xb8>)
 8000dc8:	2253      	movs	r2, #83	; 0x53
 8000dca:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <LCD5110_Refresh+0xc0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <LCD5110_Refresh+0xb0>)
 8000dd4:	222f      	movs	r2, #47	; 0x2f
 8000dd6:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <LCD5110_Refresh+0xb4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2000009c 	.word	0x2000009c
 8000dec:	2000009d 	.word	0x2000009d
 8000df0:	2000009a 	.word	0x2000009a
 8000df4:	200000d0 	.word	0x200000d0
 8000df8:	2000009b 	.word	0x2000009b

08000dfc <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 8000dfc:	b490      	push	{r4, r7}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4604      	mov	r4, r0
 8000e04:	4608      	mov	r0, r1
 8000e06:	4611      	mov	r1, r2
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71bb      	strb	r3, [r7, #6]
 8000e12:	460b      	mov	r3, r1
 8000e14:	717b      	strb	r3, [r7, #5]
 8000e16:	4613      	mov	r3, r2
 8000e18:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <LCD5110_UpdateArea+0x68>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	79fa      	ldrb	r2, [r7, #7]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d202      	bcs.n	8000e2a <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 8000e24:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <LCD5110_UpdateArea+0x68>)
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <LCD5110_UpdateArea+0x6c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	797a      	ldrb	r2, [r7, #5]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d902      	bls.n	8000e3a <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 8000e34:	4a0c      	ldr	r2, [pc, #48]	; (8000e68 <LCD5110_UpdateArea+0x6c>)
 8000e36:	797b      	ldrb	r3, [r7, #5]
 8000e38:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <LCD5110_UpdateArea+0x70>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	79ba      	ldrb	r2, [r7, #6]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d202      	bcs.n	8000e4a <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 8000e44:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <LCD5110_UpdateArea+0x70>)
 8000e46:	79bb      	ldrb	r3, [r7, #6]
 8000e48:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <LCD5110_UpdateArea+0x74>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	793a      	ldrb	r2, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d902      	bls.n	8000e5a <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <LCD5110_UpdateArea+0x74>)
 8000e56:	793b      	ldrb	r3, [r7, #4]
 8000e58:	7013      	strb	r3, [r2, #0]
	}
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc90      	pop	{r4, r7}
 8000e62:	4770      	bx	lr
 8000e64:	2000009a 	.word	0x2000009a
 8000e68:	2000009b 	.word	0x2000009b
 8000e6c:	2000009c 	.word	0x2000009c
 8000e70:	2000009d 	.word	0x2000009d

08000e74 <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 8000e84:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <LCD5110_GotoXY+0x28>)
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <LCD5110_GotoXY+0x2c>)
 8000e8c:	79bb      	ldrb	r3, [r7, #6]
 8000e8e:	7013      	strb	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	200000cc 	.word	0x200000cc
 8000ea0:	200000cd 	.word	0x200000cd

08000ea4 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t*pGPIOx, uint8_t EnorDi)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d162      	bne.n	8000f7c <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a64      	ldr	r2, [pc, #400]	; (800104c <GPIO_PeriClockControl+0x1a8>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d106      	bne.n	8000ecc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000ebe:	4b64      	ldr	r3, [pc, #400]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a63      	ldr	r2, [pc, #396]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000eca:	e0b9      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a61      	ldr	r2, [pc, #388]	; (8001054 <GPIO_PeriClockControl+0x1b0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d106      	bne.n	8000ee2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000ed4:	4b5e      	ldr	r3, [pc, #376]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4a5d      	ldr	r2, [pc, #372]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ee0:	e0ae      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a5c      	ldr	r2, [pc, #368]	; (8001058 <GPIO_PeriClockControl+0x1b4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d106      	bne.n	8000ef8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000eea:	4b59      	ldr	r3, [pc, #356]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a58      	ldr	r2, [pc, #352]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ef6:	e0a3      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a58      	ldr	r2, [pc, #352]	; (800105c <GPIO_PeriClockControl+0x1b8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d106      	bne.n	8000f0e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000f00:	4b53      	ldr	r3, [pc, #332]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	4a52      	ldr	r2, [pc, #328]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f0c:	e098      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a53      	ldr	r2, [pc, #332]	; (8001060 <GPIO_PeriClockControl+0x1bc>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d106      	bne.n	8000f24 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000f16:	4b4e      	ldr	r3, [pc, #312]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a4d      	ldr	r2, [pc, #308]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000f1c:	f043 0310 	orr.w	r3, r3, #16
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f22:	e08d      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a4f      	ldr	r2, [pc, #316]	; (8001064 <GPIO_PeriClockControl+0x1c0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d106      	bne.n	8000f3a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000f2c:	4b48      	ldr	r3, [pc, #288]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	4a47      	ldr	r2, [pc, #284]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000f32:	f043 0320 	orr.w	r3, r3, #32
 8000f36:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f38:	e082      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4a      	ldr	r2, [pc, #296]	; (8001068 <GPIO_PeriClockControl+0x1c4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d106      	bne.n	8000f50 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000f42:	4b43      	ldr	r3, [pc, #268]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a42      	ldr	r2, [pc, #264]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f4e:	e077      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a46      	ldr	r2, [pc, #280]	; (800106c <GPIO_PeriClockControl+0x1c8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d106      	bne.n	8000f66 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000f58:	4b3d      	ldr	r3, [pc, #244]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	4a3c      	ldr	r2, [pc, #240]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f62:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f64:	e06c      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a41      	ldr	r2, [pc, #260]	; (8001070 <GPIO_PeriClockControl+0x1cc>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d168      	bne.n	8001040 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a37      	ldr	r2, [pc, #220]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f7a:	e061      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a33      	ldr	r2, [pc, #204]	; (800104c <GPIO_PeriClockControl+0x1a8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d106      	bne.n	8000f92 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000f84:	4b32      	ldr	r3, [pc, #200]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a31      	ldr	r2, [pc, #196]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000f8a:	f023 0301 	bic.w	r3, r3, #1
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f90:	e056      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a2f      	ldr	r2, [pc, #188]	; (8001054 <GPIO_PeriClockControl+0x1b0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d106      	bne.n	8000fa8 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a2c      	ldr	r2, [pc, #176]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000fa0:	f023 0302 	bic.w	r3, r3, #2
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fa6:	e04b      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a2b      	ldr	r2, [pc, #172]	; (8001058 <GPIO_PeriClockControl+0x1b4>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d106      	bne.n	8000fbe <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	4a26      	ldr	r2, [pc, #152]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000fb6:	f023 0304 	bic.w	r3, r3, #4
 8000fba:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fbc:	e040      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a26      	ldr	r2, [pc, #152]	; (800105c <GPIO_PeriClockControl+0x1b8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d106      	bne.n	8000fd4 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a21      	ldr	r2, [pc, #132]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000fcc:	f023 0308 	bic.w	r3, r3, #8
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fd2:	e035      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a22      	ldr	r2, [pc, #136]	; (8001060 <GPIO_PeriClockControl+0x1bc>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d106      	bne.n	8000fea <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000fe2:	f023 0310 	bic.w	r3, r3, #16
 8000fe6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fe8:	e02a      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <GPIO_PeriClockControl+0x1c0>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d106      	bne.n	8001000 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8000ff8:	f023 0320 	bic.w	r3, r3, #32
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ffe:	e01f      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a19      	ldr	r2, [pc, #100]	; (8001068 <GPIO_PeriClockControl+0x1c4>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d106      	bne.n	8001016 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	4a10      	ldr	r2, [pc, #64]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 800100e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001012:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001014:	e014      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <GPIO_PeriClockControl+0x1c8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d106      	bne.n	800102c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8001024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
}
 800102a:	e009      	b.n	8001040 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <GPIO_PeriClockControl+0x1cc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d105      	bne.n	8001040 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	4a05      	ldr	r2, [pc, #20]	; (8001050 <GPIO_PeriClockControl+0x1ac>)
 800103a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800103e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40020000 	.word	0x40020000
 8001050:	40023800 	.word	0x40023800
 8001054:	40020400 	.word	0x40020400
 8001058:	40020800 	.word	0x40020800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	40021000 	.word	0x40021000
 8001064:	40021400 	.word	0x40021400
 8001068:	40021800 	.word	0x40021800
 800106c:	40021c00 	.word	0x40021c00
 8001070:	40022000 	.word	0x40022000

08001074 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2101      	movs	r1, #1
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff0c 	bl	8000ea4 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	795b      	ldrb	r3, [r3, #5]
 8001090:	2b03      	cmp	r3, #3
 8001092:	d820      	bhi.n	80010d6 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	795b      	ldrb	r3, [r3, #5]
 8001098:	461a      	mov	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	791b      	ldrb	r3, [r3, #4]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	791b      	ldrb	r3, [r3, #4]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2103      	movs	r1, #3
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	4619      	mov	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	400a      	ands	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6819      	ldr	r1, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e0cb      	b.n	800126e <GPIO_Init+0x1fa>

	}else
	{
		// interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	795b      	ldrb	r3, [r3, #5]
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d117      	bne.n	800110e <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010de:	4b4b      	ldr	r3, [pc, #300]	; (800120c <GPIO_Init+0x198>)
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	7912      	ldrb	r2, [r2, #4]
 80010e6:	4611      	mov	r1, r2
 80010e8:	2201      	movs	r2, #1
 80010ea:	408a      	lsls	r2, r1
 80010ec:	4611      	mov	r1, r2
 80010ee:	4a47      	ldr	r2, [pc, #284]	; (800120c <GPIO_Init+0x198>)
 80010f0:	430b      	orrs	r3, r1
 80010f2:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010f4:	4b45      	ldr	r3, [pc, #276]	; (800120c <GPIO_Init+0x198>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	7912      	ldrb	r2, [r2, #4]
 80010fc:	4611      	mov	r1, r2
 80010fe:	2201      	movs	r2, #1
 8001100:	408a      	lsls	r2, r1
 8001102:	43d2      	mvns	r2, r2
 8001104:	4611      	mov	r1, r2
 8001106:	4a41      	ldr	r2, [pc, #260]	; (800120c <GPIO_Init+0x198>)
 8001108:	400b      	ands	r3, r1
 800110a:	6093      	str	r3, [r2, #8]
 800110c:	e035      	b.n	800117a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	795b      	ldrb	r3, [r3, #5]
 8001112:	2b05      	cmp	r3, #5
 8001114:	d117      	bne.n	8001146 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <GPIO_Init+0x198>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	7912      	ldrb	r2, [r2, #4]
 800111e:	4611      	mov	r1, r2
 8001120:	2201      	movs	r2, #1
 8001122:	408a      	lsls	r2, r1
 8001124:	4611      	mov	r1, r2
 8001126:	4a39      	ldr	r2, [pc, #228]	; (800120c <GPIO_Init+0x198>)
 8001128:	430b      	orrs	r3, r1
 800112a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800112c:	4b37      	ldr	r3, [pc, #220]	; (800120c <GPIO_Init+0x198>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	7912      	ldrb	r2, [r2, #4]
 8001134:	4611      	mov	r1, r2
 8001136:	2201      	movs	r2, #1
 8001138:	408a      	lsls	r2, r1
 800113a:	43d2      	mvns	r2, r2
 800113c:	4611      	mov	r1, r2
 800113e:	4a33      	ldr	r2, [pc, #204]	; (800120c <GPIO_Init+0x198>)
 8001140:	400b      	ands	r3, r1
 8001142:	60d3      	str	r3, [r2, #12]
 8001144:	e019      	b.n	800117a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	795b      	ldrb	r3, [r3, #5]
 800114a:	2b06      	cmp	r3, #6
 800114c:	d115      	bne.n	800117a <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800114e:	4b2f      	ldr	r3, [pc, #188]	; (800120c <GPIO_Init+0x198>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	7912      	ldrb	r2, [r2, #4]
 8001156:	4611      	mov	r1, r2
 8001158:	2201      	movs	r2, #1
 800115a:	408a      	lsls	r2, r1
 800115c:	4611      	mov	r1, r2
 800115e:	4a2b      	ldr	r2, [pc, #172]	; (800120c <GPIO_Init+0x198>)
 8001160:	430b      	orrs	r3, r1
 8001162:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001164:	4b29      	ldr	r3, [pc, #164]	; (800120c <GPIO_Init+0x198>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	7912      	ldrb	r2, [r2, #4]
 800116c:	4611      	mov	r1, r2
 800116e:	2201      	movs	r2, #1
 8001170:	408a      	lsls	r2, r1
 8001172:	4611      	mov	r1, r2
 8001174:	4a25      	ldr	r2, [pc, #148]	; (800120c <GPIO_Init+0x198>)
 8001176:	430b      	orrs	r3, r1
 8001178:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	791b      	ldrb	r3, [r3, #4]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	791b      	ldrb	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <GPIO_Init+0x19c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d04e      	beq.n	8001234 <GPIO_Init+0x1c0>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <GPIO_Init+0x1a0>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d032      	beq.n	8001206 <GPIO_Init+0x192>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <GPIO_Init+0x1a4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d02b      	beq.n	8001202 <GPIO_Init+0x18e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a1b      	ldr	r2, [pc, #108]	; (800121c <GPIO_Init+0x1a8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d024      	beq.n	80011fe <GPIO_Init+0x18a>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a19      	ldr	r2, [pc, #100]	; (8001220 <GPIO_Init+0x1ac>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d01d      	beq.n	80011fa <GPIO_Init+0x186>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <GPIO_Init+0x1b0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d016      	beq.n	80011f6 <GPIO_Init+0x182>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a16      	ldr	r2, [pc, #88]	; (8001228 <GPIO_Init+0x1b4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00f      	beq.n	80011f2 <GPIO_Init+0x17e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a15      	ldr	r2, [pc, #84]	; (800122c <GPIO_Init+0x1b8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d008      	beq.n	80011ee <GPIO_Init+0x17a>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a13      	ldr	r2, [pc, #76]	; (8001230 <GPIO_Init+0x1bc>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <GPIO_Init+0x176>
 80011e6:	2308      	movs	r3, #8
 80011e8:	e025      	b.n	8001236 <GPIO_Init+0x1c2>
 80011ea:	2300      	movs	r3, #0
 80011ec:	e023      	b.n	8001236 <GPIO_Init+0x1c2>
 80011ee:	2307      	movs	r3, #7
 80011f0:	e021      	b.n	8001236 <GPIO_Init+0x1c2>
 80011f2:	2306      	movs	r3, #6
 80011f4:	e01f      	b.n	8001236 <GPIO_Init+0x1c2>
 80011f6:	2305      	movs	r3, #5
 80011f8:	e01d      	b.n	8001236 <GPIO_Init+0x1c2>
 80011fa:	2304      	movs	r3, #4
 80011fc:	e01b      	b.n	8001236 <GPIO_Init+0x1c2>
 80011fe:	2303      	movs	r3, #3
 8001200:	e019      	b.n	8001236 <GPIO_Init+0x1c2>
 8001202:	2302      	movs	r3, #2
 8001204:	e017      	b.n	8001236 <GPIO_Init+0x1c2>
 8001206:	2301      	movs	r3, #1
 8001208:	e015      	b.n	8001236 <GPIO_Init+0x1c2>
 800120a:	bf00      	nop
 800120c:	40013c00 	.word	0x40013c00
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400
 8001218:	40020800 	.word	0x40020800
 800121c:	40020c00 	.word	0x40020c00
 8001220:	40021000 	.word	0x40021000
 8001224:	40021400 	.word	0x40021400
 8001228:	40021800 	.word	0x40021800
 800122c:	40021c00 	.word	0x40021c00
 8001230:	40022000 	.word	0x40022000
 8001234:	2300      	movs	r3, #0
 8001236:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8001238:	4b59      	ldr	r3, [pc, #356]	; (80013a0 <GPIO_Init+0x32c>)
 800123a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123c:	4a58      	ldr	r2, [pc, #352]	; (80013a0 <GPIO_Init+0x32c>)
 800123e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001242:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8001244:	7c7a      	ldrb	r2, [r7, #17]
 8001246:	7cbb      	ldrb	r3, [r7, #18]
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	fa02 f103 	lsl.w	r1, r2, r3
 800124e:	4a55      	ldr	r2, [pc, #340]	; (80013a4 <GPIO_Init+0x330>)
 8001250:	7cfb      	ldrb	r3, [r7, #19]
 8001252:	3302      	adds	r3, #2
 8001254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8001258:	4b53      	ldr	r3, [pc, #332]	; (80013a8 <GPIO_Init+0x334>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	7912      	ldrb	r2, [r2, #4]
 8001260:	4611      	mov	r1, r2
 8001262:	2201      	movs	r2, #1
 8001264:	408a      	lsls	r2, r1
 8001266:	4611      	mov	r1, r2
 8001268:	4a4f      	ldr	r2, [pc, #316]	; (80013a8 <GPIO_Init+0x334>)
 800126a:	430b      	orrs	r3, r1
 800126c:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	799b      	ldrb	r3, [r3, #6]
 8001272:	461a      	mov	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	791b      	ldrb	r3, [r3, #4]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	791b      	ldrb	r3, [r3, #4]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2103      	movs	r1, #3
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	4619      	mov	r1, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	400a      	ands	r2, r1
 800129c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6899      	ldr	r1, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	79db      	ldrb	r3, [r3, #7]
 80012b2:	461a      	mov	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	791b      	ldrb	r3, [r3, #4]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	791b      	ldrb	r3, [r3, #4]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2103      	movs	r1, #3
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	4619      	mov	r1, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	400a      	ands	r2, r1
 80012dc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68d9      	ldr	r1, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinoType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7a1b      	ldrb	r3, [r3, #8]
 80012f2:	461a      	mov	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	791b      	ldrb	r3, [r3, #4]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	791b      	ldrb	r3, [r3, #4]
 8001308:	4619      	mov	r1, r3
 800130a:	2301      	movs	r3, #1
 800130c:	408b      	lsls	r3, r1
 800130e:	43db      	mvns	r3, r3
 8001310:	4619      	mov	r1, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	400a      	ands	r2, r1
 8001318:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6859      	ldr	r1, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	430a      	orrs	r2, r1
 8001328:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	795b      	ldrb	r3, [r3, #5]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d131      	bne.n	8001396 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	791b      	ldrb	r3, [r3, #4]
 8001336:	08db      	lsrs	r3, r3, #3
 8001338:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	791b      	ldrb	r3, [r3, #4]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	7c3a      	ldrb	r2, [r7, #16]
 800134a:	3208      	adds	r2, #8
 800134c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	7c3a      	ldrb	r2, [r7, #16]
 8001364:	4001      	ands	r1, r0
 8001366:	3208      	adds	r2, #8
 8001368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	7c3a      	ldrb	r2, [r7, #16]
 8001372:	3208      	adds	r2, #8
 8001374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7a5b      	ldrb	r3, [r3, #9]
 800137c:	461a      	mov	r2, r3
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	7c3a      	ldrb	r2, [r7, #16]
 800138e:	4301      	orrs	r1, r0
 8001390:	3208      	adds	r2, #8
 8001392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40013c00 	.word	0x40013c00

080013ac <GPIO_ReadFromInputPin>:

/*
 * Data read & write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (pGPIOx->IDR >> PinNumber) & 0x00000001;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	fa22 f303 	lsr.w	r3, r2, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
	return value;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <GPIO_WriteToOutputPin>:
	uint16_t value;
	value = (uint8_t)pGPIOx->IDR;
	return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	70fb      	strb	r3, [r7, #3]
 80013e2:	4613      	mov	r3, r2
 80013e4:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 80013e6:	78bb      	ldrb	r3, [r7, #2]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d109      	bne.n	8001400 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx -> ODR |= (1 << PinNumber);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	78fa      	ldrb	r2, [r7, #3]
 80013f2:	2101      	movs	r1, #1
 80013f4:	fa01 f202 	lsl.w	r2, r1, r2
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	615a      	str	r2, [r3, #20]
	} else
	{
		//write 0
		pGPIOx -> ODR &= ~(1 << PinNumber);
	}
}
 80013fe:	e009      	b.n	8001414 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx -> ODR &= ~(1 << PinNumber);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	78fa      	ldrb	r2, [r7, #3]
 8001406:	2101      	movs	r1, #1
 8001408:	fa01 f202 	lsl.w	r2, r1, r2
 800140c:	43d2      	mvns	r2, r2
 800140e:	401a      	ands	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	615a      	str	r2, [r3, #20]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
	...

08001420 <GPIO_IRQInterruptConfig>:
}
/*
 * IRQ Configuration & ISR handling
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	71fb      	strb	r3, [r7, #7]
 800142c:	4613      	mov	r3, r2
 800142e:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8001430:	79bb      	ldrb	r3, [r7, #6]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d133      	bne.n	800149e <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <=31)
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b1f      	cmp	r3, #31
 800143a:	d80a      	bhi.n	8001452 <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 800143c:	4b34      	ldr	r3, [pc, #208]	; (8001510 <GPIO_IRQInterruptConfig+0xf0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	79fa      	ldrb	r2, [r7, #7]
 8001442:	2101      	movs	r1, #1
 8001444:	fa01 f202 	lsl.w	r2, r1, r2
 8001448:	4611      	mov	r1, r2
 800144a:	4a31      	ldr	r2, [pc, #196]	; (8001510 <GPIO_IRQInterruptConfig+0xf0>)
 800144c:	430b      	orrs	r3, r1
 800144e:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
		}
	}

}
 8001450:	e059      	b.n	8001506 <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber >31 && IRQNumber < 64)
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b1f      	cmp	r3, #31
 8001456:	d90f      	bls.n	8001478 <GPIO_IRQInterruptConfig+0x58>
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b3f      	cmp	r3, #63	; 0x3f
 800145c:	d80c      	bhi.n	8001478 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << IRQNumber %32 );
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <GPIO_IRQInterruptConfig+0xf4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	f002 021f 	and.w	r2, r2, #31
 8001468:	2101      	movs	r1, #1
 800146a:	fa01 f202 	lsl.w	r2, r1, r2
 800146e:	4611      	mov	r1, r2
 8001470:	4a28      	ldr	r2, [pc, #160]	; (8001514 <GPIO_IRQInterruptConfig+0xf4>)
 8001472:	430b      	orrs	r3, r1
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e046      	b.n	8001506 <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >=64 && IRQNumber < 96)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b3f      	cmp	r3, #63	; 0x3f
 800147c:	d943      	bls.n	8001506 <GPIO_IRQInterruptConfig+0xe6>
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b5f      	cmp	r3, #95	; 0x5f
 8001482:	d840      	bhi.n	8001506 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << IRQNumber % 64 );
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <GPIO_IRQInterruptConfig+0xf8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800148e:	2101      	movs	r1, #1
 8001490:	fa01 f202 	lsl.w	r2, r1, r2
 8001494:	4611      	mov	r1, r2
 8001496:	4a20      	ldr	r2, [pc, #128]	; (8001518 <GPIO_IRQInterruptConfig+0xf8>)
 8001498:	430b      	orrs	r3, r1
 800149a:	6013      	str	r3, [r2, #0]
}
 800149c:	e033      	b.n	8001506 <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <=31)
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b1f      	cmp	r3, #31
 80014a2:	d80a      	bhi.n	80014ba <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <GPIO_IRQInterruptConfig+0xfc>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	79fa      	ldrb	r2, [r7, #7]
 80014aa:	2101      	movs	r1, #1
 80014ac:	fa01 f202 	lsl.w	r2, r1, r2
 80014b0:	4611      	mov	r1, r2
 80014b2:	4a1a      	ldr	r2, [pc, #104]	; (800151c <GPIO_IRQInterruptConfig+0xfc>)
 80014b4:	430b      	orrs	r3, r1
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	e025      	b.n	8001506 <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber >31 && IRQNumber < 64)
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b1f      	cmp	r3, #31
 80014be:	d90f      	bls.n	80014e0 <GPIO_IRQInterruptConfig+0xc0>
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b3f      	cmp	r3, #63	; 0x3f
 80014c4:	d80c      	bhi.n	80014e0 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << IRQNumber % 32 );
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <GPIO_IRQInterruptConfig+0x100>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	79fa      	ldrb	r2, [r7, #7]
 80014cc:	f002 021f 	and.w	r2, r2, #31
 80014d0:	2101      	movs	r1, #1
 80014d2:	fa01 f202 	lsl.w	r2, r1, r2
 80014d6:	4611      	mov	r1, r2
 80014d8:	4a11      	ldr	r2, [pc, #68]	; (8001520 <GPIO_IRQInterruptConfig+0x100>)
 80014da:	430b      	orrs	r3, r1
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e012      	b.n	8001506 <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >=64 && IRQNumber < 96)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b3f      	cmp	r3, #63	; 0x3f
 80014e4:	d90f      	bls.n	8001506 <GPIO_IRQInterruptConfig+0xe6>
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b5f      	cmp	r3, #95	; 0x5f
 80014ea:	d80c      	bhi.n	8001506 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <GPIO_IRQInterruptConfig+0x104>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	79fa      	ldrb	r2, [r7, #7]
 80014f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80014f6:	2101      	movs	r1, #1
 80014f8:	fa01 f202 	lsl.w	r2, r1, r2
 80014fc:	4611      	mov	r1, r2
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <GPIO_IRQInterruptConfig+0x104>)
 8001500:	430b      	orrs	r3, r1
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	e7ff      	b.n	8001506 <GPIO_IRQInterruptConfig+0xe6>
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000e104 	.word	0xe000e104
 8001518:	e000e108 	.word	0xe000e108
 800151c:	e000e180 	.word	0xe000e180
 8001520:	e000e184 	.word	0xe000e184
 8001524:	e000e188 	.word	0xe000e188

08001528 <GPIO_IRQPriorityConfig>:
void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
	//1. First find out the ipr register
	uint8_t iprx = IRQNumber /4;
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber %4;
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * iprx_section) + (8- NO_PR_BITS_IMPLEMENTED);
 8001542:	7bbb      	ldrb	r3, [r7, #14]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	3304      	adds	r3, #4
 800154a:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount );
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001554:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	7b7b      	ldrb	r3, [r7, #13]
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	409a      	lsls	r2, r3
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001568:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800156c:	430a      	orrs	r2, r1
 800156e:	601a      	str	r2, [r3, #0]

}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
	...

0800157c <SPI_PeriClockControl>:
static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_RegDef_t*pSPIx, uint8_t EnorDi)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d120      	bne.n	80015d0 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a22      	ldr	r2, [pc, #136]	; (800161c <SPI_PeriClockControl+0xa0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d106      	bne.n	80015a4 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8001596:	4b22      	ldr	r3, [pc, #136]	; (8001620 <SPI_PeriClockControl+0xa4>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a21      	ldr	r2, [pc, #132]	; (8001620 <SPI_PeriClockControl+0xa4>)
 800159c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI3_PCLK_DI();
		}
	}

}
 80015a2:	e035      	b.n	8001610 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <SPI_PeriClockControl+0xa8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d106      	bne.n	80015ba <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80015ac:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <SPI_PeriClockControl+0xa4>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	4a1b      	ldr	r2, [pc, #108]	; (8001620 <SPI_PeriClockControl+0xa4>)
 80015b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80015b8:	e02a      	b.n	8001610 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <SPI_PeriClockControl+0xac>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d126      	bne.n	8001610 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <SPI_PeriClockControl+0xa4>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a16      	ldr	r2, [pc, #88]	; (8001620 <SPI_PeriClockControl+0xa4>)
 80015c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80015ce:	e01f      	b.n	8001610 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <SPI_PeriClockControl+0xa0>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d106      	bne.n	80015e6 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <SPI_PeriClockControl+0xa4>)
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	4a10      	ldr	r2, [pc, #64]	; (8001620 <SPI_PeriClockControl+0xa4>)
 80015de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015e2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80015e4:	e014      	b.n	8001610 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <SPI_PeriClockControl+0xa8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d106      	bne.n	80015fc <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <SPI_PeriClockControl+0xa4>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <SPI_PeriClockControl+0xa4>)
 80015f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	; 0x44
}
 80015fa:	e009      	b.n	8001610 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <SPI_PeriClockControl+0xac>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d105      	bne.n	8001610 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <SPI_PeriClockControl+0xa4>)
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	4a05      	ldr	r2, [pc, #20]	; (8001620 <SPI_PeriClockControl+0xa4>)
 800160a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800160e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40013000 	.word	0x40013000
 8001620:	40023800 	.word	0x40023800
 8001624:	40003800 	.word	0x40003800
 8001628:	40003c00 	.word	0x40003c00

0800162c <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d106      	bne.n	800164c <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f043 0204 	orr.w	r2, r3, #4
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 800164a:	e005      	b.n	8001658 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f023 0204 	bic.w	r2, r3, #4
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	605a      	str	r2, [r3, #4]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <SPI_Init>:
/************************
 *
 */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]

	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2101      	movs	r1, #1
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff83 	bl	800157c <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	791b      	ldrb	r3, [r3, #4]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	461a      	mov	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4313      	orrs	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	795b      	ldrb	r3, [r3, #5]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d104      	bne.n	800169a <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	e014      	b.n	80016c4 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	795b      	ldrb	r3, [r3, #5]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d104      	bne.n	80016ac <SPI_Init+0x4a>
	{
		//BIDI mode should be set
		tempreg |= ~(1<<SPI_CR1_BIDIMODE);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e00b      	b.n	80016c4 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	795b      	ldrb	r3, [r3, #5]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d107      	bne.n	80016c4 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016ba:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1<<SPI_CR1_RXONLY);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c2:	60fb      	str	r3, [r7, #12]
	}
	//3. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	799b      	ldrb	r3, [r3, #6]
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	461a      	mov	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	79db      	ldrb	r3, [r3, #7]
 80016d6:	02db      	lsls	r3, r3, #11
 80016d8:	461a      	mov	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4313      	orrs	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7a1b      	ldrb	r3, [r3, #8]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	7a5b      	ldrb	r3, [r3, #9]
 80016f2:	461a      	mov	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7a9b      	ldrb	r3, [r3, #10]
 80016fe:	025b      	lsls	r3, r3, #9
 8001700:	461a      	mov	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	601a      	str	r2, [r3, #0]
}
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <SPI_Transfer>:
		}

}

uint8_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
	while((((pSPIx)->SR & ((uint8_t)0x02 | (uint8_t)0x01)) == 0 || ((pSPIx)->SR & (uint8_t)0x80)));
 8001724:	bf00      	nop
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f9      	beq.n	8001726 <SPI_Transfer+0xe>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f3      	bne.n	8001726 <SPI_Transfer+0xe>

	pSPIx->DR = data;
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	60da      	str	r2, [r3, #12]

	while((((pSPIx)->SR & ((uint8_t)0x02 | (uint8_t)0x01)) == 0 || ((pSPIx)->SR & (uint8_t)0x80)));
 8001744:	bf00      	nop
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f9      	beq.n	8001746 <SPI_Transfer+0x2e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f3      	bne.n	8001746 <SPI_Transfer+0x2e>

	//while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );

	return pSPIx->DR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	b2db      	uxtb	r3, r3
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <SPI_PeripheralControl>:
/**************************
 *
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d106      	bne.n	800178e <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	601a      	str	r2, [r3, #0]
	} else
	{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 800178c:	e005      	b.n	800179a <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	601a      	str	r2, [r3, #0]
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <__errno>:
 80017a4:	4b01      	ldr	r3, [pc, #4]	; (80017ac <__errno+0x8>)
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000014 	.word	0x20000014

080017b0 <__libc_init_array>:
 80017b0:	b570      	push	{r4, r5, r6, lr}
 80017b2:	4d0d      	ldr	r5, [pc, #52]	; (80017e8 <__libc_init_array+0x38>)
 80017b4:	4c0d      	ldr	r4, [pc, #52]	; (80017ec <__libc_init_array+0x3c>)
 80017b6:	1b64      	subs	r4, r4, r5
 80017b8:	10a4      	asrs	r4, r4, #2
 80017ba:	2600      	movs	r6, #0
 80017bc:	42a6      	cmp	r6, r4
 80017be:	d109      	bne.n	80017d4 <__libc_init_array+0x24>
 80017c0:	4d0b      	ldr	r5, [pc, #44]	; (80017f0 <__libc_init_array+0x40>)
 80017c2:	4c0c      	ldr	r4, [pc, #48]	; (80017f4 <__libc_init_array+0x44>)
 80017c4:	f000 ff72 	bl	80026ac <_init>
 80017c8:	1b64      	subs	r4, r4, r5
 80017ca:	10a4      	asrs	r4, r4, #2
 80017cc:	2600      	movs	r6, #0
 80017ce:	42a6      	cmp	r6, r4
 80017d0:	d105      	bne.n	80017de <__libc_init_array+0x2e>
 80017d2:	bd70      	pop	{r4, r5, r6, pc}
 80017d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80017d8:	4798      	blx	r3
 80017da:	3601      	adds	r6, #1
 80017dc:	e7ee      	b.n	80017bc <__libc_init_array+0xc>
 80017de:	f855 3b04 	ldr.w	r3, [r5], #4
 80017e2:	4798      	blx	r3
 80017e4:	3601      	adds	r6, #1
 80017e6:	e7f2      	b.n	80017ce <__libc_init_array+0x1e>
 80017e8:	080027bc 	.word	0x080027bc
 80017ec:	080027bc 	.word	0x080027bc
 80017f0:	080027bc 	.word	0x080027bc
 80017f4:	080027c0 	.word	0x080027c0

080017f8 <memset>:
 80017f8:	4402      	add	r2, r0
 80017fa:	4603      	mov	r3, r0
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d100      	bne.n	8001802 <memset+0xa>
 8001800:	4770      	bx	lr
 8001802:	f803 1b01 	strb.w	r1, [r3], #1
 8001806:	e7f9      	b.n	80017fc <memset+0x4>

08001808 <iprintf>:
 8001808:	b40f      	push	{r0, r1, r2, r3}
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <iprintf+0x2c>)
 800180c:	b513      	push	{r0, r1, r4, lr}
 800180e:	681c      	ldr	r4, [r3, #0]
 8001810:	b124      	cbz	r4, 800181c <iprintf+0x14>
 8001812:	69a3      	ldr	r3, [r4, #24]
 8001814:	b913      	cbnz	r3, 800181c <iprintf+0x14>
 8001816:	4620      	mov	r0, r4
 8001818:	f000 f866 	bl	80018e8 <__sinit>
 800181c:	ab05      	add	r3, sp, #20
 800181e:	9a04      	ldr	r2, [sp, #16]
 8001820:	68a1      	ldr	r1, [r4, #8]
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	4620      	mov	r0, r4
 8001826:	f000 f981 	bl	8001b2c <_vfiprintf_r>
 800182a:	b002      	add	sp, #8
 800182c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001830:	b004      	add	sp, #16
 8001832:	4770      	bx	lr
 8001834:	20000014 	.word	0x20000014

08001838 <std>:
 8001838:	2300      	movs	r3, #0
 800183a:	b510      	push	{r4, lr}
 800183c:	4604      	mov	r4, r0
 800183e:	e9c0 3300 	strd	r3, r3, [r0]
 8001842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001846:	6083      	str	r3, [r0, #8]
 8001848:	8181      	strh	r1, [r0, #12]
 800184a:	6643      	str	r3, [r0, #100]	; 0x64
 800184c:	81c2      	strh	r2, [r0, #14]
 800184e:	6183      	str	r3, [r0, #24]
 8001850:	4619      	mov	r1, r3
 8001852:	2208      	movs	r2, #8
 8001854:	305c      	adds	r0, #92	; 0x5c
 8001856:	f7ff ffcf 	bl	80017f8 <memset>
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <std+0x38>)
 800185c:	6263      	str	r3, [r4, #36]	; 0x24
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <std+0x3c>)
 8001860:	62a3      	str	r3, [r4, #40]	; 0x28
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <std+0x40>)
 8001864:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <std+0x44>)
 8001868:	6224      	str	r4, [r4, #32]
 800186a:	6323      	str	r3, [r4, #48]	; 0x30
 800186c:	bd10      	pop	{r4, pc}
 800186e:	bf00      	nop
 8001870:	080020d5 	.word	0x080020d5
 8001874:	080020f7 	.word	0x080020f7
 8001878:	0800212f 	.word	0x0800212f
 800187c:	08002153 	.word	0x08002153

08001880 <_cleanup_r>:
 8001880:	4901      	ldr	r1, [pc, #4]	; (8001888 <_cleanup_r+0x8>)
 8001882:	f000 b8af 	b.w	80019e4 <_fwalk_reent>
 8001886:	bf00      	nop
 8001888:	0800242d 	.word	0x0800242d

0800188c <__sfmoreglue>:
 800188c:	b570      	push	{r4, r5, r6, lr}
 800188e:	1e4a      	subs	r2, r1, #1
 8001890:	2568      	movs	r5, #104	; 0x68
 8001892:	4355      	muls	r5, r2
 8001894:	460e      	mov	r6, r1
 8001896:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800189a:	f000 f8c5 	bl	8001a28 <_malloc_r>
 800189e:	4604      	mov	r4, r0
 80018a0:	b140      	cbz	r0, 80018b4 <__sfmoreglue+0x28>
 80018a2:	2100      	movs	r1, #0
 80018a4:	e9c0 1600 	strd	r1, r6, [r0]
 80018a8:	300c      	adds	r0, #12
 80018aa:	60a0      	str	r0, [r4, #8]
 80018ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80018b0:	f7ff ffa2 	bl	80017f8 <memset>
 80018b4:	4620      	mov	r0, r4
 80018b6:	bd70      	pop	{r4, r5, r6, pc}

080018b8 <__sfp_lock_acquire>:
 80018b8:	4801      	ldr	r0, [pc, #4]	; (80018c0 <__sfp_lock_acquire+0x8>)
 80018ba:	f000 b8b3 	b.w	8001a24 <__retarget_lock_acquire_recursive>
 80018be:	bf00      	nop
 80018c0:	200002d0 	.word	0x200002d0

080018c4 <__sfp_lock_release>:
 80018c4:	4801      	ldr	r0, [pc, #4]	; (80018cc <__sfp_lock_release+0x8>)
 80018c6:	f000 b8ae 	b.w	8001a26 <__retarget_lock_release_recursive>
 80018ca:	bf00      	nop
 80018cc:	200002d0 	.word	0x200002d0

080018d0 <__sinit_lock_acquire>:
 80018d0:	4801      	ldr	r0, [pc, #4]	; (80018d8 <__sinit_lock_acquire+0x8>)
 80018d2:	f000 b8a7 	b.w	8001a24 <__retarget_lock_acquire_recursive>
 80018d6:	bf00      	nop
 80018d8:	200002cb 	.word	0x200002cb

080018dc <__sinit_lock_release>:
 80018dc:	4801      	ldr	r0, [pc, #4]	; (80018e4 <__sinit_lock_release+0x8>)
 80018de:	f000 b8a2 	b.w	8001a26 <__retarget_lock_release_recursive>
 80018e2:	bf00      	nop
 80018e4:	200002cb 	.word	0x200002cb

080018e8 <__sinit>:
 80018e8:	b510      	push	{r4, lr}
 80018ea:	4604      	mov	r4, r0
 80018ec:	f7ff fff0 	bl	80018d0 <__sinit_lock_acquire>
 80018f0:	69a3      	ldr	r3, [r4, #24]
 80018f2:	b11b      	cbz	r3, 80018fc <__sinit+0x14>
 80018f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018f8:	f7ff bff0 	b.w	80018dc <__sinit_lock_release>
 80018fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001900:	6523      	str	r3, [r4, #80]	; 0x50
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <__sinit+0x68>)
 8001904:	4a13      	ldr	r2, [pc, #76]	; (8001954 <__sinit+0x6c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	62a2      	str	r2, [r4, #40]	; 0x28
 800190a:	42a3      	cmp	r3, r4
 800190c:	bf04      	itt	eq
 800190e:	2301      	moveq	r3, #1
 8001910:	61a3      	streq	r3, [r4, #24]
 8001912:	4620      	mov	r0, r4
 8001914:	f000 f820 	bl	8001958 <__sfp>
 8001918:	6060      	str	r0, [r4, #4]
 800191a:	4620      	mov	r0, r4
 800191c:	f000 f81c 	bl	8001958 <__sfp>
 8001920:	60a0      	str	r0, [r4, #8]
 8001922:	4620      	mov	r0, r4
 8001924:	f000 f818 	bl	8001958 <__sfp>
 8001928:	2200      	movs	r2, #0
 800192a:	60e0      	str	r0, [r4, #12]
 800192c:	2104      	movs	r1, #4
 800192e:	6860      	ldr	r0, [r4, #4]
 8001930:	f7ff ff82 	bl	8001838 <std>
 8001934:	68a0      	ldr	r0, [r4, #8]
 8001936:	2201      	movs	r2, #1
 8001938:	2109      	movs	r1, #9
 800193a:	f7ff ff7d 	bl	8001838 <std>
 800193e:	68e0      	ldr	r0, [r4, #12]
 8001940:	2202      	movs	r2, #2
 8001942:	2112      	movs	r1, #18
 8001944:	f7ff ff78 	bl	8001838 <std>
 8001948:	2301      	movs	r3, #1
 800194a:	61a3      	str	r3, [r4, #24]
 800194c:	e7d2      	b.n	80018f4 <__sinit+0xc>
 800194e:	bf00      	nop
 8001950:	08002724 	.word	0x08002724
 8001954:	08001881 	.word	0x08001881

08001958 <__sfp>:
 8001958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195a:	4607      	mov	r7, r0
 800195c:	f7ff ffac 	bl	80018b8 <__sfp_lock_acquire>
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <__sfp+0x84>)
 8001962:	681e      	ldr	r6, [r3, #0]
 8001964:	69b3      	ldr	r3, [r6, #24]
 8001966:	b913      	cbnz	r3, 800196e <__sfp+0x16>
 8001968:	4630      	mov	r0, r6
 800196a:	f7ff ffbd 	bl	80018e8 <__sinit>
 800196e:	3648      	adds	r6, #72	; 0x48
 8001970:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001974:	3b01      	subs	r3, #1
 8001976:	d503      	bpl.n	8001980 <__sfp+0x28>
 8001978:	6833      	ldr	r3, [r6, #0]
 800197a:	b30b      	cbz	r3, 80019c0 <__sfp+0x68>
 800197c:	6836      	ldr	r6, [r6, #0]
 800197e:	e7f7      	b.n	8001970 <__sfp+0x18>
 8001980:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001984:	b9d5      	cbnz	r5, 80019bc <__sfp+0x64>
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <__sfp+0x88>)
 8001988:	60e3      	str	r3, [r4, #12]
 800198a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800198e:	6665      	str	r5, [r4, #100]	; 0x64
 8001990:	f000 f847 	bl	8001a22 <__retarget_lock_init_recursive>
 8001994:	f7ff ff96 	bl	80018c4 <__sfp_lock_release>
 8001998:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800199c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80019a0:	6025      	str	r5, [r4, #0]
 80019a2:	61a5      	str	r5, [r4, #24]
 80019a4:	2208      	movs	r2, #8
 80019a6:	4629      	mov	r1, r5
 80019a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80019ac:	f7ff ff24 	bl	80017f8 <memset>
 80019b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80019b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80019b8:	4620      	mov	r0, r4
 80019ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019bc:	3468      	adds	r4, #104	; 0x68
 80019be:	e7d9      	b.n	8001974 <__sfp+0x1c>
 80019c0:	2104      	movs	r1, #4
 80019c2:	4638      	mov	r0, r7
 80019c4:	f7ff ff62 	bl	800188c <__sfmoreglue>
 80019c8:	4604      	mov	r4, r0
 80019ca:	6030      	str	r0, [r6, #0]
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d1d5      	bne.n	800197c <__sfp+0x24>
 80019d0:	f7ff ff78 	bl	80018c4 <__sfp_lock_release>
 80019d4:	230c      	movs	r3, #12
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	e7ee      	b.n	80019b8 <__sfp+0x60>
 80019da:	bf00      	nop
 80019dc:	08002724 	.word	0x08002724
 80019e0:	ffff0001 	.word	0xffff0001

080019e4 <_fwalk_reent>:
 80019e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019e8:	4606      	mov	r6, r0
 80019ea:	4688      	mov	r8, r1
 80019ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80019f0:	2700      	movs	r7, #0
 80019f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80019f6:	f1b9 0901 	subs.w	r9, r9, #1
 80019fa:	d505      	bpl.n	8001a08 <_fwalk_reent+0x24>
 80019fc:	6824      	ldr	r4, [r4, #0]
 80019fe:	2c00      	cmp	r4, #0
 8001a00:	d1f7      	bne.n	80019f2 <_fwalk_reent+0xe>
 8001a02:	4638      	mov	r0, r7
 8001a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a08:	89ab      	ldrh	r3, [r5, #12]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d907      	bls.n	8001a1e <_fwalk_reent+0x3a>
 8001a0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a12:	3301      	adds	r3, #1
 8001a14:	d003      	beq.n	8001a1e <_fwalk_reent+0x3a>
 8001a16:	4629      	mov	r1, r5
 8001a18:	4630      	mov	r0, r6
 8001a1a:	47c0      	blx	r8
 8001a1c:	4307      	orrs	r7, r0
 8001a1e:	3568      	adds	r5, #104	; 0x68
 8001a20:	e7e9      	b.n	80019f6 <_fwalk_reent+0x12>

08001a22 <__retarget_lock_init_recursive>:
 8001a22:	4770      	bx	lr

08001a24 <__retarget_lock_acquire_recursive>:
 8001a24:	4770      	bx	lr

08001a26 <__retarget_lock_release_recursive>:
 8001a26:	4770      	bx	lr

08001a28 <_malloc_r>:
 8001a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a2a:	1ccd      	adds	r5, r1, #3
 8001a2c:	f025 0503 	bic.w	r5, r5, #3
 8001a30:	3508      	adds	r5, #8
 8001a32:	2d0c      	cmp	r5, #12
 8001a34:	bf38      	it	cc
 8001a36:	250c      	movcc	r5, #12
 8001a38:	2d00      	cmp	r5, #0
 8001a3a:	4606      	mov	r6, r0
 8001a3c:	db01      	blt.n	8001a42 <_malloc_r+0x1a>
 8001a3e:	42a9      	cmp	r1, r5
 8001a40:	d903      	bls.n	8001a4a <_malloc_r+0x22>
 8001a42:	230c      	movs	r3, #12
 8001a44:	6033      	str	r3, [r6, #0]
 8001a46:	2000      	movs	r0, #0
 8001a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a4a:	f000 fda1 	bl	8002590 <__malloc_lock>
 8001a4e:	4921      	ldr	r1, [pc, #132]	; (8001ad4 <_malloc_r+0xac>)
 8001a50:	680a      	ldr	r2, [r1, #0]
 8001a52:	4614      	mov	r4, r2
 8001a54:	b99c      	cbnz	r4, 8001a7e <_malloc_r+0x56>
 8001a56:	4f20      	ldr	r7, [pc, #128]	; (8001ad8 <_malloc_r+0xb0>)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b923      	cbnz	r3, 8001a66 <_malloc_r+0x3e>
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	4630      	mov	r0, r6
 8001a60:	f000 fb28 	bl	80020b4 <_sbrk_r>
 8001a64:	6038      	str	r0, [r7, #0]
 8001a66:	4629      	mov	r1, r5
 8001a68:	4630      	mov	r0, r6
 8001a6a:	f000 fb23 	bl	80020b4 <_sbrk_r>
 8001a6e:	1c43      	adds	r3, r0, #1
 8001a70:	d123      	bne.n	8001aba <_malloc_r+0x92>
 8001a72:	230c      	movs	r3, #12
 8001a74:	6033      	str	r3, [r6, #0]
 8001a76:	4630      	mov	r0, r6
 8001a78:	f000 fd90 	bl	800259c <__malloc_unlock>
 8001a7c:	e7e3      	b.n	8001a46 <_malloc_r+0x1e>
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	1b5b      	subs	r3, r3, r5
 8001a82:	d417      	bmi.n	8001ab4 <_malloc_r+0x8c>
 8001a84:	2b0b      	cmp	r3, #11
 8001a86:	d903      	bls.n	8001a90 <_malloc_r+0x68>
 8001a88:	6023      	str	r3, [r4, #0]
 8001a8a:	441c      	add	r4, r3
 8001a8c:	6025      	str	r5, [r4, #0]
 8001a8e:	e004      	b.n	8001a9a <_malloc_r+0x72>
 8001a90:	6863      	ldr	r3, [r4, #4]
 8001a92:	42a2      	cmp	r2, r4
 8001a94:	bf0c      	ite	eq
 8001a96:	600b      	streq	r3, [r1, #0]
 8001a98:	6053      	strne	r3, [r2, #4]
 8001a9a:	4630      	mov	r0, r6
 8001a9c:	f000 fd7e 	bl	800259c <__malloc_unlock>
 8001aa0:	f104 000b 	add.w	r0, r4, #11
 8001aa4:	1d23      	adds	r3, r4, #4
 8001aa6:	f020 0007 	bic.w	r0, r0, #7
 8001aaa:	1ac2      	subs	r2, r0, r3
 8001aac:	d0cc      	beq.n	8001a48 <_malloc_r+0x20>
 8001aae:	1a1b      	subs	r3, r3, r0
 8001ab0:	50a3      	str	r3, [r4, r2]
 8001ab2:	e7c9      	b.n	8001a48 <_malloc_r+0x20>
 8001ab4:	4622      	mov	r2, r4
 8001ab6:	6864      	ldr	r4, [r4, #4]
 8001ab8:	e7cc      	b.n	8001a54 <_malloc_r+0x2c>
 8001aba:	1cc4      	adds	r4, r0, #3
 8001abc:	f024 0403 	bic.w	r4, r4, #3
 8001ac0:	42a0      	cmp	r0, r4
 8001ac2:	d0e3      	beq.n	8001a8c <_malloc_r+0x64>
 8001ac4:	1a21      	subs	r1, r4, r0
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f000 faf4 	bl	80020b4 <_sbrk_r>
 8001acc:	3001      	adds	r0, #1
 8001ace:	d1dd      	bne.n	8001a8c <_malloc_r+0x64>
 8001ad0:	e7cf      	b.n	8001a72 <_malloc_r+0x4a>
 8001ad2:	bf00      	nop
 8001ad4:	200000a0 	.word	0x200000a0
 8001ad8:	200000a4 	.word	0x200000a4

08001adc <__sfputc_r>:
 8001adc:	6893      	ldr	r3, [r2, #8]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	b410      	push	{r4}
 8001ae4:	6093      	str	r3, [r2, #8]
 8001ae6:	da07      	bge.n	8001af8 <__sfputc_r+0x1c>
 8001ae8:	6994      	ldr	r4, [r2, #24]
 8001aea:	42a3      	cmp	r3, r4
 8001aec:	db01      	blt.n	8001af2 <__sfputc_r+0x16>
 8001aee:	290a      	cmp	r1, #10
 8001af0:	d102      	bne.n	8001af8 <__sfputc_r+0x1c>
 8001af2:	bc10      	pop	{r4}
 8001af4:	f000 bb32 	b.w	800215c <__swbuf_r>
 8001af8:	6813      	ldr	r3, [r2, #0]
 8001afa:	1c58      	adds	r0, r3, #1
 8001afc:	6010      	str	r0, [r2, #0]
 8001afe:	7019      	strb	r1, [r3, #0]
 8001b00:	4608      	mov	r0, r1
 8001b02:	bc10      	pop	{r4}
 8001b04:	4770      	bx	lr

08001b06 <__sfputs_r>:
 8001b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b08:	4606      	mov	r6, r0
 8001b0a:	460f      	mov	r7, r1
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	18d5      	adds	r5, r2, r3
 8001b10:	42ac      	cmp	r4, r5
 8001b12:	d101      	bne.n	8001b18 <__sfputs_r+0x12>
 8001b14:	2000      	movs	r0, #0
 8001b16:	e007      	b.n	8001b28 <__sfputs_r+0x22>
 8001b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b1c:	463a      	mov	r2, r7
 8001b1e:	4630      	mov	r0, r6
 8001b20:	f7ff ffdc 	bl	8001adc <__sfputc_r>
 8001b24:	1c43      	adds	r3, r0, #1
 8001b26:	d1f3      	bne.n	8001b10 <__sfputs_r+0xa>
 8001b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b2c <_vfiprintf_r>:
 8001b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b30:	460d      	mov	r5, r1
 8001b32:	b09d      	sub	sp, #116	; 0x74
 8001b34:	4614      	mov	r4, r2
 8001b36:	4698      	mov	r8, r3
 8001b38:	4606      	mov	r6, r0
 8001b3a:	b118      	cbz	r0, 8001b44 <_vfiprintf_r+0x18>
 8001b3c:	6983      	ldr	r3, [r0, #24]
 8001b3e:	b90b      	cbnz	r3, 8001b44 <_vfiprintf_r+0x18>
 8001b40:	f7ff fed2 	bl	80018e8 <__sinit>
 8001b44:	4b89      	ldr	r3, [pc, #548]	; (8001d6c <_vfiprintf_r+0x240>)
 8001b46:	429d      	cmp	r5, r3
 8001b48:	d11b      	bne.n	8001b82 <_vfiprintf_r+0x56>
 8001b4a:	6875      	ldr	r5, [r6, #4]
 8001b4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b4e:	07d9      	lsls	r1, r3, #31
 8001b50:	d405      	bmi.n	8001b5e <_vfiprintf_r+0x32>
 8001b52:	89ab      	ldrh	r3, [r5, #12]
 8001b54:	059a      	lsls	r2, r3, #22
 8001b56:	d402      	bmi.n	8001b5e <_vfiprintf_r+0x32>
 8001b58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b5a:	f7ff ff63 	bl	8001a24 <__retarget_lock_acquire_recursive>
 8001b5e:	89ab      	ldrh	r3, [r5, #12]
 8001b60:	071b      	lsls	r3, r3, #28
 8001b62:	d501      	bpl.n	8001b68 <_vfiprintf_r+0x3c>
 8001b64:	692b      	ldr	r3, [r5, #16]
 8001b66:	b9eb      	cbnz	r3, 8001ba4 <_vfiprintf_r+0x78>
 8001b68:	4629      	mov	r1, r5
 8001b6a:	4630      	mov	r0, r6
 8001b6c:	f000 fb5a 	bl	8002224 <__swsetup_r>
 8001b70:	b1c0      	cbz	r0, 8001ba4 <_vfiprintf_r+0x78>
 8001b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b74:	07dc      	lsls	r4, r3, #31
 8001b76:	d50e      	bpl.n	8001b96 <_vfiprintf_r+0x6a>
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	b01d      	add	sp, #116	; 0x74
 8001b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b82:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <_vfiprintf_r+0x244>)
 8001b84:	429d      	cmp	r5, r3
 8001b86:	d101      	bne.n	8001b8c <_vfiprintf_r+0x60>
 8001b88:	68b5      	ldr	r5, [r6, #8]
 8001b8a:	e7df      	b.n	8001b4c <_vfiprintf_r+0x20>
 8001b8c:	4b79      	ldr	r3, [pc, #484]	; (8001d74 <_vfiprintf_r+0x248>)
 8001b8e:	429d      	cmp	r5, r3
 8001b90:	bf08      	it	eq
 8001b92:	68f5      	ldreq	r5, [r6, #12]
 8001b94:	e7da      	b.n	8001b4c <_vfiprintf_r+0x20>
 8001b96:	89ab      	ldrh	r3, [r5, #12]
 8001b98:	0598      	lsls	r0, r3, #22
 8001b9a:	d4ed      	bmi.n	8001b78 <_vfiprintf_r+0x4c>
 8001b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b9e:	f7ff ff42 	bl	8001a26 <__retarget_lock_release_recursive>
 8001ba2:	e7e9      	b.n	8001b78 <_vfiprintf_r+0x4c>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8001ba8:	2320      	movs	r3, #32
 8001baa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8001bb2:	2330      	movs	r3, #48	; 0x30
 8001bb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001d78 <_vfiprintf_r+0x24c>
 8001bb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001bbc:	f04f 0901 	mov.w	r9, #1
 8001bc0:	4623      	mov	r3, r4
 8001bc2:	469a      	mov	sl, r3
 8001bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001bc8:	b10a      	cbz	r2, 8001bce <_vfiprintf_r+0xa2>
 8001bca:	2a25      	cmp	r2, #37	; 0x25
 8001bcc:	d1f9      	bne.n	8001bc2 <_vfiprintf_r+0x96>
 8001bce:	ebba 0b04 	subs.w	fp, sl, r4
 8001bd2:	d00b      	beq.n	8001bec <_vfiprintf_r+0xc0>
 8001bd4:	465b      	mov	r3, fp
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	4629      	mov	r1, r5
 8001bda:	4630      	mov	r0, r6
 8001bdc:	f7ff ff93 	bl	8001b06 <__sfputs_r>
 8001be0:	3001      	adds	r0, #1
 8001be2:	f000 80aa 	beq.w	8001d3a <_vfiprintf_r+0x20e>
 8001be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001be8:	445a      	add	r2, fp
 8001bea:	9209      	str	r2, [sp, #36]	; 0x24
 8001bec:	f89a 3000 	ldrb.w	r3, [sl]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80a2 	beq.w	8001d3a <_vfiprintf_r+0x20e>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c00:	f10a 0a01 	add.w	sl, sl, #1
 8001c04:	9304      	str	r3, [sp, #16]
 8001c06:	9307      	str	r3, [sp, #28]
 8001c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8001c0e:	4654      	mov	r4, sl
 8001c10:	2205      	movs	r2, #5
 8001c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c16:	4858      	ldr	r0, [pc, #352]	; (8001d78 <_vfiprintf_r+0x24c>)
 8001c18:	f7fe faea 	bl	80001f0 <memchr>
 8001c1c:	9a04      	ldr	r2, [sp, #16]
 8001c1e:	b9d8      	cbnz	r0, 8001c58 <_vfiprintf_r+0x12c>
 8001c20:	06d1      	lsls	r1, r2, #27
 8001c22:	bf44      	itt	mi
 8001c24:	2320      	movmi	r3, #32
 8001c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c2a:	0713      	lsls	r3, r2, #28
 8001c2c:	bf44      	itt	mi
 8001c2e:	232b      	movmi	r3, #43	; 0x2b
 8001c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c34:	f89a 3000 	ldrb.w	r3, [sl]
 8001c38:	2b2a      	cmp	r3, #42	; 0x2a
 8001c3a:	d015      	beq.n	8001c68 <_vfiprintf_r+0x13c>
 8001c3c:	9a07      	ldr	r2, [sp, #28]
 8001c3e:	4654      	mov	r4, sl
 8001c40:	2000      	movs	r0, #0
 8001c42:	f04f 0c0a 	mov.w	ip, #10
 8001c46:	4621      	mov	r1, r4
 8001c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c4c:	3b30      	subs	r3, #48	; 0x30
 8001c4e:	2b09      	cmp	r3, #9
 8001c50:	d94e      	bls.n	8001cf0 <_vfiprintf_r+0x1c4>
 8001c52:	b1b0      	cbz	r0, 8001c82 <_vfiprintf_r+0x156>
 8001c54:	9207      	str	r2, [sp, #28]
 8001c56:	e014      	b.n	8001c82 <_vfiprintf_r+0x156>
 8001c58:	eba0 0308 	sub.w	r3, r0, r8
 8001c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	9304      	str	r3, [sp, #16]
 8001c64:	46a2      	mov	sl, r4
 8001c66:	e7d2      	b.n	8001c0e <_vfiprintf_r+0xe2>
 8001c68:	9b03      	ldr	r3, [sp, #12]
 8001c6a:	1d19      	adds	r1, r3, #4
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	9103      	str	r1, [sp, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bfbb      	ittet	lt
 8001c74:	425b      	neglt	r3, r3
 8001c76:	f042 0202 	orrlt.w	r2, r2, #2
 8001c7a:	9307      	strge	r3, [sp, #28]
 8001c7c:	9307      	strlt	r3, [sp, #28]
 8001c7e:	bfb8      	it	lt
 8001c80:	9204      	strlt	r2, [sp, #16]
 8001c82:	7823      	ldrb	r3, [r4, #0]
 8001c84:	2b2e      	cmp	r3, #46	; 0x2e
 8001c86:	d10c      	bne.n	8001ca2 <_vfiprintf_r+0x176>
 8001c88:	7863      	ldrb	r3, [r4, #1]
 8001c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8001c8c:	d135      	bne.n	8001cfa <_vfiprintf_r+0x1ce>
 8001c8e:	9b03      	ldr	r3, [sp, #12]
 8001c90:	1d1a      	adds	r2, r3, #4
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	9203      	str	r2, [sp, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	bfb8      	it	lt
 8001c9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c9e:	3402      	adds	r4, #2
 8001ca0:	9305      	str	r3, [sp, #20]
 8001ca2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001d88 <_vfiprintf_r+0x25c>
 8001ca6:	7821      	ldrb	r1, [r4, #0]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	4650      	mov	r0, sl
 8001cac:	f7fe faa0 	bl	80001f0 <memchr>
 8001cb0:	b140      	cbz	r0, 8001cc4 <_vfiprintf_r+0x198>
 8001cb2:	2340      	movs	r3, #64	; 0x40
 8001cb4:	eba0 000a 	sub.w	r0, r0, sl
 8001cb8:	fa03 f000 	lsl.w	r0, r3, r0
 8001cbc:	9b04      	ldr	r3, [sp, #16]
 8001cbe:	4303      	orrs	r3, r0
 8001cc0:	3401      	adds	r4, #1
 8001cc2:	9304      	str	r3, [sp, #16]
 8001cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cc8:	482c      	ldr	r0, [pc, #176]	; (8001d7c <_vfiprintf_r+0x250>)
 8001cca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cce:	2206      	movs	r2, #6
 8001cd0:	f7fe fa8e 	bl	80001f0 <memchr>
 8001cd4:	2800      	cmp	r0, #0
 8001cd6:	d03f      	beq.n	8001d58 <_vfiprintf_r+0x22c>
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <_vfiprintf_r+0x254>)
 8001cda:	bb1b      	cbnz	r3, 8001d24 <_vfiprintf_r+0x1f8>
 8001cdc:	9b03      	ldr	r3, [sp, #12]
 8001cde:	3307      	adds	r3, #7
 8001ce0:	f023 0307 	bic.w	r3, r3, #7
 8001ce4:	3308      	adds	r3, #8
 8001ce6:	9303      	str	r3, [sp, #12]
 8001ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cea:	443b      	add	r3, r7
 8001cec:	9309      	str	r3, [sp, #36]	; 0x24
 8001cee:	e767      	b.n	8001bc0 <_vfiprintf_r+0x94>
 8001cf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cf4:	460c      	mov	r4, r1
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	e7a5      	b.n	8001c46 <_vfiprintf_r+0x11a>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	3401      	adds	r4, #1
 8001cfe:	9305      	str	r3, [sp, #20]
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 0c0a 	mov.w	ip, #10
 8001d06:	4620      	mov	r0, r4
 8001d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d0c:	3a30      	subs	r2, #48	; 0x30
 8001d0e:	2a09      	cmp	r2, #9
 8001d10:	d903      	bls.n	8001d1a <_vfiprintf_r+0x1ee>
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0c5      	beq.n	8001ca2 <_vfiprintf_r+0x176>
 8001d16:	9105      	str	r1, [sp, #20]
 8001d18:	e7c3      	b.n	8001ca2 <_vfiprintf_r+0x176>
 8001d1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d1e:	4604      	mov	r4, r0
 8001d20:	2301      	movs	r3, #1
 8001d22:	e7f0      	b.n	8001d06 <_vfiprintf_r+0x1da>
 8001d24:	ab03      	add	r3, sp, #12
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	462a      	mov	r2, r5
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <_vfiprintf_r+0x258>)
 8001d2c:	a904      	add	r1, sp, #16
 8001d2e:	4630      	mov	r0, r6
 8001d30:	f3af 8000 	nop.w
 8001d34:	4607      	mov	r7, r0
 8001d36:	1c78      	adds	r0, r7, #1
 8001d38:	d1d6      	bne.n	8001ce8 <_vfiprintf_r+0x1bc>
 8001d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d3c:	07d9      	lsls	r1, r3, #31
 8001d3e:	d405      	bmi.n	8001d4c <_vfiprintf_r+0x220>
 8001d40:	89ab      	ldrh	r3, [r5, #12]
 8001d42:	059a      	lsls	r2, r3, #22
 8001d44:	d402      	bmi.n	8001d4c <_vfiprintf_r+0x220>
 8001d46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d48:	f7ff fe6d 	bl	8001a26 <__retarget_lock_release_recursive>
 8001d4c:	89ab      	ldrh	r3, [r5, #12]
 8001d4e:	065b      	lsls	r3, r3, #25
 8001d50:	f53f af12 	bmi.w	8001b78 <_vfiprintf_r+0x4c>
 8001d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d56:	e711      	b.n	8001b7c <_vfiprintf_r+0x50>
 8001d58:	ab03      	add	r3, sp, #12
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	462a      	mov	r2, r5
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <_vfiprintf_r+0x258>)
 8001d60:	a904      	add	r1, sp, #16
 8001d62:	4630      	mov	r0, r6
 8001d64:	f000 f880 	bl	8001e68 <_printf_i>
 8001d68:	e7e4      	b.n	8001d34 <_vfiprintf_r+0x208>
 8001d6a:	bf00      	nop
 8001d6c:	08002748 	.word	0x08002748
 8001d70:	08002768 	.word	0x08002768
 8001d74:	08002728 	.word	0x08002728
 8001d78:	08002788 	.word	0x08002788
 8001d7c:	08002792 	.word	0x08002792
 8001d80:	00000000 	.word	0x00000000
 8001d84:	08001b07 	.word	0x08001b07
 8001d88:	0800278e 	.word	0x0800278e

08001d8c <_printf_common>:
 8001d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d90:	4616      	mov	r6, r2
 8001d92:	4699      	mov	r9, r3
 8001d94:	688a      	ldr	r2, [r1, #8]
 8001d96:	690b      	ldr	r3, [r1, #16]
 8001d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	bfb8      	it	lt
 8001da0:	4613      	movlt	r3, r2
 8001da2:	6033      	str	r3, [r6, #0]
 8001da4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001da8:	4607      	mov	r7, r0
 8001daa:	460c      	mov	r4, r1
 8001dac:	b10a      	cbz	r2, 8001db2 <_printf_common+0x26>
 8001dae:	3301      	adds	r3, #1
 8001db0:	6033      	str	r3, [r6, #0]
 8001db2:	6823      	ldr	r3, [r4, #0]
 8001db4:	0699      	lsls	r1, r3, #26
 8001db6:	bf42      	ittt	mi
 8001db8:	6833      	ldrmi	r3, [r6, #0]
 8001dba:	3302      	addmi	r3, #2
 8001dbc:	6033      	strmi	r3, [r6, #0]
 8001dbe:	6825      	ldr	r5, [r4, #0]
 8001dc0:	f015 0506 	ands.w	r5, r5, #6
 8001dc4:	d106      	bne.n	8001dd4 <_printf_common+0x48>
 8001dc6:	f104 0a19 	add.w	sl, r4, #25
 8001dca:	68e3      	ldr	r3, [r4, #12]
 8001dcc:	6832      	ldr	r2, [r6, #0]
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	42ab      	cmp	r3, r5
 8001dd2:	dc26      	bgt.n	8001e22 <_printf_common+0x96>
 8001dd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001dd8:	1e13      	subs	r3, r2, #0
 8001dda:	6822      	ldr	r2, [r4, #0]
 8001ddc:	bf18      	it	ne
 8001dde:	2301      	movne	r3, #1
 8001de0:	0692      	lsls	r2, r2, #26
 8001de2:	d42b      	bmi.n	8001e3c <_printf_common+0xb0>
 8001de4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001de8:	4649      	mov	r1, r9
 8001dea:	4638      	mov	r0, r7
 8001dec:	47c0      	blx	r8
 8001dee:	3001      	adds	r0, #1
 8001df0:	d01e      	beq.n	8001e30 <_printf_common+0xa4>
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	68e5      	ldr	r5, [r4, #12]
 8001df6:	6832      	ldr	r2, [r6, #0]
 8001df8:	f003 0306 	and.w	r3, r3, #6
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	bf08      	it	eq
 8001e00:	1aad      	subeq	r5, r5, r2
 8001e02:	68a3      	ldr	r3, [r4, #8]
 8001e04:	6922      	ldr	r2, [r4, #16]
 8001e06:	bf0c      	ite	eq
 8001e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e0c:	2500      	movne	r5, #0
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	bfc4      	itt	gt
 8001e12:	1a9b      	subgt	r3, r3, r2
 8001e14:	18ed      	addgt	r5, r5, r3
 8001e16:	2600      	movs	r6, #0
 8001e18:	341a      	adds	r4, #26
 8001e1a:	42b5      	cmp	r5, r6
 8001e1c:	d11a      	bne.n	8001e54 <_printf_common+0xc8>
 8001e1e:	2000      	movs	r0, #0
 8001e20:	e008      	b.n	8001e34 <_printf_common+0xa8>
 8001e22:	2301      	movs	r3, #1
 8001e24:	4652      	mov	r2, sl
 8001e26:	4649      	mov	r1, r9
 8001e28:	4638      	mov	r0, r7
 8001e2a:	47c0      	blx	r8
 8001e2c:	3001      	adds	r0, #1
 8001e2e:	d103      	bne.n	8001e38 <_printf_common+0xac>
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e38:	3501      	adds	r5, #1
 8001e3a:	e7c6      	b.n	8001dca <_printf_common+0x3e>
 8001e3c:	18e1      	adds	r1, r4, r3
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	2030      	movs	r0, #48	; 0x30
 8001e42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e46:	4422      	add	r2, r4
 8001e48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e50:	3302      	adds	r3, #2
 8001e52:	e7c7      	b.n	8001de4 <_printf_common+0x58>
 8001e54:	2301      	movs	r3, #1
 8001e56:	4622      	mov	r2, r4
 8001e58:	4649      	mov	r1, r9
 8001e5a:	4638      	mov	r0, r7
 8001e5c:	47c0      	blx	r8
 8001e5e:	3001      	adds	r0, #1
 8001e60:	d0e6      	beq.n	8001e30 <_printf_common+0xa4>
 8001e62:	3601      	adds	r6, #1
 8001e64:	e7d9      	b.n	8001e1a <_printf_common+0x8e>
	...

08001e68 <_printf_i>:
 8001e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	4691      	mov	r9, r2
 8001e70:	7e27      	ldrb	r7, [r4, #24]
 8001e72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001e74:	2f78      	cmp	r7, #120	; 0x78
 8001e76:	4680      	mov	r8, r0
 8001e78:	469a      	mov	sl, r3
 8001e7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e7e:	d807      	bhi.n	8001e90 <_printf_i+0x28>
 8001e80:	2f62      	cmp	r7, #98	; 0x62
 8001e82:	d80a      	bhi.n	8001e9a <_printf_i+0x32>
 8001e84:	2f00      	cmp	r7, #0
 8001e86:	f000 80d8 	beq.w	800203a <_printf_i+0x1d2>
 8001e8a:	2f58      	cmp	r7, #88	; 0x58
 8001e8c:	f000 80a3 	beq.w	8001fd6 <_printf_i+0x16e>
 8001e90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001e94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001e98:	e03a      	b.n	8001f10 <_printf_i+0xa8>
 8001e9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001e9e:	2b15      	cmp	r3, #21
 8001ea0:	d8f6      	bhi.n	8001e90 <_printf_i+0x28>
 8001ea2:	a001      	add	r0, pc, #4	; (adr r0, 8001ea8 <_printf_i+0x40>)
 8001ea4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001ea8:	08001f01 	.word	0x08001f01
 8001eac:	08001f15 	.word	0x08001f15
 8001eb0:	08001e91 	.word	0x08001e91
 8001eb4:	08001e91 	.word	0x08001e91
 8001eb8:	08001e91 	.word	0x08001e91
 8001ebc:	08001e91 	.word	0x08001e91
 8001ec0:	08001f15 	.word	0x08001f15
 8001ec4:	08001e91 	.word	0x08001e91
 8001ec8:	08001e91 	.word	0x08001e91
 8001ecc:	08001e91 	.word	0x08001e91
 8001ed0:	08001e91 	.word	0x08001e91
 8001ed4:	08002021 	.word	0x08002021
 8001ed8:	08001f45 	.word	0x08001f45
 8001edc:	08002003 	.word	0x08002003
 8001ee0:	08001e91 	.word	0x08001e91
 8001ee4:	08001e91 	.word	0x08001e91
 8001ee8:	08002043 	.word	0x08002043
 8001eec:	08001e91 	.word	0x08001e91
 8001ef0:	08001f45 	.word	0x08001f45
 8001ef4:	08001e91 	.word	0x08001e91
 8001ef8:	08001e91 	.word	0x08001e91
 8001efc:	0800200b 	.word	0x0800200b
 8001f00:	680b      	ldr	r3, [r1, #0]
 8001f02:	1d1a      	adds	r2, r3, #4
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	600a      	str	r2, [r1, #0]
 8001f08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0a3      	b.n	800205c <_printf_i+0x1f4>
 8001f14:	6825      	ldr	r5, [r4, #0]
 8001f16:	6808      	ldr	r0, [r1, #0]
 8001f18:	062e      	lsls	r6, r5, #24
 8001f1a:	f100 0304 	add.w	r3, r0, #4
 8001f1e:	d50a      	bpl.n	8001f36 <_printf_i+0xce>
 8001f20:	6805      	ldr	r5, [r0, #0]
 8001f22:	600b      	str	r3, [r1, #0]
 8001f24:	2d00      	cmp	r5, #0
 8001f26:	da03      	bge.n	8001f30 <_printf_i+0xc8>
 8001f28:	232d      	movs	r3, #45	; 0x2d
 8001f2a:	426d      	negs	r5, r5
 8001f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f30:	485e      	ldr	r0, [pc, #376]	; (80020ac <_printf_i+0x244>)
 8001f32:	230a      	movs	r3, #10
 8001f34:	e019      	b.n	8001f6a <_printf_i+0x102>
 8001f36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001f3a:	6805      	ldr	r5, [r0, #0]
 8001f3c:	600b      	str	r3, [r1, #0]
 8001f3e:	bf18      	it	ne
 8001f40:	b22d      	sxthne	r5, r5
 8001f42:	e7ef      	b.n	8001f24 <_printf_i+0xbc>
 8001f44:	680b      	ldr	r3, [r1, #0]
 8001f46:	6825      	ldr	r5, [r4, #0]
 8001f48:	1d18      	adds	r0, r3, #4
 8001f4a:	6008      	str	r0, [r1, #0]
 8001f4c:	0628      	lsls	r0, r5, #24
 8001f4e:	d501      	bpl.n	8001f54 <_printf_i+0xec>
 8001f50:	681d      	ldr	r5, [r3, #0]
 8001f52:	e002      	b.n	8001f5a <_printf_i+0xf2>
 8001f54:	0669      	lsls	r1, r5, #25
 8001f56:	d5fb      	bpl.n	8001f50 <_printf_i+0xe8>
 8001f58:	881d      	ldrh	r5, [r3, #0]
 8001f5a:	4854      	ldr	r0, [pc, #336]	; (80020ac <_printf_i+0x244>)
 8001f5c:	2f6f      	cmp	r7, #111	; 0x6f
 8001f5e:	bf0c      	ite	eq
 8001f60:	2308      	moveq	r3, #8
 8001f62:	230a      	movne	r3, #10
 8001f64:	2100      	movs	r1, #0
 8001f66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f6a:	6866      	ldr	r6, [r4, #4]
 8001f6c:	60a6      	str	r6, [r4, #8]
 8001f6e:	2e00      	cmp	r6, #0
 8001f70:	bfa2      	ittt	ge
 8001f72:	6821      	ldrge	r1, [r4, #0]
 8001f74:	f021 0104 	bicge.w	r1, r1, #4
 8001f78:	6021      	strge	r1, [r4, #0]
 8001f7a:	b90d      	cbnz	r5, 8001f80 <_printf_i+0x118>
 8001f7c:	2e00      	cmp	r6, #0
 8001f7e:	d04d      	beq.n	800201c <_printf_i+0x1b4>
 8001f80:	4616      	mov	r6, r2
 8001f82:	fbb5 f1f3 	udiv	r1, r5, r3
 8001f86:	fb03 5711 	mls	r7, r3, r1, r5
 8001f8a:	5dc7      	ldrb	r7, [r0, r7]
 8001f8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001f90:	462f      	mov	r7, r5
 8001f92:	42bb      	cmp	r3, r7
 8001f94:	460d      	mov	r5, r1
 8001f96:	d9f4      	bls.n	8001f82 <_printf_i+0x11a>
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d10b      	bne.n	8001fb4 <_printf_i+0x14c>
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	07df      	lsls	r7, r3, #31
 8001fa0:	d508      	bpl.n	8001fb4 <_printf_i+0x14c>
 8001fa2:	6923      	ldr	r3, [r4, #16]
 8001fa4:	6861      	ldr	r1, [r4, #4]
 8001fa6:	4299      	cmp	r1, r3
 8001fa8:	bfde      	ittt	le
 8001faa:	2330      	movle	r3, #48	; 0x30
 8001fac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001fb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001fb4:	1b92      	subs	r2, r2, r6
 8001fb6:	6122      	str	r2, [r4, #16]
 8001fb8:	f8cd a000 	str.w	sl, [sp]
 8001fbc:	464b      	mov	r3, r9
 8001fbe:	aa03      	add	r2, sp, #12
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	4640      	mov	r0, r8
 8001fc4:	f7ff fee2 	bl	8001d8c <_printf_common>
 8001fc8:	3001      	adds	r0, #1
 8001fca:	d14c      	bne.n	8002066 <_printf_i+0x1fe>
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	b004      	add	sp, #16
 8001fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fd6:	4835      	ldr	r0, [pc, #212]	; (80020ac <_printf_i+0x244>)
 8001fd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	680e      	ldr	r6, [r1, #0]
 8001fe0:	061f      	lsls	r7, r3, #24
 8001fe2:	f856 5b04 	ldr.w	r5, [r6], #4
 8001fe6:	600e      	str	r6, [r1, #0]
 8001fe8:	d514      	bpl.n	8002014 <_printf_i+0x1ac>
 8001fea:	07d9      	lsls	r1, r3, #31
 8001fec:	bf44      	itt	mi
 8001fee:	f043 0320 	orrmi.w	r3, r3, #32
 8001ff2:	6023      	strmi	r3, [r4, #0]
 8001ff4:	b91d      	cbnz	r5, 8001ffe <_printf_i+0x196>
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	f023 0320 	bic.w	r3, r3, #32
 8001ffc:	6023      	str	r3, [r4, #0]
 8001ffe:	2310      	movs	r3, #16
 8002000:	e7b0      	b.n	8001f64 <_printf_i+0xfc>
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	f043 0320 	orr.w	r3, r3, #32
 8002008:	6023      	str	r3, [r4, #0]
 800200a:	2378      	movs	r3, #120	; 0x78
 800200c:	4828      	ldr	r0, [pc, #160]	; (80020b0 <_printf_i+0x248>)
 800200e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002012:	e7e3      	b.n	8001fdc <_printf_i+0x174>
 8002014:	065e      	lsls	r6, r3, #25
 8002016:	bf48      	it	mi
 8002018:	b2ad      	uxthmi	r5, r5
 800201a:	e7e6      	b.n	8001fea <_printf_i+0x182>
 800201c:	4616      	mov	r6, r2
 800201e:	e7bb      	b.n	8001f98 <_printf_i+0x130>
 8002020:	680b      	ldr	r3, [r1, #0]
 8002022:	6826      	ldr	r6, [r4, #0]
 8002024:	6960      	ldr	r0, [r4, #20]
 8002026:	1d1d      	adds	r5, r3, #4
 8002028:	600d      	str	r5, [r1, #0]
 800202a:	0635      	lsls	r5, r6, #24
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	d501      	bpl.n	8002034 <_printf_i+0x1cc>
 8002030:	6018      	str	r0, [r3, #0]
 8002032:	e002      	b.n	800203a <_printf_i+0x1d2>
 8002034:	0671      	lsls	r1, r6, #25
 8002036:	d5fb      	bpl.n	8002030 <_printf_i+0x1c8>
 8002038:	8018      	strh	r0, [r3, #0]
 800203a:	2300      	movs	r3, #0
 800203c:	6123      	str	r3, [r4, #16]
 800203e:	4616      	mov	r6, r2
 8002040:	e7ba      	b.n	8001fb8 <_printf_i+0x150>
 8002042:	680b      	ldr	r3, [r1, #0]
 8002044:	1d1a      	adds	r2, r3, #4
 8002046:	600a      	str	r2, [r1, #0]
 8002048:	681e      	ldr	r6, [r3, #0]
 800204a:	6862      	ldr	r2, [r4, #4]
 800204c:	2100      	movs	r1, #0
 800204e:	4630      	mov	r0, r6
 8002050:	f7fe f8ce 	bl	80001f0 <memchr>
 8002054:	b108      	cbz	r0, 800205a <_printf_i+0x1f2>
 8002056:	1b80      	subs	r0, r0, r6
 8002058:	6060      	str	r0, [r4, #4]
 800205a:	6863      	ldr	r3, [r4, #4]
 800205c:	6123      	str	r3, [r4, #16]
 800205e:	2300      	movs	r3, #0
 8002060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002064:	e7a8      	b.n	8001fb8 <_printf_i+0x150>
 8002066:	6923      	ldr	r3, [r4, #16]
 8002068:	4632      	mov	r2, r6
 800206a:	4649      	mov	r1, r9
 800206c:	4640      	mov	r0, r8
 800206e:	47d0      	blx	sl
 8002070:	3001      	adds	r0, #1
 8002072:	d0ab      	beq.n	8001fcc <_printf_i+0x164>
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	079b      	lsls	r3, r3, #30
 8002078:	d413      	bmi.n	80020a2 <_printf_i+0x23a>
 800207a:	68e0      	ldr	r0, [r4, #12]
 800207c:	9b03      	ldr	r3, [sp, #12]
 800207e:	4298      	cmp	r0, r3
 8002080:	bfb8      	it	lt
 8002082:	4618      	movlt	r0, r3
 8002084:	e7a4      	b.n	8001fd0 <_printf_i+0x168>
 8002086:	2301      	movs	r3, #1
 8002088:	4632      	mov	r2, r6
 800208a:	4649      	mov	r1, r9
 800208c:	4640      	mov	r0, r8
 800208e:	47d0      	blx	sl
 8002090:	3001      	adds	r0, #1
 8002092:	d09b      	beq.n	8001fcc <_printf_i+0x164>
 8002094:	3501      	adds	r5, #1
 8002096:	68e3      	ldr	r3, [r4, #12]
 8002098:	9903      	ldr	r1, [sp, #12]
 800209a:	1a5b      	subs	r3, r3, r1
 800209c:	42ab      	cmp	r3, r5
 800209e:	dcf2      	bgt.n	8002086 <_printf_i+0x21e>
 80020a0:	e7eb      	b.n	800207a <_printf_i+0x212>
 80020a2:	2500      	movs	r5, #0
 80020a4:	f104 0619 	add.w	r6, r4, #25
 80020a8:	e7f5      	b.n	8002096 <_printf_i+0x22e>
 80020aa:	bf00      	nop
 80020ac:	08002799 	.word	0x08002799
 80020b0:	080027aa 	.word	0x080027aa

080020b4 <_sbrk_r>:
 80020b4:	b538      	push	{r3, r4, r5, lr}
 80020b6:	4d06      	ldr	r5, [pc, #24]	; (80020d0 <_sbrk_r+0x1c>)
 80020b8:	2300      	movs	r3, #0
 80020ba:	4604      	mov	r4, r0
 80020bc:	4608      	mov	r0, r1
 80020be:	602b      	str	r3, [r5, #0]
 80020c0:	f7fe f9b6 	bl	8000430 <_sbrk>
 80020c4:	1c43      	adds	r3, r0, #1
 80020c6:	d102      	bne.n	80020ce <_sbrk_r+0x1a>
 80020c8:	682b      	ldr	r3, [r5, #0]
 80020ca:	b103      	cbz	r3, 80020ce <_sbrk_r+0x1a>
 80020cc:	6023      	str	r3, [r4, #0]
 80020ce:	bd38      	pop	{r3, r4, r5, pc}
 80020d0:	200002d4 	.word	0x200002d4

080020d4 <__sread>:
 80020d4:	b510      	push	{r4, lr}
 80020d6:	460c      	mov	r4, r1
 80020d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020dc:	f000 fab2 	bl	8002644 <_read_r>
 80020e0:	2800      	cmp	r0, #0
 80020e2:	bfab      	itete	ge
 80020e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80020e6:	89a3      	ldrhlt	r3, [r4, #12]
 80020e8:	181b      	addge	r3, r3, r0
 80020ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80020ee:	bfac      	ite	ge
 80020f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80020f2:	81a3      	strhlt	r3, [r4, #12]
 80020f4:	bd10      	pop	{r4, pc}

080020f6 <__swrite>:
 80020f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020fa:	461f      	mov	r7, r3
 80020fc:	898b      	ldrh	r3, [r1, #12]
 80020fe:	05db      	lsls	r3, r3, #23
 8002100:	4605      	mov	r5, r0
 8002102:	460c      	mov	r4, r1
 8002104:	4616      	mov	r6, r2
 8002106:	d505      	bpl.n	8002114 <__swrite+0x1e>
 8002108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800210c:	2302      	movs	r3, #2
 800210e:	2200      	movs	r2, #0
 8002110:	f000 f9c8 	bl	80024a4 <_lseek_r>
 8002114:	89a3      	ldrh	r3, [r4, #12]
 8002116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800211a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800211e:	81a3      	strh	r3, [r4, #12]
 8002120:	4632      	mov	r2, r6
 8002122:	463b      	mov	r3, r7
 8002124:	4628      	mov	r0, r5
 8002126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800212a:	f000 b869 	b.w	8002200 <_write_r>

0800212e <__sseek>:
 800212e:	b510      	push	{r4, lr}
 8002130:	460c      	mov	r4, r1
 8002132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002136:	f000 f9b5 	bl	80024a4 <_lseek_r>
 800213a:	1c43      	adds	r3, r0, #1
 800213c:	89a3      	ldrh	r3, [r4, #12]
 800213e:	bf15      	itete	ne
 8002140:	6560      	strne	r0, [r4, #84]	; 0x54
 8002142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800214a:	81a3      	strheq	r3, [r4, #12]
 800214c:	bf18      	it	ne
 800214e:	81a3      	strhne	r3, [r4, #12]
 8002150:	bd10      	pop	{r4, pc}

08002152 <__sclose>:
 8002152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002156:	f000 b8d3 	b.w	8002300 <_close_r>
	...

0800215c <__swbuf_r>:
 800215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215e:	460e      	mov	r6, r1
 8002160:	4614      	mov	r4, r2
 8002162:	4605      	mov	r5, r0
 8002164:	b118      	cbz	r0, 800216e <__swbuf_r+0x12>
 8002166:	6983      	ldr	r3, [r0, #24]
 8002168:	b90b      	cbnz	r3, 800216e <__swbuf_r+0x12>
 800216a:	f7ff fbbd 	bl	80018e8 <__sinit>
 800216e:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <__swbuf_r+0x98>)
 8002170:	429c      	cmp	r4, r3
 8002172:	d12b      	bne.n	80021cc <__swbuf_r+0x70>
 8002174:	686c      	ldr	r4, [r5, #4]
 8002176:	69a3      	ldr	r3, [r4, #24]
 8002178:	60a3      	str	r3, [r4, #8]
 800217a:	89a3      	ldrh	r3, [r4, #12]
 800217c:	071a      	lsls	r2, r3, #28
 800217e:	d52f      	bpl.n	80021e0 <__swbuf_r+0x84>
 8002180:	6923      	ldr	r3, [r4, #16]
 8002182:	b36b      	cbz	r3, 80021e0 <__swbuf_r+0x84>
 8002184:	6923      	ldr	r3, [r4, #16]
 8002186:	6820      	ldr	r0, [r4, #0]
 8002188:	1ac0      	subs	r0, r0, r3
 800218a:	6963      	ldr	r3, [r4, #20]
 800218c:	b2f6      	uxtb	r6, r6
 800218e:	4283      	cmp	r3, r0
 8002190:	4637      	mov	r7, r6
 8002192:	dc04      	bgt.n	800219e <__swbuf_r+0x42>
 8002194:	4621      	mov	r1, r4
 8002196:	4628      	mov	r0, r5
 8002198:	f000 f948 	bl	800242c <_fflush_r>
 800219c:	bb30      	cbnz	r0, 80021ec <__swbuf_r+0x90>
 800219e:	68a3      	ldr	r3, [r4, #8]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60a3      	str	r3, [r4, #8]
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	6022      	str	r2, [r4, #0]
 80021aa:	701e      	strb	r6, [r3, #0]
 80021ac:	6963      	ldr	r3, [r4, #20]
 80021ae:	3001      	adds	r0, #1
 80021b0:	4283      	cmp	r3, r0
 80021b2:	d004      	beq.n	80021be <__swbuf_r+0x62>
 80021b4:	89a3      	ldrh	r3, [r4, #12]
 80021b6:	07db      	lsls	r3, r3, #31
 80021b8:	d506      	bpl.n	80021c8 <__swbuf_r+0x6c>
 80021ba:	2e0a      	cmp	r6, #10
 80021bc:	d104      	bne.n	80021c8 <__swbuf_r+0x6c>
 80021be:	4621      	mov	r1, r4
 80021c0:	4628      	mov	r0, r5
 80021c2:	f000 f933 	bl	800242c <_fflush_r>
 80021c6:	b988      	cbnz	r0, 80021ec <__swbuf_r+0x90>
 80021c8:	4638      	mov	r0, r7
 80021ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <__swbuf_r+0x9c>)
 80021ce:	429c      	cmp	r4, r3
 80021d0:	d101      	bne.n	80021d6 <__swbuf_r+0x7a>
 80021d2:	68ac      	ldr	r4, [r5, #8]
 80021d4:	e7cf      	b.n	8002176 <__swbuf_r+0x1a>
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <__swbuf_r+0xa0>)
 80021d8:	429c      	cmp	r4, r3
 80021da:	bf08      	it	eq
 80021dc:	68ec      	ldreq	r4, [r5, #12]
 80021de:	e7ca      	b.n	8002176 <__swbuf_r+0x1a>
 80021e0:	4621      	mov	r1, r4
 80021e2:	4628      	mov	r0, r5
 80021e4:	f000 f81e 	bl	8002224 <__swsetup_r>
 80021e8:	2800      	cmp	r0, #0
 80021ea:	d0cb      	beq.n	8002184 <__swbuf_r+0x28>
 80021ec:	f04f 37ff 	mov.w	r7, #4294967295
 80021f0:	e7ea      	b.n	80021c8 <__swbuf_r+0x6c>
 80021f2:	bf00      	nop
 80021f4:	08002748 	.word	0x08002748
 80021f8:	08002768 	.word	0x08002768
 80021fc:	08002728 	.word	0x08002728

08002200 <_write_r>:
 8002200:	b538      	push	{r3, r4, r5, lr}
 8002202:	4d07      	ldr	r5, [pc, #28]	; (8002220 <_write_r+0x20>)
 8002204:	4604      	mov	r4, r0
 8002206:	4608      	mov	r0, r1
 8002208:	4611      	mov	r1, r2
 800220a:	2200      	movs	r2, #0
 800220c:	602a      	str	r2, [r5, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	f7fe f8c1 	bl	8000396 <_write>
 8002214:	1c43      	adds	r3, r0, #1
 8002216:	d102      	bne.n	800221e <_write_r+0x1e>
 8002218:	682b      	ldr	r3, [r5, #0]
 800221a:	b103      	cbz	r3, 800221e <_write_r+0x1e>
 800221c:	6023      	str	r3, [r4, #0]
 800221e:	bd38      	pop	{r3, r4, r5, pc}
 8002220:	200002d4 	.word	0x200002d4

08002224 <__swsetup_r>:
 8002224:	4b32      	ldr	r3, [pc, #200]	; (80022f0 <__swsetup_r+0xcc>)
 8002226:	b570      	push	{r4, r5, r6, lr}
 8002228:	681d      	ldr	r5, [r3, #0]
 800222a:	4606      	mov	r6, r0
 800222c:	460c      	mov	r4, r1
 800222e:	b125      	cbz	r5, 800223a <__swsetup_r+0x16>
 8002230:	69ab      	ldr	r3, [r5, #24]
 8002232:	b913      	cbnz	r3, 800223a <__swsetup_r+0x16>
 8002234:	4628      	mov	r0, r5
 8002236:	f7ff fb57 	bl	80018e8 <__sinit>
 800223a:	4b2e      	ldr	r3, [pc, #184]	; (80022f4 <__swsetup_r+0xd0>)
 800223c:	429c      	cmp	r4, r3
 800223e:	d10f      	bne.n	8002260 <__swsetup_r+0x3c>
 8002240:	686c      	ldr	r4, [r5, #4]
 8002242:	89a3      	ldrh	r3, [r4, #12]
 8002244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002248:	0719      	lsls	r1, r3, #28
 800224a:	d42c      	bmi.n	80022a6 <__swsetup_r+0x82>
 800224c:	06dd      	lsls	r5, r3, #27
 800224e:	d411      	bmi.n	8002274 <__swsetup_r+0x50>
 8002250:	2309      	movs	r3, #9
 8002252:	6033      	str	r3, [r6, #0]
 8002254:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002258:	81a3      	strh	r3, [r4, #12]
 800225a:	f04f 30ff 	mov.w	r0, #4294967295
 800225e:	e03e      	b.n	80022de <__swsetup_r+0xba>
 8002260:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <__swsetup_r+0xd4>)
 8002262:	429c      	cmp	r4, r3
 8002264:	d101      	bne.n	800226a <__swsetup_r+0x46>
 8002266:	68ac      	ldr	r4, [r5, #8]
 8002268:	e7eb      	b.n	8002242 <__swsetup_r+0x1e>
 800226a:	4b24      	ldr	r3, [pc, #144]	; (80022fc <__swsetup_r+0xd8>)
 800226c:	429c      	cmp	r4, r3
 800226e:	bf08      	it	eq
 8002270:	68ec      	ldreq	r4, [r5, #12]
 8002272:	e7e6      	b.n	8002242 <__swsetup_r+0x1e>
 8002274:	0758      	lsls	r0, r3, #29
 8002276:	d512      	bpl.n	800229e <__swsetup_r+0x7a>
 8002278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800227a:	b141      	cbz	r1, 800228e <__swsetup_r+0x6a>
 800227c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002280:	4299      	cmp	r1, r3
 8002282:	d002      	beq.n	800228a <__swsetup_r+0x66>
 8002284:	4630      	mov	r0, r6
 8002286:	f000 f98f 	bl	80025a8 <_free_r>
 800228a:	2300      	movs	r3, #0
 800228c:	6363      	str	r3, [r4, #52]	; 0x34
 800228e:	89a3      	ldrh	r3, [r4, #12]
 8002290:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002294:	81a3      	strh	r3, [r4, #12]
 8002296:	2300      	movs	r3, #0
 8002298:	6063      	str	r3, [r4, #4]
 800229a:	6923      	ldr	r3, [r4, #16]
 800229c:	6023      	str	r3, [r4, #0]
 800229e:	89a3      	ldrh	r3, [r4, #12]
 80022a0:	f043 0308 	orr.w	r3, r3, #8
 80022a4:	81a3      	strh	r3, [r4, #12]
 80022a6:	6923      	ldr	r3, [r4, #16]
 80022a8:	b94b      	cbnz	r3, 80022be <__swsetup_r+0x9a>
 80022aa:	89a3      	ldrh	r3, [r4, #12]
 80022ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80022b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b4:	d003      	beq.n	80022be <__swsetup_r+0x9a>
 80022b6:	4621      	mov	r1, r4
 80022b8:	4630      	mov	r0, r6
 80022ba:	f000 f929 	bl	8002510 <__smakebuf_r>
 80022be:	89a0      	ldrh	r0, [r4, #12]
 80022c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022c4:	f010 0301 	ands.w	r3, r0, #1
 80022c8:	d00a      	beq.n	80022e0 <__swsetup_r+0xbc>
 80022ca:	2300      	movs	r3, #0
 80022cc:	60a3      	str	r3, [r4, #8]
 80022ce:	6963      	ldr	r3, [r4, #20]
 80022d0:	425b      	negs	r3, r3
 80022d2:	61a3      	str	r3, [r4, #24]
 80022d4:	6923      	ldr	r3, [r4, #16]
 80022d6:	b943      	cbnz	r3, 80022ea <__swsetup_r+0xc6>
 80022d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80022dc:	d1ba      	bne.n	8002254 <__swsetup_r+0x30>
 80022de:	bd70      	pop	{r4, r5, r6, pc}
 80022e0:	0781      	lsls	r1, r0, #30
 80022e2:	bf58      	it	pl
 80022e4:	6963      	ldrpl	r3, [r4, #20]
 80022e6:	60a3      	str	r3, [r4, #8]
 80022e8:	e7f4      	b.n	80022d4 <__swsetup_r+0xb0>
 80022ea:	2000      	movs	r0, #0
 80022ec:	e7f7      	b.n	80022de <__swsetup_r+0xba>
 80022ee:	bf00      	nop
 80022f0:	20000014 	.word	0x20000014
 80022f4:	08002748 	.word	0x08002748
 80022f8:	08002768 	.word	0x08002768
 80022fc:	08002728 	.word	0x08002728

08002300 <_close_r>:
 8002300:	b538      	push	{r3, r4, r5, lr}
 8002302:	4d06      	ldr	r5, [pc, #24]	; (800231c <_close_r+0x1c>)
 8002304:	2300      	movs	r3, #0
 8002306:	4604      	mov	r4, r0
 8002308:	4608      	mov	r0, r1
 800230a:	602b      	str	r3, [r5, #0]
 800230c:	f7fe f85f 	bl	80003ce <_close>
 8002310:	1c43      	adds	r3, r0, #1
 8002312:	d102      	bne.n	800231a <_close_r+0x1a>
 8002314:	682b      	ldr	r3, [r5, #0]
 8002316:	b103      	cbz	r3, 800231a <_close_r+0x1a>
 8002318:	6023      	str	r3, [r4, #0]
 800231a:	bd38      	pop	{r3, r4, r5, pc}
 800231c:	200002d4 	.word	0x200002d4

08002320 <__sflush_r>:
 8002320:	898a      	ldrh	r2, [r1, #12]
 8002322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002326:	4605      	mov	r5, r0
 8002328:	0710      	lsls	r0, r2, #28
 800232a:	460c      	mov	r4, r1
 800232c:	d458      	bmi.n	80023e0 <__sflush_r+0xc0>
 800232e:	684b      	ldr	r3, [r1, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	dc05      	bgt.n	8002340 <__sflush_r+0x20>
 8002334:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	dc02      	bgt.n	8002340 <__sflush_r+0x20>
 800233a:	2000      	movs	r0, #0
 800233c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002342:	2e00      	cmp	r6, #0
 8002344:	d0f9      	beq.n	800233a <__sflush_r+0x1a>
 8002346:	2300      	movs	r3, #0
 8002348:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800234c:	682f      	ldr	r7, [r5, #0]
 800234e:	602b      	str	r3, [r5, #0]
 8002350:	d032      	beq.n	80023b8 <__sflush_r+0x98>
 8002352:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002354:	89a3      	ldrh	r3, [r4, #12]
 8002356:	075a      	lsls	r2, r3, #29
 8002358:	d505      	bpl.n	8002366 <__sflush_r+0x46>
 800235a:	6863      	ldr	r3, [r4, #4]
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002360:	b10b      	cbz	r3, 8002366 <__sflush_r+0x46>
 8002362:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002364:	1ac0      	subs	r0, r0, r3
 8002366:	2300      	movs	r3, #0
 8002368:	4602      	mov	r2, r0
 800236a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800236c:	6a21      	ldr	r1, [r4, #32]
 800236e:	4628      	mov	r0, r5
 8002370:	47b0      	blx	r6
 8002372:	1c43      	adds	r3, r0, #1
 8002374:	89a3      	ldrh	r3, [r4, #12]
 8002376:	d106      	bne.n	8002386 <__sflush_r+0x66>
 8002378:	6829      	ldr	r1, [r5, #0]
 800237a:	291d      	cmp	r1, #29
 800237c:	d82c      	bhi.n	80023d8 <__sflush_r+0xb8>
 800237e:	4a2a      	ldr	r2, [pc, #168]	; (8002428 <__sflush_r+0x108>)
 8002380:	40ca      	lsrs	r2, r1
 8002382:	07d6      	lsls	r6, r2, #31
 8002384:	d528      	bpl.n	80023d8 <__sflush_r+0xb8>
 8002386:	2200      	movs	r2, #0
 8002388:	6062      	str	r2, [r4, #4]
 800238a:	04d9      	lsls	r1, r3, #19
 800238c:	6922      	ldr	r2, [r4, #16]
 800238e:	6022      	str	r2, [r4, #0]
 8002390:	d504      	bpl.n	800239c <__sflush_r+0x7c>
 8002392:	1c42      	adds	r2, r0, #1
 8002394:	d101      	bne.n	800239a <__sflush_r+0x7a>
 8002396:	682b      	ldr	r3, [r5, #0]
 8002398:	b903      	cbnz	r3, 800239c <__sflush_r+0x7c>
 800239a:	6560      	str	r0, [r4, #84]	; 0x54
 800239c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800239e:	602f      	str	r7, [r5, #0]
 80023a0:	2900      	cmp	r1, #0
 80023a2:	d0ca      	beq.n	800233a <__sflush_r+0x1a>
 80023a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023a8:	4299      	cmp	r1, r3
 80023aa:	d002      	beq.n	80023b2 <__sflush_r+0x92>
 80023ac:	4628      	mov	r0, r5
 80023ae:	f000 f8fb 	bl	80025a8 <_free_r>
 80023b2:	2000      	movs	r0, #0
 80023b4:	6360      	str	r0, [r4, #52]	; 0x34
 80023b6:	e7c1      	b.n	800233c <__sflush_r+0x1c>
 80023b8:	6a21      	ldr	r1, [r4, #32]
 80023ba:	2301      	movs	r3, #1
 80023bc:	4628      	mov	r0, r5
 80023be:	47b0      	blx	r6
 80023c0:	1c41      	adds	r1, r0, #1
 80023c2:	d1c7      	bne.n	8002354 <__sflush_r+0x34>
 80023c4:	682b      	ldr	r3, [r5, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0c4      	beq.n	8002354 <__sflush_r+0x34>
 80023ca:	2b1d      	cmp	r3, #29
 80023cc:	d001      	beq.n	80023d2 <__sflush_r+0xb2>
 80023ce:	2b16      	cmp	r3, #22
 80023d0:	d101      	bne.n	80023d6 <__sflush_r+0xb6>
 80023d2:	602f      	str	r7, [r5, #0]
 80023d4:	e7b1      	b.n	800233a <__sflush_r+0x1a>
 80023d6:	89a3      	ldrh	r3, [r4, #12]
 80023d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023dc:	81a3      	strh	r3, [r4, #12]
 80023de:	e7ad      	b.n	800233c <__sflush_r+0x1c>
 80023e0:	690f      	ldr	r7, [r1, #16]
 80023e2:	2f00      	cmp	r7, #0
 80023e4:	d0a9      	beq.n	800233a <__sflush_r+0x1a>
 80023e6:	0793      	lsls	r3, r2, #30
 80023e8:	680e      	ldr	r6, [r1, #0]
 80023ea:	bf08      	it	eq
 80023ec:	694b      	ldreq	r3, [r1, #20]
 80023ee:	600f      	str	r7, [r1, #0]
 80023f0:	bf18      	it	ne
 80023f2:	2300      	movne	r3, #0
 80023f4:	eba6 0807 	sub.w	r8, r6, r7
 80023f8:	608b      	str	r3, [r1, #8]
 80023fa:	f1b8 0f00 	cmp.w	r8, #0
 80023fe:	dd9c      	ble.n	800233a <__sflush_r+0x1a>
 8002400:	6a21      	ldr	r1, [r4, #32]
 8002402:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002404:	4643      	mov	r3, r8
 8002406:	463a      	mov	r2, r7
 8002408:	4628      	mov	r0, r5
 800240a:	47b0      	blx	r6
 800240c:	2800      	cmp	r0, #0
 800240e:	dc06      	bgt.n	800241e <__sflush_r+0xfe>
 8002410:	89a3      	ldrh	r3, [r4, #12]
 8002412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002416:	81a3      	strh	r3, [r4, #12]
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	e78e      	b.n	800233c <__sflush_r+0x1c>
 800241e:	4407      	add	r7, r0
 8002420:	eba8 0800 	sub.w	r8, r8, r0
 8002424:	e7e9      	b.n	80023fa <__sflush_r+0xda>
 8002426:	bf00      	nop
 8002428:	20400001 	.word	0x20400001

0800242c <_fflush_r>:
 800242c:	b538      	push	{r3, r4, r5, lr}
 800242e:	690b      	ldr	r3, [r1, #16]
 8002430:	4605      	mov	r5, r0
 8002432:	460c      	mov	r4, r1
 8002434:	b913      	cbnz	r3, 800243c <_fflush_r+0x10>
 8002436:	2500      	movs	r5, #0
 8002438:	4628      	mov	r0, r5
 800243a:	bd38      	pop	{r3, r4, r5, pc}
 800243c:	b118      	cbz	r0, 8002446 <_fflush_r+0x1a>
 800243e:	6983      	ldr	r3, [r0, #24]
 8002440:	b90b      	cbnz	r3, 8002446 <_fflush_r+0x1a>
 8002442:	f7ff fa51 	bl	80018e8 <__sinit>
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <_fflush_r+0x6c>)
 8002448:	429c      	cmp	r4, r3
 800244a:	d11b      	bne.n	8002484 <_fflush_r+0x58>
 800244c:	686c      	ldr	r4, [r5, #4]
 800244e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0ef      	beq.n	8002436 <_fflush_r+0xa>
 8002456:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002458:	07d0      	lsls	r0, r2, #31
 800245a:	d404      	bmi.n	8002466 <_fflush_r+0x3a>
 800245c:	0599      	lsls	r1, r3, #22
 800245e:	d402      	bmi.n	8002466 <_fflush_r+0x3a>
 8002460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002462:	f7ff fadf 	bl	8001a24 <__retarget_lock_acquire_recursive>
 8002466:	4628      	mov	r0, r5
 8002468:	4621      	mov	r1, r4
 800246a:	f7ff ff59 	bl	8002320 <__sflush_r>
 800246e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002470:	07da      	lsls	r2, r3, #31
 8002472:	4605      	mov	r5, r0
 8002474:	d4e0      	bmi.n	8002438 <_fflush_r+0xc>
 8002476:	89a3      	ldrh	r3, [r4, #12]
 8002478:	059b      	lsls	r3, r3, #22
 800247a:	d4dd      	bmi.n	8002438 <_fflush_r+0xc>
 800247c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800247e:	f7ff fad2 	bl	8001a26 <__retarget_lock_release_recursive>
 8002482:	e7d9      	b.n	8002438 <_fflush_r+0xc>
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <_fflush_r+0x70>)
 8002486:	429c      	cmp	r4, r3
 8002488:	d101      	bne.n	800248e <_fflush_r+0x62>
 800248a:	68ac      	ldr	r4, [r5, #8]
 800248c:	e7df      	b.n	800244e <_fflush_r+0x22>
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <_fflush_r+0x74>)
 8002490:	429c      	cmp	r4, r3
 8002492:	bf08      	it	eq
 8002494:	68ec      	ldreq	r4, [r5, #12]
 8002496:	e7da      	b.n	800244e <_fflush_r+0x22>
 8002498:	08002748 	.word	0x08002748
 800249c:	08002768 	.word	0x08002768
 80024a0:	08002728 	.word	0x08002728

080024a4 <_lseek_r>:
 80024a4:	b538      	push	{r3, r4, r5, lr}
 80024a6:	4d07      	ldr	r5, [pc, #28]	; (80024c4 <_lseek_r+0x20>)
 80024a8:	4604      	mov	r4, r0
 80024aa:	4608      	mov	r0, r1
 80024ac:	4611      	mov	r1, r2
 80024ae:	2200      	movs	r2, #0
 80024b0:	602a      	str	r2, [r5, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f7fd ffaf 	bl	8000416 <_lseek>
 80024b8:	1c43      	adds	r3, r0, #1
 80024ba:	d102      	bne.n	80024c2 <_lseek_r+0x1e>
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	b103      	cbz	r3, 80024c2 <_lseek_r+0x1e>
 80024c0:	6023      	str	r3, [r4, #0]
 80024c2:	bd38      	pop	{r3, r4, r5, pc}
 80024c4:	200002d4 	.word	0x200002d4

080024c8 <__swhatbuf_r>:
 80024c8:	b570      	push	{r4, r5, r6, lr}
 80024ca:	460e      	mov	r6, r1
 80024cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024d0:	2900      	cmp	r1, #0
 80024d2:	b096      	sub	sp, #88	; 0x58
 80024d4:	4614      	mov	r4, r2
 80024d6:	461d      	mov	r5, r3
 80024d8:	da07      	bge.n	80024ea <__swhatbuf_r+0x22>
 80024da:	2300      	movs	r3, #0
 80024dc:	602b      	str	r3, [r5, #0]
 80024de:	89b3      	ldrh	r3, [r6, #12]
 80024e0:	061a      	lsls	r2, r3, #24
 80024e2:	d410      	bmi.n	8002506 <__swhatbuf_r+0x3e>
 80024e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e8:	e00e      	b.n	8002508 <__swhatbuf_r+0x40>
 80024ea:	466a      	mov	r2, sp
 80024ec:	f000 f8bc 	bl	8002668 <_fstat_r>
 80024f0:	2800      	cmp	r0, #0
 80024f2:	dbf2      	blt.n	80024da <__swhatbuf_r+0x12>
 80024f4:	9a01      	ldr	r2, [sp, #4]
 80024f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80024fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80024fe:	425a      	negs	r2, r3
 8002500:	415a      	adcs	r2, r3
 8002502:	602a      	str	r2, [r5, #0]
 8002504:	e7ee      	b.n	80024e4 <__swhatbuf_r+0x1c>
 8002506:	2340      	movs	r3, #64	; 0x40
 8002508:	2000      	movs	r0, #0
 800250a:	6023      	str	r3, [r4, #0]
 800250c:	b016      	add	sp, #88	; 0x58
 800250e:	bd70      	pop	{r4, r5, r6, pc}

08002510 <__smakebuf_r>:
 8002510:	898b      	ldrh	r3, [r1, #12]
 8002512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002514:	079d      	lsls	r5, r3, #30
 8002516:	4606      	mov	r6, r0
 8002518:	460c      	mov	r4, r1
 800251a:	d507      	bpl.n	800252c <__smakebuf_r+0x1c>
 800251c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002520:	6023      	str	r3, [r4, #0]
 8002522:	6123      	str	r3, [r4, #16]
 8002524:	2301      	movs	r3, #1
 8002526:	6163      	str	r3, [r4, #20]
 8002528:	b002      	add	sp, #8
 800252a:	bd70      	pop	{r4, r5, r6, pc}
 800252c:	ab01      	add	r3, sp, #4
 800252e:	466a      	mov	r2, sp
 8002530:	f7ff ffca 	bl	80024c8 <__swhatbuf_r>
 8002534:	9900      	ldr	r1, [sp, #0]
 8002536:	4605      	mov	r5, r0
 8002538:	4630      	mov	r0, r6
 800253a:	f7ff fa75 	bl	8001a28 <_malloc_r>
 800253e:	b948      	cbnz	r0, 8002554 <__smakebuf_r+0x44>
 8002540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002544:	059a      	lsls	r2, r3, #22
 8002546:	d4ef      	bmi.n	8002528 <__smakebuf_r+0x18>
 8002548:	f023 0303 	bic.w	r3, r3, #3
 800254c:	f043 0302 	orr.w	r3, r3, #2
 8002550:	81a3      	strh	r3, [r4, #12]
 8002552:	e7e3      	b.n	800251c <__smakebuf_r+0xc>
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <__smakebuf_r+0x7c>)
 8002556:	62b3      	str	r3, [r6, #40]	; 0x28
 8002558:	89a3      	ldrh	r3, [r4, #12]
 800255a:	6020      	str	r0, [r4, #0]
 800255c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002560:	81a3      	strh	r3, [r4, #12]
 8002562:	9b00      	ldr	r3, [sp, #0]
 8002564:	6163      	str	r3, [r4, #20]
 8002566:	9b01      	ldr	r3, [sp, #4]
 8002568:	6120      	str	r0, [r4, #16]
 800256a:	b15b      	cbz	r3, 8002584 <__smakebuf_r+0x74>
 800256c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002570:	4630      	mov	r0, r6
 8002572:	f000 f88b 	bl	800268c <_isatty_r>
 8002576:	b128      	cbz	r0, 8002584 <__smakebuf_r+0x74>
 8002578:	89a3      	ldrh	r3, [r4, #12]
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	81a3      	strh	r3, [r4, #12]
 8002584:	89a0      	ldrh	r0, [r4, #12]
 8002586:	4305      	orrs	r5, r0
 8002588:	81a5      	strh	r5, [r4, #12]
 800258a:	e7cd      	b.n	8002528 <__smakebuf_r+0x18>
 800258c:	08001881 	.word	0x08001881

08002590 <__malloc_lock>:
 8002590:	4801      	ldr	r0, [pc, #4]	; (8002598 <__malloc_lock+0x8>)
 8002592:	f7ff ba47 	b.w	8001a24 <__retarget_lock_acquire_recursive>
 8002596:	bf00      	nop
 8002598:	200002cc 	.word	0x200002cc

0800259c <__malloc_unlock>:
 800259c:	4801      	ldr	r0, [pc, #4]	; (80025a4 <__malloc_unlock+0x8>)
 800259e:	f7ff ba42 	b.w	8001a26 <__retarget_lock_release_recursive>
 80025a2:	bf00      	nop
 80025a4:	200002cc 	.word	0x200002cc

080025a8 <_free_r>:
 80025a8:	b538      	push	{r3, r4, r5, lr}
 80025aa:	4605      	mov	r5, r0
 80025ac:	2900      	cmp	r1, #0
 80025ae:	d045      	beq.n	800263c <_free_r+0x94>
 80025b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025b4:	1f0c      	subs	r4, r1, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bfb8      	it	lt
 80025ba:	18e4      	addlt	r4, r4, r3
 80025bc:	f7ff ffe8 	bl	8002590 <__malloc_lock>
 80025c0:	4a1f      	ldr	r2, [pc, #124]	; (8002640 <_free_r+0x98>)
 80025c2:	6813      	ldr	r3, [r2, #0]
 80025c4:	4610      	mov	r0, r2
 80025c6:	b933      	cbnz	r3, 80025d6 <_free_r+0x2e>
 80025c8:	6063      	str	r3, [r4, #4]
 80025ca:	6014      	str	r4, [r2, #0]
 80025cc:	4628      	mov	r0, r5
 80025ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025d2:	f7ff bfe3 	b.w	800259c <__malloc_unlock>
 80025d6:	42a3      	cmp	r3, r4
 80025d8:	d90b      	bls.n	80025f2 <_free_r+0x4a>
 80025da:	6821      	ldr	r1, [r4, #0]
 80025dc:	1862      	adds	r2, r4, r1
 80025de:	4293      	cmp	r3, r2
 80025e0:	bf04      	itt	eq
 80025e2:	681a      	ldreq	r2, [r3, #0]
 80025e4:	685b      	ldreq	r3, [r3, #4]
 80025e6:	6063      	str	r3, [r4, #4]
 80025e8:	bf04      	itt	eq
 80025ea:	1852      	addeq	r2, r2, r1
 80025ec:	6022      	streq	r2, [r4, #0]
 80025ee:	6004      	str	r4, [r0, #0]
 80025f0:	e7ec      	b.n	80025cc <_free_r+0x24>
 80025f2:	461a      	mov	r2, r3
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	b10b      	cbz	r3, 80025fc <_free_r+0x54>
 80025f8:	42a3      	cmp	r3, r4
 80025fa:	d9fa      	bls.n	80025f2 <_free_r+0x4a>
 80025fc:	6811      	ldr	r1, [r2, #0]
 80025fe:	1850      	adds	r0, r2, r1
 8002600:	42a0      	cmp	r0, r4
 8002602:	d10b      	bne.n	800261c <_free_r+0x74>
 8002604:	6820      	ldr	r0, [r4, #0]
 8002606:	4401      	add	r1, r0
 8002608:	1850      	adds	r0, r2, r1
 800260a:	4283      	cmp	r3, r0
 800260c:	6011      	str	r1, [r2, #0]
 800260e:	d1dd      	bne.n	80025cc <_free_r+0x24>
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	6053      	str	r3, [r2, #4]
 8002616:	4401      	add	r1, r0
 8002618:	6011      	str	r1, [r2, #0]
 800261a:	e7d7      	b.n	80025cc <_free_r+0x24>
 800261c:	d902      	bls.n	8002624 <_free_r+0x7c>
 800261e:	230c      	movs	r3, #12
 8002620:	602b      	str	r3, [r5, #0]
 8002622:	e7d3      	b.n	80025cc <_free_r+0x24>
 8002624:	6820      	ldr	r0, [r4, #0]
 8002626:	1821      	adds	r1, r4, r0
 8002628:	428b      	cmp	r3, r1
 800262a:	bf04      	itt	eq
 800262c:	6819      	ldreq	r1, [r3, #0]
 800262e:	685b      	ldreq	r3, [r3, #4]
 8002630:	6063      	str	r3, [r4, #4]
 8002632:	bf04      	itt	eq
 8002634:	1809      	addeq	r1, r1, r0
 8002636:	6021      	streq	r1, [r4, #0]
 8002638:	6054      	str	r4, [r2, #4]
 800263a:	e7c7      	b.n	80025cc <_free_r+0x24>
 800263c:	bd38      	pop	{r3, r4, r5, pc}
 800263e:	bf00      	nop
 8002640:	200000a0 	.word	0x200000a0

08002644 <_read_r>:
 8002644:	b538      	push	{r3, r4, r5, lr}
 8002646:	4d07      	ldr	r5, [pc, #28]	; (8002664 <_read_r+0x20>)
 8002648:	4604      	mov	r4, r0
 800264a:	4608      	mov	r0, r1
 800264c:	4611      	mov	r1, r2
 800264e:	2200      	movs	r2, #0
 8002650:	602a      	str	r2, [r5, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	f7fd fe82 	bl	800035c <_read>
 8002658:	1c43      	adds	r3, r0, #1
 800265a:	d102      	bne.n	8002662 <_read_r+0x1e>
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	b103      	cbz	r3, 8002662 <_read_r+0x1e>
 8002660:	6023      	str	r3, [r4, #0]
 8002662:	bd38      	pop	{r3, r4, r5, pc}
 8002664:	200002d4 	.word	0x200002d4

08002668 <_fstat_r>:
 8002668:	b538      	push	{r3, r4, r5, lr}
 800266a:	4d07      	ldr	r5, [pc, #28]	; (8002688 <_fstat_r+0x20>)
 800266c:	2300      	movs	r3, #0
 800266e:	4604      	mov	r4, r0
 8002670:	4608      	mov	r0, r1
 8002672:	4611      	mov	r1, r2
 8002674:	602b      	str	r3, [r5, #0]
 8002676:	f7fd feb5 	bl	80003e4 <_fstat>
 800267a:	1c43      	adds	r3, r0, #1
 800267c:	d102      	bne.n	8002684 <_fstat_r+0x1c>
 800267e:	682b      	ldr	r3, [r5, #0]
 8002680:	b103      	cbz	r3, 8002684 <_fstat_r+0x1c>
 8002682:	6023      	str	r3, [r4, #0]
 8002684:	bd38      	pop	{r3, r4, r5, pc}
 8002686:	bf00      	nop
 8002688:	200002d4 	.word	0x200002d4

0800268c <_isatty_r>:
 800268c:	b538      	push	{r3, r4, r5, lr}
 800268e:	4d06      	ldr	r5, [pc, #24]	; (80026a8 <_isatty_r+0x1c>)
 8002690:	2300      	movs	r3, #0
 8002692:	4604      	mov	r4, r0
 8002694:	4608      	mov	r0, r1
 8002696:	602b      	str	r3, [r5, #0]
 8002698:	f7fd feb3 	bl	8000402 <_isatty>
 800269c:	1c43      	adds	r3, r0, #1
 800269e:	d102      	bne.n	80026a6 <_isatty_r+0x1a>
 80026a0:	682b      	ldr	r3, [r5, #0]
 80026a2:	b103      	cbz	r3, 80026a6 <_isatty_r+0x1a>
 80026a4:	6023      	str	r3, [r4, #0]
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
 80026a8:	200002d4 	.word	0x200002d4

080026ac <_init>:
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ae:	bf00      	nop
 80026b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b2:	bc08      	pop	{r3}
 80026b4:	469e      	mov	lr, r3
 80026b6:	4770      	bx	lr

080026b8 <_fini>:
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ba:	bf00      	nop
 80026bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026be:	bc08      	pop	{r3}
 80026c0:	469e      	mov	lr, r3
 80026c2:	4770      	bx	lr
