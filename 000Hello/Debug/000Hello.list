
000Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08002298  08002298  00012298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f0  080026f0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080026f0  080026f0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026f0  080026f0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f4  080026f4  000126f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080026f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000064  0800275c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  0800275c  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004211  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d41  00000000  00000000  0002429f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000338  00000000  00000000  00024fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002c0  00000000  00000000  00025318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003918  00000000  00000000  000255d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000034a0  00000000  00000000  00028ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c3ad  00000000  00000000  0002c390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0003873d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013b0  00000000  00000000  00038790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002280 	.word	0x08002280

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08002280 	.word	0x08002280

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SPI1_GPIOInits>:
 * PA6 -> SPI1_MISO
 * PA7 --> SPI1_MOSI
 * ALT function mode : 5
 */
void SPI1_GPIOInits(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 8000296:	4b19      	ldr	r3, [pc, #100]	; (80002fc <SPI1_GPIOInits+0x6c>)
 8000298:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 800029a:	2302      	movs	r3, #2
 800029c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800029e:	2305      	movs	r3, #5
 80002a0:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 80002a2:	2300      	movs	r3, #0
 80002a4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002aa:	2302      	movs	r3, #2
 80002ac:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80002ae:	2305      	movs	r3, #5
 80002b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fd6d 	bl	8000d94 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002ba:	2307      	movs	r3, #7
 80002bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fd67 	bl	8000d94 <GPIO_Init>

	//NSS
 	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 80002c6:	2304      	movs	r3, #4
 80002c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fd61 	bl	8000d94 <GPIO_Init>

	//DC Pin I/O
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002d2:	2306      	movs	r3, #6
 80002d4:	723b      	strb	r3, [r7, #8]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002d6:	2301      	movs	r3, #1
 80002d8:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002de:	2302      	movs	r3, #2
 80002e0:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_OD;
 80002e2:	2301      	movs	r3, #1
 80002e4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002e6:	2300      	movs	r3, #0
 80002e8:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&SPIPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fd51 	bl	8000d94 <GPIO_Init>

}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40020000 	.word	0x40020000

08000300 <SPI1_Inits>:

	SPI_Init(&SPI2handle);
}

void SPI1_Inits(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	SPI1handle.pSPIx = SPI1;
 8000304:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <SPI1_Inits+0x40>)
 8000306:	4a0f      	ldr	r2, [pc, #60]	; (8000344 <SPI1_Inits+0x44>)
 8000308:	601a      	str	r2, [r3, #0]
	SPI1handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <SPI1_Inits+0x40>)
 800030c:	2201      	movs	r2, #1
 800030e:	715a      	strb	r2, [r3, #5]
	SPI1handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 8000310:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <SPI1_Inits+0x40>)
 8000312:	2201      	movs	r2, #1
 8000314:	711a      	strb	r2, [r3, #4]
	SPI1handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <SPI1_Inits+0x40>)
 8000318:	2202      	movs	r2, #2
 800031a:	719a      	strb	r2, [r3, #6]
	SPI1handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 800031c:	4b08      	ldr	r3, [pc, #32]	; (8000340 <SPI1_Inits+0x40>)
 800031e:	2200      	movs	r2, #0
 8000320:	71da      	strb	r2, [r3, #7]
	SPI1handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 8000322:	4b07      	ldr	r3, [pc, #28]	; (8000340 <SPI1_Inits+0x40>)
 8000324:	2200      	movs	r2, #0
 8000326:	721a      	strb	r2, [r3, #8]
	SPI1handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <SPI1_Inits+0x40>)
 800032a:	2200      	movs	r2, #0
 800032c:	725a      	strb	r2, [r3, #9]
	SPI1handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 800032e:	4b04      	ldr	r3, [pc, #16]	; (8000340 <SPI1_Inits+0x40>)
 8000330:	2200      	movs	r2, #0
 8000332:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI1handle);
 8000334:	4802      	ldr	r0, [pc, #8]	; (8000340 <SPI1_Inits+0x40>)
 8000336:	f000 ff7c 	bl	8001232 <SPI_Init>
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000094 	.word	0x20000094
 8000344:	40013000 	.word	0x40013000

08000348 <main>:
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRIO15);
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
}

int main (void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
//	* and NSS pin will be high when SPE=0
//	*/
//	SPI_SSOEConfig(SPI2, ENABLE);

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
  	SPI1_GPIOInits();
 800034c:	f7ff ffa0 	bl	8000290 <SPI1_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI1_Inits();
 8000350:	f7ff ffd6 	bl	8000300 <SPI1_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI1, ENABLE);
 8000354:	2101      	movs	r1, #1
 8000356:	4816      	ldr	r0, [pc, #88]	; (80003b0 <main+0x68>)
 8000358:	f000 ff50 	bl	80011fc <SPI_SSOEConfig>

	//Initialize LCD with 0x38 software contrast
	LCD5110_Init(0x38);
 800035c:	2038      	movs	r0, #56	; 0x38
 800035e:	f000 f9dd 	bl	800071c <LCD5110_Init>

	//Go to x=14, y=3 position
	LCD5110_GotoXY(14, 3);
 8000362:	2103      	movs	r1, #3
 8000364:	200e      	movs	r0, #14
 8000366:	f000 fb63 	bl	8000a30 <LCD5110_GotoXY>

	//Print data with Pixel Set mode and Fontsize of 5x7px
	LCD5110_Puts("STM32F429", LCD5110_Pixel_Set, LCD5110_FontSize_5x7);
 800036a:	2200      	movs	r2, #0
 800036c:	2101      	movs	r1, #1
 800036e:	4811      	ldr	r0, [pc, #68]	; (80003b4 <main+0x6c>)
 8000370:	f000 fc0c 	bl	8000b8c <LCD5110_Puts>
	LCD5110_GotoXY(15, 13);
 8000374:	210d      	movs	r1, #13
 8000376:	200f      	movs	r0, #15
 8000378:	f000 fb5a 	bl	8000a30 <LCD5110_GotoXY>
	LCD5110_Puts("Discovery", LCD5110_Pixel_Set, LCD5110_FontSize_5x7);
 800037c:	2200      	movs	r2, #0
 800037e:	2101      	movs	r1, #1
 8000380:	480d      	ldr	r0, [pc, #52]	; (80003b8 <main+0x70>)
 8000382:	f000 fc03 	bl	8000b8c <LCD5110_Puts>
	LCD5110_GotoXY(30, 26);
 8000386:	211a      	movs	r1, #26
 8000388:	201e      	movs	r0, #30
 800038a:	f000 fb51 	bl	8000a30 <LCD5110_GotoXY>
	LCD5110_Puts("2014", LCD5110_Pixel_Set, LCD5110_FontSize_5x7);
 800038e:	2200      	movs	r2, #0
 8000390:	2101      	movs	r1, #1
 8000392:	480a      	ldr	r0, [pc, #40]	; (80003bc <main+0x74>)
 8000394:	f000 fbfa 	bl	8000b8c <LCD5110_Puts>

	LCD5110_GotoXY(45, 42);
 8000398:	212a      	movs	r1, #42	; 0x2a
 800039a:	202d      	movs	r0, #45	; 0x2d
 800039c:	f000 fb48 	bl	8000a30 <LCD5110_GotoXY>
	//Put string with Pixel set mode and Fontsize of 3x5
	LCD5110_Puts("majerle.eu", LCD5110_Pixel_Set, LCD5110_FontSize_3x5);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2101      	movs	r1, #1
 80003a4:	4806      	ldr	r0, [pc, #24]	; (80003c0 <main+0x78>)
 80003a6:	f000 fbf1 	bl	8000b8c <LCD5110_Puts>

	//Display data on LCD
	LCD5110_Refresh();
 80003aa:	f000 faa3 	bl	80008f4 <LCD5110_Refresh>

//	uint32_t data = 0x000C;
//	ADE_WriteData(SPI2, MODE, data, 2);
//	data1 = ADE_ReadData(SPI2, MODE, 2);
//	printf("DATA1 : %x \n", data1);
	while(1){
 80003ae:	e7fe      	b.n	80003ae <main+0x66>
 80003b0:	40013000 	.word	0x40013000
 80003b4:	08002298 	.word	0x08002298
 80003b8:	080022a4 	.word	0x080022a4
 80003bc:	080022b0 	.word	0x080022b0
 80003c0:	080022b8 	.word	0x080022b8

080003c4 <EXTI9_5_IRQHandler>:
//
//	}
}

void EXTI9_5_IRQHandler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_5);// clear the pending event
 80003c8:	2005      	movs	r0, #5
 80003ca:	f000 fe9f 	bl	800110c <GPIO_IRQHandling>

	printf("VRMS : %x \n", ADE_ReadData(SPI2, VRMS, 3));
 80003ce:	2203      	movs	r2, #3
 80003d0:	2117      	movs	r1, #23
 80003d2:	480a      	ldr	r0, [pc, #40]	; (80003fc <EXTI9_5_IRQHandler+0x38>)
 80003d4:	f000 f905 	bl	80005e2 <ADE_ReadData>
 80003d8:	4603      	mov	r3, r0
 80003da:	4619      	mov	r1, r3
 80003dc:	4808      	ldr	r0, [pc, #32]	; (8000400 <EXTI9_5_IRQHandler+0x3c>)
 80003de:	f000 fffd 	bl	80013dc <iprintf>
	printf("VRMS : %x \n", ADE_ReadData(SPI2, MODE, 2));
 80003e2:	2202      	movs	r2, #2
 80003e4:	2109      	movs	r1, #9
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <EXTI9_5_IRQHandler+0x38>)
 80003e8:	f000 f8fb 	bl	80005e2 <ADE_ReadData>
 80003ec:	4603      	mov	r3, r0
 80003ee:	4619      	mov	r1, r3
 80003f0:	4803      	ldr	r0, [pc, #12]	; (8000400 <EXTI9_5_IRQHandler+0x3c>)
 80003f2:	f000 fff3 	bl	80013dc <iprintf>

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40003800 	.word	0x40003800
 8000400:	080022c4 	.word	0x080022c4

08000404 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <ITM_SendChar+0x44>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <ITM_SendChar+0x44>)
 8000414:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000418:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <ITM_SendChar+0x48>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a0b      	ldr	r2, [pc, #44]	; (800044c <ITM_SendChar+0x48>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000426:	bf00      	nop
 8000428:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f8      	beq.n	8000428 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000436:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	6013      	str	r3, [r2, #0]
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	e000edfc 	.word	0xe000edfc
 800044c:	e0000e00 	.word	0xe0000e00

08000450 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045c:	2300      	movs	r3, #0
 800045e:	617b      	str	r3, [r7, #20]
 8000460:	e00a      	b.n	8000478 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000462:	f3af 8000 	nop.w
 8000466:	4601      	mov	r1, r0
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	1c5a      	adds	r2, r3, #1
 800046c:	60ba      	str	r2, [r7, #8]
 800046e:	b2ca      	uxtb	r2, r1
 8000470:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	3301      	adds	r3, #1
 8000476:	617b      	str	r3, [r7, #20]
 8000478:	697a      	ldr	r2, [r7, #20]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	429a      	cmp	r2, r3
 800047e:	dbf0      	blt.n	8000462 <_read+0x12>
	}

return len;
 8000480:	687b      	ldr	r3, [r7, #4]
}
 8000482:	4618      	mov	r0, r3
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b086      	sub	sp, #24
 800048e:	af00      	add	r7, sp, #0
 8000490:	60f8      	str	r0, [r7, #12]
 8000492:	60b9      	str	r1, [r7, #8]
 8000494:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
 800049a:	e009      	b.n	80004b0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	60ba      	str	r2, [r7, #8]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ffad 	bl	8000404 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	3301      	adds	r3, #1
 80004ae:	617b      	str	r3, [r7, #20]
 80004b0:	697a      	ldr	r2, [r7, #20]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	dbf1      	blt.n	800049c <_write+0x12>
	}
	return len;
 80004b8:	687b      	ldr	r3, [r7, #4]
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3718      	adds	r7, #24
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <_close>:

int _close(int file)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
	return -1;
 80004ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004e8:	605a      	str	r2, [r3, #4]
	return 0;
 80004ea:	2300      	movs	r3, #0
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr

080004f6 <_isatty>:

int _isatty(int file)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
	return 1;
 80004fe:	2301      	movs	r3, #1
}
 8000500:	4618      	mov	r0, r3
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr

0800050a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800050a:	b480      	push	{r7}
 800050c:	b085      	sub	sp, #20
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
	return 0;
 8000516:	2300      	movs	r3, #0
}
 8000518:	4618      	mov	r0, r3
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
	...

08000524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800052c:	4a14      	ldr	r2, [pc, #80]	; (8000580 <_sbrk+0x5c>)
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <_sbrk+0x60>)
 8000530:	1ad3      	subs	r3, r2, r3
 8000532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <_sbrk+0x64>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d102      	bne.n	8000546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <_sbrk+0x64>)
 8000542:	4a12      	ldr	r2, [pc, #72]	; (800058c <_sbrk+0x68>)
 8000544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <_sbrk+0x64>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	429a      	cmp	r2, r3
 8000552:	d207      	bcs.n	8000564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000554:	f000 ff10 	bl	8001378 <__errno>
 8000558:	4603      	mov	r3, r0
 800055a:	220c      	movs	r2, #12
 800055c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800055e:	f04f 33ff 	mov.w	r3, #4294967295
 8000562:	e009      	b.n	8000578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <_sbrk+0x64>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <_sbrk+0x64>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	4a05      	ldr	r2, [pc, #20]	; (8000588 <_sbrk+0x64>)
 8000574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000576:	68fb      	ldr	r3, [r7, #12]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20020000 	.word	0x20020000
 8000584:	00000400 	.word	0x00000400
 8000588:	20000080 	.word	0x20000080
 800058c:	200004d8 	.word	0x200004d8

08000590 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
    ldr   r0, =_estack
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000592:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000594:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <LoopForever+0x6>)
  ldr r1, =_edata
 800059a:	490d      	ldr	r1, [pc, #52]	; (80005d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <LoopForever+0xe>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b0:	4c0a      	ldr	r4, [pc, #40]	; (80005dc <LoopForever+0x16>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005be:	f000 fee1 	bl	8001384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c2:	f7ff fec1 	bl	8000348 <main>

080005c6 <LoopForever>:

LoopForever:
    b LoopForever
 80005c6:	e7fe      	b.n	80005c6 <LoopForever>
    ldr   r0, =_estack
 80005c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80005d4:	080026f8 	.word	0x080026f8
  ldr r2, =_sbss
 80005d8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80005dc:	200004d4 	.word	0x200004d4

080005e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC_IRQHandler>

080005e2 <ADE_ReadData>:




uint32_t ADE_ReadData( SPI_RegDef_t *pSPIx, uint8_t addr, uint32_t bytes_to_read)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b088      	sub	sp, #32
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	460b      	mov	r3, r1
 80005ec:	607a      	str	r2, [r7, #4]
 80005ee:	72fb      	strb	r3, [r7, #11]
	uint32_t data = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
	uint8_t dummy_write = 0xff;
 80005f4:	23ff      	movs	r3, #255	; 0xff
 80005f6:	75fb      	strb	r3, [r7, #23]
	uint8_t dummy_write2 = 0x00;
 80005f8:	2300      	movs	r3, #0
 80005fa:	75bb      	strb	r3, [r7, #22]
	SPI_PeripheralControl(pSPIx, ENABLE); //SS pin pull to low
 80005fc:	2101      	movs	r1, #1
 80005fe:	68f8      	ldr	r0, [r7, #12]
 8000600:	f000 fe9e 	bl	8001340 <SPI_PeripheralControl>
//	while( ( (pSPIx->SR & 0x0003) == 0) || (pSPIx->SR & 0x0080) );

	SPI_Transfer(pSPIx, &addr);
 8000604:	f107 030b 	add.w	r3, r7, #11
 8000608:	4619      	mov	r1, r3
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	f000 fe7f 	bl	800130e <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_read; i++)
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
 8000614:	e010      	b.n	8000638 <ADE_ReadData+0x56>
	{
		data <<= 8;
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	021b      	lsls	r3, r3, #8
 800061a:	61fb      	str	r3, [r7, #28]
		data |= SPI_Transfer(pSPIx, &dummy_write);
 800061c:	f107 0317 	add.w	r3, r7, #23
 8000620:	4619      	mov	r1, r3
 8000622:	68f8      	ldr	r0, [r7, #12]
 8000624:	f000 fe73 	bl	800130e <SPI_Transfer>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	4313      	orrs	r3, r2
 8000630:	61fb      	str	r3, [r7, #28]
	for(uint32_t i = 0; i < bytes_to_read; i++)
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	3301      	adds	r3, #1
 8000636:	61bb      	str	r3, [r7, #24]
 8000638:	69ba      	ldr	r2, [r7, #24]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	429a      	cmp	r2, r3
 800063e:	d3ea      	bcc.n	8000616 <ADE_ReadData+0x34>
		//printf("%x\n", data);
	}

	SPI_Transfer(pSPIx, &dummy_write2);
 8000640:	f107 0316 	add.w	r3, r7, #22
 8000644:	4619      	mov	r1, r3
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f000 fe61 	bl	800130e <SPI_Transfer>

	SPI_PeripheralControl(pSPIx, DISABLE); //SS pin pull to high
 800064c:	2100      	movs	r1, #0
 800064e:	68f8      	ldr	r0, [r7, #12]
 8000650:	f000 fe76 	bl	8001340 <SPI_PeripheralControl>
	return data;
 8000654:	69fb      	ldr	r3, [r7, #28]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3720      	adds	r7, #32
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	SPI_PeripheralControl(SPI1, ENABLE); //SS pin pull to low
 800066a:	2101      	movs	r1, #1
 800066c:	4807      	ldr	r0, [pc, #28]	; (800068c <LCD5110_send+0x2c>)
 800066e:	f000 fe67 	bl	8001340 <SPI_PeripheralControl>
	SPI_Transfer(SPI1, &data);
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	4619      	mov	r1, r3
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <LCD5110_send+0x2c>)
 8000678:	f000 fe49 	bl	800130e <SPI_Transfer>
	SPI_PeripheralControl(SPI1, DISABLE); //SS pin pull to low
 800067c:	2100      	movs	r1, #0
 800067e:	4803      	ldr	r0, [pc, #12]	; (800068c <LCD5110_send+0x2c>)
 8000680:	f000 fe5e 	bl	8001340 <SPI_PeripheralControl>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40013000 	.word	0x40013000

08000690 <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d002      	beq.n	80006ac <LCD5110_Pin+0x1c>
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	d00f      	beq.n	80006ca <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 80006aa:	e01d      	b.n	80006e8 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d005      	beq.n	80006be <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2106      	movs	r1, #6
 80006b6:	480e      	ldr	r0, [pc, #56]	; (80006f0 <LCD5110_Pin+0x60>)
 80006b8:	f000 fd04 	bl	80010c4 <GPIO_WriteToOutputPin>
			break;
 80006bc:	e014      	b.n	80006e8 <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2106      	movs	r1, #6
 80006c2:	480b      	ldr	r0, [pc, #44]	; (80006f0 <LCD5110_Pin+0x60>)
 80006c4:	f000 fcfe 	bl	80010c4 <GPIO_WriteToOutputPin>
			break;
 80006c8:	e00e      	b.n	80006e8 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d005      	beq.n	80006dc <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2103      	movs	r1, #3
 80006d4:	4806      	ldr	r0, [pc, #24]	; (80006f0 <LCD5110_Pin+0x60>)
 80006d6:	f000 fcf5 	bl	80010c4 <GPIO_WriteToOutputPin>
			break;
 80006da:	e004      	b.n	80006e6 <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2103      	movs	r1, #3
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <LCD5110_Pin+0x60>)
 80006e2:	f000 fcef 	bl	80010c4 <GPIO_WriteToOutputPin>
			break;
 80006e6:	bf00      	nop
	}
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40020000 	.word	0x40020000

080006f4 <LCD5110_Delay>:


void LCD5110_Delay(unsigned long micros) {
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	e002      	b.n	8000708 <LCD5110_Delay+0x14>
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3301      	adds	r3, #1
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	429a      	cmp	r2, r3
 800070e:	d8f8      	bhi.n	8000702 <LCD5110_Delay+0xe>

	}
}
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 8000726:	2100      	movs	r1, #0
 8000728:	2002      	movs	r0, #2
 800072a:	f7ff ffb1 	bl	8000690 <LCD5110_Pin>
	LCD5110_Delay(10000);
 800072e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000732:	f7ff ffdf 	bl	80006f4 <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 8000736:	2101      	movs	r1, #1
 8000738:	2002      	movs	r0, #2
 800073a:	f7ff ffa9 	bl	8000690 <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 800073e:	2121      	movs	r1, #33	; 0x21
 8000740:	2000      	movs	r0, #0
 8000742:	f000 f826 	bl	8000792 <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 8000746:	2114      	movs	r1, #20
 8000748:	2000      	movs	r0, #0
 800074a:	f000 f822 	bl	8000792 <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	2b00      	cmp	r3, #0
 8000754:	da01      	bge.n	800075a <LCD5110_Init+0x3e>
		contrast = 0x7F;
 8000756:	237f      	movs	r3, #127	; 0x7f
 8000758:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4619      	mov	r1, r3
 8000764:	2000      	movs	r0, #0
 8000766:	f000 f814 	bl	8000792 <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 800076a:	2120      	movs	r1, #32
 800076c:	2000      	movs	r0, #0
 800076e:	f000 f810 	bl	8000792 <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8000772:	210c      	movs	r1, #12
 8000774:	2000      	movs	r0, #0
 8000776:	f000 f80c 	bl	8000792 <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 800077a:	f000 f8af 	bl	80008dc <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 800077e:	210c      	movs	r1, #12
 8000780:	2000      	movs	r0, #0
 8000782:	f000 f806 	bl	8000792 <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 8000786:	f000 f883 	bl	8000890 <LCD5110_Clear>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	460a      	mov	r2, r1
 800079c:	71fb      	strb	r3, [r7, #7]
 800079e:	4613      	mov	r3, r2
 80007a0:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d006      	beq.n	80007b6 <LCD5110_Write+0x24>
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d109      	bne.n	80007c0 <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 80007ac:	2101      	movs	r1, #1
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff ff6e 	bl	8000690 <LCD5110_Pin>
			break;
 80007b4:	e005      	b.n	80007c2 <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 80007b6:	2100      	movs	r1, #0
 80007b8:	2001      	movs	r0, #1
 80007ba:	f7ff ff69 	bl	8000690 <LCD5110_Pin>
			break;
 80007be:	e000      	b.n	80007c2 <LCD5110_Write+0x30>
		default: break;
 80007c0:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff4b 	bl	8000660 <LCD5110_send>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <LCD5110_DrawPixel>:

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
}

void LCD5110_DrawPixel(unsigned char x, unsigned char y, LCD5110_Pixel_t pixel) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
 80007de:	460b      	mov	r3, r1
 80007e0:	71bb      	strb	r3, [r7, #6]
 80007e2:	4613      	mov	r3, r2
 80007e4:	717b      	strb	r3, [r7, #5]
	if (x >= LCD5110_WIDTH) {
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b53      	cmp	r3, #83	; 0x53
 80007ea:	d849      	bhi.n	8000880 <LCD5110_DrawPixel+0xac>
		return;
	}
	if (y >= LCD5110_HEIGHT) {
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	2b2f      	cmp	r3, #47	; 0x2f
 80007f0:	d848      	bhi.n	8000884 <LCD5110_DrawPixel+0xb0>
		return;
	}

	if (pixel != LCD5110_Pixel_Clear) {
 80007f2:	797b      	ldrb	r3, [r7, #5]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d01d      	beq.n	8000834 <LCD5110_DrawPixel+0x60>
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] |= 1 << (y % 8);
 80007f8:	79fa      	ldrb	r2, [r7, #7]
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	08db      	lsrs	r3, r3, #3
 80007fe:	b2d8      	uxtb	r0, r3
 8000800:	4601      	mov	r1, r0
 8000802:	2354      	movs	r3, #84	; 0x54
 8000804:	fb03 f301 	mul.w	r3, r3, r1
 8000808:	4413      	add	r3, r2
 800080a:	4a20      	ldr	r2, [pc, #128]	; (800088c <LCD5110_DrawPixel+0xb8>)
 800080c:	5cd3      	ldrb	r3, [r2, r3]
 800080e:	b25a      	sxtb	r2, r3
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	2101      	movs	r1, #1
 8000818:	fa01 f303 	lsl.w	r3, r1, r3
 800081c:	b25b      	sxtb	r3, r3
 800081e:	4313      	orrs	r3, r2
 8000820:	b259      	sxtb	r1, r3
 8000822:	79fa      	ldrb	r2, [r7, #7]
 8000824:	2354      	movs	r3, #84	; 0x54
 8000826:	fb03 f300 	mul.w	r3, r3, r0
 800082a:	4413      	add	r3, r2
 800082c:	b2c9      	uxtb	r1, r1
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <LCD5110_DrawPixel+0xb8>)
 8000830:	54d1      	strb	r1, [r2, r3]
 8000832:	e01e      	b.n	8000872 <LCD5110_DrawPixel+0x9e>
	} else {
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] &= ~(1 << (y % 8));
 8000834:	79fa      	ldrb	r2, [r7, #7]
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	08db      	lsrs	r3, r3, #3
 800083a:	b2d8      	uxtb	r0, r3
 800083c:	4601      	mov	r1, r0
 800083e:	2354      	movs	r3, #84	; 0x54
 8000840:	fb03 f301 	mul.w	r3, r3, r1
 8000844:	4413      	add	r3, r2
 8000846:	4a11      	ldr	r2, [pc, #68]	; (800088c <LCD5110_DrawPixel+0xb8>)
 8000848:	5cd3      	ldrb	r3, [r2, r3]
 800084a:	b25a      	sxtb	r2, r3
 800084c:	79bb      	ldrb	r3, [r7, #6]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	2101      	movs	r1, #1
 8000854:	fa01 f303 	lsl.w	r3, r1, r3
 8000858:	b25b      	sxtb	r3, r3
 800085a:	43db      	mvns	r3, r3
 800085c:	b25b      	sxtb	r3, r3
 800085e:	4013      	ands	r3, r2
 8000860:	b259      	sxtb	r1, r3
 8000862:	79fa      	ldrb	r2, [r7, #7]
 8000864:	2354      	movs	r3, #84	; 0x54
 8000866:	fb03 f300 	mul.w	r3, r3, r0
 800086a:	4413      	add	r3, r2
 800086c:	b2c9      	uxtb	r1, r1
 800086e:	4a07      	ldr	r2, [pc, #28]	; (800088c <LCD5110_DrawPixel+0xb8>)
 8000870:	54d1      	strb	r1, [r2, r3]
	}
	LCD5110_UpdateArea(x, y, x, y);
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	79b9      	ldrb	r1, [r7, #6]
 8000878:	79f8      	ldrb	r0, [r7, #7]
 800087a:	f000 f89d 	bl	80009b8 <LCD5110_UpdateArea>
 800087e:	e002      	b.n	8000886 <LCD5110_DrawPixel+0xb2>
		return;
 8000880:	bf00      	nop
 8000882:	e000      	b.n	8000886 <LCD5110_DrawPixel+0xb2>
		return;
 8000884:	bf00      	nop
}
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200002cc 	.word	0x200002cc

08000890 <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 8000896:	f000 f821 	bl	80008dc <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	e007      	b.n	80008b0 <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 80008a0:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <LCD5110_Clear+0x48>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3301      	adds	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80008b6:	d3f3      	bcc.n	80008a0 <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 80008b8:	2100      	movs	r1, #0
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 f8b8 	bl	8000a30 <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 80008c0:	232f      	movs	r3, #47	; 0x2f
 80008c2:	2253      	movs	r2, #83	; 0x53
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 f876 	bl	80009b8 <LCD5110_UpdateArea>
	LCD5110_Refresh();
 80008cc:	f000 f812 	bl	80008f4 <LCD5110_Refresh>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200002cc 	.word	0x200002cc

080008dc <LCD5110_Home>:

void LCD5110_Home(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	2000      	movs	r0, #0
 80008e4:	f7ff ff55 	bl	8000792 <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 80008e8:	2140      	movs	r1, #64	; 0x40
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff ff51 	bl	8000792 <LCD5110_Write>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 80008fa:	2300      	movs	r3, #0
 80008fc:	71fb      	strb	r3, [r7, #7]
 80008fe:	e03b      	b.n	8000978 <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 8000900:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <LCD5110_Refresh+0xb0>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	3301      	adds	r3, #1
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	429a      	cmp	r2, r3
 800090e:	dc2f      	bgt.n	8000970 <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	4a24      	ldr	r2, [pc, #144]	; (80009a8 <LCD5110_Refresh+0xb4>)
 8000916:	7812      	ldrb	r2, [r2, #0]
 8000918:	4293      	cmp	r3, r2
 800091a:	dc31      	bgt.n	8000980 <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4619      	mov	r1, r3
 8000926:	2000      	movs	r0, #0
 8000928:	f7ff ff33 	bl	8000792 <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <LCD5110_Refresh+0xb8>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000934:	b2db      	uxtb	r3, r3
 8000936:	4619      	mov	r1, r3
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff ff2a 	bl	8000792 <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <LCD5110_Refresh+0xb8>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	71bb      	strb	r3, [r7, #6]
 8000944:	e00e      	b.n	8000964 <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2254      	movs	r2, #84	; 0x54
 800094a:	fb02 f203 	mul.w	r2, r2, r3
 800094e:	79bb      	ldrb	r3, [r7, #6]
 8000950:	4413      	add	r3, r2
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <LCD5110_Refresh+0xbc>)
 8000954:	5cd3      	ldrb	r3, [r2, r3]
 8000956:	4619      	mov	r1, r3
 8000958:	2001      	movs	r0, #1
 800095a:	f7ff ff1a 	bl	8000792 <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 800095e:	79bb      	ldrb	r3, [r7, #6]
 8000960:	3301      	adds	r3, #1
 8000962:	71bb      	strb	r3, [r7, #6]
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <LCD5110_Refresh+0xc0>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	79ba      	ldrb	r2, [r7, #6]
 800096a:	429a      	cmp	r2, r3
 800096c:	d9eb      	bls.n	8000946 <LCD5110_Refresh+0x52>
 800096e:	e000      	b.n	8000972 <LCD5110_Refresh+0x7e>
			continue;
 8000970:	bf00      	nop
	for (i = 0; i < 6; i++) {
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	3301      	adds	r3, #1
 8000976:	71fb      	strb	r3, [r7, #7]
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	2b05      	cmp	r3, #5
 800097c:	d9c0      	bls.n	8000900 <LCD5110_Refresh+0xc>
 800097e:	e000      	b.n	8000982 <LCD5110_Refresh+0x8e>
			break;
 8000980:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <LCD5110_Refresh+0xb8>)
 8000984:	2253      	movs	r2, #83	; 0x53
 8000986:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <LCD5110_Refresh+0xc0>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <LCD5110_Refresh+0xb0>)
 8000990:	222f      	movs	r2, #47	; 0x2f
 8000992:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <LCD5110_Refresh+0xb4>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000086 	.word	0x20000086
 80009a8:	20000087 	.word	0x20000087
 80009ac:	20000084 	.word	0x20000084
 80009b0:	200002cc 	.word	0x200002cc
 80009b4:	20000085 	.word	0x20000085

080009b8 <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 80009b8:	b490      	push	{r4, r7}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4604      	mov	r4, r0
 80009c0:	4608      	mov	r0, r1
 80009c2:	4611      	mov	r1, r2
 80009c4:	461a      	mov	r2, r3
 80009c6:	4623      	mov	r3, r4
 80009c8:	71fb      	strb	r3, [r7, #7]
 80009ca:	4603      	mov	r3, r0
 80009cc:	71bb      	strb	r3, [r7, #6]
 80009ce:	460b      	mov	r3, r1
 80009d0:	717b      	strb	r3, [r7, #5]
 80009d2:	4613      	mov	r3, r2
 80009d4:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <LCD5110_UpdateArea+0x68>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d202      	bcs.n	80009e6 <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 80009e0:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <LCD5110_UpdateArea+0x68>)
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <LCD5110_UpdateArea+0x6c>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	797a      	ldrb	r2, [r7, #5]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d902      	bls.n	80009f6 <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 80009f0:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <LCD5110_UpdateArea+0x6c>)
 80009f2:	797b      	ldrb	r3, [r7, #5]
 80009f4:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <LCD5110_UpdateArea+0x70>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	79ba      	ldrb	r2, [r7, #6]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d202      	bcs.n	8000a06 <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 8000a00:	4a09      	ldr	r2, [pc, #36]	; (8000a28 <LCD5110_UpdateArea+0x70>)
 8000a02:	79bb      	ldrb	r3, [r7, #6]
 8000a04:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <LCD5110_UpdateArea+0x74>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	793a      	ldrb	r2, [r7, #4]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d902      	bls.n	8000a16 <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <LCD5110_UpdateArea+0x74>)
 8000a12:	793b      	ldrb	r3, [r7, #4]
 8000a14:	7013      	strb	r3, [r2, #0]
	}
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc90      	pop	{r4, r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000084 	.word	0x20000084
 8000a24:	20000085 	.word	0x20000085
 8000a28:	20000086 	.word	0x20000086
 8000a2c:	20000087 	.word	0x20000087

08000a30 <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	460a      	mov	r2, r1
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 8000a40:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <LCD5110_GotoXY+0x28>)
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <LCD5110_GotoXY+0x2c>)
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	7013      	strb	r3, [r2, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	200002c8 	.word	0x200002c8
 8000a5c:	200002c9 	.word	0x200002c9

08000a60 <LCD5110_Putc>:

void LCD5110_Putc(char c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	71bb      	strb	r3, [r7, #6]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == LCD5110_FontSize_3x5) {
 8000a72:	797b      	ldrb	r3, [r7, #5]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d104      	bne.n	8000a82 <LCD5110_Putc+0x22>
		c_width = LCD5110_CHAR3x5_WIDTH;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR3x5_HEIGHT;
 8000a7c:	2306      	movs	r3, #6
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	e003      	b.n	8000a8a <LCD5110_Putc+0x2a>
	} else {
		c_width = LCD5110_CHAR5x7_WIDTH;
 8000a82:	2306      	movs	r3, #6
 8000a84:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR5x7_HEIGHT;
 8000a86:	2308      	movs	r3, #8
 8000a88:	73fb      	strb	r3, [r7, #15]
	}
	if ((LCD5110_x + c_width) > LCD5110_WIDTH) {
 8000a8a:	4b3c      	ldr	r3, [pc, #240]	; (8000b7c <LCD5110_Putc+0x11c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	7bbb      	ldrb	r3, [r7, #14]
 8000a92:	4413      	add	r3, r2
 8000a94:	2b54      	cmp	r3, #84	; 0x54
 8000a96:	dd09      	ble.n	8000aac <LCD5110_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		LCD5110_y += c_height;
 8000a98:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <LCD5110_Putc+0x120>)
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b37      	ldr	r3, [pc, #220]	; (8000b80 <LCD5110_Putc+0x120>)
 8000aa4:	701a      	strb	r2, [r3, #0]
		LCD5110_x = 0;
 8000aa6:	4b35      	ldr	r3, [pc, #212]	; (8000b7c <LCD5110_Putc+0x11c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8000aac:	2300      	movs	r3, #0
 8000aae:	737b      	strb	r3, [r7, #13]
 8000ab0:	e055      	b.n	8000b5e <LCD5110_Putc+0xfe>
		if (c < 32) {
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b1f      	cmp	r3, #31
 8000ab6:	d91c      	bls.n	8000af2 <LCD5110_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == LCD5110_FontSize_3x5) {
 8000ab8:	797b      	ldrb	r3, [r7, #5]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d10c      	bne.n	8000ad8 <LCD5110_Putc+0x78>
			b = LCD5110_Font3x5[c - 32][i];
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f1a3 0220 	sub.w	r2, r3, #32
 8000ac4:	7b79      	ldrb	r1, [r7, #13]
 8000ac6:	482f      	ldr	r0, [pc, #188]	; (8000b84 <LCD5110_Putc+0x124>)
 8000ac8:	4613      	mov	r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	4403      	add	r3, r0
 8000ad0:	440b      	add	r3, r1
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	733b      	strb	r3, [r7, #12]
 8000ad6:	e00c      	b.n	8000af2 <LCD5110_Putc+0x92>
		} else {
			b = LCD5110_Font5x7[c - 32][i];
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f1a3 0220 	sub.w	r2, r3, #32
 8000ade:	7b79      	ldrb	r1, [r7, #13]
 8000ae0:	4829      	ldr	r0, [pc, #164]	; (8000b88 <LCD5110_Putc+0x128>)
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	4403      	add	r3, r0
 8000aec:	440b      	add	r3, r1
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8000af2:	7b3b      	ldrb	r3, [r7, #12]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d105      	bne.n	8000b04 <LCD5110_Putc+0xa4>
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d002      	beq.n	8000b04 <LCD5110_Putc+0xa4>
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b20      	cmp	r3, #32
 8000b02:	d128      	bne.n	8000b56 <LCD5110_Putc+0xf6>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	72fb      	strb	r3, [r7, #11]
 8000b08:	e01a      	b.n	8000b40 <LCD5110_Putc+0xe0>
			if (color == LCD5110_Pixel_Set) {
 8000b0a:	79bb      	ldrb	r3, [r7, #6]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d014      	beq.n	8000b3a <LCD5110_Putc+0xda>
				 (LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Set : LCD5110_Pixel_Clear);
			} else {
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Clear : LCD5110_Pixel_Set);
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <LCD5110_Putc+0x11c>)
 8000b12:	7818      	ldrb	r0, [r3, #0]
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <LCD5110_Putc+0x120>)
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	7afb      	ldrb	r3, [r7, #11]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b2d9      	uxtb	r1, r3
 8000b1e:	7b3a      	ldrb	r2, [r7, #12]
 8000b20:	7afb      	ldrb	r3, [r7, #11]
 8000b22:	fa42 f303 	asr.w	r3, r2, r3
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2301      	moveq	r3, #1
 8000b30:	2300      	movne	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	461a      	mov	r2, r3
 8000b36:	f7ff fe4d 	bl	80007d4 <LCD5110_DrawPixel>
		for (j = 0; j < c_height; j++) {
 8000b3a:	7afb      	ldrb	r3, [r7, #11]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	72fb      	strb	r3, [r7, #11]
 8000b40:	7afa      	ldrb	r2, [r7, #11]
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3e0      	bcc.n	8000b0a <LCD5110_Putc+0xaa>
			}
		}
		LCD5110_x++;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <LCD5110_Putc+0x11c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <LCD5110_Putc+0x11c>)
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e000      	b.n	8000b58 <LCD5110_Putc+0xf8>
			continue;
 8000b56:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 8000b58:	7b7b      	ldrb	r3, [r7, #13]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	737b      	strb	r3, [r7, #13]
 8000b5e:	7b7a      	ldrb	r2, [r7, #13]
 8000b60:	7bbb      	ldrb	r3, [r7, #14]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dba4      	blt.n	8000ab2 <LCD5110_Putc+0x52>
	}
	LCD5110_x++;
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <LCD5110_Putc+0x11c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b02      	ldr	r3, [pc, #8]	; (8000b7c <LCD5110_Putc+0x11c>)
 8000b72:	701a      	strb	r2, [r3, #0]
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200002c8 	.word	0x200002c8
 8000b80:	200002c9 	.word	0x200002c9
 8000b84:	08002518 	.word	0x08002518
 8000b88:	080022d0 	.word	0x080022d0

08000b8c <LCD5110_Puts>:

void LCD5110_Puts(char *c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	70fb      	strb	r3, [r7, #3]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 8000b9c:	e008      	b.n	8000bb0 <LCD5110_Puts+0x24>
		LCD5110_Putc(*c++, color, size);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	1c5a      	adds	r2, r3, #1
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	78ba      	ldrb	r2, [r7, #2]
 8000ba8:	78f9      	ldrb	r1, [r7, #3]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff58 	bl	8000a60 <LCD5110_Putc>
	while (*c) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1f2      	bne.n	8000b9e <LCD5110_Puts+0x12>
	}
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t*pGPIOx, uint8_t EnorDi)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d162      	bne.n	8000c9c <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a64      	ldr	r2, [pc, #400]	; (8000d6c <GPIO_PeriClockControl+0x1a8>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d106      	bne.n	8000bec <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000bde:	4b64      	ldr	r3, [pc, #400]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a63      	ldr	r2, [pc, #396]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000bea:	e0b9      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a61      	ldr	r2, [pc, #388]	; (8000d74 <GPIO_PeriClockControl+0x1b0>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d106      	bne.n	8000c02 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000bf4:	4b5e      	ldr	r3, [pc, #376]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	4a5d      	ldr	r2, [pc, #372]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c00:	e0ae      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a5c      	ldr	r2, [pc, #368]	; (8000d78 <GPIO_PeriClockControl+0x1b4>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d106      	bne.n	8000c18 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000c0a:	4b59      	ldr	r3, [pc, #356]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a58      	ldr	r2, [pc, #352]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c16:	e0a3      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a58      	ldr	r2, [pc, #352]	; (8000d7c <GPIO_PeriClockControl+0x1b8>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d106      	bne.n	8000c2e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000c20:	4b53      	ldr	r3, [pc, #332]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	4a52      	ldr	r2, [pc, #328]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c2c:	e098      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a53      	ldr	r2, [pc, #332]	; (8000d80 <GPIO_PeriClockControl+0x1bc>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d106      	bne.n	8000c44 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000c36:	4b4e      	ldr	r3, [pc, #312]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a4d      	ldr	r2, [pc, #308]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000c3c:	f043 0310 	orr.w	r3, r3, #16
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c42:	e08d      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a4f      	ldr	r2, [pc, #316]	; (8000d84 <GPIO_PeriClockControl+0x1c0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d106      	bne.n	8000c5a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000c4c:	4b48      	ldr	r3, [pc, #288]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4a47      	ldr	r2, [pc, #284]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000c52:	f043 0320 	orr.w	r3, r3, #32
 8000c56:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c58:	e082      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a4a      	ldr	r2, [pc, #296]	; (8000d88 <GPIO_PeriClockControl+0x1c4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d106      	bne.n	8000c70 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000c62:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a42      	ldr	r2, [pc, #264]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c6e:	e077      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a46      	ldr	r2, [pc, #280]	; (8000d8c <GPIO_PeriClockControl+0x1c8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d106      	bne.n	8000c86 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000c78:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	4a3c      	ldr	r2, [pc, #240]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c82:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c84:	e06c      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a41      	ldr	r2, [pc, #260]	; (8000d90 <GPIO_PeriClockControl+0x1cc>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d168      	bne.n	8000d60 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000c8e:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a37      	ldr	r2, [pc, #220]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c9a:	e061      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a33      	ldr	r2, [pc, #204]	; (8000d6c <GPIO_PeriClockControl+0x1a8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d106      	bne.n	8000cb2 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000ca4:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a31      	ldr	r2, [pc, #196]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000caa:	f023 0301 	bic.w	r3, r3, #1
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cb0:	e056      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a2f      	ldr	r2, [pc, #188]	; (8000d74 <GPIO_PeriClockControl+0x1b0>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d106      	bne.n	8000cc8 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000cba:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a2c      	ldr	r2, [pc, #176]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000cc0:	f023 0302 	bic.w	r3, r3, #2
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cc6:	e04b      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a2b      	ldr	r2, [pc, #172]	; (8000d78 <GPIO_PeriClockControl+0x1b4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d106      	bne.n	8000cde <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000cd6:	f023 0304 	bic.w	r3, r3, #4
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cdc:	e040      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a26      	ldr	r2, [pc, #152]	; (8000d7c <GPIO_PeriClockControl+0x1b8>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d106      	bne.n	8000cf4 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000ce6:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000cec:	f023 0308 	bic.w	r3, r3, #8
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cf2:	e035      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a22      	ldr	r2, [pc, #136]	; (8000d80 <GPIO_PeriClockControl+0x1bc>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d106      	bne.n	8000d0a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a1b      	ldr	r2, [pc, #108]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000d02:	f023 0310 	bic.w	r3, r3, #16
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d08:	e02a      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a1d      	ldr	r2, [pc, #116]	; (8000d84 <GPIO_PeriClockControl+0x1c0>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d106      	bne.n	8000d20 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000d18:	f023 0320 	bic.w	r3, r3, #32
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d1e:	e01f      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <GPIO_PeriClockControl+0x1c4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d106      	bne.n	8000d36 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d32:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d34:	e014      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <GPIO_PeriClockControl+0x1c8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d106      	bne.n	8000d4c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d4a:	e009      	b.n	8000d60 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <GPIO_PeriClockControl+0x1cc>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d105      	bne.n	8000d60 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <GPIO_PeriClockControl+0x1ac>)
 8000d5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d5e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020400 	.word	0x40020400
 8000d78:	40020800 	.word	0x40020800
 8000d7c:	40020c00 	.word	0x40020c00
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40021400 	.word	0x40021400
 8000d88:	40021800 	.word	0x40021800
 8000d8c:	40021c00 	.word	0x40021c00
 8000d90:	40022000 	.word	0x40022000

08000d94 <GPIO_Init>:

/*
 * Init & De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2101      	movs	r1, #1
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ff0c 	bl	8000bc4 <GPIO_PeriClockControl>

	//1. configure the mode of gpio
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	795b      	ldrb	r3, [r3, #5]
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d81f      	bhi.n	8000df4 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	795b      	ldrb	r3, [r3, #5]
 8000db8:	461a      	mov	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	791b      	ldrb	r3, [r3, #4]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	617b      	str	r3, [r7, #20]

		pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	791b      	ldrb	r3, [r3, #4]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	4619      	mov	r1, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	400a      	ands	r2, r1
 8000de0:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx ->MODER |= temp; //setting
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6819      	ldr	r1, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e0c2      	b.n	8000f7a <GPIO_Init+0x1e6>


	}else
	{
		//code later
		if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	795b      	ldrb	r3, [r3, #5]
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	d817      	bhi.n	8000e2c <GPIO_Init+0x98>
		{
			//1. configure the FTSR
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000dfc:	4b47      	ldr	r3, [pc, #284]	; (8000f1c <GPIO_Init+0x188>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	7912      	ldrb	r2, [r2, #4]
 8000e04:	4611      	mov	r1, r2
 8000e06:	2201      	movs	r2, #1
 8000e08:	408a      	lsls	r2, r1
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4a43      	ldr	r2, [pc, #268]	; (8000f1c <GPIO_Init+0x188>)
 8000e0e:	430b      	orrs	r3, r1
 8000e10:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI ->RTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000e12:	4b42      	ldr	r3, [pc, #264]	; (8000f1c <GPIO_Init+0x188>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	7912      	ldrb	r2, [r2, #4]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	408a      	lsls	r2, r1
 8000e20:	43d2      	mvns	r2, r2
 8000e22:	4611      	mov	r1, r2
 8000e24:	4a3d      	ldr	r2, [pc, #244]	; (8000f1c <GPIO_Init+0x188>)
 8000e26:	400b      	ands	r3, r1
 8000e28:	6093      	str	r3, [r2, #8]
 8000e2a:	e035      	b.n	8000e98 <GPIO_Init+0x104>
		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	795b      	ldrb	r3, [r3, #5]
 8000e30:	2b05      	cmp	r3, #5
 8000e32:	d817      	bhi.n	8000e64 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000e34:	4b39      	ldr	r3, [pc, #228]	; (8000f1c <GPIO_Init+0x188>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	7912      	ldrb	r2, [r2, #4]
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	2201      	movs	r2, #1
 8000e40:	408a      	lsls	r2, r1
 8000e42:	4611      	mov	r1, r2
 8000e44:	4a35      	ldr	r2, [pc, #212]	; (8000f1c <GPIO_Init+0x188>)
 8000e46:	430b      	orrs	r3, r1
 8000e48:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000e4a:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <GPIO_Init+0x188>)
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	7912      	ldrb	r2, [r2, #4]
 8000e52:	4611      	mov	r1, r2
 8000e54:	2201      	movs	r2, #1
 8000e56:	408a      	lsls	r2, r1
 8000e58:	43d2      	mvns	r2, r2
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4a2f      	ldr	r2, [pc, #188]	; (8000f1c <GPIO_Init+0x188>)
 8000e5e:	400b      	ands	r3, r1
 8000e60:	60d3      	str	r3, [r2, #12]
 8000e62:	e019      	b.n	8000e98 <GPIO_Init+0x104>

		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	795b      	ldrb	r3, [r3, #5]
 8000e68:	2b06      	cmp	r3, #6
 8000e6a:	d815      	bhi.n	8000e98 <GPIO_Init+0x104>
		{
			//1. configure the both FTSR and RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <GPIO_Init+0x188>)
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	7912      	ldrb	r2, [r2, #4]
 8000e74:	4611      	mov	r1, r2
 8000e76:	2201      	movs	r2, #1
 8000e78:	408a      	lsls	r2, r1
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4a27      	ldr	r2, [pc, #156]	; (8000f1c <GPIO_Init+0x188>)
 8000e7e:	430b      	orrs	r3, r1
 8000e80:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <GPIO_Init+0x188>)
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	7912      	ldrb	r2, [r2, #4]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	408a      	lsls	r2, r1
 8000e90:	4611      	mov	r1, r2
 8000e92:	4a22      	ldr	r2, [pc, #136]	; (8000f1c <GPIO_Init+0x188>)
 8000e94:	430b      	orrs	r3, r1
 8000e96:	60d3      	str	r3, [r2, #12]

		}

		//2. configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	791b      	ldrb	r3, [r3, #4]
 8000e9c:	089b      	lsrs	r3, r3, #2
 8000e9e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	791b      	ldrb	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <GPIO_Init+0x18c>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d045      	beq.n	8000f40 <GPIO_Init+0x1ac>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a1a      	ldr	r2, [pc, #104]	; (8000f24 <GPIO_Init+0x190>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d02b      	beq.n	8000f16 <GPIO_Init+0x182>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <GPIO_Init+0x194>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d024      	beq.n	8000f12 <GPIO_Init+0x17e>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <GPIO_Init+0x198>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d01d      	beq.n	8000f0e <GPIO_Init+0x17a>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <GPIO_Init+0x19c>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d016      	beq.n	8000f0a <GPIO_Init+0x176>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <GPIO_Init+0x1a0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d00f      	beq.n	8000f06 <GPIO_Init+0x172>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <GPIO_Init+0x1a4>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d008      	beq.n	8000f02 <GPIO_Init+0x16e>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <GPIO_Init+0x1a8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <GPIO_Init+0x16a>
 8000efa:	2307      	movs	r3, #7
 8000efc:	e021      	b.n	8000f42 <GPIO_Init+0x1ae>
 8000efe:	2300      	movs	r3, #0
 8000f00:	e01f      	b.n	8000f42 <GPIO_Init+0x1ae>
 8000f02:	2306      	movs	r3, #6
 8000f04:	e01d      	b.n	8000f42 <GPIO_Init+0x1ae>
 8000f06:	2305      	movs	r3, #5
 8000f08:	e01b      	b.n	8000f42 <GPIO_Init+0x1ae>
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	e019      	b.n	8000f42 <GPIO_Init+0x1ae>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e017      	b.n	8000f42 <GPIO_Init+0x1ae>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e015      	b.n	8000f42 <GPIO_Init+0x1ae>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e013      	b.n	8000f42 <GPIO_Init+0x1ae>
 8000f1a:	bf00      	nop
 8000f1c:	40013c00 	.word	0x40013c00
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020c00 	.word	0x40020c00
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40021400 	.word	0x40021400
 8000f38:	40021800 	.word	0x40021800
 8000f3c:	40021c00 	.word	0x40021c00
 8000f40:	2300      	movs	r3, #0
 8000f42:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <GPIO_Init+0x324>)
 8000f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f48:	4a5b      	ldr	r2, [pc, #364]	; (80010b8 <GPIO_Init+0x324>)
 8000f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]= portcode << (temp2*4);
 8000f50:	7c7a      	ldrb	r2, [r7, #17]
 8000f52:	7cbb      	ldrb	r3, [r7, #18]
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	fa02 f103 	lsl.w	r1, r2, r3
 8000f5a:	4a58      	ldr	r2, [pc, #352]	; (80010bc <GPIO_Init+0x328>)
 8000f5c:	7cfb      	ldrb	r3, [r7, #19]
 8000f5e:	3302      	adds	r3, #2
 8000f60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI ->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000f64:	4b56      	ldr	r3, [pc, #344]	; (80010c0 <GPIO_Init+0x32c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	7912      	ldrb	r2, [r2, #4]
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	2201      	movs	r2, #1
 8000f70:	408a      	lsls	r2, r1
 8000f72:	4611      	mov	r1, r2
 8000f74:	4a52      	ldr	r2, [pc, #328]	; (80010c0 <GPIO_Init+0x32c>)
 8000f76:	430b      	orrs	r3, r1
 8000f78:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
	//2. configure the speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	799b      	ldrb	r3, [r3, #6]
 8000f82:	461a      	mov	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	791b      	ldrb	r3, [r3, #4]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	791b      	ldrb	r3, [r3, #4]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	408b      	lsls	r3, r1
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	400a      	ands	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OSPEEDR |= temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6899      	ldr	r1, [r3, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	609a      	str	r2, [r3, #8]

	temp =0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
	//3. configure the pu pd settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	79db      	ldrb	r3, [r3, #7]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	791b      	ldrb	r3, [r3, #4]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	791b      	ldrb	r3, [r3, #4]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	2303      	movs	r3, #3
 8000fe0:	408b      	lsls	r3, r1
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	400a      	ands	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->PUPDR |= temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68d9      	ldr	r1, [r3, #12]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	60da      	str	r2, [r3, #12]

	temp =0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]

	//4. configure
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinoType << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7a1b      	ldrb	r3, [r3, #8]
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	791b      	ldrb	r3, [r3, #4]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x01 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	791b      	ldrb	r3, [r3, #4]
 800101c:	4619      	mov	r1, r3
 800101e:	2301      	movs	r3, #1
 8001020:	408b      	lsls	r3, r1
 8001022:	43db      	mvns	r3, r3
 8001024:	4619      	mov	r1, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	400a      	ands	r2, r1
 800102c:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OTYPER |= temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6859      	ldr	r1, [r3, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	430a      	orrs	r2, r1
 800103c:	605a      	str	r2, [r3, #4]

	temp =0;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]

	//5. configure
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	795b      	ldrb	r3, [r3, #5]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d132      	bne.n	80010b0 <GPIO_Init+0x31c>
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	791b      	ldrb	r3, [r3, #4]
 800104e:	08db      	lsrs	r3, r3, #3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	791b      	ldrb	r3, [r3, #4]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	3208      	adds	r2, #8
 8001066:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	210f      	movs	r1, #15
 8001070:	fa01 f303 	lsl.w	r3, r1, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	4619      	mov	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4011      	ands	r1, r2
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	3208      	adds	r2, #8
 8001082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	3208      	adds	r2, #8
 800108e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7a5b      	ldrb	r3, [r3, #9]
 8001096:	4619      	mov	r1, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	4619      	mov	r1, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4311      	orrs	r1, r2
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	3208      	adds	r2, #8
 80010ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80010b0:	bf00      	nop
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40013800 	.word	0x40013800
 80010c0:	40013c00 	.word	0x40013c00

080010c4 <GPIO_WriteToOutputPin>:
	uint16_t value;
	value = (uint8_t)pGPIOx->IDR;
	return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
 80010d0:	4613      	mov	r3, r2
 80010d2:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 80010d4:	78bb      	ldrb	r3, [r7, #2]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d109      	bne.n	80010ee <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx -> ODR |= (1<< PinNumber);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	78fa      	ldrb	r2, [r7, #3]
 80010e0:	2101      	movs	r1, #1
 80010e2:	fa01 f202 	lsl.w	r2, r1, r2
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx -> ODR &= ~(1 << PinNumber);
	}
}
 80010ec:	e009      	b.n	8001102 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx -> ODR &= ~(1 << PinNumber);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	78fa      	ldrb	r2, [r7, #3]
 80010f4:	2101      	movs	r1, #1
 80010f6:	fa01 f202 	lsl.w	r2, r1, r2
 80010fa:	43d2      	mvns	r2, r2
 80010fc:	401a      	ands	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	615a      	str	r2, [r3, #20]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <GPIO_IRQHandling>:

}


void GPIO_IRQHandling(uint8_t PinNumber) //interrupt happen, do the action in here
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if(EXTI ->PR & (1<< PinNumber))
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <GPIO_IRQHandling+0x3c>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	79fa      	ldrb	r2, [r7, #7]
 800111c:	2101      	movs	r1, #1
 800111e:	fa01 f202 	lsl.w	r2, r1, r2
 8001122:	4013      	ands	r3, r2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d009      	beq.n	800113c <GPIO_IRQHandling+0x30>
	{
	//clear
		EXTI -> PR |= (1<< PinNumber);
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <GPIO_IRQHandling+0x3c>)
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	79fa      	ldrb	r2, [r7, #7]
 800112e:	2101      	movs	r1, #1
 8001130:	fa01 f202 	lsl.w	r2, r1, r2
 8001134:	4611      	mov	r1, r2
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <GPIO_IRQHandling+0x3c>)
 8001138:	430b      	orrs	r3, r1
 800113a:	6153      	str	r3, [r2, #20]
	}

}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40013c00 	.word	0x40013c00

0800114c <SPI_PeriClockControl>:
static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_RegDef_t*pSPIx, uint8_t EnorDi)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d120      	bne.n	80011a0 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a22      	ldr	r2, [pc, #136]	; (80011ec <SPI_PeriClockControl+0xa0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d106      	bne.n	8001174 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8001166:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <SPI_PeriClockControl+0xa4>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a21      	ldr	r2, [pc, #132]	; (80011f0 <SPI_PeriClockControl+0xa4>)
 800116c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI3_PCLK_DI();
		}
	}

}
 8001172:	e035      	b.n	80011e0 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <SPI_PeriClockControl+0xa8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d106      	bne.n	800118a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <SPI_PeriClockControl+0xa4>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <SPI_PeriClockControl+0xa4>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001188:	e02a      	b.n	80011e0 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a1a      	ldr	r2, [pc, #104]	; (80011f8 <SPI_PeriClockControl+0xac>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d126      	bne.n	80011e0 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <SPI_PeriClockControl+0xa4>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a16      	ldr	r2, [pc, #88]	; (80011f0 <SPI_PeriClockControl+0xa4>)
 8001198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800119e:	e01f      	b.n	80011e0 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <SPI_PeriClockControl+0xa0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d106      	bne.n	80011b6 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <SPI_PeriClockControl+0xa4>)
 80011aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ac:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <SPI_PeriClockControl+0xa4>)
 80011ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011b2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80011b4:	e014      	b.n	80011e0 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <SPI_PeriClockControl+0xa8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d106      	bne.n	80011cc <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <SPI_PeriClockControl+0xa4>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <SPI_PeriClockControl+0xa4>)
 80011c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
}
 80011ca:	e009      	b.n	80011e0 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <SPI_PeriClockControl+0xac>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d105      	bne.n	80011e0 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <SPI_PeriClockControl+0xa4>)
 80011d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d8:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <SPI_PeriClockControl+0xa4>)
 80011da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80011de:	6453      	str	r3, [r2, #68]	; 0x44
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40013000 	.word	0x40013000
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40003800 	.word	0x40003800
 80011f8:	40003c00 	.word	0x40003c00

080011fc <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d106      	bne.n	800121c <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f043 0204 	orr.w	r2, r3, #4
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 800121a:	e005      	b.n	8001228 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f023 0204 	bic.w	r2, r3, #4
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	605a      	str	r2, [r3, #4]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <SPI_Init>:
/************************
 *
 */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2101      	movs	r1, #1
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff83 	bl	800114c <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	791b      	ldrb	r3, [r3, #4]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	461a      	mov	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	795b      	ldrb	r3, [r3, #5]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d104      	bne.n	800126a <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	e014      	b.n	8001294 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	795b      	ldrb	r3, [r3, #5]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d104      	bne.n	800127c <SPI_Init+0x4a>
	{
		//BIDI mode should be set
		tempreg |= ~(1<<SPI_CR1_BIDIMODE);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e00b      	b.n	8001294 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	795b      	ldrb	r3, [r3, #5]
 8001280:	2b03      	cmp	r3, #3
 8001282:	d107      	bne.n	8001294 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800128a:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1<<SPI_CR1_RXONLY);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001292:	60fb      	str	r3, [r7, #12]
	}
	//3. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	799b      	ldrb	r3, [r3, #6]
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	79db      	ldrb	r3, [r3, #7]
 80012a6:	02db      	lsls	r3, r3, #11
 80012a8:	461a      	mov	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7a1b      	ldrb	r3, [r3, #8]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7a5b      	ldrb	r3, [r3, #9]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7a9b      	ldrb	r3, [r3, #10]
 80012ce:	025b      	lsls	r3, r3, #9
 80012d0:	461a      	mov	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	601a      	str	r2, [r3, #0]
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <SPI_GetFlagStatus>:
/*************************
 *
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
//	printf(" %x \n",pSPIx->SR & FlagName);
	if(pSPIx->SR & FlagName)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001302:	2300      	movs	r3, #0

}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <SPI_Transfer>:
		}

}

uint8_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
	pSPIx->DR = *pTxBuffer;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60da      	str	r2, [r3, #12]
	//while( ( (pSPIx->SR & 0x0003) == 0) || (pSPIx->SR & 0x0080) );
	while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );
 8001322:	bf00      	nop
 8001324:	2102      	movs	r1, #2
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffde 	bl	80012e8 <SPI_GetFlagStatus>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f8      	beq.n	8001324 <SPI_Transfer+0x16>

	//printf("%x \n", pSPIx->DR);
	return pSPIx->DR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	b2db      	uxtb	r3, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <SPI_PeripheralControl>:
/**************************
 *
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d106      	bne.n	8001360 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	601a      	str	r2, [r3, #0]
	} else
	{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 800135e:	e005      	b.n	800136c <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	601a      	str	r2, [r3, #0]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
	...

08001378 <__errno>:
 8001378:	4b01      	ldr	r3, [pc, #4]	; (8001380 <__errno+0x8>)
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000000 	.word	0x20000000

08001384 <__libc_init_array>:
 8001384:	b570      	push	{r4, r5, r6, lr}
 8001386:	4d0d      	ldr	r5, [pc, #52]	; (80013bc <__libc_init_array+0x38>)
 8001388:	4c0d      	ldr	r4, [pc, #52]	; (80013c0 <__libc_init_array+0x3c>)
 800138a:	1b64      	subs	r4, r4, r5
 800138c:	10a4      	asrs	r4, r4, #2
 800138e:	2600      	movs	r6, #0
 8001390:	42a6      	cmp	r6, r4
 8001392:	d109      	bne.n	80013a8 <__libc_init_array+0x24>
 8001394:	4d0b      	ldr	r5, [pc, #44]	; (80013c4 <__libc_init_array+0x40>)
 8001396:	4c0c      	ldr	r4, [pc, #48]	; (80013c8 <__libc_init_array+0x44>)
 8001398:	f000 ff72 	bl	8002280 <_init>
 800139c:	1b64      	subs	r4, r4, r5
 800139e:	10a4      	asrs	r4, r4, #2
 80013a0:	2600      	movs	r6, #0
 80013a2:	42a6      	cmp	r6, r4
 80013a4:	d105      	bne.n	80013b2 <__libc_init_array+0x2e>
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
 80013a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80013ac:	4798      	blx	r3
 80013ae:	3601      	adds	r6, #1
 80013b0:	e7ee      	b.n	8001390 <__libc_init_array+0xc>
 80013b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80013b6:	4798      	blx	r3
 80013b8:	3601      	adds	r6, #1
 80013ba:	e7f2      	b.n	80013a2 <__libc_init_array+0x1e>
 80013bc:	080026f0 	.word	0x080026f0
 80013c0:	080026f0 	.word	0x080026f0
 80013c4:	080026f0 	.word	0x080026f0
 80013c8:	080026f4 	.word	0x080026f4

080013cc <memset>:
 80013cc:	4402      	add	r2, r0
 80013ce:	4603      	mov	r3, r0
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d100      	bne.n	80013d6 <memset+0xa>
 80013d4:	4770      	bx	lr
 80013d6:	f803 1b01 	strb.w	r1, [r3], #1
 80013da:	e7f9      	b.n	80013d0 <memset+0x4>

080013dc <iprintf>:
 80013dc:	b40f      	push	{r0, r1, r2, r3}
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <iprintf+0x2c>)
 80013e0:	b513      	push	{r0, r1, r4, lr}
 80013e2:	681c      	ldr	r4, [r3, #0]
 80013e4:	b124      	cbz	r4, 80013f0 <iprintf+0x14>
 80013e6:	69a3      	ldr	r3, [r4, #24]
 80013e8:	b913      	cbnz	r3, 80013f0 <iprintf+0x14>
 80013ea:	4620      	mov	r0, r4
 80013ec:	f000 f9e8 	bl	80017c0 <__sinit>
 80013f0:	ab05      	add	r3, sp, #20
 80013f2:	9a04      	ldr	r2, [sp, #16]
 80013f4:	68a1      	ldr	r1, [r4, #8]
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	4620      	mov	r0, r4
 80013fa:	f000 fbb5 	bl	8001b68 <_vfiprintf_r>
 80013fe:	b002      	add	sp, #8
 8001400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001404:	b004      	add	sp, #16
 8001406:	4770      	bx	lr
 8001408:	20000000 	.word	0x20000000

0800140c <__swbuf_r>:
 800140c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800140e:	460e      	mov	r6, r1
 8001410:	4614      	mov	r4, r2
 8001412:	4605      	mov	r5, r0
 8001414:	b118      	cbz	r0, 800141e <__swbuf_r+0x12>
 8001416:	6983      	ldr	r3, [r0, #24]
 8001418:	b90b      	cbnz	r3, 800141e <__swbuf_r+0x12>
 800141a:	f000 f9d1 	bl	80017c0 <__sinit>
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <__swbuf_r+0x98>)
 8001420:	429c      	cmp	r4, r3
 8001422:	d12b      	bne.n	800147c <__swbuf_r+0x70>
 8001424:	686c      	ldr	r4, [r5, #4]
 8001426:	69a3      	ldr	r3, [r4, #24]
 8001428:	60a3      	str	r3, [r4, #8]
 800142a:	89a3      	ldrh	r3, [r4, #12]
 800142c:	071a      	lsls	r2, r3, #28
 800142e:	d52f      	bpl.n	8001490 <__swbuf_r+0x84>
 8001430:	6923      	ldr	r3, [r4, #16]
 8001432:	b36b      	cbz	r3, 8001490 <__swbuf_r+0x84>
 8001434:	6923      	ldr	r3, [r4, #16]
 8001436:	6820      	ldr	r0, [r4, #0]
 8001438:	1ac0      	subs	r0, r0, r3
 800143a:	6963      	ldr	r3, [r4, #20]
 800143c:	b2f6      	uxtb	r6, r6
 800143e:	4283      	cmp	r3, r0
 8001440:	4637      	mov	r7, r6
 8001442:	dc04      	bgt.n	800144e <__swbuf_r+0x42>
 8001444:	4621      	mov	r1, r4
 8001446:	4628      	mov	r0, r5
 8001448:	f000 f926 	bl	8001698 <_fflush_r>
 800144c:	bb30      	cbnz	r0, 800149c <__swbuf_r+0x90>
 800144e:	68a3      	ldr	r3, [r4, #8]
 8001450:	3b01      	subs	r3, #1
 8001452:	60a3      	str	r3, [r4, #8]
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	6022      	str	r2, [r4, #0]
 800145a:	701e      	strb	r6, [r3, #0]
 800145c:	6963      	ldr	r3, [r4, #20]
 800145e:	3001      	adds	r0, #1
 8001460:	4283      	cmp	r3, r0
 8001462:	d004      	beq.n	800146e <__swbuf_r+0x62>
 8001464:	89a3      	ldrh	r3, [r4, #12]
 8001466:	07db      	lsls	r3, r3, #31
 8001468:	d506      	bpl.n	8001478 <__swbuf_r+0x6c>
 800146a:	2e0a      	cmp	r6, #10
 800146c:	d104      	bne.n	8001478 <__swbuf_r+0x6c>
 800146e:	4621      	mov	r1, r4
 8001470:	4628      	mov	r0, r5
 8001472:	f000 f911 	bl	8001698 <_fflush_r>
 8001476:	b988      	cbnz	r0, 800149c <__swbuf_r+0x90>
 8001478:	4638      	mov	r0, r7
 800147a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <__swbuf_r+0x9c>)
 800147e:	429c      	cmp	r4, r3
 8001480:	d101      	bne.n	8001486 <__swbuf_r+0x7a>
 8001482:	68ac      	ldr	r4, [r5, #8]
 8001484:	e7cf      	b.n	8001426 <__swbuf_r+0x1a>
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <__swbuf_r+0xa0>)
 8001488:	429c      	cmp	r4, r3
 800148a:	bf08      	it	eq
 800148c:	68ec      	ldreq	r4, [r5, #12]
 800148e:	e7ca      	b.n	8001426 <__swbuf_r+0x1a>
 8001490:	4621      	mov	r1, r4
 8001492:	4628      	mov	r0, r5
 8001494:	f000 f80c 	bl	80014b0 <__swsetup_r>
 8001498:	2800      	cmp	r0, #0
 800149a:	d0cb      	beq.n	8001434 <__swbuf_r+0x28>
 800149c:	f04f 37ff 	mov.w	r7, #4294967295
 80014a0:	e7ea      	b.n	8001478 <__swbuf_r+0x6c>
 80014a2:	bf00      	nop
 80014a4:	0800267c 	.word	0x0800267c
 80014a8:	0800269c 	.word	0x0800269c
 80014ac:	0800265c 	.word	0x0800265c

080014b0 <__swsetup_r>:
 80014b0:	4b32      	ldr	r3, [pc, #200]	; (800157c <__swsetup_r+0xcc>)
 80014b2:	b570      	push	{r4, r5, r6, lr}
 80014b4:	681d      	ldr	r5, [r3, #0]
 80014b6:	4606      	mov	r6, r0
 80014b8:	460c      	mov	r4, r1
 80014ba:	b125      	cbz	r5, 80014c6 <__swsetup_r+0x16>
 80014bc:	69ab      	ldr	r3, [r5, #24]
 80014be:	b913      	cbnz	r3, 80014c6 <__swsetup_r+0x16>
 80014c0:	4628      	mov	r0, r5
 80014c2:	f000 f97d 	bl	80017c0 <__sinit>
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <__swsetup_r+0xd0>)
 80014c8:	429c      	cmp	r4, r3
 80014ca:	d10f      	bne.n	80014ec <__swsetup_r+0x3c>
 80014cc:	686c      	ldr	r4, [r5, #4]
 80014ce:	89a3      	ldrh	r3, [r4, #12]
 80014d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014d4:	0719      	lsls	r1, r3, #28
 80014d6:	d42c      	bmi.n	8001532 <__swsetup_r+0x82>
 80014d8:	06dd      	lsls	r5, r3, #27
 80014da:	d411      	bmi.n	8001500 <__swsetup_r+0x50>
 80014dc:	2309      	movs	r3, #9
 80014de:	6033      	str	r3, [r6, #0]
 80014e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80014e4:	81a3      	strh	r3, [r4, #12]
 80014e6:	f04f 30ff 	mov.w	r0, #4294967295
 80014ea:	e03e      	b.n	800156a <__swsetup_r+0xba>
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <__swsetup_r+0xd4>)
 80014ee:	429c      	cmp	r4, r3
 80014f0:	d101      	bne.n	80014f6 <__swsetup_r+0x46>
 80014f2:	68ac      	ldr	r4, [r5, #8]
 80014f4:	e7eb      	b.n	80014ce <__swsetup_r+0x1e>
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <__swsetup_r+0xd8>)
 80014f8:	429c      	cmp	r4, r3
 80014fa:	bf08      	it	eq
 80014fc:	68ec      	ldreq	r4, [r5, #12]
 80014fe:	e7e6      	b.n	80014ce <__swsetup_r+0x1e>
 8001500:	0758      	lsls	r0, r3, #29
 8001502:	d512      	bpl.n	800152a <__swsetup_r+0x7a>
 8001504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001506:	b141      	cbz	r1, 800151a <__swsetup_r+0x6a>
 8001508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800150c:	4299      	cmp	r1, r3
 800150e:	d002      	beq.n	8001516 <__swsetup_r+0x66>
 8001510:	4630      	mov	r0, r6
 8001512:	f000 fa59 	bl	80019c8 <_free_r>
 8001516:	2300      	movs	r3, #0
 8001518:	6363      	str	r3, [r4, #52]	; 0x34
 800151a:	89a3      	ldrh	r3, [r4, #12]
 800151c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001520:	81a3      	strh	r3, [r4, #12]
 8001522:	2300      	movs	r3, #0
 8001524:	6063      	str	r3, [r4, #4]
 8001526:	6923      	ldr	r3, [r4, #16]
 8001528:	6023      	str	r3, [r4, #0]
 800152a:	89a3      	ldrh	r3, [r4, #12]
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	81a3      	strh	r3, [r4, #12]
 8001532:	6923      	ldr	r3, [r4, #16]
 8001534:	b94b      	cbnz	r3, 800154a <__swsetup_r+0x9a>
 8001536:	89a3      	ldrh	r3, [r4, #12]
 8001538:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800153c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001540:	d003      	beq.n	800154a <__swsetup_r+0x9a>
 8001542:	4621      	mov	r1, r4
 8001544:	4630      	mov	r0, r6
 8001546:	f000 f9ff 	bl	8001948 <__smakebuf_r>
 800154a:	89a0      	ldrh	r0, [r4, #12]
 800154c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001550:	f010 0301 	ands.w	r3, r0, #1
 8001554:	d00a      	beq.n	800156c <__swsetup_r+0xbc>
 8001556:	2300      	movs	r3, #0
 8001558:	60a3      	str	r3, [r4, #8]
 800155a:	6963      	ldr	r3, [r4, #20]
 800155c:	425b      	negs	r3, r3
 800155e:	61a3      	str	r3, [r4, #24]
 8001560:	6923      	ldr	r3, [r4, #16]
 8001562:	b943      	cbnz	r3, 8001576 <__swsetup_r+0xc6>
 8001564:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001568:	d1ba      	bne.n	80014e0 <__swsetup_r+0x30>
 800156a:	bd70      	pop	{r4, r5, r6, pc}
 800156c:	0781      	lsls	r1, r0, #30
 800156e:	bf58      	it	pl
 8001570:	6963      	ldrpl	r3, [r4, #20]
 8001572:	60a3      	str	r3, [r4, #8]
 8001574:	e7f4      	b.n	8001560 <__swsetup_r+0xb0>
 8001576:	2000      	movs	r0, #0
 8001578:	e7f7      	b.n	800156a <__swsetup_r+0xba>
 800157a:	bf00      	nop
 800157c:	20000000 	.word	0x20000000
 8001580:	0800267c 	.word	0x0800267c
 8001584:	0800269c 	.word	0x0800269c
 8001588:	0800265c 	.word	0x0800265c

0800158c <__sflush_r>:
 800158c:	898a      	ldrh	r2, [r1, #12]
 800158e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001592:	4605      	mov	r5, r0
 8001594:	0710      	lsls	r0, r2, #28
 8001596:	460c      	mov	r4, r1
 8001598:	d458      	bmi.n	800164c <__sflush_r+0xc0>
 800159a:	684b      	ldr	r3, [r1, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	dc05      	bgt.n	80015ac <__sflush_r+0x20>
 80015a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	dc02      	bgt.n	80015ac <__sflush_r+0x20>
 80015a6:	2000      	movs	r0, #0
 80015a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015ae:	2e00      	cmp	r6, #0
 80015b0:	d0f9      	beq.n	80015a6 <__sflush_r+0x1a>
 80015b2:	2300      	movs	r3, #0
 80015b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80015b8:	682f      	ldr	r7, [r5, #0]
 80015ba:	602b      	str	r3, [r5, #0]
 80015bc:	d032      	beq.n	8001624 <__sflush_r+0x98>
 80015be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80015c0:	89a3      	ldrh	r3, [r4, #12]
 80015c2:	075a      	lsls	r2, r3, #29
 80015c4:	d505      	bpl.n	80015d2 <__sflush_r+0x46>
 80015c6:	6863      	ldr	r3, [r4, #4]
 80015c8:	1ac0      	subs	r0, r0, r3
 80015ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015cc:	b10b      	cbz	r3, 80015d2 <__sflush_r+0x46>
 80015ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015d0:	1ac0      	subs	r0, r0, r3
 80015d2:	2300      	movs	r3, #0
 80015d4:	4602      	mov	r2, r0
 80015d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015d8:	6a21      	ldr	r1, [r4, #32]
 80015da:	4628      	mov	r0, r5
 80015dc:	47b0      	blx	r6
 80015de:	1c43      	adds	r3, r0, #1
 80015e0:	89a3      	ldrh	r3, [r4, #12]
 80015e2:	d106      	bne.n	80015f2 <__sflush_r+0x66>
 80015e4:	6829      	ldr	r1, [r5, #0]
 80015e6:	291d      	cmp	r1, #29
 80015e8:	d82c      	bhi.n	8001644 <__sflush_r+0xb8>
 80015ea:	4a2a      	ldr	r2, [pc, #168]	; (8001694 <__sflush_r+0x108>)
 80015ec:	40ca      	lsrs	r2, r1
 80015ee:	07d6      	lsls	r6, r2, #31
 80015f0:	d528      	bpl.n	8001644 <__sflush_r+0xb8>
 80015f2:	2200      	movs	r2, #0
 80015f4:	6062      	str	r2, [r4, #4]
 80015f6:	04d9      	lsls	r1, r3, #19
 80015f8:	6922      	ldr	r2, [r4, #16]
 80015fa:	6022      	str	r2, [r4, #0]
 80015fc:	d504      	bpl.n	8001608 <__sflush_r+0x7c>
 80015fe:	1c42      	adds	r2, r0, #1
 8001600:	d101      	bne.n	8001606 <__sflush_r+0x7a>
 8001602:	682b      	ldr	r3, [r5, #0]
 8001604:	b903      	cbnz	r3, 8001608 <__sflush_r+0x7c>
 8001606:	6560      	str	r0, [r4, #84]	; 0x54
 8001608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800160a:	602f      	str	r7, [r5, #0]
 800160c:	2900      	cmp	r1, #0
 800160e:	d0ca      	beq.n	80015a6 <__sflush_r+0x1a>
 8001610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001614:	4299      	cmp	r1, r3
 8001616:	d002      	beq.n	800161e <__sflush_r+0x92>
 8001618:	4628      	mov	r0, r5
 800161a:	f000 f9d5 	bl	80019c8 <_free_r>
 800161e:	2000      	movs	r0, #0
 8001620:	6360      	str	r0, [r4, #52]	; 0x34
 8001622:	e7c1      	b.n	80015a8 <__sflush_r+0x1c>
 8001624:	6a21      	ldr	r1, [r4, #32]
 8001626:	2301      	movs	r3, #1
 8001628:	4628      	mov	r0, r5
 800162a:	47b0      	blx	r6
 800162c:	1c41      	adds	r1, r0, #1
 800162e:	d1c7      	bne.n	80015c0 <__sflush_r+0x34>
 8001630:	682b      	ldr	r3, [r5, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0c4      	beq.n	80015c0 <__sflush_r+0x34>
 8001636:	2b1d      	cmp	r3, #29
 8001638:	d001      	beq.n	800163e <__sflush_r+0xb2>
 800163a:	2b16      	cmp	r3, #22
 800163c:	d101      	bne.n	8001642 <__sflush_r+0xb6>
 800163e:	602f      	str	r7, [r5, #0]
 8001640:	e7b1      	b.n	80015a6 <__sflush_r+0x1a>
 8001642:	89a3      	ldrh	r3, [r4, #12]
 8001644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001648:	81a3      	strh	r3, [r4, #12]
 800164a:	e7ad      	b.n	80015a8 <__sflush_r+0x1c>
 800164c:	690f      	ldr	r7, [r1, #16]
 800164e:	2f00      	cmp	r7, #0
 8001650:	d0a9      	beq.n	80015a6 <__sflush_r+0x1a>
 8001652:	0793      	lsls	r3, r2, #30
 8001654:	680e      	ldr	r6, [r1, #0]
 8001656:	bf08      	it	eq
 8001658:	694b      	ldreq	r3, [r1, #20]
 800165a:	600f      	str	r7, [r1, #0]
 800165c:	bf18      	it	ne
 800165e:	2300      	movne	r3, #0
 8001660:	eba6 0807 	sub.w	r8, r6, r7
 8001664:	608b      	str	r3, [r1, #8]
 8001666:	f1b8 0f00 	cmp.w	r8, #0
 800166a:	dd9c      	ble.n	80015a6 <__sflush_r+0x1a>
 800166c:	6a21      	ldr	r1, [r4, #32]
 800166e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001670:	4643      	mov	r3, r8
 8001672:	463a      	mov	r2, r7
 8001674:	4628      	mov	r0, r5
 8001676:	47b0      	blx	r6
 8001678:	2800      	cmp	r0, #0
 800167a:	dc06      	bgt.n	800168a <__sflush_r+0xfe>
 800167c:	89a3      	ldrh	r3, [r4, #12]
 800167e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001682:	81a3      	strh	r3, [r4, #12]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	e78e      	b.n	80015a8 <__sflush_r+0x1c>
 800168a:	4407      	add	r7, r0
 800168c:	eba8 0800 	sub.w	r8, r8, r0
 8001690:	e7e9      	b.n	8001666 <__sflush_r+0xda>
 8001692:	bf00      	nop
 8001694:	20400001 	.word	0x20400001

08001698 <_fflush_r>:
 8001698:	b538      	push	{r3, r4, r5, lr}
 800169a:	690b      	ldr	r3, [r1, #16]
 800169c:	4605      	mov	r5, r0
 800169e:	460c      	mov	r4, r1
 80016a0:	b913      	cbnz	r3, 80016a8 <_fflush_r+0x10>
 80016a2:	2500      	movs	r5, #0
 80016a4:	4628      	mov	r0, r5
 80016a6:	bd38      	pop	{r3, r4, r5, pc}
 80016a8:	b118      	cbz	r0, 80016b2 <_fflush_r+0x1a>
 80016aa:	6983      	ldr	r3, [r0, #24]
 80016ac:	b90b      	cbnz	r3, 80016b2 <_fflush_r+0x1a>
 80016ae:	f000 f887 	bl	80017c0 <__sinit>
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <_fflush_r+0x6c>)
 80016b4:	429c      	cmp	r4, r3
 80016b6:	d11b      	bne.n	80016f0 <_fflush_r+0x58>
 80016b8:	686c      	ldr	r4, [r5, #4]
 80016ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0ef      	beq.n	80016a2 <_fflush_r+0xa>
 80016c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80016c4:	07d0      	lsls	r0, r2, #31
 80016c6:	d404      	bmi.n	80016d2 <_fflush_r+0x3a>
 80016c8:	0599      	lsls	r1, r3, #22
 80016ca:	d402      	bmi.n	80016d2 <_fflush_r+0x3a>
 80016cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016ce:	f000 f915 	bl	80018fc <__retarget_lock_acquire_recursive>
 80016d2:	4628      	mov	r0, r5
 80016d4:	4621      	mov	r1, r4
 80016d6:	f7ff ff59 	bl	800158c <__sflush_r>
 80016da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016dc:	07da      	lsls	r2, r3, #31
 80016de:	4605      	mov	r5, r0
 80016e0:	d4e0      	bmi.n	80016a4 <_fflush_r+0xc>
 80016e2:	89a3      	ldrh	r3, [r4, #12]
 80016e4:	059b      	lsls	r3, r3, #22
 80016e6:	d4dd      	bmi.n	80016a4 <_fflush_r+0xc>
 80016e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016ea:	f000 f908 	bl	80018fe <__retarget_lock_release_recursive>
 80016ee:	e7d9      	b.n	80016a4 <_fflush_r+0xc>
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <_fflush_r+0x70>)
 80016f2:	429c      	cmp	r4, r3
 80016f4:	d101      	bne.n	80016fa <_fflush_r+0x62>
 80016f6:	68ac      	ldr	r4, [r5, #8]
 80016f8:	e7df      	b.n	80016ba <_fflush_r+0x22>
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <_fflush_r+0x74>)
 80016fc:	429c      	cmp	r4, r3
 80016fe:	bf08      	it	eq
 8001700:	68ec      	ldreq	r4, [r5, #12]
 8001702:	e7da      	b.n	80016ba <_fflush_r+0x22>
 8001704:	0800267c 	.word	0x0800267c
 8001708:	0800269c 	.word	0x0800269c
 800170c:	0800265c 	.word	0x0800265c

08001710 <std>:
 8001710:	2300      	movs	r3, #0
 8001712:	b510      	push	{r4, lr}
 8001714:	4604      	mov	r4, r0
 8001716:	e9c0 3300 	strd	r3, r3, [r0]
 800171a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800171e:	6083      	str	r3, [r0, #8]
 8001720:	8181      	strh	r1, [r0, #12]
 8001722:	6643      	str	r3, [r0, #100]	; 0x64
 8001724:	81c2      	strh	r2, [r0, #14]
 8001726:	6183      	str	r3, [r0, #24]
 8001728:	4619      	mov	r1, r3
 800172a:	2208      	movs	r2, #8
 800172c:	305c      	adds	r0, #92	; 0x5c
 800172e:	f7ff fe4d 	bl	80013cc <memset>
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <std+0x38>)
 8001734:	6263      	str	r3, [r4, #36]	; 0x24
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <std+0x3c>)
 8001738:	62a3      	str	r3, [r4, #40]	; 0x28
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <std+0x40>)
 800173c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <std+0x44>)
 8001740:	6224      	str	r4, [r4, #32]
 8001742:	6323      	str	r3, [r4, #48]	; 0x30
 8001744:	bd10      	pop	{r4, pc}
 8001746:	bf00      	nop
 8001748:	08002111 	.word	0x08002111
 800174c:	08002133 	.word	0x08002133
 8001750:	0800216b 	.word	0x0800216b
 8001754:	0800218f 	.word	0x0800218f

08001758 <_cleanup_r>:
 8001758:	4901      	ldr	r1, [pc, #4]	; (8001760 <_cleanup_r+0x8>)
 800175a:	f000 b8af 	b.w	80018bc <_fwalk_reent>
 800175e:	bf00      	nop
 8001760:	08001699 	.word	0x08001699

08001764 <__sfmoreglue>:
 8001764:	b570      	push	{r4, r5, r6, lr}
 8001766:	1e4a      	subs	r2, r1, #1
 8001768:	2568      	movs	r5, #104	; 0x68
 800176a:	4355      	muls	r5, r2
 800176c:	460e      	mov	r6, r1
 800176e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001772:	f000 f977 	bl	8001a64 <_malloc_r>
 8001776:	4604      	mov	r4, r0
 8001778:	b140      	cbz	r0, 800178c <__sfmoreglue+0x28>
 800177a:	2100      	movs	r1, #0
 800177c:	e9c0 1600 	strd	r1, r6, [r0]
 8001780:	300c      	adds	r0, #12
 8001782:	60a0      	str	r0, [r4, #8]
 8001784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001788:	f7ff fe20 	bl	80013cc <memset>
 800178c:	4620      	mov	r0, r4
 800178e:	bd70      	pop	{r4, r5, r6, pc}

08001790 <__sfp_lock_acquire>:
 8001790:	4801      	ldr	r0, [pc, #4]	; (8001798 <__sfp_lock_acquire+0x8>)
 8001792:	f000 b8b3 	b.w	80018fc <__retarget_lock_acquire_recursive>
 8001796:	bf00      	nop
 8001798:	200004cc 	.word	0x200004cc

0800179c <__sfp_lock_release>:
 800179c:	4801      	ldr	r0, [pc, #4]	; (80017a4 <__sfp_lock_release+0x8>)
 800179e:	f000 b8ae 	b.w	80018fe <__retarget_lock_release_recursive>
 80017a2:	bf00      	nop
 80017a4:	200004cc 	.word	0x200004cc

080017a8 <__sinit_lock_acquire>:
 80017a8:	4801      	ldr	r0, [pc, #4]	; (80017b0 <__sinit_lock_acquire+0x8>)
 80017aa:	f000 b8a7 	b.w	80018fc <__retarget_lock_acquire_recursive>
 80017ae:	bf00      	nop
 80017b0:	200004c7 	.word	0x200004c7

080017b4 <__sinit_lock_release>:
 80017b4:	4801      	ldr	r0, [pc, #4]	; (80017bc <__sinit_lock_release+0x8>)
 80017b6:	f000 b8a2 	b.w	80018fe <__retarget_lock_release_recursive>
 80017ba:	bf00      	nop
 80017bc:	200004c7 	.word	0x200004c7

080017c0 <__sinit>:
 80017c0:	b510      	push	{r4, lr}
 80017c2:	4604      	mov	r4, r0
 80017c4:	f7ff fff0 	bl	80017a8 <__sinit_lock_acquire>
 80017c8:	69a3      	ldr	r3, [r4, #24]
 80017ca:	b11b      	cbz	r3, 80017d4 <__sinit+0x14>
 80017cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017d0:	f7ff bff0 	b.w	80017b4 <__sinit_lock_release>
 80017d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80017d8:	6523      	str	r3, [r4, #80]	; 0x50
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <__sinit+0x68>)
 80017dc:	4a13      	ldr	r2, [pc, #76]	; (800182c <__sinit+0x6c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80017e2:	42a3      	cmp	r3, r4
 80017e4:	bf04      	itt	eq
 80017e6:	2301      	moveq	r3, #1
 80017e8:	61a3      	streq	r3, [r4, #24]
 80017ea:	4620      	mov	r0, r4
 80017ec:	f000 f820 	bl	8001830 <__sfp>
 80017f0:	6060      	str	r0, [r4, #4]
 80017f2:	4620      	mov	r0, r4
 80017f4:	f000 f81c 	bl	8001830 <__sfp>
 80017f8:	60a0      	str	r0, [r4, #8]
 80017fa:	4620      	mov	r0, r4
 80017fc:	f000 f818 	bl	8001830 <__sfp>
 8001800:	2200      	movs	r2, #0
 8001802:	60e0      	str	r0, [r4, #12]
 8001804:	2104      	movs	r1, #4
 8001806:	6860      	ldr	r0, [r4, #4]
 8001808:	f7ff ff82 	bl	8001710 <std>
 800180c:	68a0      	ldr	r0, [r4, #8]
 800180e:	2201      	movs	r2, #1
 8001810:	2109      	movs	r1, #9
 8001812:	f7ff ff7d 	bl	8001710 <std>
 8001816:	68e0      	ldr	r0, [r4, #12]
 8001818:	2202      	movs	r2, #2
 800181a:	2112      	movs	r1, #18
 800181c:	f7ff ff78 	bl	8001710 <std>
 8001820:	2301      	movs	r3, #1
 8001822:	61a3      	str	r3, [r4, #24]
 8001824:	e7d2      	b.n	80017cc <__sinit+0xc>
 8001826:	bf00      	nop
 8001828:	08002658 	.word	0x08002658
 800182c:	08001759 	.word	0x08001759

08001830 <__sfp>:
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001832:	4607      	mov	r7, r0
 8001834:	f7ff ffac 	bl	8001790 <__sfp_lock_acquire>
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <__sfp+0x84>)
 800183a:	681e      	ldr	r6, [r3, #0]
 800183c:	69b3      	ldr	r3, [r6, #24]
 800183e:	b913      	cbnz	r3, 8001846 <__sfp+0x16>
 8001840:	4630      	mov	r0, r6
 8001842:	f7ff ffbd 	bl	80017c0 <__sinit>
 8001846:	3648      	adds	r6, #72	; 0x48
 8001848:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800184c:	3b01      	subs	r3, #1
 800184e:	d503      	bpl.n	8001858 <__sfp+0x28>
 8001850:	6833      	ldr	r3, [r6, #0]
 8001852:	b30b      	cbz	r3, 8001898 <__sfp+0x68>
 8001854:	6836      	ldr	r6, [r6, #0]
 8001856:	e7f7      	b.n	8001848 <__sfp+0x18>
 8001858:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800185c:	b9d5      	cbnz	r5, 8001894 <__sfp+0x64>
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <__sfp+0x88>)
 8001860:	60e3      	str	r3, [r4, #12]
 8001862:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001866:	6665      	str	r5, [r4, #100]	; 0x64
 8001868:	f000 f847 	bl	80018fa <__retarget_lock_init_recursive>
 800186c:	f7ff ff96 	bl	800179c <__sfp_lock_release>
 8001870:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001874:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001878:	6025      	str	r5, [r4, #0]
 800187a:	61a5      	str	r5, [r4, #24]
 800187c:	2208      	movs	r2, #8
 800187e:	4629      	mov	r1, r5
 8001880:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001884:	f7ff fda2 	bl	80013cc <memset>
 8001888:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800188c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001890:	4620      	mov	r0, r4
 8001892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001894:	3468      	adds	r4, #104	; 0x68
 8001896:	e7d9      	b.n	800184c <__sfp+0x1c>
 8001898:	2104      	movs	r1, #4
 800189a:	4638      	mov	r0, r7
 800189c:	f7ff ff62 	bl	8001764 <__sfmoreglue>
 80018a0:	4604      	mov	r4, r0
 80018a2:	6030      	str	r0, [r6, #0]
 80018a4:	2800      	cmp	r0, #0
 80018a6:	d1d5      	bne.n	8001854 <__sfp+0x24>
 80018a8:	f7ff ff78 	bl	800179c <__sfp_lock_release>
 80018ac:	230c      	movs	r3, #12
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	e7ee      	b.n	8001890 <__sfp+0x60>
 80018b2:	bf00      	nop
 80018b4:	08002658 	.word	0x08002658
 80018b8:	ffff0001 	.word	0xffff0001

080018bc <_fwalk_reent>:
 80018bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018c0:	4606      	mov	r6, r0
 80018c2:	4688      	mov	r8, r1
 80018c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80018c8:	2700      	movs	r7, #0
 80018ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018ce:	f1b9 0901 	subs.w	r9, r9, #1
 80018d2:	d505      	bpl.n	80018e0 <_fwalk_reent+0x24>
 80018d4:	6824      	ldr	r4, [r4, #0]
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d1f7      	bne.n	80018ca <_fwalk_reent+0xe>
 80018da:	4638      	mov	r0, r7
 80018dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018e0:	89ab      	ldrh	r3, [r5, #12]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d907      	bls.n	80018f6 <_fwalk_reent+0x3a>
 80018e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018ea:	3301      	adds	r3, #1
 80018ec:	d003      	beq.n	80018f6 <_fwalk_reent+0x3a>
 80018ee:	4629      	mov	r1, r5
 80018f0:	4630      	mov	r0, r6
 80018f2:	47c0      	blx	r8
 80018f4:	4307      	orrs	r7, r0
 80018f6:	3568      	adds	r5, #104	; 0x68
 80018f8:	e7e9      	b.n	80018ce <_fwalk_reent+0x12>

080018fa <__retarget_lock_init_recursive>:
 80018fa:	4770      	bx	lr

080018fc <__retarget_lock_acquire_recursive>:
 80018fc:	4770      	bx	lr

080018fe <__retarget_lock_release_recursive>:
 80018fe:	4770      	bx	lr

08001900 <__swhatbuf_r>:
 8001900:	b570      	push	{r4, r5, r6, lr}
 8001902:	460e      	mov	r6, r1
 8001904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001908:	2900      	cmp	r1, #0
 800190a:	b096      	sub	sp, #88	; 0x58
 800190c:	4614      	mov	r4, r2
 800190e:	461d      	mov	r5, r3
 8001910:	da07      	bge.n	8001922 <__swhatbuf_r+0x22>
 8001912:	2300      	movs	r3, #0
 8001914:	602b      	str	r3, [r5, #0]
 8001916:	89b3      	ldrh	r3, [r6, #12]
 8001918:	061a      	lsls	r2, r3, #24
 800191a:	d410      	bmi.n	800193e <__swhatbuf_r+0x3e>
 800191c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001920:	e00e      	b.n	8001940 <__swhatbuf_r+0x40>
 8001922:	466a      	mov	r2, sp
 8001924:	f000 fc5a 	bl	80021dc <_fstat_r>
 8001928:	2800      	cmp	r0, #0
 800192a:	dbf2      	blt.n	8001912 <__swhatbuf_r+0x12>
 800192c:	9a01      	ldr	r2, [sp, #4]
 800192e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001932:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001936:	425a      	negs	r2, r3
 8001938:	415a      	adcs	r2, r3
 800193a:	602a      	str	r2, [r5, #0]
 800193c:	e7ee      	b.n	800191c <__swhatbuf_r+0x1c>
 800193e:	2340      	movs	r3, #64	; 0x40
 8001940:	2000      	movs	r0, #0
 8001942:	6023      	str	r3, [r4, #0]
 8001944:	b016      	add	sp, #88	; 0x58
 8001946:	bd70      	pop	{r4, r5, r6, pc}

08001948 <__smakebuf_r>:
 8001948:	898b      	ldrh	r3, [r1, #12]
 800194a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800194c:	079d      	lsls	r5, r3, #30
 800194e:	4606      	mov	r6, r0
 8001950:	460c      	mov	r4, r1
 8001952:	d507      	bpl.n	8001964 <__smakebuf_r+0x1c>
 8001954:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001958:	6023      	str	r3, [r4, #0]
 800195a:	6123      	str	r3, [r4, #16]
 800195c:	2301      	movs	r3, #1
 800195e:	6163      	str	r3, [r4, #20]
 8001960:	b002      	add	sp, #8
 8001962:	bd70      	pop	{r4, r5, r6, pc}
 8001964:	ab01      	add	r3, sp, #4
 8001966:	466a      	mov	r2, sp
 8001968:	f7ff ffca 	bl	8001900 <__swhatbuf_r>
 800196c:	9900      	ldr	r1, [sp, #0]
 800196e:	4605      	mov	r5, r0
 8001970:	4630      	mov	r0, r6
 8001972:	f000 f877 	bl	8001a64 <_malloc_r>
 8001976:	b948      	cbnz	r0, 800198c <__smakebuf_r+0x44>
 8001978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800197c:	059a      	lsls	r2, r3, #22
 800197e:	d4ef      	bmi.n	8001960 <__smakebuf_r+0x18>
 8001980:	f023 0303 	bic.w	r3, r3, #3
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	81a3      	strh	r3, [r4, #12]
 800198a:	e7e3      	b.n	8001954 <__smakebuf_r+0xc>
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <__smakebuf_r+0x7c>)
 800198e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001990:	89a3      	ldrh	r3, [r4, #12]
 8001992:	6020      	str	r0, [r4, #0]
 8001994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001998:	81a3      	strh	r3, [r4, #12]
 800199a:	9b00      	ldr	r3, [sp, #0]
 800199c:	6163      	str	r3, [r4, #20]
 800199e:	9b01      	ldr	r3, [sp, #4]
 80019a0:	6120      	str	r0, [r4, #16]
 80019a2:	b15b      	cbz	r3, 80019bc <__smakebuf_r+0x74>
 80019a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019a8:	4630      	mov	r0, r6
 80019aa:	f000 fc29 	bl	8002200 <_isatty_r>
 80019ae:	b128      	cbz	r0, 80019bc <__smakebuf_r+0x74>
 80019b0:	89a3      	ldrh	r3, [r4, #12]
 80019b2:	f023 0303 	bic.w	r3, r3, #3
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	81a3      	strh	r3, [r4, #12]
 80019bc:	89a0      	ldrh	r0, [r4, #12]
 80019be:	4305      	orrs	r5, r0
 80019c0:	81a5      	strh	r5, [r4, #12]
 80019c2:	e7cd      	b.n	8001960 <__smakebuf_r+0x18>
 80019c4:	08001759 	.word	0x08001759

080019c8 <_free_r>:
 80019c8:	b538      	push	{r3, r4, r5, lr}
 80019ca:	4605      	mov	r5, r0
 80019cc:	2900      	cmp	r1, #0
 80019ce:	d045      	beq.n	8001a5c <_free_r+0x94>
 80019d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019d4:	1f0c      	subs	r4, r1, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	bfb8      	it	lt
 80019da:	18e4      	addlt	r4, r4, r3
 80019dc:	f000 fc32 	bl	8002244 <__malloc_lock>
 80019e0:	4a1f      	ldr	r2, [pc, #124]	; (8001a60 <_free_r+0x98>)
 80019e2:	6813      	ldr	r3, [r2, #0]
 80019e4:	4610      	mov	r0, r2
 80019e6:	b933      	cbnz	r3, 80019f6 <_free_r+0x2e>
 80019e8:	6063      	str	r3, [r4, #4]
 80019ea:	6014      	str	r4, [r2, #0]
 80019ec:	4628      	mov	r0, r5
 80019ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019f2:	f000 bc2d 	b.w	8002250 <__malloc_unlock>
 80019f6:	42a3      	cmp	r3, r4
 80019f8:	d90b      	bls.n	8001a12 <_free_r+0x4a>
 80019fa:	6821      	ldr	r1, [r4, #0]
 80019fc:	1862      	adds	r2, r4, r1
 80019fe:	4293      	cmp	r3, r2
 8001a00:	bf04      	itt	eq
 8001a02:	681a      	ldreq	r2, [r3, #0]
 8001a04:	685b      	ldreq	r3, [r3, #4]
 8001a06:	6063      	str	r3, [r4, #4]
 8001a08:	bf04      	itt	eq
 8001a0a:	1852      	addeq	r2, r2, r1
 8001a0c:	6022      	streq	r2, [r4, #0]
 8001a0e:	6004      	str	r4, [r0, #0]
 8001a10:	e7ec      	b.n	80019ec <_free_r+0x24>
 8001a12:	461a      	mov	r2, r3
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	b10b      	cbz	r3, 8001a1c <_free_r+0x54>
 8001a18:	42a3      	cmp	r3, r4
 8001a1a:	d9fa      	bls.n	8001a12 <_free_r+0x4a>
 8001a1c:	6811      	ldr	r1, [r2, #0]
 8001a1e:	1850      	adds	r0, r2, r1
 8001a20:	42a0      	cmp	r0, r4
 8001a22:	d10b      	bne.n	8001a3c <_free_r+0x74>
 8001a24:	6820      	ldr	r0, [r4, #0]
 8001a26:	4401      	add	r1, r0
 8001a28:	1850      	adds	r0, r2, r1
 8001a2a:	4283      	cmp	r3, r0
 8001a2c:	6011      	str	r1, [r2, #0]
 8001a2e:	d1dd      	bne.n	80019ec <_free_r+0x24>
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	6053      	str	r3, [r2, #4]
 8001a36:	4401      	add	r1, r0
 8001a38:	6011      	str	r1, [r2, #0]
 8001a3a:	e7d7      	b.n	80019ec <_free_r+0x24>
 8001a3c:	d902      	bls.n	8001a44 <_free_r+0x7c>
 8001a3e:	230c      	movs	r3, #12
 8001a40:	602b      	str	r3, [r5, #0]
 8001a42:	e7d3      	b.n	80019ec <_free_r+0x24>
 8001a44:	6820      	ldr	r0, [r4, #0]
 8001a46:	1821      	adds	r1, r4, r0
 8001a48:	428b      	cmp	r3, r1
 8001a4a:	bf04      	itt	eq
 8001a4c:	6819      	ldreq	r1, [r3, #0]
 8001a4e:	685b      	ldreq	r3, [r3, #4]
 8001a50:	6063      	str	r3, [r4, #4]
 8001a52:	bf04      	itt	eq
 8001a54:	1809      	addeq	r1, r1, r0
 8001a56:	6021      	streq	r1, [r4, #0]
 8001a58:	6054      	str	r4, [r2, #4]
 8001a5a:	e7c7      	b.n	80019ec <_free_r+0x24>
 8001a5c:	bd38      	pop	{r3, r4, r5, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000088 	.word	0x20000088

08001a64 <_malloc_r>:
 8001a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a66:	1ccd      	adds	r5, r1, #3
 8001a68:	f025 0503 	bic.w	r5, r5, #3
 8001a6c:	3508      	adds	r5, #8
 8001a6e:	2d0c      	cmp	r5, #12
 8001a70:	bf38      	it	cc
 8001a72:	250c      	movcc	r5, #12
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	4606      	mov	r6, r0
 8001a78:	db01      	blt.n	8001a7e <_malloc_r+0x1a>
 8001a7a:	42a9      	cmp	r1, r5
 8001a7c:	d903      	bls.n	8001a86 <_malloc_r+0x22>
 8001a7e:	230c      	movs	r3, #12
 8001a80:	6033      	str	r3, [r6, #0]
 8001a82:	2000      	movs	r0, #0
 8001a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a86:	f000 fbdd 	bl	8002244 <__malloc_lock>
 8001a8a:	4921      	ldr	r1, [pc, #132]	; (8001b10 <_malloc_r+0xac>)
 8001a8c:	680a      	ldr	r2, [r1, #0]
 8001a8e:	4614      	mov	r4, r2
 8001a90:	b99c      	cbnz	r4, 8001aba <_malloc_r+0x56>
 8001a92:	4f20      	ldr	r7, [pc, #128]	; (8001b14 <_malloc_r+0xb0>)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b923      	cbnz	r3, 8001aa2 <_malloc_r+0x3e>
 8001a98:	4621      	mov	r1, r4
 8001a9a:	4630      	mov	r0, r6
 8001a9c:	f000 fb28 	bl	80020f0 <_sbrk_r>
 8001aa0:	6038      	str	r0, [r7, #0]
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	4630      	mov	r0, r6
 8001aa6:	f000 fb23 	bl	80020f0 <_sbrk_r>
 8001aaa:	1c43      	adds	r3, r0, #1
 8001aac:	d123      	bne.n	8001af6 <_malloc_r+0x92>
 8001aae:	230c      	movs	r3, #12
 8001ab0:	6033      	str	r3, [r6, #0]
 8001ab2:	4630      	mov	r0, r6
 8001ab4:	f000 fbcc 	bl	8002250 <__malloc_unlock>
 8001ab8:	e7e3      	b.n	8001a82 <_malloc_r+0x1e>
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	1b5b      	subs	r3, r3, r5
 8001abe:	d417      	bmi.n	8001af0 <_malloc_r+0x8c>
 8001ac0:	2b0b      	cmp	r3, #11
 8001ac2:	d903      	bls.n	8001acc <_malloc_r+0x68>
 8001ac4:	6023      	str	r3, [r4, #0]
 8001ac6:	441c      	add	r4, r3
 8001ac8:	6025      	str	r5, [r4, #0]
 8001aca:	e004      	b.n	8001ad6 <_malloc_r+0x72>
 8001acc:	6863      	ldr	r3, [r4, #4]
 8001ace:	42a2      	cmp	r2, r4
 8001ad0:	bf0c      	ite	eq
 8001ad2:	600b      	streq	r3, [r1, #0]
 8001ad4:	6053      	strne	r3, [r2, #4]
 8001ad6:	4630      	mov	r0, r6
 8001ad8:	f000 fbba 	bl	8002250 <__malloc_unlock>
 8001adc:	f104 000b 	add.w	r0, r4, #11
 8001ae0:	1d23      	adds	r3, r4, #4
 8001ae2:	f020 0007 	bic.w	r0, r0, #7
 8001ae6:	1ac2      	subs	r2, r0, r3
 8001ae8:	d0cc      	beq.n	8001a84 <_malloc_r+0x20>
 8001aea:	1a1b      	subs	r3, r3, r0
 8001aec:	50a3      	str	r3, [r4, r2]
 8001aee:	e7c9      	b.n	8001a84 <_malloc_r+0x20>
 8001af0:	4622      	mov	r2, r4
 8001af2:	6864      	ldr	r4, [r4, #4]
 8001af4:	e7cc      	b.n	8001a90 <_malloc_r+0x2c>
 8001af6:	1cc4      	adds	r4, r0, #3
 8001af8:	f024 0403 	bic.w	r4, r4, #3
 8001afc:	42a0      	cmp	r0, r4
 8001afe:	d0e3      	beq.n	8001ac8 <_malloc_r+0x64>
 8001b00:	1a21      	subs	r1, r4, r0
 8001b02:	4630      	mov	r0, r6
 8001b04:	f000 faf4 	bl	80020f0 <_sbrk_r>
 8001b08:	3001      	adds	r0, #1
 8001b0a:	d1dd      	bne.n	8001ac8 <_malloc_r+0x64>
 8001b0c:	e7cf      	b.n	8001aae <_malloc_r+0x4a>
 8001b0e:	bf00      	nop
 8001b10:	20000088 	.word	0x20000088
 8001b14:	2000008c 	.word	0x2000008c

08001b18 <__sfputc_r>:
 8001b18:	6893      	ldr	r3, [r2, #8]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	b410      	push	{r4}
 8001b20:	6093      	str	r3, [r2, #8]
 8001b22:	da07      	bge.n	8001b34 <__sfputc_r+0x1c>
 8001b24:	6994      	ldr	r4, [r2, #24]
 8001b26:	42a3      	cmp	r3, r4
 8001b28:	db01      	blt.n	8001b2e <__sfputc_r+0x16>
 8001b2a:	290a      	cmp	r1, #10
 8001b2c:	d102      	bne.n	8001b34 <__sfputc_r+0x1c>
 8001b2e:	bc10      	pop	{r4}
 8001b30:	f7ff bc6c 	b.w	800140c <__swbuf_r>
 8001b34:	6813      	ldr	r3, [r2, #0]
 8001b36:	1c58      	adds	r0, r3, #1
 8001b38:	6010      	str	r0, [r2, #0]
 8001b3a:	7019      	strb	r1, [r3, #0]
 8001b3c:	4608      	mov	r0, r1
 8001b3e:	bc10      	pop	{r4}
 8001b40:	4770      	bx	lr

08001b42 <__sfputs_r>:
 8001b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b44:	4606      	mov	r6, r0
 8001b46:	460f      	mov	r7, r1
 8001b48:	4614      	mov	r4, r2
 8001b4a:	18d5      	adds	r5, r2, r3
 8001b4c:	42ac      	cmp	r4, r5
 8001b4e:	d101      	bne.n	8001b54 <__sfputs_r+0x12>
 8001b50:	2000      	movs	r0, #0
 8001b52:	e007      	b.n	8001b64 <__sfputs_r+0x22>
 8001b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b58:	463a      	mov	r2, r7
 8001b5a:	4630      	mov	r0, r6
 8001b5c:	f7ff ffdc 	bl	8001b18 <__sfputc_r>
 8001b60:	1c43      	adds	r3, r0, #1
 8001b62:	d1f3      	bne.n	8001b4c <__sfputs_r+0xa>
 8001b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b68 <_vfiprintf_r>:
 8001b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b6c:	460d      	mov	r5, r1
 8001b6e:	b09d      	sub	sp, #116	; 0x74
 8001b70:	4614      	mov	r4, r2
 8001b72:	4698      	mov	r8, r3
 8001b74:	4606      	mov	r6, r0
 8001b76:	b118      	cbz	r0, 8001b80 <_vfiprintf_r+0x18>
 8001b78:	6983      	ldr	r3, [r0, #24]
 8001b7a:	b90b      	cbnz	r3, 8001b80 <_vfiprintf_r+0x18>
 8001b7c:	f7ff fe20 	bl	80017c0 <__sinit>
 8001b80:	4b89      	ldr	r3, [pc, #548]	; (8001da8 <_vfiprintf_r+0x240>)
 8001b82:	429d      	cmp	r5, r3
 8001b84:	d11b      	bne.n	8001bbe <_vfiprintf_r+0x56>
 8001b86:	6875      	ldr	r5, [r6, #4]
 8001b88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b8a:	07d9      	lsls	r1, r3, #31
 8001b8c:	d405      	bmi.n	8001b9a <_vfiprintf_r+0x32>
 8001b8e:	89ab      	ldrh	r3, [r5, #12]
 8001b90:	059a      	lsls	r2, r3, #22
 8001b92:	d402      	bmi.n	8001b9a <_vfiprintf_r+0x32>
 8001b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b96:	f7ff feb1 	bl	80018fc <__retarget_lock_acquire_recursive>
 8001b9a:	89ab      	ldrh	r3, [r5, #12]
 8001b9c:	071b      	lsls	r3, r3, #28
 8001b9e:	d501      	bpl.n	8001ba4 <_vfiprintf_r+0x3c>
 8001ba0:	692b      	ldr	r3, [r5, #16]
 8001ba2:	b9eb      	cbnz	r3, 8001be0 <_vfiprintf_r+0x78>
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	4630      	mov	r0, r6
 8001ba8:	f7ff fc82 	bl	80014b0 <__swsetup_r>
 8001bac:	b1c0      	cbz	r0, 8001be0 <_vfiprintf_r+0x78>
 8001bae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001bb0:	07dc      	lsls	r4, r3, #31
 8001bb2:	d50e      	bpl.n	8001bd2 <_vfiprintf_r+0x6a>
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	b01d      	add	sp, #116	; 0x74
 8001bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bbe:	4b7b      	ldr	r3, [pc, #492]	; (8001dac <_vfiprintf_r+0x244>)
 8001bc0:	429d      	cmp	r5, r3
 8001bc2:	d101      	bne.n	8001bc8 <_vfiprintf_r+0x60>
 8001bc4:	68b5      	ldr	r5, [r6, #8]
 8001bc6:	e7df      	b.n	8001b88 <_vfiprintf_r+0x20>
 8001bc8:	4b79      	ldr	r3, [pc, #484]	; (8001db0 <_vfiprintf_r+0x248>)
 8001bca:	429d      	cmp	r5, r3
 8001bcc:	bf08      	it	eq
 8001bce:	68f5      	ldreq	r5, [r6, #12]
 8001bd0:	e7da      	b.n	8001b88 <_vfiprintf_r+0x20>
 8001bd2:	89ab      	ldrh	r3, [r5, #12]
 8001bd4:	0598      	lsls	r0, r3, #22
 8001bd6:	d4ed      	bmi.n	8001bb4 <_vfiprintf_r+0x4c>
 8001bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001bda:	f7ff fe90 	bl	80018fe <__retarget_lock_release_recursive>
 8001bde:	e7e9      	b.n	8001bb4 <_vfiprintf_r+0x4c>
 8001be0:	2300      	movs	r3, #0
 8001be2:	9309      	str	r3, [sp, #36]	; 0x24
 8001be4:	2320      	movs	r3, #32
 8001be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001bea:	f8cd 800c 	str.w	r8, [sp, #12]
 8001bee:	2330      	movs	r3, #48	; 0x30
 8001bf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001db4 <_vfiprintf_r+0x24c>
 8001bf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001bf8:	f04f 0901 	mov.w	r9, #1
 8001bfc:	4623      	mov	r3, r4
 8001bfe:	469a      	mov	sl, r3
 8001c00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c04:	b10a      	cbz	r2, 8001c0a <_vfiprintf_r+0xa2>
 8001c06:	2a25      	cmp	r2, #37	; 0x25
 8001c08:	d1f9      	bne.n	8001bfe <_vfiprintf_r+0x96>
 8001c0a:	ebba 0b04 	subs.w	fp, sl, r4
 8001c0e:	d00b      	beq.n	8001c28 <_vfiprintf_r+0xc0>
 8001c10:	465b      	mov	r3, fp
 8001c12:	4622      	mov	r2, r4
 8001c14:	4629      	mov	r1, r5
 8001c16:	4630      	mov	r0, r6
 8001c18:	f7ff ff93 	bl	8001b42 <__sfputs_r>
 8001c1c:	3001      	adds	r0, #1
 8001c1e:	f000 80aa 	beq.w	8001d76 <_vfiprintf_r+0x20e>
 8001c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c24:	445a      	add	r2, fp
 8001c26:	9209      	str	r2, [sp, #36]	; 0x24
 8001c28:	f89a 3000 	ldrb.w	r3, [sl]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80a2 	beq.w	8001d76 <_vfiprintf_r+0x20e>
 8001c32:	2300      	movs	r3, #0
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c3c:	f10a 0a01 	add.w	sl, sl, #1
 8001c40:	9304      	str	r3, [sp, #16]
 8001c42:	9307      	str	r3, [sp, #28]
 8001c44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c48:	931a      	str	r3, [sp, #104]	; 0x68
 8001c4a:	4654      	mov	r4, sl
 8001c4c:	2205      	movs	r2, #5
 8001c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c52:	4858      	ldr	r0, [pc, #352]	; (8001db4 <_vfiprintf_r+0x24c>)
 8001c54:	f7fe facc 	bl	80001f0 <memchr>
 8001c58:	9a04      	ldr	r2, [sp, #16]
 8001c5a:	b9d8      	cbnz	r0, 8001c94 <_vfiprintf_r+0x12c>
 8001c5c:	06d1      	lsls	r1, r2, #27
 8001c5e:	bf44      	itt	mi
 8001c60:	2320      	movmi	r3, #32
 8001c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c66:	0713      	lsls	r3, r2, #28
 8001c68:	bf44      	itt	mi
 8001c6a:	232b      	movmi	r3, #43	; 0x2b
 8001c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c70:	f89a 3000 	ldrb.w	r3, [sl]
 8001c74:	2b2a      	cmp	r3, #42	; 0x2a
 8001c76:	d015      	beq.n	8001ca4 <_vfiprintf_r+0x13c>
 8001c78:	9a07      	ldr	r2, [sp, #28]
 8001c7a:	4654      	mov	r4, sl
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f04f 0c0a 	mov.w	ip, #10
 8001c82:	4621      	mov	r1, r4
 8001c84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c88:	3b30      	subs	r3, #48	; 0x30
 8001c8a:	2b09      	cmp	r3, #9
 8001c8c:	d94e      	bls.n	8001d2c <_vfiprintf_r+0x1c4>
 8001c8e:	b1b0      	cbz	r0, 8001cbe <_vfiprintf_r+0x156>
 8001c90:	9207      	str	r2, [sp, #28]
 8001c92:	e014      	b.n	8001cbe <_vfiprintf_r+0x156>
 8001c94:	eba0 0308 	sub.w	r3, r0, r8
 8001c98:	fa09 f303 	lsl.w	r3, r9, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	9304      	str	r3, [sp, #16]
 8001ca0:	46a2      	mov	sl, r4
 8001ca2:	e7d2      	b.n	8001c4a <_vfiprintf_r+0xe2>
 8001ca4:	9b03      	ldr	r3, [sp, #12]
 8001ca6:	1d19      	adds	r1, r3, #4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	9103      	str	r1, [sp, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bfbb      	ittet	lt
 8001cb0:	425b      	neglt	r3, r3
 8001cb2:	f042 0202 	orrlt.w	r2, r2, #2
 8001cb6:	9307      	strge	r3, [sp, #28]
 8001cb8:	9307      	strlt	r3, [sp, #28]
 8001cba:	bfb8      	it	lt
 8001cbc:	9204      	strlt	r2, [sp, #16]
 8001cbe:	7823      	ldrb	r3, [r4, #0]
 8001cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8001cc2:	d10c      	bne.n	8001cde <_vfiprintf_r+0x176>
 8001cc4:	7863      	ldrb	r3, [r4, #1]
 8001cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8001cc8:	d135      	bne.n	8001d36 <_vfiprintf_r+0x1ce>
 8001cca:	9b03      	ldr	r3, [sp, #12]
 8001ccc:	1d1a      	adds	r2, r3, #4
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	9203      	str	r2, [sp, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bfb8      	it	lt
 8001cd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8001cda:	3402      	adds	r4, #2
 8001cdc:	9305      	str	r3, [sp, #20]
 8001cde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001dc4 <_vfiprintf_r+0x25c>
 8001ce2:	7821      	ldrb	r1, [r4, #0]
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	4650      	mov	r0, sl
 8001ce8:	f7fe fa82 	bl	80001f0 <memchr>
 8001cec:	b140      	cbz	r0, 8001d00 <_vfiprintf_r+0x198>
 8001cee:	2340      	movs	r3, #64	; 0x40
 8001cf0:	eba0 000a 	sub.w	r0, r0, sl
 8001cf4:	fa03 f000 	lsl.w	r0, r3, r0
 8001cf8:	9b04      	ldr	r3, [sp, #16]
 8001cfa:	4303      	orrs	r3, r0
 8001cfc:	3401      	adds	r4, #1
 8001cfe:	9304      	str	r3, [sp, #16]
 8001d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d04:	482c      	ldr	r0, [pc, #176]	; (8001db8 <_vfiprintf_r+0x250>)
 8001d06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d0a:	2206      	movs	r2, #6
 8001d0c:	f7fe fa70 	bl	80001f0 <memchr>
 8001d10:	2800      	cmp	r0, #0
 8001d12:	d03f      	beq.n	8001d94 <_vfiprintf_r+0x22c>
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <_vfiprintf_r+0x254>)
 8001d16:	bb1b      	cbnz	r3, 8001d60 <_vfiprintf_r+0x1f8>
 8001d18:	9b03      	ldr	r3, [sp, #12]
 8001d1a:	3307      	adds	r3, #7
 8001d1c:	f023 0307 	bic.w	r3, r3, #7
 8001d20:	3308      	adds	r3, #8
 8001d22:	9303      	str	r3, [sp, #12]
 8001d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d26:	443b      	add	r3, r7
 8001d28:	9309      	str	r3, [sp, #36]	; 0x24
 8001d2a:	e767      	b.n	8001bfc <_vfiprintf_r+0x94>
 8001d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d30:	460c      	mov	r4, r1
 8001d32:	2001      	movs	r0, #1
 8001d34:	e7a5      	b.n	8001c82 <_vfiprintf_r+0x11a>
 8001d36:	2300      	movs	r3, #0
 8001d38:	3401      	adds	r4, #1
 8001d3a:	9305      	str	r3, [sp, #20]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f04f 0c0a 	mov.w	ip, #10
 8001d42:	4620      	mov	r0, r4
 8001d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d48:	3a30      	subs	r2, #48	; 0x30
 8001d4a:	2a09      	cmp	r2, #9
 8001d4c:	d903      	bls.n	8001d56 <_vfiprintf_r+0x1ee>
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0c5      	beq.n	8001cde <_vfiprintf_r+0x176>
 8001d52:	9105      	str	r1, [sp, #20]
 8001d54:	e7c3      	b.n	8001cde <_vfiprintf_r+0x176>
 8001d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e7f0      	b.n	8001d42 <_vfiprintf_r+0x1da>
 8001d60:	ab03      	add	r3, sp, #12
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	462a      	mov	r2, r5
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <_vfiprintf_r+0x258>)
 8001d68:	a904      	add	r1, sp, #16
 8001d6a:	4630      	mov	r0, r6
 8001d6c:	f3af 8000 	nop.w
 8001d70:	4607      	mov	r7, r0
 8001d72:	1c78      	adds	r0, r7, #1
 8001d74:	d1d6      	bne.n	8001d24 <_vfiprintf_r+0x1bc>
 8001d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d78:	07d9      	lsls	r1, r3, #31
 8001d7a:	d405      	bmi.n	8001d88 <_vfiprintf_r+0x220>
 8001d7c:	89ab      	ldrh	r3, [r5, #12]
 8001d7e:	059a      	lsls	r2, r3, #22
 8001d80:	d402      	bmi.n	8001d88 <_vfiprintf_r+0x220>
 8001d82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d84:	f7ff fdbb 	bl	80018fe <__retarget_lock_release_recursive>
 8001d88:	89ab      	ldrh	r3, [r5, #12]
 8001d8a:	065b      	lsls	r3, r3, #25
 8001d8c:	f53f af12 	bmi.w	8001bb4 <_vfiprintf_r+0x4c>
 8001d90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d92:	e711      	b.n	8001bb8 <_vfiprintf_r+0x50>
 8001d94:	ab03      	add	r3, sp, #12
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	462a      	mov	r2, r5
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <_vfiprintf_r+0x258>)
 8001d9c:	a904      	add	r1, sp, #16
 8001d9e:	4630      	mov	r0, r6
 8001da0:	f000 f880 	bl	8001ea4 <_printf_i>
 8001da4:	e7e4      	b.n	8001d70 <_vfiprintf_r+0x208>
 8001da6:	bf00      	nop
 8001da8:	0800267c 	.word	0x0800267c
 8001dac:	0800269c 	.word	0x0800269c
 8001db0:	0800265c 	.word	0x0800265c
 8001db4:	080026bc 	.word	0x080026bc
 8001db8:	080026c6 	.word	0x080026c6
 8001dbc:	00000000 	.word	0x00000000
 8001dc0:	08001b43 	.word	0x08001b43
 8001dc4:	080026c2 	.word	0x080026c2

08001dc8 <_printf_common>:
 8001dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dcc:	4616      	mov	r6, r2
 8001dce:	4699      	mov	r9, r3
 8001dd0:	688a      	ldr	r2, [r1, #8]
 8001dd2:	690b      	ldr	r3, [r1, #16]
 8001dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	bfb8      	it	lt
 8001ddc:	4613      	movlt	r3, r2
 8001dde:	6033      	str	r3, [r6, #0]
 8001de0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001de4:	4607      	mov	r7, r0
 8001de6:	460c      	mov	r4, r1
 8001de8:	b10a      	cbz	r2, 8001dee <_printf_common+0x26>
 8001dea:	3301      	adds	r3, #1
 8001dec:	6033      	str	r3, [r6, #0]
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	0699      	lsls	r1, r3, #26
 8001df2:	bf42      	ittt	mi
 8001df4:	6833      	ldrmi	r3, [r6, #0]
 8001df6:	3302      	addmi	r3, #2
 8001df8:	6033      	strmi	r3, [r6, #0]
 8001dfa:	6825      	ldr	r5, [r4, #0]
 8001dfc:	f015 0506 	ands.w	r5, r5, #6
 8001e00:	d106      	bne.n	8001e10 <_printf_common+0x48>
 8001e02:	f104 0a19 	add.w	sl, r4, #25
 8001e06:	68e3      	ldr	r3, [r4, #12]
 8001e08:	6832      	ldr	r2, [r6, #0]
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	42ab      	cmp	r3, r5
 8001e0e:	dc26      	bgt.n	8001e5e <_printf_common+0x96>
 8001e10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e14:	1e13      	subs	r3, r2, #0
 8001e16:	6822      	ldr	r2, [r4, #0]
 8001e18:	bf18      	it	ne
 8001e1a:	2301      	movne	r3, #1
 8001e1c:	0692      	lsls	r2, r2, #26
 8001e1e:	d42b      	bmi.n	8001e78 <_printf_common+0xb0>
 8001e20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e24:	4649      	mov	r1, r9
 8001e26:	4638      	mov	r0, r7
 8001e28:	47c0      	blx	r8
 8001e2a:	3001      	adds	r0, #1
 8001e2c:	d01e      	beq.n	8001e6c <_printf_common+0xa4>
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	68e5      	ldr	r5, [r4, #12]
 8001e32:	6832      	ldr	r2, [r6, #0]
 8001e34:	f003 0306 	and.w	r3, r3, #6
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	bf08      	it	eq
 8001e3c:	1aad      	subeq	r5, r5, r2
 8001e3e:	68a3      	ldr	r3, [r4, #8]
 8001e40:	6922      	ldr	r2, [r4, #16]
 8001e42:	bf0c      	ite	eq
 8001e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e48:	2500      	movne	r5, #0
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	bfc4      	itt	gt
 8001e4e:	1a9b      	subgt	r3, r3, r2
 8001e50:	18ed      	addgt	r5, r5, r3
 8001e52:	2600      	movs	r6, #0
 8001e54:	341a      	adds	r4, #26
 8001e56:	42b5      	cmp	r5, r6
 8001e58:	d11a      	bne.n	8001e90 <_printf_common+0xc8>
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	e008      	b.n	8001e70 <_printf_common+0xa8>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	4652      	mov	r2, sl
 8001e62:	4649      	mov	r1, r9
 8001e64:	4638      	mov	r0, r7
 8001e66:	47c0      	blx	r8
 8001e68:	3001      	adds	r0, #1
 8001e6a:	d103      	bne.n	8001e74 <_printf_common+0xac>
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e74:	3501      	adds	r5, #1
 8001e76:	e7c6      	b.n	8001e06 <_printf_common+0x3e>
 8001e78:	18e1      	adds	r1, r4, r3
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	2030      	movs	r0, #48	; 0x30
 8001e7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e82:	4422      	add	r2, r4
 8001e84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	e7c7      	b.n	8001e20 <_printf_common+0x58>
 8001e90:	2301      	movs	r3, #1
 8001e92:	4622      	mov	r2, r4
 8001e94:	4649      	mov	r1, r9
 8001e96:	4638      	mov	r0, r7
 8001e98:	47c0      	blx	r8
 8001e9a:	3001      	adds	r0, #1
 8001e9c:	d0e6      	beq.n	8001e6c <_printf_common+0xa4>
 8001e9e:	3601      	adds	r6, #1
 8001ea0:	e7d9      	b.n	8001e56 <_printf_common+0x8e>
	...

08001ea4 <_printf_i>:
 8001ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ea8:	460c      	mov	r4, r1
 8001eaa:	4691      	mov	r9, r2
 8001eac:	7e27      	ldrb	r7, [r4, #24]
 8001eae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001eb0:	2f78      	cmp	r7, #120	; 0x78
 8001eb2:	4680      	mov	r8, r0
 8001eb4:	469a      	mov	sl, r3
 8001eb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001eba:	d807      	bhi.n	8001ecc <_printf_i+0x28>
 8001ebc:	2f62      	cmp	r7, #98	; 0x62
 8001ebe:	d80a      	bhi.n	8001ed6 <_printf_i+0x32>
 8001ec0:	2f00      	cmp	r7, #0
 8001ec2:	f000 80d8 	beq.w	8002076 <_printf_i+0x1d2>
 8001ec6:	2f58      	cmp	r7, #88	; 0x58
 8001ec8:	f000 80a3 	beq.w	8002012 <_printf_i+0x16e>
 8001ecc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001ed0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ed4:	e03a      	b.n	8001f4c <_printf_i+0xa8>
 8001ed6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001eda:	2b15      	cmp	r3, #21
 8001edc:	d8f6      	bhi.n	8001ecc <_printf_i+0x28>
 8001ede:	a001      	add	r0, pc, #4	; (adr r0, 8001ee4 <_printf_i+0x40>)
 8001ee0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001ee4:	08001f3d 	.word	0x08001f3d
 8001ee8:	08001f51 	.word	0x08001f51
 8001eec:	08001ecd 	.word	0x08001ecd
 8001ef0:	08001ecd 	.word	0x08001ecd
 8001ef4:	08001ecd 	.word	0x08001ecd
 8001ef8:	08001ecd 	.word	0x08001ecd
 8001efc:	08001f51 	.word	0x08001f51
 8001f00:	08001ecd 	.word	0x08001ecd
 8001f04:	08001ecd 	.word	0x08001ecd
 8001f08:	08001ecd 	.word	0x08001ecd
 8001f0c:	08001ecd 	.word	0x08001ecd
 8001f10:	0800205d 	.word	0x0800205d
 8001f14:	08001f81 	.word	0x08001f81
 8001f18:	0800203f 	.word	0x0800203f
 8001f1c:	08001ecd 	.word	0x08001ecd
 8001f20:	08001ecd 	.word	0x08001ecd
 8001f24:	0800207f 	.word	0x0800207f
 8001f28:	08001ecd 	.word	0x08001ecd
 8001f2c:	08001f81 	.word	0x08001f81
 8001f30:	08001ecd 	.word	0x08001ecd
 8001f34:	08001ecd 	.word	0x08001ecd
 8001f38:	08002047 	.word	0x08002047
 8001f3c:	680b      	ldr	r3, [r1, #0]
 8001f3e:	1d1a      	adds	r2, r3, #4
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	600a      	str	r2, [r1, #0]
 8001f44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0a3      	b.n	8002098 <_printf_i+0x1f4>
 8001f50:	6825      	ldr	r5, [r4, #0]
 8001f52:	6808      	ldr	r0, [r1, #0]
 8001f54:	062e      	lsls	r6, r5, #24
 8001f56:	f100 0304 	add.w	r3, r0, #4
 8001f5a:	d50a      	bpl.n	8001f72 <_printf_i+0xce>
 8001f5c:	6805      	ldr	r5, [r0, #0]
 8001f5e:	600b      	str	r3, [r1, #0]
 8001f60:	2d00      	cmp	r5, #0
 8001f62:	da03      	bge.n	8001f6c <_printf_i+0xc8>
 8001f64:	232d      	movs	r3, #45	; 0x2d
 8001f66:	426d      	negs	r5, r5
 8001f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f6c:	485e      	ldr	r0, [pc, #376]	; (80020e8 <_printf_i+0x244>)
 8001f6e:	230a      	movs	r3, #10
 8001f70:	e019      	b.n	8001fa6 <_printf_i+0x102>
 8001f72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001f76:	6805      	ldr	r5, [r0, #0]
 8001f78:	600b      	str	r3, [r1, #0]
 8001f7a:	bf18      	it	ne
 8001f7c:	b22d      	sxthne	r5, r5
 8001f7e:	e7ef      	b.n	8001f60 <_printf_i+0xbc>
 8001f80:	680b      	ldr	r3, [r1, #0]
 8001f82:	6825      	ldr	r5, [r4, #0]
 8001f84:	1d18      	adds	r0, r3, #4
 8001f86:	6008      	str	r0, [r1, #0]
 8001f88:	0628      	lsls	r0, r5, #24
 8001f8a:	d501      	bpl.n	8001f90 <_printf_i+0xec>
 8001f8c:	681d      	ldr	r5, [r3, #0]
 8001f8e:	e002      	b.n	8001f96 <_printf_i+0xf2>
 8001f90:	0669      	lsls	r1, r5, #25
 8001f92:	d5fb      	bpl.n	8001f8c <_printf_i+0xe8>
 8001f94:	881d      	ldrh	r5, [r3, #0]
 8001f96:	4854      	ldr	r0, [pc, #336]	; (80020e8 <_printf_i+0x244>)
 8001f98:	2f6f      	cmp	r7, #111	; 0x6f
 8001f9a:	bf0c      	ite	eq
 8001f9c:	2308      	moveq	r3, #8
 8001f9e:	230a      	movne	r3, #10
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001fa6:	6866      	ldr	r6, [r4, #4]
 8001fa8:	60a6      	str	r6, [r4, #8]
 8001faa:	2e00      	cmp	r6, #0
 8001fac:	bfa2      	ittt	ge
 8001fae:	6821      	ldrge	r1, [r4, #0]
 8001fb0:	f021 0104 	bicge.w	r1, r1, #4
 8001fb4:	6021      	strge	r1, [r4, #0]
 8001fb6:	b90d      	cbnz	r5, 8001fbc <_printf_i+0x118>
 8001fb8:	2e00      	cmp	r6, #0
 8001fba:	d04d      	beq.n	8002058 <_printf_i+0x1b4>
 8001fbc:	4616      	mov	r6, r2
 8001fbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8001fc2:	fb03 5711 	mls	r7, r3, r1, r5
 8001fc6:	5dc7      	ldrb	r7, [r0, r7]
 8001fc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001fcc:	462f      	mov	r7, r5
 8001fce:	42bb      	cmp	r3, r7
 8001fd0:	460d      	mov	r5, r1
 8001fd2:	d9f4      	bls.n	8001fbe <_printf_i+0x11a>
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d10b      	bne.n	8001ff0 <_printf_i+0x14c>
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	07df      	lsls	r7, r3, #31
 8001fdc:	d508      	bpl.n	8001ff0 <_printf_i+0x14c>
 8001fde:	6923      	ldr	r3, [r4, #16]
 8001fe0:	6861      	ldr	r1, [r4, #4]
 8001fe2:	4299      	cmp	r1, r3
 8001fe4:	bfde      	ittt	le
 8001fe6:	2330      	movle	r3, #48	; 0x30
 8001fe8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001fec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001ff0:	1b92      	subs	r2, r2, r6
 8001ff2:	6122      	str	r2, [r4, #16]
 8001ff4:	f8cd a000 	str.w	sl, [sp]
 8001ff8:	464b      	mov	r3, r9
 8001ffa:	aa03      	add	r2, sp, #12
 8001ffc:	4621      	mov	r1, r4
 8001ffe:	4640      	mov	r0, r8
 8002000:	f7ff fee2 	bl	8001dc8 <_printf_common>
 8002004:	3001      	adds	r0, #1
 8002006:	d14c      	bne.n	80020a2 <_printf_i+0x1fe>
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	b004      	add	sp, #16
 800200e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002012:	4835      	ldr	r0, [pc, #212]	; (80020e8 <_printf_i+0x244>)
 8002014:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	680e      	ldr	r6, [r1, #0]
 800201c:	061f      	lsls	r7, r3, #24
 800201e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002022:	600e      	str	r6, [r1, #0]
 8002024:	d514      	bpl.n	8002050 <_printf_i+0x1ac>
 8002026:	07d9      	lsls	r1, r3, #31
 8002028:	bf44      	itt	mi
 800202a:	f043 0320 	orrmi.w	r3, r3, #32
 800202e:	6023      	strmi	r3, [r4, #0]
 8002030:	b91d      	cbnz	r5, 800203a <_printf_i+0x196>
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	f023 0320 	bic.w	r3, r3, #32
 8002038:	6023      	str	r3, [r4, #0]
 800203a:	2310      	movs	r3, #16
 800203c:	e7b0      	b.n	8001fa0 <_printf_i+0xfc>
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	f043 0320 	orr.w	r3, r3, #32
 8002044:	6023      	str	r3, [r4, #0]
 8002046:	2378      	movs	r3, #120	; 0x78
 8002048:	4828      	ldr	r0, [pc, #160]	; (80020ec <_printf_i+0x248>)
 800204a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800204e:	e7e3      	b.n	8002018 <_printf_i+0x174>
 8002050:	065e      	lsls	r6, r3, #25
 8002052:	bf48      	it	mi
 8002054:	b2ad      	uxthmi	r5, r5
 8002056:	e7e6      	b.n	8002026 <_printf_i+0x182>
 8002058:	4616      	mov	r6, r2
 800205a:	e7bb      	b.n	8001fd4 <_printf_i+0x130>
 800205c:	680b      	ldr	r3, [r1, #0]
 800205e:	6826      	ldr	r6, [r4, #0]
 8002060:	6960      	ldr	r0, [r4, #20]
 8002062:	1d1d      	adds	r5, r3, #4
 8002064:	600d      	str	r5, [r1, #0]
 8002066:	0635      	lsls	r5, r6, #24
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	d501      	bpl.n	8002070 <_printf_i+0x1cc>
 800206c:	6018      	str	r0, [r3, #0]
 800206e:	e002      	b.n	8002076 <_printf_i+0x1d2>
 8002070:	0671      	lsls	r1, r6, #25
 8002072:	d5fb      	bpl.n	800206c <_printf_i+0x1c8>
 8002074:	8018      	strh	r0, [r3, #0]
 8002076:	2300      	movs	r3, #0
 8002078:	6123      	str	r3, [r4, #16]
 800207a:	4616      	mov	r6, r2
 800207c:	e7ba      	b.n	8001ff4 <_printf_i+0x150>
 800207e:	680b      	ldr	r3, [r1, #0]
 8002080:	1d1a      	adds	r2, r3, #4
 8002082:	600a      	str	r2, [r1, #0]
 8002084:	681e      	ldr	r6, [r3, #0]
 8002086:	6862      	ldr	r2, [r4, #4]
 8002088:	2100      	movs	r1, #0
 800208a:	4630      	mov	r0, r6
 800208c:	f7fe f8b0 	bl	80001f0 <memchr>
 8002090:	b108      	cbz	r0, 8002096 <_printf_i+0x1f2>
 8002092:	1b80      	subs	r0, r0, r6
 8002094:	6060      	str	r0, [r4, #4]
 8002096:	6863      	ldr	r3, [r4, #4]
 8002098:	6123      	str	r3, [r4, #16]
 800209a:	2300      	movs	r3, #0
 800209c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020a0:	e7a8      	b.n	8001ff4 <_printf_i+0x150>
 80020a2:	6923      	ldr	r3, [r4, #16]
 80020a4:	4632      	mov	r2, r6
 80020a6:	4649      	mov	r1, r9
 80020a8:	4640      	mov	r0, r8
 80020aa:	47d0      	blx	sl
 80020ac:	3001      	adds	r0, #1
 80020ae:	d0ab      	beq.n	8002008 <_printf_i+0x164>
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	079b      	lsls	r3, r3, #30
 80020b4:	d413      	bmi.n	80020de <_printf_i+0x23a>
 80020b6:	68e0      	ldr	r0, [r4, #12]
 80020b8:	9b03      	ldr	r3, [sp, #12]
 80020ba:	4298      	cmp	r0, r3
 80020bc:	bfb8      	it	lt
 80020be:	4618      	movlt	r0, r3
 80020c0:	e7a4      	b.n	800200c <_printf_i+0x168>
 80020c2:	2301      	movs	r3, #1
 80020c4:	4632      	mov	r2, r6
 80020c6:	4649      	mov	r1, r9
 80020c8:	4640      	mov	r0, r8
 80020ca:	47d0      	blx	sl
 80020cc:	3001      	adds	r0, #1
 80020ce:	d09b      	beq.n	8002008 <_printf_i+0x164>
 80020d0:	3501      	adds	r5, #1
 80020d2:	68e3      	ldr	r3, [r4, #12]
 80020d4:	9903      	ldr	r1, [sp, #12]
 80020d6:	1a5b      	subs	r3, r3, r1
 80020d8:	42ab      	cmp	r3, r5
 80020da:	dcf2      	bgt.n	80020c2 <_printf_i+0x21e>
 80020dc:	e7eb      	b.n	80020b6 <_printf_i+0x212>
 80020de:	2500      	movs	r5, #0
 80020e0:	f104 0619 	add.w	r6, r4, #25
 80020e4:	e7f5      	b.n	80020d2 <_printf_i+0x22e>
 80020e6:	bf00      	nop
 80020e8:	080026cd 	.word	0x080026cd
 80020ec:	080026de 	.word	0x080026de

080020f0 <_sbrk_r>:
 80020f0:	b538      	push	{r3, r4, r5, lr}
 80020f2:	4d06      	ldr	r5, [pc, #24]	; (800210c <_sbrk_r+0x1c>)
 80020f4:	2300      	movs	r3, #0
 80020f6:	4604      	mov	r4, r0
 80020f8:	4608      	mov	r0, r1
 80020fa:	602b      	str	r3, [r5, #0]
 80020fc:	f7fe fa12 	bl	8000524 <_sbrk>
 8002100:	1c43      	adds	r3, r0, #1
 8002102:	d102      	bne.n	800210a <_sbrk_r+0x1a>
 8002104:	682b      	ldr	r3, [r5, #0]
 8002106:	b103      	cbz	r3, 800210a <_sbrk_r+0x1a>
 8002108:	6023      	str	r3, [r4, #0]
 800210a:	bd38      	pop	{r3, r4, r5, pc}
 800210c:	200004d0 	.word	0x200004d0

08002110 <__sread>:
 8002110:	b510      	push	{r4, lr}
 8002112:	460c      	mov	r4, r1
 8002114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002118:	f000 f8a0 	bl	800225c <_read_r>
 800211c:	2800      	cmp	r0, #0
 800211e:	bfab      	itete	ge
 8002120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002122:	89a3      	ldrhlt	r3, [r4, #12]
 8002124:	181b      	addge	r3, r3, r0
 8002126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800212a:	bfac      	ite	ge
 800212c:	6563      	strge	r3, [r4, #84]	; 0x54
 800212e:	81a3      	strhlt	r3, [r4, #12]
 8002130:	bd10      	pop	{r4, pc}

08002132 <__swrite>:
 8002132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002136:	461f      	mov	r7, r3
 8002138:	898b      	ldrh	r3, [r1, #12]
 800213a:	05db      	lsls	r3, r3, #23
 800213c:	4605      	mov	r5, r0
 800213e:	460c      	mov	r4, r1
 8002140:	4616      	mov	r6, r2
 8002142:	d505      	bpl.n	8002150 <__swrite+0x1e>
 8002144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002148:	2302      	movs	r3, #2
 800214a:	2200      	movs	r2, #0
 800214c:	f000 f868 	bl	8002220 <_lseek_r>
 8002150:	89a3      	ldrh	r3, [r4, #12]
 8002152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800215a:	81a3      	strh	r3, [r4, #12]
 800215c:	4632      	mov	r2, r6
 800215e:	463b      	mov	r3, r7
 8002160:	4628      	mov	r0, r5
 8002162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002166:	f000 b817 	b.w	8002198 <_write_r>

0800216a <__sseek>:
 800216a:	b510      	push	{r4, lr}
 800216c:	460c      	mov	r4, r1
 800216e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002172:	f000 f855 	bl	8002220 <_lseek_r>
 8002176:	1c43      	adds	r3, r0, #1
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	bf15      	itete	ne
 800217c:	6560      	strne	r0, [r4, #84]	; 0x54
 800217e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002186:	81a3      	strheq	r3, [r4, #12]
 8002188:	bf18      	it	ne
 800218a:	81a3      	strhne	r3, [r4, #12]
 800218c:	bd10      	pop	{r4, pc}

0800218e <__sclose>:
 800218e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002192:	f000 b813 	b.w	80021bc <_close_r>
	...

08002198 <_write_r>:
 8002198:	b538      	push	{r3, r4, r5, lr}
 800219a:	4d07      	ldr	r5, [pc, #28]	; (80021b8 <_write_r+0x20>)
 800219c:	4604      	mov	r4, r0
 800219e:	4608      	mov	r0, r1
 80021a0:	4611      	mov	r1, r2
 80021a2:	2200      	movs	r2, #0
 80021a4:	602a      	str	r2, [r5, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	f7fe f96f 	bl	800048a <_write>
 80021ac:	1c43      	adds	r3, r0, #1
 80021ae:	d102      	bne.n	80021b6 <_write_r+0x1e>
 80021b0:	682b      	ldr	r3, [r5, #0]
 80021b2:	b103      	cbz	r3, 80021b6 <_write_r+0x1e>
 80021b4:	6023      	str	r3, [r4, #0]
 80021b6:	bd38      	pop	{r3, r4, r5, pc}
 80021b8:	200004d0 	.word	0x200004d0

080021bc <_close_r>:
 80021bc:	b538      	push	{r3, r4, r5, lr}
 80021be:	4d06      	ldr	r5, [pc, #24]	; (80021d8 <_close_r+0x1c>)
 80021c0:	2300      	movs	r3, #0
 80021c2:	4604      	mov	r4, r0
 80021c4:	4608      	mov	r0, r1
 80021c6:	602b      	str	r3, [r5, #0]
 80021c8:	f7fe f97b 	bl	80004c2 <_close>
 80021cc:	1c43      	adds	r3, r0, #1
 80021ce:	d102      	bne.n	80021d6 <_close_r+0x1a>
 80021d0:	682b      	ldr	r3, [r5, #0]
 80021d2:	b103      	cbz	r3, 80021d6 <_close_r+0x1a>
 80021d4:	6023      	str	r3, [r4, #0]
 80021d6:	bd38      	pop	{r3, r4, r5, pc}
 80021d8:	200004d0 	.word	0x200004d0

080021dc <_fstat_r>:
 80021dc:	b538      	push	{r3, r4, r5, lr}
 80021de:	4d07      	ldr	r5, [pc, #28]	; (80021fc <_fstat_r+0x20>)
 80021e0:	2300      	movs	r3, #0
 80021e2:	4604      	mov	r4, r0
 80021e4:	4608      	mov	r0, r1
 80021e6:	4611      	mov	r1, r2
 80021e8:	602b      	str	r3, [r5, #0]
 80021ea:	f7fe f975 	bl	80004d8 <_fstat>
 80021ee:	1c43      	adds	r3, r0, #1
 80021f0:	d102      	bne.n	80021f8 <_fstat_r+0x1c>
 80021f2:	682b      	ldr	r3, [r5, #0]
 80021f4:	b103      	cbz	r3, 80021f8 <_fstat_r+0x1c>
 80021f6:	6023      	str	r3, [r4, #0]
 80021f8:	bd38      	pop	{r3, r4, r5, pc}
 80021fa:	bf00      	nop
 80021fc:	200004d0 	.word	0x200004d0

08002200 <_isatty_r>:
 8002200:	b538      	push	{r3, r4, r5, lr}
 8002202:	4d06      	ldr	r5, [pc, #24]	; (800221c <_isatty_r+0x1c>)
 8002204:	2300      	movs	r3, #0
 8002206:	4604      	mov	r4, r0
 8002208:	4608      	mov	r0, r1
 800220a:	602b      	str	r3, [r5, #0]
 800220c:	f7fe f973 	bl	80004f6 <_isatty>
 8002210:	1c43      	adds	r3, r0, #1
 8002212:	d102      	bne.n	800221a <_isatty_r+0x1a>
 8002214:	682b      	ldr	r3, [r5, #0]
 8002216:	b103      	cbz	r3, 800221a <_isatty_r+0x1a>
 8002218:	6023      	str	r3, [r4, #0]
 800221a:	bd38      	pop	{r3, r4, r5, pc}
 800221c:	200004d0 	.word	0x200004d0

08002220 <_lseek_r>:
 8002220:	b538      	push	{r3, r4, r5, lr}
 8002222:	4d07      	ldr	r5, [pc, #28]	; (8002240 <_lseek_r+0x20>)
 8002224:	4604      	mov	r4, r0
 8002226:	4608      	mov	r0, r1
 8002228:	4611      	mov	r1, r2
 800222a:	2200      	movs	r2, #0
 800222c:	602a      	str	r2, [r5, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	f7fe f96b 	bl	800050a <_lseek>
 8002234:	1c43      	adds	r3, r0, #1
 8002236:	d102      	bne.n	800223e <_lseek_r+0x1e>
 8002238:	682b      	ldr	r3, [r5, #0]
 800223a:	b103      	cbz	r3, 800223e <_lseek_r+0x1e>
 800223c:	6023      	str	r3, [r4, #0]
 800223e:	bd38      	pop	{r3, r4, r5, pc}
 8002240:	200004d0 	.word	0x200004d0

08002244 <__malloc_lock>:
 8002244:	4801      	ldr	r0, [pc, #4]	; (800224c <__malloc_lock+0x8>)
 8002246:	f7ff bb59 	b.w	80018fc <__retarget_lock_acquire_recursive>
 800224a:	bf00      	nop
 800224c:	200004c8 	.word	0x200004c8

08002250 <__malloc_unlock>:
 8002250:	4801      	ldr	r0, [pc, #4]	; (8002258 <__malloc_unlock+0x8>)
 8002252:	f7ff bb54 	b.w	80018fe <__retarget_lock_release_recursive>
 8002256:	bf00      	nop
 8002258:	200004c8 	.word	0x200004c8

0800225c <_read_r>:
 800225c:	b538      	push	{r3, r4, r5, lr}
 800225e:	4d07      	ldr	r5, [pc, #28]	; (800227c <_read_r+0x20>)
 8002260:	4604      	mov	r4, r0
 8002262:	4608      	mov	r0, r1
 8002264:	4611      	mov	r1, r2
 8002266:	2200      	movs	r2, #0
 8002268:	602a      	str	r2, [r5, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	f7fe f8f0 	bl	8000450 <_read>
 8002270:	1c43      	adds	r3, r0, #1
 8002272:	d102      	bne.n	800227a <_read_r+0x1e>
 8002274:	682b      	ldr	r3, [r5, #0]
 8002276:	b103      	cbz	r3, 800227a <_read_r+0x1e>
 8002278:	6023      	str	r3, [r4, #0]
 800227a:	bd38      	pop	{r3, r4, r5, pc}
 800227c:	200004d0 	.word	0x200004d0

08002280 <_init>:
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002282:	bf00      	nop
 8002284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002286:	bc08      	pop	{r3}
 8002288:	469e      	mov	lr, r3
 800228a:	4770      	bx	lr

0800228c <_fini>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	bf00      	nop
 8002290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002292:	bc08      	pop	{r3}
 8002294:	469e      	mov	lr, r3
 8002296:	4770      	bx	lr
