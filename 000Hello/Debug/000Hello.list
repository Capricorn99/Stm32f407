
000Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08001cb8  08001cb8  00011cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d5c  08001d5c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001d5c  08001d5c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d5c  08001d5c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d5c  08001d5c  00011d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d60  08001d60  00011d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000064  08001dc8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08001dc8  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000039b8  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000af6  00000000  00000000  00023a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000280  00000000  00000000  00024540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000218  00000000  00000000  000247c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036f2  00000000  00000000  000249d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002be3  00000000  00000000  000280ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000bd3f  00000000  00000000  0002acad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000369ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010e0  00000000  00000000  00036a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001ca0 	.word	0x08001ca0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08001ca0 	.word	0x08001ca0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <SPI2_GPIOInits+0x58>)
 8000298:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 800029a:	2302      	movs	r3, #2
 800029c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800029e:	2305      	movs	r3, #5
 80002a0:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 80002a2:	2300      	movs	r3, #0
 80002a4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002aa:	2302      	movs	r3, #2
 80002ac:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ae:	230d      	movs	r3, #13
 80002b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fa6b 	bl	8000790 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002ba:	230f      	movs	r3, #15
 80002bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fa65 	bl	8000790 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002c6:	230e      	movs	r3, #14
 80002c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fa5f 	bl	8000790 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002d2:	230c      	movs	r3, #12
 80002d4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fa59 	bl	8000790 <GPIO_Init>
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40020400 	.word	0x40020400

080002ec <SPI2_Inits>:

void SPI2_Inits(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <SPI2_Inits+0x40>)
 80002f2:	4a0f      	ldr	r2, [pc, #60]	; (8000330 <SPI2_Inits+0x44>)
 80002f4:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <SPI2_Inits+0x40>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <SPI2_Inits+0x40>)
 80002fe:	2201      	movs	r2, #1
 8000300:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;		// clock 8MHz
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <SPI2_Inits+0x40>)
 8000304:	2200      	movs	r2, #0
 8000306:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <SPI2_Inits+0x40>)
 800030a:	2200      	movs	r2, #0
 800030c:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <SPI2_Inits+0x40>)
 8000310:	2200      	movs	r2, #0
 8000312:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;					//CPHA 1
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <SPI2_Inits+0x40>)
 8000316:	2201      	movs	r2, #1
 8000318:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 800031a:	4b04      	ldr	r3, [pc, #16]	; (800032c <SPI2_Inits+0x40>)
 800031c:	2200      	movs	r2, #0
 800031e:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000320:	4802      	ldr	r0, [pc, #8]	; (800032c <SPI2_Inits+0x40>)
 8000322:	f000 fc40 	bl	8000ba6 <SPI_Init>
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000090 	.word	0x20000090
 8000330:	40003800 	.word	0x40003800

08000334 <main>:

int main (void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 800033a:	f7ff ffa9 	bl	8000290 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 800033e:	f7ff ffd5 	bl	80002ec <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000342:	2101      	movs	r1, #1
 8000344:	4808      	ldr	r0, [pc, #32]	; (8000368 <main+0x34>)
 8000346:	f000 fc13 	bl	8000b70 <SPI_SSOEConfig>
	uint8_t a=0;
 800034a:	2300      	movs	r3, #0
 800034c:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		ADE_ReadData(SPI2, &a, MODE, 2);
 800034e:	1df9      	adds	r1, r7, #7
 8000350:	2302      	movs	r3, #2
 8000352:	2209      	movs	r2, #9
 8000354:	4804      	ldr	r0, [pc, #16]	; (8000368 <main+0x34>)
 8000356:	f000 f8fa 	bl	800054e <ADE_ReadData>
		printf("DATA : %x \n", a);
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	4619      	mov	r1, r3
 800035e:	4803      	ldr	r0, [pc, #12]	; (800036c <main+0x38>)
 8000360:	f000 fd4c 	bl	8000dfc <iprintf>
		ADE_ReadData(SPI2, &a, MODE, 2);
 8000364:	e7f3      	b.n	800034e <main+0x1a>
 8000366:	bf00      	nop
 8000368:	40003800 	.word	0x40003800
 800036c:	08001cb8 	.word	0x08001cb8

08000370 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <ITM_SendChar+0x44>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a0d      	ldr	r2, [pc, #52]	; (80003b4 <ITM_SendChar+0x44>)
 8000380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000384:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <ITM_SendChar+0x48>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <ITM_SendChar+0x48>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000392:	bf00      	nop
 8000394:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0f8      	beq.n	8000394 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80003a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	6013      	str	r3, [r2, #0]
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	e000edfc 	.word	0xe000edfc
 80003b8:	e0000e00 	.word	0xe0000e00

080003bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]
 80003cc:	e00a      	b.n	80003e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003ce:	f3af 8000 	nop.w
 80003d2:	4601      	mov	r1, r0
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	1c5a      	adds	r2, r3, #1
 80003d8:	60ba      	str	r2, [r7, #8]
 80003da:	b2ca      	uxtb	r2, r1
 80003dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	3301      	adds	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	697a      	ldr	r2, [r7, #20]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	dbf0      	blt.n	80003ce <_read+0x12>
	}

return len;
 80003ec:	687b      	ldr	r3, [r7, #4]
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b086      	sub	sp, #24
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	60f8      	str	r0, [r7, #12]
 80003fe:	60b9      	str	r1, [r7, #8]
 8000400:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	e009      	b.n	800041c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	1c5a      	adds	r2, r3, #1
 800040c:	60ba      	str	r2, [r7, #8]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ffad 	bl	8000370 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	3301      	adds	r3, #1
 800041a:	617b      	str	r3, [r7, #20]
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	429a      	cmp	r2, r3
 8000422:	dbf1      	blt.n	8000408 <_write+0x12>
	}
	return len;
 8000424:	687b      	ldr	r3, [r7, #4]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3718      	adds	r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <_close>:

int _close(int file)
{
 800042e:	b480      	push	{r7}
 8000430:	b083      	sub	sp, #12
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
	return -1;
 8000436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000454:	605a      	str	r2, [r3, #4]
	return 0;
 8000456:	2300      	movs	r3, #0
}
 8000458:	4618      	mov	r0, r3
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr

08000462 <_isatty>:

int _isatty(int file)
{
 8000462:	b480      	push	{r7}
 8000464:	b083      	sub	sp, #12
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
	return 1;
 800046a:	2301      	movs	r3, #1
}
 800046c:	4618      	mov	r0, r3
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr

08000476 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000476:	b480      	push	{r7}
 8000478:	b085      	sub	sp, #20
 800047a:	af00      	add	r7, sp, #0
 800047c:	60f8      	str	r0, [r7, #12]
 800047e:	60b9      	str	r1, [r7, #8]
 8000480:	607a      	str	r2, [r7, #4]
	return 0;
 8000482:	2300      	movs	r3, #0
}
 8000484:	4618      	mov	r0, r3
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
	...

08000490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000498:	4a14      	ldr	r2, [pc, #80]	; (80004ec <_sbrk+0x5c>)
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <_sbrk+0x60>)
 800049c:	1ad3      	subs	r3, r2, r3
 800049e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <_sbrk+0x64>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d102      	bne.n	80004b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <_sbrk+0x64>)
 80004ae:	4a12      	ldr	r2, [pc, #72]	; (80004f8 <_sbrk+0x68>)
 80004b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <_sbrk+0x64>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	693a      	ldr	r2, [r7, #16]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d207      	bcs.n	80004d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c0:	f000 fc6a 	bl	8000d98 <__errno>
 80004c4:	4603      	mov	r3, r0
 80004c6:	220c      	movs	r2, #12
 80004c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ca:	f04f 33ff 	mov.w	r3, #4294967295
 80004ce:	e009      	b.n	80004e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <_sbrk+0x64>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <_sbrk+0x64>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4413      	add	r3, r2
 80004de:	4a05      	ldr	r2, [pc, #20]	; (80004f4 <_sbrk+0x64>)
 80004e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004e2:	68fb      	ldr	r3, [r7, #12]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20020000 	.word	0x20020000
 80004f0:	00000400 	.word	0x00000400
 80004f4:	20000080 	.word	0x20000080
 80004f8:	200002b8 	.word	0x200002b8

080004fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004fe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000500:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <LoopForever+0x6>)
  ldr r1, =_edata
 8000506:	490d      	ldr	r1, [pc, #52]	; (800053c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <LoopForever+0xe>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800051c:	4c0a      	ldr	r4, [pc, #40]	; (8000548 <LoopForever+0x16>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800052a:	f000 fc3b 	bl	8000da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052e:	f7ff ff01 	bl	8000334 <main>

08000532 <LoopForever>:

LoopForever:
    b LoopForever
 8000532:	e7fe      	b.n	8000532 <LoopForever>
  ldr   r0, =_estack
 8000534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800053c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000540:	08001d64 	.word	0x08001d64
  ldr r2, =_sbss
 8000544:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000548:	200002b4 	.word	0x200002b4

0800054c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC_IRQHandler>

0800054e <ADE_ReadData>:




void ADE_ReadData (SPI_RegDef_t *pSPIx,uint8_t *pRxBuffer, uint8_t address, uint32_t bytes_to_read)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b086      	sub	sp, #24
 8000552:	af00      	add	r7, sp, #0
 8000554:	60f8      	str	r0, [r7, #12]
 8000556:	60b9      	str	r1, [r7, #8]
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	4613      	mov	r3, r2
 800055c:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy_write = 0xff;
 800055e:	23ff      	movs	r3, #255	; 0xff
 8000560:	74fb      	strb	r3, [r7, #19]
	uint8_t dummy_read;
	SPI_PeripheralControl(pSPIx,ENABLE); //SS pin pull to low
 8000562:	2101      	movs	r1, #1
 8000564:	68f8      	ldr	r0, [r7, #12]
 8000566:	f000 fbfb 	bl	8000d60 <SPI_PeripheralControl>
	SPI_SendData(pSPIx, &address, 1);      //send address
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	2201      	movs	r2, #1
 800056e:	4619      	mov	r1, r3
 8000570:	68f8      	ldr	r0, [r7, #12]
 8000572:	f000 fb86 	bl	8000c82 <SPI_SendData>
	SPI_ReceiveData(pSPIx, &dummy_read, 1);	//clear RXNE flag
 8000576:	f107 0312 	add.w	r3, r7, #18
 800057a:	2201      	movs	r2, #1
 800057c:	4619      	mov	r1, r3
 800057e:	68f8      	ldr	r0, [r7, #12]
 8000580:	f000 fbb7 	bl	8000cf2 <SPI_ReceiveData>
	for (int i = 1; i <= bytes_to_read; i++)
 8000584:	2301      	movs	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	e00e      	b.n	80005a8 <ADE_ReadData+0x5a>
	{
		SPI_SendData(pSPIx, &dummy_write, 1);	//Send some dummy byte to fetch the response from the slave
 800058a:	f107 0313 	add.w	r3, r7, #19
 800058e:	2201      	movs	r2, #1
 8000590:	4619      	mov	r1, r3
 8000592:	68f8      	ldr	r0, [r7, #12]
 8000594:	f000 fb75 	bl	8000c82 <SPI_SendData>
		SPI_ReceiveData(pSPIx, pRxBuffer, bytes_to_read); //luu data received
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	68b9      	ldr	r1, [r7, #8]
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f000 fba8 	bl	8000cf2 <SPI_ReceiveData>
	for (int i = 1; i <= bytes_to_read; i++)
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d2ec      	bcs.n	800058a <ADE_ReadData+0x3c>
	}
	SPI_PeripheralControl(pSPIx, DISABLE); //SS pin pull to high
 80005b0:	2100      	movs	r1, #0
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f000 fbd4 	bl	8000d60 <SPI_PeripheralControl>
}
 80005b8:	bf00      	nop
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t*pGPIOx, uint8_t EnorDi)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d162      	bne.n	8000698 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a64      	ldr	r2, [pc, #400]	; (8000768 <GPIO_PeriClockControl+0x1a8>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d106      	bne.n	80005e8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80005da:	4b64      	ldr	r3, [pc, #400]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a63      	ldr	r2, [pc, #396]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80005e6:	e0b9      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a61      	ldr	r2, [pc, #388]	; (8000770 <GPIO_PeriClockControl+0x1b0>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d106      	bne.n	80005fe <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80005f0:	4b5e      	ldr	r3, [pc, #376]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 80005f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f4:	4a5d      	ldr	r2, [pc, #372]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 80005f6:	f043 0302 	orr.w	r3, r3, #2
 80005fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005fc:	e0ae      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a5c      	ldr	r2, [pc, #368]	; (8000774 <GPIO_PeriClockControl+0x1b4>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d106      	bne.n	8000614 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000606:	4b59      	ldr	r3, [pc, #356]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a58      	ldr	r2, [pc, #352]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000612:	e0a3      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a58      	ldr	r2, [pc, #352]	; (8000778 <GPIO_PeriClockControl+0x1b8>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d106      	bne.n	800062a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800061c:	4b53      	ldr	r3, [pc, #332]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000620:	4a52      	ldr	r2, [pc, #328]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 8000622:	f043 0308 	orr.w	r3, r3, #8
 8000626:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000628:	e098      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a53      	ldr	r2, [pc, #332]	; (800077c <GPIO_PeriClockControl+0x1bc>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d106      	bne.n	8000640 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000632:	4b4e      	ldr	r3, [pc, #312]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a4d      	ldr	r2, [pc, #308]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 8000638:	f043 0310 	orr.w	r3, r3, #16
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800063e:	e08d      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a4f      	ldr	r2, [pc, #316]	; (8000780 <GPIO_PeriClockControl+0x1c0>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d106      	bne.n	8000656 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000648:	4b48      	ldr	r3, [pc, #288]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	4a47      	ldr	r2, [pc, #284]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 800064e:	f043 0320 	orr.w	r3, r3, #32
 8000652:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000654:	e082      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a4a      	ldr	r2, [pc, #296]	; (8000784 <GPIO_PeriClockControl+0x1c4>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d106      	bne.n	800066c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800065e:	4b43      	ldr	r3, [pc, #268]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a42      	ldr	r2, [pc, #264]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 8000664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
}
 800066a:	e077      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a46      	ldr	r2, [pc, #280]	; (8000788 <GPIO_PeriClockControl+0x1c8>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d106      	bne.n	8000682 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000674:	4b3d      	ldr	r3, [pc, #244]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 8000676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000678:	4a3c      	ldr	r2, [pc, #240]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 800067a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000680:	e06c      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a41      	ldr	r2, [pc, #260]	; (800078c <GPIO_PeriClockControl+0x1cc>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d168      	bne.n	800075c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800068a:	4b38      	ldr	r3, [pc, #224]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a37      	ldr	r2, [pc, #220]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 8000690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000696:	e061      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a33      	ldr	r2, [pc, #204]	; (8000768 <GPIO_PeriClockControl+0x1a8>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d106      	bne.n	80006ae <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80006a0:	4b32      	ldr	r3, [pc, #200]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	4a31      	ldr	r2, [pc, #196]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 80006a6:	f023 0301 	bic.w	r3, r3, #1
 80006aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ac:	e056      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a2f      	ldr	r2, [pc, #188]	; (8000770 <GPIO_PeriClockControl+0x1b0>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d106      	bne.n	80006c4 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80006b6:	4b2d      	ldr	r3, [pc, #180]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a2c      	ldr	r2, [pc, #176]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 80006bc:	f023 0302 	bic.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006c2:	e04b      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a2b      	ldr	r2, [pc, #172]	; (8000774 <GPIO_PeriClockControl+0x1b4>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d106      	bne.n	80006da <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80006cc:	4b27      	ldr	r3, [pc, #156]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d0:	4a26      	ldr	r2, [pc, #152]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 80006d2:	f023 0304 	bic.w	r3, r3, #4
 80006d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006d8:	e040      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a26      	ldr	r2, [pc, #152]	; (8000778 <GPIO_PeriClockControl+0x1b8>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d106      	bne.n	80006f0 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80006e2:	4b22      	ldr	r3, [pc, #136]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a21      	ldr	r2, [pc, #132]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 80006e8:	f023 0308 	bic.w	r3, r3, #8
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ee:	e035      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a22      	ldr	r2, [pc, #136]	; (800077c <GPIO_PeriClockControl+0x1bc>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d106      	bne.n	8000706 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	4a1b      	ldr	r2, [pc, #108]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 80006fe:	f023 0310 	bic.w	r3, r3, #16
 8000702:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000704:	e02a      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <GPIO_PeriClockControl+0x1c0>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d106      	bne.n	800071c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a16      	ldr	r2, [pc, #88]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 8000714:	f023 0320 	bic.w	r3, r3, #32
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
}
 800071a:	e01f      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a19      	ldr	r2, [pc, #100]	; (8000784 <GPIO_PeriClockControl+0x1c4>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d106      	bne.n	8000732 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	4a10      	ldr	r2, [pc, #64]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 800072a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800072e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000730:	e014      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a14      	ldr	r2, [pc, #80]	; (8000788 <GPIO_PeriClockControl+0x1c8>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d106      	bne.n	8000748 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a0b      	ldr	r2, [pc, #44]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 8000740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000746:	e009      	b.n	800075c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a10      	ldr	r2, [pc, #64]	; (800078c <GPIO_PeriClockControl+0x1cc>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d105      	bne.n	800075c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	4a05      	ldr	r2, [pc, #20]	; (800076c <GPIO_PeriClockControl+0x1ac>)
 8000756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800075a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40020000 	.word	0x40020000
 800076c:	40023800 	.word	0x40023800
 8000770:	40020400 	.word	0x40020400
 8000774:	40020800 	.word	0x40020800
 8000778:	40020c00 	.word	0x40020c00
 800077c:	40021000 	.word	0x40021000
 8000780:	40021400 	.word	0x40021400
 8000784:	40021800 	.word	0x40021800
 8000788:	40021c00 	.word	0x40021c00
 800078c:	40022000 	.word	0x40022000

08000790 <GPIO_Init>:

/*
 * Init & De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2101      	movs	r1, #1
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff0c 	bl	80005c0 <GPIO_PeriClockControl>

	//1. configure the mode of gpio
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	795b      	ldrb	r3, [r3, #5]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d81f      	bhi.n	80007f0 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	795b      	ldrb	r3, [r3, #5]
 80007b4:	461a      	mov	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	791b      	ldrb	r3, [r3, #4]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	617b      	str	r3, [r7, #20]

		pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	4619      	mov	r1, r3
 80007ce:	2303      	movs	r3, #3
 80007d0:	408b      	lsls	r3, r1
 80007d2:	43db      	mvns	r3, r3
 80007d4:	4619      	mov	r1, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	400a      	ands	r2, r1
 80007dc:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx ->MODER |= temp; //setting
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	6819      	ldr	r1, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	430a      	orrs	r2, r1
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	e0c2      	b.n	8000976 <GPIO_Init+0x1e6>


	}else
	{
		//code later
		if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	795b      	ldrb	r3, [r3, #5]
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d817      	bhi.n	8000828 <GPIO_Init+0x98>
		{
			//1. configure the FTSR
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 80007f8:	4b47      	ldr	r3, [pc, #284]	; (8000918 <GPIO_Init+0x188>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	7912      	ldrb	r2, [r2, #4]
 8000800:	4611      	mov	r1, r2
 8000802:	2201      	movs	r2, #1
 8000804:	408a      	lsls	r2, r1
 8000806:	4611      	mov	r1, r2
 8000808:	4a43      	ldr	r2, [pc, #268]	; (8000918 <GPIO_Init+0x188>)
 800080a:	430b      	orrs	r3, r1
 800080c:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI ->RTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 800080e:	4b42      	ldr	r3, [pc, #264]	; (8000918 <GPIO_Init+0x188>)
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	7912      	ldrb	r2, [r2, #4]
 8000816:	4611      	mov	r1, r2
 8000818:	2201      	movs	r2, #1
 800081a:	408a      	lsls	r2, r1
 800081c:	43d2      	mvns	r2, r2
 800081e:	4611      	mov	r1, r2
 8000820:	4a3d      	ldr	r2, [pc, #244]	; (8000918 <GPIO_Init+0x188>)
 8000822:	400b      	ands	r3, r1
 8000824:	6093      	str	r3, [r2, #8]
 8000826:	e035      	b.n	8000894 <GPIO_Init+0x104>
		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	795b      	ldrb	r3, [r3, #5]
 800082c:	2b05      	cmp	r3, #5
 800082e:	d817      	bhi.n	8000860 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000830:	4b39      	ldr	r3, [pc, #228]	; (8000918 <GPIO_Init+0x188>)
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	7912      	ldrb	r2, [r2, #4]
 8000838:	4611      	mov	r1, r2
 800083a:	2201      	movs	r2, #1
 800083c:	408a      	lsls	r2, r1
 800083e:	4611      	mov	r1, r2
 8000840:	4a35      	ldr	r2, [pc, #212]	; (8000918 <GPIO_Init+0x188>)
 8000842:	430b      	orrs	r3, r1
 8000844:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000846:	4b34      	ldr	r3, [pc, #208]	; (8000918 <GPIO_Init+0x188>)
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	7912      	ldrb	r2, [r2, #4]
 800084e:	4611      	mov	r1, r2
 8000850:	2201      	movs	r2, #1
 8000852:	408a      	lsls	r2, r1
 8000854:	43d2      	mvns	r2, r2
 8000856:	4611      	mov	r1, r2
 8000858:	4a2f      	ldr	r2, [pc, #188]	; (8000918 <GPIO_Init+0x188>)
 800085a:	400b      	ands	r3, r1
 800085c:	60d3      	str	r3, [r2, #12]
 800085e:	e019      	b.n	8000894 <GPIO_Init+0x104>

		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	795b      	ldrb	r3, [r3, #5]
 8000864:	2b06      	cmp	r3, #6
 8000866:	d815      	bhi.n	8000894 <GPIO_Init+0x104>
		{
			//1. configure the both FTSR and RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000868:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <GPIO_Init+0x188>)
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	7912      	ldrb	r2, [r2, #4]
 8000870:	4611      	mov	r1, r2
 8000872:	2201      	movs	r2, #1
 8000874:	408a      	lsls	r2, r1
 8000876:	4611      	mov	r1, r2
 8000878:	4a27      	ldr	r2, [pc, #156]	; (8000918 <GPIO_Init+0x188>)
 800087a:	430b      	orrs	r3, r1
 800087c:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <GPIO_Init+0x188>)
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	7912      	ldrb	r2, [r2, #4]
 8000886:	4611      	mov	r1, r2
 8000888:	2201      	movs	r2, #1
 800088a:	408a      	lsls	r2, r1
 800088c:	4611      	mov	r1, r2
 800088e:	4a22      	ldr	r2, [pc, #136]	; (8000918 <GPIO_Init+0x188>)
 8000890:	430b      	orrs	r3, r1
 8000892:	60d3      	str	r3, [r2, #12]

		}

		//2. configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	791b      	ldrb	r3, [r3, #4]
 8000898:	089b      	lsrs	r3, r3, #2
 800089a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	791b      	ldrb	r3, [r3, #4]
 80008a0:	f003 0303 	and.w	r3, r3, #3
 80008a4:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <GPIO_Init+0x18c>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d045      	beq.n	800093c <GPIO_Init+0x1ac>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a1a      	ldr	r2, [pc, #104]	; (8000920 <GPIO_Init+0x190>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d02b      	beq.n	8000912 <GPIO_Init+0x182>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a19      	ldr	r2, [pc, #100]	; (8000924 <GPIO_Init+0x194>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d024      	beq.n	800090e <GPIO_Init+0x17e>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a17      	ldr	r2, [pc, #92]	; (8000928 <GPIO_Init+0x198>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d01d      	beq.n	800090a <GPIO_Init+0x17a>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a16      	ldr	r2, [pc, #88]	; (800092c <GPIO_Init+0x19c>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d016      	beq.n	8000906 <GPIO_Init+0x176>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <GPIO_Init+0x1a0>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d00f      	beq.n	8000902 <GPIO_Init+0x172>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a13      	ldr	r2, [pc, #76]	; (8000934 <GPIO_Init+0x1a4>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d008      	beq.n	80008fe <GPIO_Init+0x16e>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a11      	ldr	r2, [pc, #68]	; (8000938 <GPIO_Init+0x1a8>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d101      	bne.n	80008fa <GPIO_Init+0x16a>
 80008f6:	2307      	movs	r3, #7
 80008f8:	e021      	b.n	800093e <GPIO_Init+0x1ae>
 80008fa:	2300      	movs	r3, #0
 80008fc:	e01f      	b.n	800093e <GPIO_Init+0x1ae>
 80008fe:	2306      	movs	r3, #6
 8000900:	e01d      	b.n	800093e <GPIO_Init+0x1ae>
 8000902:	2305      	movs	r3, #5
 8000904:	e01b      	b.n	800093e <GPIO_Init+0x1ae>
 8000906:	2304      	movs	r3, #4
 8000908:	e019      	b.n	800093e <GPIO_Init+0x1ae>
 800090a:	2303      	movs	r3, #3
 800090c:	e017      	b.n	800093e <GPIO_Init+0x1ae>
 800090e:	2302      	movs	r3, #2
 8000910:	e015      	b.n	800093e <GPIO_Init+0x1ae>
 8000912:	2301      	movs	r3, #1
 8000914:	e013      	b.n	800093e <GPIO_Init+0x1ae>
 8000916:	bf00      	nop
 8000918:	40013c00 	.word	0x40013c00
 800091c:	40020000 	.word	0x40020000
 8000920:	40020400 	.word	0x40020400
 8000924:	40020800 	.word	0x40020800
 8000928:	40020c00 	.word	0x40020c00
 800092c:	40021000 	.word	0x40021000
 8000930:	40021400 	.word	0x40021400
 8000934:	40021800 	.word	0x40021800
 8000938:	40021c00 	.word	0x40021c00
 800093c:	2300      	movs	r3, #0
 800093e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000940:	4b5c      	ldr	r3, [pc, #368]	; (8000ab4 <GPIO_Init+0x324>)
 8000942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000944:	4a5b      	ldr	r2, [pc, #364]	; (8000ab4 <GPIO_Init+0x324>)
 8000946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]= portcode << (temp2*4);
 800094c:	7c7a      	ldrb	r2, [r7, #17]
 800094e:	7cbb      	ldrb	r3, [r7, #18]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	fa02 f103 	lsl.w	r1, r2, r3
 8000956:	4a58      	ldr	r2, [pc, #352]	; (8000ab8 <GPIO_Init+0x328>)
 8000958:	7cfb      	ldrb	r3, [r7, #19]
 800095a:	3302      	adds	r3, #2
 800095c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI ->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000960:	4b56      	ldr	r3, [pc, #344]	; (8000abc <GPIO_Init+0x32c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	7912      	ldrb	r2, [r2, #4]
 8000968:	4611      	mov	r1, r2
 800096a:	2201      	movs	r2, #1
 800096c:	408a      	lsls	r2, r1
 800096e:	4611      	mov	r1, r2
 8000970:	4a52      	ldr	r2, [pc, #328]	; (8000abc <GPIO_Init+0x32c>)
 8000972:	430b      	orrs	r3, r1
 8000974:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
	//2. configure the speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	799b      	ldrb	r3, [r3, #6]
 800097e:	461a      	mov	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	791b      	ldrb	r3, [r3, #4]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	791b      	ldrb	r3, [r3, #4]
 8000996:	4619      	mov	r1, r3
 8000998:	2303      	movs	r3, #3
 800099a:	408b      	lsls	r3, r1
 800099c:	43db      	mvns	r3, r3
 800099e:	4619      	mov	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	400a      	ands	r2, r1
 80009a6:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OSPEEDR |= temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	6899      	ldr	r1, [r3, #8]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	430a      	orrs	r2, r1
 80009b6:	609a      	str	r2, [r3, #8]

	temp =0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
	//3. configure the pu pd settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	79db      	ldrb	r3, [r3, #7]
 80009c0:	461a      	mov	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	791b      	ldrb	r3, [r3, #4]
 80009d8:	4619      	mov	r1, r3
 80009da:	2303      	movs	r3, #3
 80009dc:	408b      	lsls	r3, r1
 80009de:	43db      	mvns	r3, r3
 80009e0:	4619      	mov	r1, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	400a      	ands	r2, r1
 80009e8:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->PUPDR |= temp;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	68d9      	ldr	r1, [r3, #12]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	430a      	orrs	r2, r1
 80009f8:	60da      	str	r2, [r3, #12]

	temp =0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]

	//4. configure
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinoType << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	7a1b      	ldrb	r3, [r3, #8]
 8000a02:	461a      	mov	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	791b      	ldrb	r3, [r3, #4]
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x01 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	791b      	ldrb	r3, [r3, #4]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	408b      	lsls	r3, r1
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	4619      	mov	r1, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	400a      	ands	r2, r1
 8000a28:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OTYPER |= temp;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6859      	ldr	r1, [r3, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	430a      	orrs	r2, r1
 8000a38:	605a      	str	r2, [r3, #4]

	temp =0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]

	//5. configure
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	795b      	ldrb	r3, [r3, #5]
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d132      	bne.n	8000aac <GPIO_Init+0x31c>
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	791b      	ldrb	r3, [r3, #4]
 8000a4a:	08db      	lsrs	r3, r3, #3
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	791b      	ldrb	r3, [r3, #4]
 8000a54:	f003 0307 	and.w	r3, r3, #7
 8000a58:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	3208      	adds	r2, #8
 8000a62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	4619      	mov	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4011      	ands	r1, r2
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	3208      	adds	r2, #8
 8000a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	3208      	adds	r2, #8
 8000a8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	7a5b      	ldrb	r3, [r3, #9]
 8000a92:	4619      	mov	r1, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4311      	orrs	r1, r2
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	3208      	adds	r2, #8
 8000aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000aac:	bf00      	nop
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40013800 	.word	0x40013800
 8000abc:	40013c00 	.word	0x40013c00

08000ac0 <SPI_PeriClockControl>:
static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_RegDef_t*pSPIx, uint8_t EnorDi)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d120      	bne.n	8000b14 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a22      	ldr	r2, [pc, #136]	; (8000b60 <SPI_PeriClockControl+0xa0>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d106      	bne.n	8000ae8 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000ada:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <SPI_PeriClockControl+0xa4>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <SPI_PeriClockControl+0xa4>)
 8000ae0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI3_PCLK_DI();
		}
	}

}
 8000ae6:	e035      	b.n	8000b54 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a1f      	ldr	r2, [pc, #124]	; (8000b68 <SPI_PeriClockControl+0xa8>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d106      	bne.n	8000afe <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <SPI_PeriClockControl+0xa4>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <SPI_PeriClockControl+0xa4>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000afc:	e02a      	b.n	8000b54 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a1a      	ldr	r2, [pc, #104]	; (8000b6c <SPI_PeriClockControl+0xac>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d126      	bne.n	8000b54 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <SPI_PeriClockControl+0xa4>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a16      	ldr	r2, [pc, #88]	; (8000b64 <SPI_PeriClockControl+0xa4>)
 8000b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b12:	e01f      	b.n	8000b54 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <SPI_PeriClockControl+0xa0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d106      	bne.n	8000b2a <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <SPI_PeriClockControl+0xa4>)
 8000b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b20:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <SPI_PeriClockControl+0xa4>)
 8000b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b26:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b28:	e014      	b.n	8000b54 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <SPI_PeriClockControl+0xa8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d106      	bne.n	8000b40 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <SPI_PeriClockControl+0xa4>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <SPI_PeriClockControl+0xa4>)
 8000b38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b3e:	e009      	b.n	8000b54 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <SPI_PeriClockControl+0xac>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d105      	bne.n	8000b54 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <SPI_PeriClockControl+0xa4>)
 8000b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4c:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <SPI_PeriClockControl+0xa4>)
 8000b4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b52:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40013000 	.word	0x40013000
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40003800 	.word	0x40003800
 8000b6c:	40003c00 	.word	0x40003c00

08000b70 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d106      	bne.n	8000b90 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f043 0204 	orr.w	r2, r3, #4
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000b8e:	e005      	b.n	8000b9c <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f023 0204 	bic.w	r2, r3, #4
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	605a      	str	r2, [r3, #4]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <SPI_Init>:
/************************
 *
 */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff83 	bl	8000ac0 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	791b      	ldrb	r3, [r3, #4]
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	795b      	ldrb	r3, [r3, #5]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d104      	bne.n	8000bde <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e014      	b.n	8000c08 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	795b      	ldrb	r3, [r3, #5]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d104      	bne.n	8000bf0 <SPI_Init+0x4a>
	{
		//BIDI mode should be set
		tempreg |= ~(1<<SPI_CR1_BIDIMODE);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e00b      	b.n	8000c08 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	795b      	ldrb	r3, [r3, #5]
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d107      	bne.n	8000c08 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000bfe:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1<<SPI_CR1_RXONLY);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c06:	60fb      	str	r3, [r7, #12]
	}
	//3. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	799b      	ldrb	r3, [r3, #6]
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	79db      	ldrb	r3, [r3, #7]
 8000c1a:	02db      	lsls	r3, r3, #11
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7a1b      	ldrb	r3, [r3, #8]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7a5b      	ldrb	r3, [r3, #9]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7a9b      	ldrb	r3, [r3, #10]
 8000c42:	025b      	lsls	r3, r3, #9
 8000c44:	461a      	mov	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	601a      	str	r2, [r3, #0]
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <SPI_GetFlagStatus>:
/*************************
 *
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e000      	b.n	8000c78 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000c76:	2300      	movs	r3, #0

}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr

08000c82 <SPI_SendData>:
/**************************
 *
 */

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
	uint8_t temp = *pTxBuffer;
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	75fb      	strb	r3, [r7, #23]
	while(Len >0)
 8000c94:	e025      	b.n	8000ce2 <SPI_SendData+0x60>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000c96:	bf00      	nop
 8000c98:	2102      	movs	r1, #2
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f7ff ffde 	bl	8000c5c <SPI_GetFlagStatus>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f8      	beq.n	8000c98 <SPI_SendData+0x16>

		//2. check the DFF bit in CR1
		if ((pSPIx->CR1 & (1<< SPI_CR1_DFF)))
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00e      	beq.n	8000cd0 <SPI_SendData+0x4e>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	60da      	str	r2, [r3, #12]
			Len--;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	607b      	str	r3, [r7, #4]
			Len--;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	e008      	b.n	8000ce2 <SPI_SendData+0x60>
		}else
		{
			//8 bit DFF

			//pSPIx->DR = *pTxBuffer;
			pSPIx->DR = temp;
 8000cd0:	7dfa      	ldrb	r2, [r7, #23]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	60da      	str	r2, [r3, #12]

			Len--;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
	while(Len >0)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1d6      	bne.n	8000c96 <SPI_SendData+0x14>
		}
	}
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <SPI_ReceiveData>:
 * @return            -
 *
 * @Note              -
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000cfe:	e027      	b.n	8000d50 <SPI_ReceiveData+0x5e>
		{
			//1. wait until RXNE is set
			while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );
 8000d00:	bf00      	nop
 8000d02:	2101      	movs	r1, #1
 8000d04:	68f8      	ldr	r0, [r7, #12]
 8000d06:	f7ff ffa9 	bl	8000c5c <SPI_GetFlagStatus>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0f8      	beq.n	8000d02 <SPI_ReceiveData+0x10>

			//2. check the DFF bit in CR1
			if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d00e      	beq.n	8000d3a <SPI_ReceiveData+0x48>
			{
				//16 bit DFF
				//1. load the data from DR to Rxbuffer address
				 *((uint16_t*)pRxBuffer) = pSPIx->DR ;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	801a      	strh	r2, [r3, #0]
				Len--;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
				Len--;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	3301      	adds	r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	e00a      	b.n	8000d50 <SPI_ReceiveData+0x5e>
			}else
			{
				//8 bit DFF
				*(pRxBuffer) = pSPIx->DR ;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	701a      	strb	r2, [r3, #0]
				Len--;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1d4      	bne.n	8000d00 <SPI_ReceiveData+0xe>
			}
		}

}
 8000d56:	bf00      	nop
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <SPI_PeripheralControl>:
/**************************
 *
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d106      	bne.n	8000d80 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 8000d7e:	e005      	b.n	8000d8c <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
	...

08000d98 <__errno>:
 8000d98:	4b01      	ldr	r3, [pc, #4]	; (8000da0 <__errno+0x8>)
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000000 	.word	0x20000000

08000da4 <__libc_init_array>:
 8000da4:	b570      	push	{r4, r5, r6, lr}
 8000da6:	4d0d      	ldr	r5, [pc, #52]	; (8000ddc <__libc_init_array+0x38>)
 8000da8:	4c0d      	ldr	r4, [pc, #52]	; (8000de0 <__libc_init_array+0x3c>)
 8000daa:	1b64      	subs	r4, r4, r5
 8000dac:	10a4      	asrs	r4, r4, #2
 8000dae:	2600      	movs	r6, #0
 8000db0:	42a6      	cmp	r6, r4
 8000db2:	d109      	bne.n	8000dc8 <__libc_init_array+0x24>
 8000db4:	4d0b      	ldr	r5, [pc, #44]	; (8000de4 <__libc_init_array+0x40>)
 8000db6:	4c0c      	ldr	r4, [pc, #48]	; (8000de8 <__libc_init_array+0x44>)
 8000db8:	f000 ff72 	bl	8001ca0 <_init>
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	10a4      	asrs	r4, r4, #2
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	42a6      	cmp	r6, r4
 8000dc4:	d105      	bne.n	8000dd2 <__libc_init_array+0x2e>
 8000dc6:	bd70      	pop	{r4, r5, r6, pc}
 8000dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dcc:	4798      	blx	r3
 8000dce:	3601      	adds	r6, #1
 8000dd0:	e7ee      	b.n	8000db0 <__libc_init_array+0xc>
 8000dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dd6:	4798      	blx	r3
 8000dd8:	3601      	adds	r6, #1
 8000dda:	e7f2      	b.n	8000dc2 <__libc_init_array+0x1e>
 8000ddc:	08001d5c 	.word	0x08001d5c
 8000de0:	08001d5c 	.word	0x08001d5c
 8000de4:	08001d5c 	.word	0x08001d5c
 8000de8:	08001d60 	.word	0x08001d60

08000dec <memset>:
 8000dec:	4402      	add	r2, r0
 8000dee:	4603      	mov	r3, r0
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d100      	bne.n	8000df6 <memset+0xa>
 8000df4:	4770      	bx	lr
 8000df6:	f803 1b01 	strb.w	r1, [r3], #1
 8000dfa:	e7f9      	b.n	8000df0 <memset+0x4>

08000dfc <iprintf>:
 8000dfc:	b40f      	push	{r0, r1, r2, r3}
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <iprintf+0x2c>)
 8000e00:	b513      	push	{r0, r1, r4, lr}
 8000e02:	681c      	ldr	r4, [r3, #0]
 8000e04:	b124      	cbz	r4, 8000e10 <iprintf+0x14>
 8000e06:	69a3      	ldr	r3, [r4, #24]
 8000e08:	b913      	cbnz	r3, 8000e10 <iprintf+0x14>
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f000 f866 	bl	8000edc <__sinit>
 8000e10:	ab05      	add	r3, sp, #20
 8000e12:	9a04      	ldr	r2, [sp, #16]
 8000e14:	68a1      	ldr	r1, [r4, #8]
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f000 f981 	bl	8001120 <_vfiprintf_r>
 8000e1e:	b002      	add	sp, #8
 8000e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e24:	b004      	add	sp, #16
 8000e26:	4770      	bx	lr
 8000e28:	20000000 	.word	0x20000000

08000e2c <std>:
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	b510      	push	{r4, lr}
 8000e30:	4604      	mov	r4, r0
 8000e32:	e9c0 3300 	strd	r3, r3, [r0]
 8000e36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e3a:	6083      	str	r3, [r0, #8]
 8000e3c:	8181      	strh	r1, [r0, #12]
 8000e3e:	6643      	str	r3, [r0, #100]	; 0x64
 8000e40:	81c2      	strh	r2, [r0, #14]
 8000e42:	6183      	str	r3, [r0, #24]
 8000e44:	4619      	mov	r1, r3
 8000e46:	2208      	movs	r2, #8
 8000e48:	305c      	adds	r0, #92	; 0x5c
 8000e4a:	f7ff ffcf 	bl	8000dec <memset>
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <std+0x38>)
 8000e50:	6263      	str	r3, [r4, #36]	; 0x24
 8000e52:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <std+0x3c>)
 8000e54:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <std+0x40>)
 8000e58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <std+0x44>)
 8000e5c:	6224      	str	r4, [r4, #32]
 8000e5e:	6323      	str	r3, [r4, #48]	; 0x30
 8000e60:	bd10      	pop	{r4, pc}
 8000e62:	bf00      	nop
 8000e64:	080016c9 	.word	0x080016c9
 8000e68:	080016eb 	.word	0x080016eb
 8000e6c:	08001723 	.word	0x08001723
 8000e70:	08001747 	.word	0x08001747

08000e74 <_cleanup_r>:
 8000e74:	4901      	ldr	r1, [pc, #4]	; (8000e7c <_cleanup_r+0x8>)
 8000e76:	f000 b8af 	b.w	8000fd8 <_fwalk_reent>
 8000e7a:	bf00      	nop
 8000e7c:	08001a21 	.word	0x08001a21

08000e80 <__sfmoreglue>:
 8000e80:	b570      	push	{r4, r5, r6, lr}
 8000e82:	1e4a      	subs	r2, r1, #1
 8000e84:	2568      	movs	r5, #104	; 0x68
 8000e86:	4355      	muls	r5, r2
 8000e88:	460e      	mov	r6, r1
 8000e8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e8e:	f000 f8c5 	bl	800101c <_malloc_r>
 8000e92:	4604      	mov	r4, r0
 8000e94:	b140      	cbz	r0, 8000ea8 <__sfmoreglue+0x28>
 8000e96:	2100      	movs	r1, #0
 8000e98:	e9c0 1600 	strd	r1, r6, [r0]
 8000e9c:	300c      	adds	r0, #12
 8000e9e:	60a0      	str	r0, [r4, #8]
 8000ea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000ea4:	f7ff ffa2 	bl	8000dec <memset>
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	bd70      	pop	{r4, r5, r6, pc}

08000eac <__sfp_lock_acquire>:
 8000eac:	4801      	ldr	r0, [pc, #4]	; (8000eb4 <__sfp_lock_acquire+0x8>)
 8000eae:	f000 b8b3 	b.w	8001018 <__retarget_lock_acquire_recursive>
 8000eb2:	bf00      	nop
 8000eb4:	200002ac 	.word	0x200002ac

08000eb8 <__sfp_lock_release>:
 8000eb8:	4801      	ldr	r0, [pc, #4]	; (8000ec0 <__sfp_lock_release+0x8>)
 8000eba:	f000 b8ae 	b.w	800101a <__retarget_lock_release_recursive>
 8000ebe:	bf00      	nop
 8000ec0:	200002ac 	.word	0x200002ac

08000ec4 <__sinit_lock_acquire>:
 8000ec4:	4801      	ldr	r0, [pc, #4]	; (8000ecc <__sinit_lock_acquire+0x8>)
 8000ec6:	f000 b8a7 	b.w	8001018 <__retarget_lock_acquire_recursive>
 8000eca:	bf00      	nop
 8000ecc:	200002a7 	.word	0x200002a7

08000ed0 <__sinit_lock_release>:
 8000ed0:	4801      	ldr	r0, [pc, #4]	; (8000ed8 <__sinit_lock_release+0x8>)
 8000ed2:	f000 b8a2 	b.w	800101a <__retarget_lock_release_recursive>
 8000ed6:	bf00      	nop
 8000ed8:	200002a7 	.word	0x200002a7

08000edc <__sinit>:
 8000edc:	b510      	push	{r4, lr}
 8000ede:	4604      	mov	r4, r0
 8000ee0:	f7ff fff0 	bl	8000ec4 <__sinit_lock_acquire>
 8000ee4:	69a3      	ldr	r3, [r4, #24]
 8000ee6:	b11b      	cbz	r3, 8000ef0 <__sinit+0x14>
 8000ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000eec:	f7ff bff0 	b.w	8000ed0 <__sinit_lock_release>
 8000ef0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ef4:	6523      	str	r3, [r4, #80]	; 0x50
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <__sinit+0x68>)
 8000ef8:	4a13      	ldr	r2, [pc, #76]	; (8000f48 <__sinit+0x6c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	62a2      	str	r2, [r4, #40]	; 0x28
 8000efe:	42a3      	cmp	r3, r4
 8000f00:	bf04      	itt	eq
 8000f02:	2301      	moveq	r3, #1
 8000f04:	61a3      	streq	r3, [r4, #24]
 8000f06:	4620      	mov	r0, r4
 8000f08:	f000 f820 	bl	8000f4c <__sfp>
 8000f0c:	6060      	str	r0, [r4, #4]
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f000 f81c 	bl	8000f4c <__sfp>
 8000f14:	60a0      	str	r0, [r4, #8]
 8000f16:	4620      	mov	r0, r4
 8000f18:	f000 f818 	bl	8000f4c <__sfp>
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60e0      	str	r0, [r4, #12]
 8000f20:	2104      	movs	r1, #4
 8000f22:	6860      	ldr	r0, [r4, #4]
 8000f24:	f7ff ff82 	bl	8000e2c <std>
 8000f28:	68a0      	ldr	r0, [r4, #8]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2109      	movs	r1, #9
 8000f2e:	f7ff ff7d 	bl	8000e2c <std>
 8000f32:	68e0      	ldr	r0, [r4, #12]
 8000f34:	2202      	movs	r2, #2
 8000f36:	2112      	movs	r1, #18
 8000f38:	f7ff ff78 	bl	8000e2c <std>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	61a3      	str	r3, [r4, #24]
 8000f40:	e7d2      	b.n	8000ee8 <__sinit+0xc>
 8000f42:	bf00      	nop
 8000f44:	08001cc4 	.word	0x08001cc4
 8000f48:	08000e75 	.word	0x08000e75

08000f4c <__sfp>:
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	4607      	mov	r7, r0
 8000f50:	f7ff ffac 	bl	8000eac <__sfp_lock_acquire>
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <__sfp+0x84>)
 8000f56:	681e      	ldr	r6, [r3, #0]
 8000f58:	69b3      	ldr	r3, [r6, #24]
 8000f5a:	b913      	cbnz	r3, 8000f62 <__sfp+0x16>
 8000f5c:	4630      	mov	r0, r6
 8000f5e:	f7ff ffbd 	bl	8000edc <__sinit>
 8000f62:	3648      	adds	r6, #72	; 0x48
 8000f64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	d503      	bpl.n	8000f74 <__sfp+0x28>
 8000f6c:	6833      	ldr	r3, [r6, #0]
 8000f6e:	b30b      	cbz	r3, 8000fb4 <__sfp+0x68>
 8000f70:	6836      	ldr	r6, [r6, #0]
 8000f72:	e7f7      	b.n	8000f64 <__sfp+0x18>
 8000f74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f78:	b9d5      	cbnz	r5, 8000fb0 <__sfp+0x64>
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <__sfp+0x88>)
 8000f7c:	60e3      	str	r3, [r4, #12]
 8000f7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f82:	6665      	str	r5, [r4, #100]	; 0x64
 8000f84:	f000 f847 	bl	8001016 <__retarget_lock_init_recursive>
 8000f88:	f7ff ff96 	bl	8000eb8 <__sfp_lock_release>
 8000f8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f94:	6025      	str	r5, [r4, #0]
 8000f96:	61a5      	str	r5, [r4, #24]
 8000f98:	2208      	movs	r2, #8
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000fa0:	f7ff ff24 	bl	8000dec <memset>
 8000fa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000fa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000fac:	4620      	mov	r0, r4
 8000fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fb0:	3468      	adds	r4, #104	; 0x68
 8000fb2:	e7d9      	b.n	8000f68 <__sfp+0x1c>
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	4638      	mov	r0, r7
 8000fb8:	f7ff ff62 	bl	8000e80 <__sfmoreglue>
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	6030      	str	r0, [r6, #0]
 8000fc0:	2800      	cmp	r0, #0
 8000fc2:	d1d5      	bne.n	8000f70 <__sfp+0x24>
 8000fc4:	f7ff ff78 	bl	8000eb8 <__sfp_lock_release>
 8000fc8:	230c      	movs	r3, #12
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	e7ee      	b.n	8000fac <__sfp+0x60>
 8000fce:	bf00      	nop
 8000fd0:	08001cc4 	.word	0x08001cc4
 8000fd4:	ffff0001 	.word	0xffff0001

08000fd8 <_fwalk_reent>:
 8000fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fdc:	4606      	mov	r6, r0
 8000fde:	4688      	mov	r8, r1
 8000fe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000fe4:	2700      	movs	r7, #0
 8000fe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000fea:	f1b9 0901 	subs.w	r9, r9, #1
 8000fee:	d505      	bpl.n	8000ffc <_fwalk_reent+0x24>
 8000ff0:	6824      	ldr	r4, [r4, #0]
 8000ff2:	2c00      	cmp	r4, #0
 8000ff4:	d1f7      	bne.n	8000fe6 <_fwalk_reent+0xe>
 8000ff6:	4638      	mov	r0, r7
 8000ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ffc:	89ab      	ldrh	r3, [r5, #12]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d907      	bls.n	8001012 <_fwalk_reent+0x3a>
 8001002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001006:	3301      	adds	r3, #1
 8001008:	d003      	beq.n	8001012 <_fwalk_reent+0x3a>
 800100a:	4629      	mov	r1, r5
 800100c:	4630      	mov	r0, r6
 800100e:	47c0      	blx	r8
 8001010:	4307      	orrs	r7, r0
 8001012:	3568      	adds	r5, #104	; 0x68
 8001014:	e7e9      	b.n	8000fea <_fwalk_reent+0x12>

08001016 <__retarget_lock_init_recursive>:
 8001016:	4770      	bx	lr

08001018 <__retarget_lock_acquire_recursive>:
 8001018:	4770      	bx	lr

0800101a <__retarget_lock_release_recursive>:
 800101a:	4770      	bx	lr

0800101c <_malloc_r>:
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101e:	1ccd      	adds	r5, r1, #3
 8001020:	f025 0503 	bic.w	r5, r5, #3
 8001024:	3508      	adds	r5, #8
 8001026:	2d0c      	cmp	r5, #12
 8001028:	bf38      	it	cc
 800102a:	250c      	movcc	r5, #12
 800102c:	2d00      	cmp	r5, #0
 800102e:	4606      	mov	r6, r0
 8001030:	db01      	blt.n	8001036 <_malloc_r+0x1a>
 8001032:	42a9      	cmp	r1, r5
 8001034:	d903      	bls.n	800103e <_malloc_r+0x22>
 8001036:	230c      	movs	r3, #12
 8001038:	6033      	str	r3, [r6, #0]
 800103a:	2000      	movs	r0, #0
 800103c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800103e:	f000 fda1 	bl	8001b84 <__malloc_lock>
 8001042:	4921      	ldr	r1, [pc, #132]	; (80010c8 <_malloc_r+0xac>)
 8001044:	680a      	ldr	r2, [r1, #0]
 8001046:	4614      	mov	r4, r2
 8001048:	b99c      	cbnz	r4, 8001072 <_malloc_r+0x56>
 800104a:	4f20      	ldr	r7, [pc, #128]	; (80010cc <_malloc_r+0xb0>)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b923      	cbnz	r3, 800105a <_malloc_r+0x3e>
 8001050:	4621      	mov	r1, r4
 8001052:	4630      	mov	r0, r6
 8001054:	f000 fb28 	bl	80016a8 <_sbrk_r>
 8001058:	6038      	str	r0, [r7, #0]
 800105a:	4629      	mov	r1, r5
 800105c:	4630      	mov	r0, r6
 800105e:	f000 fb23 	bl	80016a8 <_sbrk_r>
 8001062:	1c43      	adds	r3, r0, #1
 8001064:	d123      	bne.n	80010ae <_malloc_r+0x92>
 8001066:	230c      	movs	r3, #12
 8001068:	6033      	str	r3, [r6, #0]
 800106a:	4630      	mov	r0, r6
 800106c:	f000 fd90 	bl	8001b90 <__malloc_unlock>
 8001070:	e7e3      	b.n	800103a <_malloc_r+0x1e>
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	1b5b      	subs	r3, r3, r5
 8001076:	d417      	bmi.n	80010a8 <_malloc_r+0x8c>
 8001078:	2b0b      	cmp	r3, #11
 800107a:	d903      	bls.n	8001084 <_malloc_r+0x68>
 800107c:	6023      	str	r3, [r4, #0]
 800107e:	441c      	add	r4, r3
 8001080:	6025      	str	r5, [r4, #0]
 8001082:	e004      	b.n	800108e <_malloc_r+0x72>
 8001084:	6863      	ldr	r3, [r4, #4]
 8001086:	42a2      	cmp	r2, r4
 8001088:	bf0c      	ite	eq
 800108a:	600b      	streq	r3, [r1, #0]
 800108c:	6053      	strne	r3, [r2, #4]
 800108e:	4630      	mov	r0, r6
 8001090:	f000 fd7e 	bl	8001b90 <__malloc_unlock>
 8001094:	f104 000b 	add.w	r0, r4, #11
 8001098:	1d23      	adds	r3, r4, #4
 800109a:	f020 0007 	bic.w	r0, r0, #7
 800109e:	1ac2      	subs	r2, r0, r3
 80010a0:	d0cc      	beq.n	800103c <_malloc_r+0x20>
 80010a2:	1a1b      	subs	r3, r3, r0
 80010a4:	50a3      	str	r3, [r4, r2]
 80010a6:	e7c9      	b.n	800103c <_malloc_r+0x20>
 80010a8:	4622      	mov	r2, r4
 80010aa:	6864      	ldr	r4, [r4, #4]
 80010ac:	e7cc      	b.n	8001048 <_malloc_r+0x2c>
 80010ae:	1cc4      	adds	r4, r0, #3
 80010b0:	f024 0403 	bic.w	r4, r4, #3
 80010b4:	42a0      	cmp	r0, r4
 80010b6:	d0e3      	beq.n	8001080 <_malloc_r+0x64>
 80010b8:	1a21      	subs	r1, r4, r0
 80010ba:	4630      	mov	r0, r6
 80010bc:	f000 faf4 	bl	80016a8 <_sbrk_r>
 80010c0:	3001      	adds	r0, #1
 80010c2:	d1dd      	bne.n	8001080 <_malloc_r+0x64>
 80010c4:	e7cf      	b.n	8001066 <_malloc_r+0x4a>
 80010c6:	bf00      	nop
 80010c8:	20000084 	.word	0x20000084
 80010cc:	20000088 	.word	0x20000088

080010d0 <__sfputc_r>:
 80010d0:	6893      	ldr	r3, [r2, #8]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	b410      	push	{r4}
 80010d8:	6093      	str	r3, [r2, #8]
 80010da:	da07      	bge.n	80010ec <__sfputc_r+0x1c>
 80010dc:	6994      	ldr	r4, [r2, #24]
 80010de:	42a3      	cmp	r3, r4
 80010e0:	db01      	blt.n	80010e6 <__sfputc_r+0x16>
 80010e2:	290a      	cmp	r1, #10
 80010e4:	d102      	bne.n	80010ec <__sfputc_r+0x1c>
 80010e6:	bc10      	pop	{r4}
 80010e8:	f000 bb32 	b.w	8001750 <__swbuf_r>
 80010ec:	6813      	ldr	r3, [r2, #0]
 80010ee:	1c58      	adds	r0, r3, #1
 80010f0:	6010      	str	r0, [r2, #0]
 80010f2:	7019      	strb	r1, [r3, #0]
 80010f4:	4608      	mov	r0, r1
 80010f6:	bc10      	pop	{r4}
 80010f8:	4770      	bx	lr

080010fa <__sfputs_r>:
 80010fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fc:	4606      	mov	r6, r0
 80010fe:	460f      	mov	r7, r1
 8001100:	4614      	mov	r4, r2
 8001102:	18d5      	adds	r5, r2, r3
 8001104:	42ac      	cmp	r4, r5
 8001106:	d101      	bne.n	800110c <__sfputs_r+0x12>
 8001108:	2000      	movs	r0, #0
 800110a:	e007      	b.n	800111c <__sfputs_r+0x22>
 800110c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001110:	463a      	mov	r2, r7
 8001112:	4630      	mov	r0, r6
 8001114:	f7ff ffdc 	bl	80010d0 <__sfputc_r>
 8001118:	1c43      	adds	r3, r0, #1
 800111a:	d1f3      	bne.n	8001104 <__sfputs_r+0xa>
 800111c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001120 <_vfiprintf_r>:
 8001120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001124:	460d      	mov	r5, r1
 8001126:	b09d      	sub	sp, #116	; 0x74
 8001128:	4614      	mov	r4, r2
 800112a:	4698      	mov	r8, r3
 800112c:	4606      	mov	r6, r0
 800112e:	b118      	cbz	r0, 8001138 <_vfiprintf_r+0x18>
 8001130:	6983      	ldr	r3, [r0, #24]
 8001132:	b90b      	cbnz	r3, 8001138 <_vfiprintf_r+0x18>
 8001134:	f7ff fed2 	bl	8000edc <__sinit>
 8001138:	4b89      	ldr	r3, [pc, #548]	; (8001360 <_vfiprintf_r+0x240>)
 800113a:	429d      	cmp	r5, r3
 800113c:	d11b      	bne.n	8001176 <_vfiprintf_r+0x56>
 800113e:	6875      	ldr	r5, [r6, #4]
 8001140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001142:	07d9      	lsls	r1, r3, #31
 8001144:	d405      	bmi.n	8001152 <_vfiprintf_r+0x32>
 8001146:	89ab      	ldrh	r3, [r5, #12]
 8001148:	059a      	lsls	r2, r3, #22
 800114a:	d402      	bmi.n	8001152 <_vfiprintf_r+0x32>
 800114c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800114e:	f7ff ff63 	bl	8001018 <__retarget_lock_acquire_recursive>
 8001152:	89ab      	ldrh	r3, [r5, #12]
 8001154:	071b      	lsls	r3, r3, #28
 8001156:	d501      	bpl.n	800115c <_vfiprintf_r+0x3c>
 8001158:	692b      	ldr	r3, [r5, #16]
 800115a:	b9eb      	cbnz	r3, 8001198 <_vfiprintf_r+0x78>
 800115c:	4629      	mov	r1, r5
 800115e:	4630      	mov	r0, r6
 8001160:	f000 fb5a 	bl	8001818 <__swsetup_r>
 8001164:	b1c0      	cbz	r0, 8001198 <_vfiprintf_r+0x78>
 8001166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001168:	07dc      	lsls	r4, r3, #31
 800116a:	d50e      	bpl.n	800118a <_vfiprintf_r+0x6a>
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	b01d      	add	sp, #116	; 0x74
 8001172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001176:	4b7b      	ldr	r3, [pc, #492]	; (8001364 <_vfiprintf_r+0x244>)
 8001178:	429d      	cmp	r5, r3
 800117a:	d101      	bne.n	8001180 <_vfiprintf_r+0x60>
 800117c:	68b5      	ldr	r5, [r6, #8]
 800117e:	e7df      	b.n	8001140 <_vfiprintf_r+0x20>
 8001180:	4b79      	ldr	r3, [pc, #484]	; (8001368 <_vfiprintf_r+0x248>)
 8001182:	429d      	cmp	r5, r3
 8001184:	bf08      	it	eq
 8001186:	68f5      	ldreq	r5, [r6, #12]
 8001188:	e7da      	b.n	8001140 <_vfiprintf_r+0x20>
 800118a:	89ab      	ldrh	r3, [r5, #12]
 800118c:	0598      	lsls	r0, r3, #22
 800118e:	d4ed      	bmi.n	800116c <_vfiprintf_r+0x4c>
 8001190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001192:	f7ff ff42 	bl	800101a <__retarget_lock_release_recursive>
 8001196:	e7e9      	b.n	800116c <_vfiprintf_r+0x4c>
 8001198:	2300      	movs	r3, #0
 800119a:	9309      	str	r3, [sp, #36]	; 0x24
 800119c:	2320      	movs	r3, #32
 800119e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80011a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80011a6:	2330      	movs	r3, #48	; 0x30
 80011a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800136c <_vfiprintf_r+0x24c>
 80011ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80011b0:	f04f 0901 	mov.w	r9, #1
 80011b4:	4623      	mov	r3, r4
 80011b6:	469a      	mov	sl, r3
 80011b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80011bc:	b10a      	cbz	r2, 80011c2 <_vfiprintf_r+0xa2>
 80011be:	2a25      	cmp	r2, #37	; 0x25
 80011c0:	d1f9      	bne.n	80011b6 <_vfiprintf_r+0x96>
 80011c2:	ebba 0b04 	subs.w	fp, sl, r4
 80011c6:	d00b      	beq.n	80011e0 <_vfiprintf_r+0xc0>
 80011c8:	465b      	mov	r3, fp
 80011ca:	4622      	mov	r2, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	4630      	mov	r0, r6
 80011d0:	f7ff ff93 	bl	80010fa <__sfputs_r>
 80011d4:	3001      	adds	r0, #1
 80011d6:	f000 80aa 	beq.w	800132e <_vfiprintf_r+0x20e>
 80011da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80011dc:	445a      	add	r2, fp
 80011de:	9209      	str	r2, [sp, #36]	; 0x24
 80011e0:	f89a 3000 	ldrb.w	r3, [sl]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80a2 	beq.w	800132e <_vfiprintf_r+0x20e>
 80011ea:	2300      	movs	r3, #0
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80011f4:	f10a 0a01 	add.w	sl, sl, #1
 80011f8:	9304      	str	r3, [sp, #16]
 80011fa:	9307      	str	r3, [sp, #28]
 80011fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001200:	931a      	str	r3, [sp, #104]	; 0x68
 8001202:	4654      	mov	r4, sl
 8001204:	2205      	movs	r2, #5
 8001206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800120a:	4858      	ldr	r0, [pc, #352]	; (800136c <_vfiprintf_r+0x24c>)
 800120c:	f7fe fff0 	bl	80001f0 <memchr>
 8001210:	9a04      	ldr	r2, [sp, #16]
 8001212:	b9d8      	cbnz	r0, 800124c <_vfiprintf_r+0x12c>
 8001214:	06d1      	lsls	r1, r2, #27
 8001216:	bf44      	itt	mi
 8001218:	2320      	movmi	r3, #32
 800121a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800121e:	0713      	lsls	r3, r2, #28
 8001220:	bf44      	itt	mi
 8001222:	232b      	movmi	r3, #43	; 0x2b
 8001224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001228:	f89a 3000 	ldrb.w	r3, [sl]
 800122c:	2b2a      	cmp	r3, #42	; 0x2a
 800122e:	d015      	beq.n	800125c <_vfiprintf_r+0x13c>
 8001230:	9a07      	ldr	r2, [sp, #28]
 8001232:	4654      	mov	r4, sl
 8001234:	2000      	movs	r0, #0
 8001236:	f04f 0c0a 	mov.w	ip, #10
 800123a:	4621      	mov	r1, r4
 800123c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001240:	3b30      	subs	r3, #48	; 0x30
 8001242:	2b09      	cmp	r3, #9
 8001244:	d94e      	bls.n	80012e4 <_vfiprintf_r+0x1c4>
 8001246:	b1b0      	cbz	r0, 8001276 <_vfiprintf_r+0x156>
 8001248:	9207      	str	r2, [sp, #28]
 800124a:	e014      	b.n	8001276 <_vfiprintf_r+0x156>
 800124c:	eba0 0308 	sub.w	r3, r0, r8
 8001250:	fa09 f303 	lsl.w	r3, r9, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	9304      	str	r3, [sp, #16]
 8001258:	46a2      	mov	sl, r4
 800125a:	e7d2      	b.n	8001202 <_vfiprintf_r+0xe2>
 800125c:	9b03      	ldr	r3, [sp, #12]
 800125e:	1d19      	adds	r1, r3, #4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	9103      	str	r1, [sp, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	bfbb      	ittet	lt
 8001268:	425b      	neglt	r3, r3
 800126a:	f042 0202 	orrlt.w	r2, r2, #2
 800126e:	9307      	strge	r3, [sp, #28]
 8001270:	9307      	strlt	r3, [sp, #28]
 8001272:	bfb8      	it	lt
 8001274:	9204      	strlt	r2, [sp, #16]
 8001276:	7823      	ldrb	r3, [r4, #0]
 8001278:	2b2e      	cmp	r3, #46	; 0x2e
 800127a:	d10c      	bne.n	8001296 <_vfiprintf_r+0x176>
 800127c:	7863      	ldrb	r3, [r4, #1]
 800127e:	2b2a      	cmp	r3, #42	; 0x2a
 8001280:	d135      	bne.n	80012ee <_vfiprintf_r+0x1ce>
 8001282:	9b03      	ldr	r3, [sp, #12]
 8001284:	1d1a      	adds	r2, r3, #4
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	9203      	str	r2, [sp, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	bfb8      	it	lt
 800128e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001292:	3402      	adds	r4, #2
 8001294:	9305      	str	r3, [sp, #20]
 8001296:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800137c <_vfiprintf_r+0x25c>
 800129a:	7821      	ldrb	r1, [r4, #0]
 800129c:	2203      	movs	r2, #3
 800129e:	4650      	mov	r0, sl
 80012a0:	f7fe ffa6 	bl	80001f0 <memchr>
 80012a4:	b140      	cbz	r0, 80012b8 <_vfiprintf_r+0x198>
 80012a6:	2340      	movs	r3, #64	; 0x40
 80012a8:	eba0 000a 	sub.w	r0, r0, sl
 80012ac:	fa03 f000 	lsl.w	r0, r3, r0
 80012b0:	9b04      	ldr	r3, [sp, #16]
 80012b2:	4303      	orrs	r3, r0
 80012b4:	3401      	adds	r4, #1
 80012b6:	9304      	str	r3, [sp, #16]
 80012b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012bc:	482c      	ldr	r0, [pc, #176]	; (8001370 <_vfiprintf_r+0x250>)
 80012be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80012c2:	2206      	movs	r2, #6
 80012c4:	f7fe ff94 	bl	80001f0 <memchr>
 80012c8:	2800      	cmp	r0, #0
 80012ca:	d03f      	beq.n	800134c <_vfiprintf_r+0x22c>
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <_vfiprintf_r+0x254>)
 80012ce:	bb1b      	cbnz	r3, 8001318 <_vfiprintf_r+0x1f8>
 80012d0:	9b03      	ldr	r3, [sp, #12]
 80012d2:	3307      	adds	r3, #7
 80012d4:	f023 0307 	bic.w	r3, r3, #7
 80012d8:	3308      	adds	r3, #8
 80012da:	9303      	str	r3, [sp, #12]
 80012dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012de:	443b      	add	r3, r7
 80012e0:	9309      	str	r3, [sp, #36]	; 0x24
 80012e2:	e767      	b.n	80011b4 <_vfiprintf_r+0x94>
 80012e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80012e8:	460c      	mov	r4, r1
 80012ea:	2001      	movs	r0, #1
 80012ec:	e7a5      	b.n	800123a <_vfiprintf_r+0x11a>
 80012ee:	2300      	movs	r3, #0
 80012f0:	3401      	adds	r4, #1
 80012f2:	9305      	str	r3, [sp, #20]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f04f 0c0a 	mov.w	ip, #10
 80012fa:	4620      	mov	r0, r4
 80012fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001300:	3a30      	subs	r2, #48	; 0x30
 8001302:	2a09      	cmp	r2, #9
 8001304:	d903      	bls.n	800130e <_vfiprintf_r+0x1ee>
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0c5      	beq.n	8001296 <_vfiprintf_r+0x176>
 800130a:	9105      	str	r1, [sp, #20]
 800130c:	e7c3      	b.n	8001296 <_vfiprintf_r+0x176>
 800130e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001312:	4604      	mov	r4, r0
 8001314:	2301      	movs	r3, #1
 8001316:	e7f0      	b.n	80012fa <_vfiprintf_r+0x1da>
 8001318:	ab03      	add	r3, sp, #12
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	462a      	mov	r2, r5
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <_vfiprintf_r+0x258>)
 8001320:	a904      	add	r1, sp, #16
 8001322:	4630      	mov	r0, r6
 8001324:	f3af 8000 	nop.w
 8001328:	4607      	mov	r7, r0
 800132a:	1c78      	adds	r0, r7, #1
 800132c:	d1d6      	bne.n	80012dc <_vfiprintf_r+0x1bc>
 800132e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001330:	07d9      	lsls	r1, r3, #31
 8001332:	d405      	bmi.n	8001340 <_vfiprintf_r+0x220>
 8001334:	89ab      	ldrh	r3, [r5, #12]
 8001336:	059a      	lsls	r2, r3, #22
 8001338:	d402      	bmi.n	8001340 <_vfiprintf_r+0x220>
 800133a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800133c:	f7ff fe6d 	bl	800101a <__retarget_lock_release_recursive>
 8001340:	89ab      	ldrh	r3, [r5, #12]
 8001342:	065b      	lsls	r3, r3, #25
 8001344:	f53f af12 	bmi.w	800116c <_vfiprintf_r+0x4c>
 8001348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800134a:	e711      	b.n	8001170 <_vfiprintf_r+0x50>
 800134c:	ab03      	add	r3, sp, #12
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	462a      	mov	r2, r5
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <_vfiprintf_r+0x258>)
 8001354:	a904      	add	r1, sp, #16
 8001356:	4630      	mov	r0, r6
 8001358:	f000 f880 	bl	800145c <_printf_i>
 800135c:	e7e4      	b.n	8001328 <_vfiprintf_r+0x208>
 800135e:	bf00      	nop
 8001360:	08001ce8 	.word	0x08001ce8
 8001364:	08001d08 	.word	0x08001d08
 8001368:	08001cc8 	.word	0x08001cc8
 800136c:	08001d28 	.word	0x08001d28
 8001370:	08001d32 	.word	0x08001d32
 8001374:	00000000 	.word	0x00000000
 8001378:	080010fb 	.word	0x080010fb
 800137c:	08001d2e 	.word	0x08001d2e

08001380 <_printf_common>:
 8001380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001384:	4616      	mov	r6, r2
 8001386:	4699      	mov	r9, r3
 8001388:	688a      	ldr	r2, [r1, #8]
 800138a:	690b      	ldr	r3, [r1, #16]
 800138c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001390:	4293      	cmp	r3, r2
 8001392:	bfb8      	it	lt
 8001394:	4613      	movlt	r3, r2
 8001396:	6033      	str	r3, [r6, #0]
 8001398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800139c:	4607      	mov	r7, r0
 800139e:	460c      	mov	r4, r1
 80013a0:	b10a      	cbz	r2, 80013a6 <_printf_common+0x26>
 80013a2:	3301      	adds	r3, #1
 80013a4:	6033      	str	r3, [r6, #0]
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	0699      	lsls	r1, r3, #26
 80013aa:	bf42      	ittt	mi
 80013ac:	6833      	ldrmi	r3, [r6, #0]
 80013ae:	3302      	addmi	r3, #2
 80013b0:	6033      	strmi	r3, [r6, #0]
 80013b2:	6825      	ldr	r5, [r4, #0]
 80013b4:	f015 0506 	ands.w	r5, r5, #6
 80013b8:	d106      	bne.n	80013c8 <_printf_common+0x48>
 80013ba:	f104 0a19 	add.w	sl, r4, #25
 80013be:	68e3      	ldr	r3, [r4, #12]
 80013c0:	6832      	ldr	r2, [r6, #0]
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	42ab      	cmp	r3, r5
 80013c6:	dc26      	bgt.n	8001416 <_printf_common+0x96>
 80013c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80013cc:	1e13      	subs	r3, r2, #0
 80013ce:	6822      	ldr	r2, [r4, #0]
 80013d0:	bf18      	it	ne
 80013d2:	2301      	movne	r3, #1
 80013d4:	0692      	lsls	r2, r2, #26
 80013d6:	d42b      	bmi.n	8001430 <_printf_common+0xb0>
 80013d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80013dc:	4649      	mov	r1, r9
 80013de:	4638      	mov	r0, r7
 80013e0:	47c0      	blx	r8
 80013e2:	3001      	adds	r0, #1
 80013e4:	d01e      	beq.n	8001424 <_printf_common+0xa4>
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	68e5      	ldr	r5, [r4, #12]
 80013ea:	6832      	ldr	r2, [r6, #0]
 80013ec:	f003 0306 	and.w	r3, r3, #6
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	bf08      	it	eq
 80013f4:	1aad      	subeq	r5, r5, r2
 80013f6:	68a3      	ldr	r3, [r4, #8]
 80013f8:	6922      	ldr	r2, [r4, #16]
 80013fa:	bf0c      	ite	eq
 80013fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001400:	2500      	movne	r5, #0
 8001402:	4293      	cmp	r3, r2
 8001404:	bfc4      	itt	gt
 8001406:	1a9b      	subgt	r3, r3, r2
 8001408:	18ed      	addgt	r5, r5, r3
 800140a:	2600      	movs	r6, #0
 800140c:	341a      	adds	r4, #26
 800140e:	42b5      	cmp	r5, r6
 8001410:	d11a      	bne.n	8001448 <_printf_common+0xc8>
 8001412:	2000      	movs	r0, #0
 8001414:	e008      	b.n	8001428 <_printf_common+0xa8>
 8001416:	2301      	movs	r3, #1
 8001418:	4652      	mov	r2, sl
 800141a:	4649      	mov	r1, r9
 800141c:	4638      	mov	r0, r7
 800141e:	47c0      	blx	r8
 8001420:	3001      	adds	r0, #1
 8001422:	d103      	bne.n	800142c <_printf_common+0xac>
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800142c:	3501      	adds	r5, #1
 800142e:	e7c6      	b.n	80013be <_printf_common+0x3e>
 8001430:	18e1      	adds	r1, r4, r3
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	2030      	movs	r0, #48	; 0x30
 8001436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800143a:	4422      	add	r2, r4
 800143c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001444:	3302      	adds	r3, #2
 8001446:	e7c7      	b.n	80013d8 <_printf_common+0x58>
 8001448:	2301      	movs	r3, #1
 800144a:	4622      	mov	r2, r4
 800144c:	4649      	mov	r1, r9
 800144e:	4638      	mov	r0, r7
 8001450:	47c0      	blx	r8
 8001452:	3001      	adds	r0, #1
 8001454:	d0e6      	beq.n	8001424 <_printf_common+0xa4>
 8001456:	3601      	adds	r6, #1
 8001458:	e7d9      	b.n	800140e <_printf_common+0x8e>
	...

0800145c <_printf_i>:
 800145c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001460:	460c      	mov	r4, r1
 8001462:	4691      	mov	r9, r2
 8001464:	7e27      	ldrb	r7, [r4, #24]
 8001466:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001468:	2f78      	cmp	r7, #120	; 0x78
 800146a:	4680      	mov	r8, r0
 800146c:	469a      	mov	sl, r3
 800146e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001472:	d807      	bhi.n	8001484 <_printf_i+0x28>
 8001474:	2f62      	cmp	r7, #98	; 0x62
 8001476:	d80a      	bhi.n	800148e <_printf_i+0x32>
 8001478:	2f00      	cmp	r7, #0
 800147a:	f000 80d8 	beq.w	800162e <_printf_i+0x1d2>
 800147e:	2f58      	cmp	r7, #88	; 0x58
 8001480:	f000 80a3 	beq.w	80015ca <_printf_i+0x16e>
 8001484:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800148c:	e03a      	b.n	8001504 <_printf_i+0xa8>
 800148e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001492:	2b15      	cmp	r3, #21
 8001494:	d8f6      	bhi.n	8001484 <_printf_i+0x28>
 8001496:	a001      	add	r0, pc, #4	; (adr r0, 800149c <_printf_i+0x40>)
 8001498:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800149c:	080014f5 	.word	0x080014f5
 80014a0:	08001509 	.word	0x08001509
 80014a4:	08001485 	.word	0x08001485
 80014a8:	08001485 	.word	0x08001485
 80014ac:	08001485 	.word	0x08001485
 80014b0:	08001485 	.word	0x08001485
 80014b4:	08001509 	.word	0x08001509
 80014b8:	08001485 	.word	0x08001485
 80014bc:	08001485 	.word	0x08001485
 80014c0:	08001485 	.word	0x08001485
 80014c4:	08001485 	.word	0x08001485
 80014c8:	08001615 	.word	0x08001615
 80014cc:	08001539 	.word	0x08001539
 80014d0:	080015f7 	.word	0x080015f7
 80014d4:	08001485 	.word	0x08001485
 80014d8:	08001485 	.word	0x08001485
 80014dc:	08001637 	.word	0x08001637
 80014e0:	08001485 	.word	0x08001485
 80014e4:	08001539 	.word	0x08001539
 80014e8:	08001485 	.word	0x08001485
 80014ec:	08001485 	.word	0x08001485
 80014f0:	080015ff 	.word	0x080015ff
 80014f4:	680b      	ldr	r3, [r1, #0]
 80014f6:	1d1a      	adds	r2, r3, #4
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	600a      	str	r2, [r1, #0]
 80014fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001504:	2301      	movs	r3, #1
 8001506:	e0a3      	b.n	8001650 <_printf_i+0x1f4>
 8001508:	6825      	ldr	r5, [r4, #0]
 800150a:	6808      	ldr	r0, [r1, #0]
 800150c:	062e      	lsls	r6, r5, #24
 800150e:	f100 0304 	add.w	r3, r0, #4
 8001512:	d50a      	bpl.n	800152a <_printf_i+0xce>
 8001514:	6805      	ldr	r5, [r0, #0]
 8001516:	600b      	str	r3, [r1, #0]
 8001518:	2d00      	cmp	r5, #0
 800151a:	da03      	bge.n	8001524 <_printf_i+0xc8>
 800151c:	232d      	movs	r3, #45	; 0x2d
 800151e:	426d      	negs	r5, r5
 8001520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001524:	485e      	ldr	r0, [pc, #376]	; (80016a0 <_printf_i+0x244>)
 8001526:	230a      	movs	r3, #10
 8001528:	e019      	b.n	800155e <_printf_i+0x102>
 800152a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800152e:	6805      	ldr	r5, [r0, #0]
 8001530:	600b      	str	r3, [r1, #0]
 8001532:	bf18      	it	ne
 8001534:	b22d      	sxthne	r5, r5
 8001536:	e7ef      	b.n	8001518 <_printf_i+0xbc>
 8001538:	680b      	ldr	r3, [r1, #0]
 800153a:	6825      	ldr	r5, [r4, #0]
 800153c:	1d18      	adds	r0, r3, #4
 800153e:	6008      	str	r0, [r1, #0]
 8001540:	0628      	lsls	r0, r5, #24
 8001542:	d501      	bpl.n	8001548 <_printf_i+0xec>
 8001544:	681d      	ldr	r5, [r3, #0]
 8001546:	e002      	b.n	800154e <_printf_i+0xf2>
 8001548:	0669      	lsls	r1, r5, #25
 800154a:	d5fb      	bpl.n	8001544 <_printf_i+0xe8>
 800154c:	881d      	ldrh	r5, [r3, #0]
 800154e:	4854      	ldr	r0, [pc, #336]	; (80016a0 <_printf_i+0x244>)
 8001550:	2f6f      	cmp	r7, #111	; 0x6f
 8001552:	bf0c      	ite	eq
 8001554:	2308      	moveq	r3, #8
 8001556:	230a      	movne	r3, #10
 8001558:	2100      	movs	r1, #0
 800155a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800155e:	6866      	ldr	r6, [r4, #4]
 8001560:	60a6      	str	r6, [r4, #8]
 8001562:	2e00      	cmp	r6, #0
 8001564:	bfa2      	ittt	ge
 8001566:	6821      	ldrge	r1, [r4, #0]
 8001568:	f021 0104 	bicge.w	r1, r1, #4
 800156c:	6021      	strge	r1, [r4, #0]
 800156e:	b90d      	cbnz	r5, 8001574 <_printf_i+0x118>
 8001570:	2e00      	cmp	r6, #0
 8001572:	d04d      	beq.n	8001610 <_printf_i+0x1b4>
 8001574:	4616      	mov	r6, r2
 8001576:	fbb5 f1f3 	udiv	r1, r5, r3
 800157a:	fb03 5711 	mls	r7, r3, r1, r5
 800157e:	5dc7      	ldrb	r7, [r0, r7]
 8001580:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001584:	462f      	mov	r7, r5
 8001586:	42bb      	cmp	r3, r7
 8001588:	460d      	mov	r5, r1
 800158a:	d9f4      	bls.n	8001576 <_printf_i+0x11a>
 800158c:	2b08      	cmp	r3, #8
 800158e:	d10b      	bne.n	80015a8 <_printf_i+0x14c>
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	07df      	lsls	r7, r3, #31
 8001594:	d508      	bpl.n	80015a8 <_printf_i+0x14c>
 8001596:	6923      	ldr	r3, [r4, #16]
 8001598:	6861      	ldr	r1, [r4, #4]
 800159a:	4299      	cmp	r1, r3
 800159c:	bfde      	ittt	le
 800159e:	2330      	movle	r3, #48	; 0x30
 80015a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80015a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80015a8:	1b92      	subs	r2, r2, r6
 80015aa:	6122      	str	r2, [r4, #16]
 80015ac:	f8cd a000 	str.w	sl, [sp]
 80015b0:	464b      	mov	r3, r9
 80015b2:	aa03      	add	r2, sp, #12
 80015b4:	4621      	mov	r1, r4
 80015b6:	4640      	mov	r0, r8
 80015b8:	f7ff fee2 	bl	8001380 <_printf_common>
 80015bc:	3001      	adds	r0, #1
 80015be:	d14c      	bne.n	800165a <_printf_i+0x1fe>
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	b004      	add	sp, #16
 80015c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015ca:	4835      	ldr	r0, [pc, #212]	; (80016a0 <_printf_i+0x244>)
 80015cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	680e      	ldr	r6, [r1, #0]
 80015d4:	061f      	lsls	r7, r3, #24
 80015d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80015da:	600e      	str	r6, [r1, #0]
 80015dc:	d514      	bpl.n	8001608 <_printf_i+0x1ac>
 80015de:	07d9      	lsls	r1, r3, #31
 80015e0:	bf44      	itt	mi
 80015e2:	f043 0320 	orrmi.w	r3, r3, #32
 80015e6:	6023      	strmi	r3, [r4, #0]
 80015e8:	b91d      	cbnz	r5, 80015f2 <_printf_i+0x196>
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	f023 0320 	bic.w	r3, r3, #32
 80015f0:	6023      	str	r3, [r4, #0]
 80015f2:	2310      	movs	r3, #16
 80015f4:	e7b0      	b.n	8001558 <_printf_i+0xfc>
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	f043 0320 	orr.w	r3, r3, #32
 80015fc:	6023      	str	r3, [r4, #0]
 80015fe:	2378      	movs	r3, #120	; 0x78
 8001600:	4828      	ldr	r0, [pc, #160]	; (80016a4 <_printf_i+0x248>)
 8001602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001606:	e7e3      	b.n	80015d0 <_printf_i+0x174>
 8001608:	065e      	lsls	r6, r3, #25
 800160a:	bf48      	it	mi
 800160c:	b2ad      	uxthmi	r5, r5
 800160e:	e7e6      	b.n	80015de <_printf_i+0x182>
 8001610:	4616      	mov	r6, r2
 8001612:	e7bb      	b.n	800158c <_printf_i+0x130>
 8001614:	680b      	ldr	r3, [r1, #0]
 8001616:	6826      	ldr	r6, [r4, #0]
 8001618:	6960      	ldr	r0, [r4, #20]
 800161a:	1d1d      	adds	r5, r3, #4
 800161c:	600d      	str	r5, [r1, #0]
 800161e:	0635      	lsls	r5, r6, #24
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	d501      	bpl.n	8001628 <_printf_i+0x1cc>
 8001624:	6018      	str	r0, [r3, #0]
 8001626:	e002      	b.n	800162e <_printf_i+0x1d2>
 8001628:	0671      	lsls	r1, r6, #25
 800162a:	d5fb      	bpl.n	8001624 <_printf_i+0x1c8>
 800162c:	8018      	strh	r0, [r3, #0]
 800162e:	2300      	movs	r3, #0
 8001630:	6123      	str	r3, [r4, #16]
 8001632:	4616      	mov	r6, r2
 8001634:	e7ba      	b.n	80015ac <_printf_i+0x150>
 8001636:	680b      	ldr	r3, [r1, #0]
 8001638:	1d1a      	adds	r2, r3, #4
 800163a:	600a      	str	r2, [r1, #0]
 800163c:	681e      	ldr	r6, [r3, #0]
 800163e:	6862      	ldr	r2, [r4, #4]
 8001640:	2100      	movs	r1, #0
 8001642:	4630      	mov	r0, r6
 8001644:	f7fe fdd4 	bl	80001f0 <memchr>
 8001648:	b108      	cbz	r0, 800164e <_printf_i+0x1f2>
 800164a:	1b80      	subs	r0, r0, r6
 800164c:	6060      	str	r0, [r4, #4]
 800164e:	6863      	ldr	r3, [r4, #4]
 8001650:	6123      	str	r3, [r4, #16]
 8001652:	2300      	movs	r3, #0
 8001654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001658:	e7a8      	b.n	80015ac <_printf_i+0x150>
 800165a:	6923      	ldr	r3, [r4, #16]
 800165c:	4632      	mov	r2, r6
 800165e:	4649      	mov	r1, r9
 8001660:	4640      	mov	r0, r8
 8001662:	47d0      	blx	sl
 8001664:	3001      	adds	r0, #1
 8001666:	d0ab      	beq.n	80015c0 <_printf_i+0x164>
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	079b      	lsls	r3, r3, #30
 800166c:	d413      	bmi.n	8001696 <_printf_i+0x23a>
 800166e:	68e0      	ldr	r0, [r4, #12]
 8001670:	9b03      	ldr	r3, [sp, #12]
 8001672:	4298      	cmp	r0, r3
 8001674:	bfb8      	it	lt
 8001676:	4618      	movlt	r0, r3
 8001678:	e7a4      	b.n	80015c4 <_printf_i+0x168>
 800167a:	2301      	movs	r3, #1
 800167c:	4632      	mov	r2, r6
 800167e:	4649      	mov	r1, r9
 8001680:	4640      	mov	r0, r8
 8001682:	47d0      	blx	sl
 8001684:	3001      	adds	r0, #1
 8001686:	d09b      	beq.n	80015c0 <_printf_i+0x164>
 8001688:	3501      	adds	r5, #1
 800168a:	68e3      	ldr	r3, [r4, #12]
 800168c:	9903      	ldr	r1, [sp, #12]
 800168e:	1a5b      	subs	r3, r3, r1
 8001690:	42ab      	cmp	r3, r5
 8001692:	dcf2      	bgt.n	800167a <_printf_i+0x21e>
 8001694:	e7eb      	b.n	800166e <_printf_i+0x212>
 8001696:	2500      	movs	r5, #0
 8001698:	f104 0619 	add.w	r6, r4, #25
 800169c:	e7f5      	b.n	800168a <_printf_i+0x22e>
 800169e:	bf00      	nop
 80016a0:	08001d39 	.word	0x08001d39
 80016a4:	08001d4a 	.word	0x08001d4a

080016a8 <_sbrk_r>:
 80016a8:	b538      	push	{r3, r4, r5, lr}
 80016aa:	4d06      	ldr	r5, [pc, #24]	; (80016c4 <_sbrk_r+0x1c>)
 80016ac:	2300      	movs	r3, #0
 80016ae:	4604      	mov	r4, r0
 80016b0:	4608      	mov	r0, r1
 80016b2:	602b      	str	r3, [r5, #0]
 80016b4:	f7fe feec 	bl	8000490 <_sbrk>
 80016b8:	1c43      	adds	r3, r0, #1
 80016ba:	d102      	bne.n	80016c2 <_sbrk_r+0x1a>
 80016bc:	682b      	ldr	r3, [r5, #0]
 80016be:	b103      	cbz	r3, 80016c2 <_sbrk_r+0x1a>
 80016c0:	6023      	str	r3, [r4, #0]
 80016c2:	bd38      	pop	{r3, r4, r5, pc}
 80016c4:	200002b0 	.word	0x200002b0

080016c8 <__sread>:
 80016c8:	b510      	push	{r4, lr}
 80016ca:	460c      	mov	r4, r1
 80016cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016d0:	f000 fab2 	bl	8001c38 <_read_r>
 80016d4:	2800      	cmp	r0, #0
 80016d6:	bfab      	itete	ge
 80016d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80016da:	89a3      	ldrhlt	r3, [r4, #12]
 80016dc:	181b      	addge	r3, r3, r0
 80016de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80016e2:	bfac      	ite	ge
 80016e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80016e6:	81a3      	strhlt	r3, [r4, #12]
 80016e8:	bd10      	pop	{r4, pc}

080016ea <__swrite>:
 80016ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016ee:	461f      	mov	r7, r3
 80016f0:	898b      	ldrh	r3, [r1, #12]
 80016f2:	05db      	lsls	r3, r3, #23
 80016f4:	4605      	mov	r5, r0
 80016f6:	460c      	mov	r4, r1
 80016f8:	4616      	mov	r6, r2
 80016fa:	d505      	bpl.n	8001708 <__swrite+0x1e>
 80016fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001700:	2302      	movs	r3, #2
 8001702:	2200      	movs	r2, #0
 8001704:	f000 f9c8 	bl	8001a98 <_lseek_r>
 8001708:	89a3      	ldrh	r3, [r4, #12]
 800170a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800170e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001712:	81a3      	strh	r3, [r4, #12]
 8001714:	4632      	mov	r2, r6
 8001716:	463b      	mov	r3, r7
 8001718:	4628      	mov	r0, r5
 800171a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800171e:	f000 b869 	b.w	80017f4 <_write_r>

08001722 <__sseek>:
 8001722:	b510      	push	{r4, lr}
 8001724:	460c      	mov	r4, r1
 8001726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800172a:	f000 f9b5 	bl	8001a98 <_lseek_r>
 800172e:	1c43      	adds	r3, r0, #1
 8001730:	89a3      	ldrh	r3, [r4, #12]
 8001732:	bf15      	itete	ne
 8001734:	6560      	strne	r0, [r4, #84]	; 0x54
 8001736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800173a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800173e:	81a3      	strheq	r3, [r4, #12]
 8001740:	bf18      	it	ne
 8001742:	81a3      	strhne	r3, [r4, #12]
 8001744:	bd10      	pop	{r4, pc}

08001746 <__sclose>:
 8001746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800174a:	f000 b8d3 	b.w	80018f4 <_close_r>
	...

08001750 <__swbuf_r>:
 8001750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001752:	460e      	mov	r6, r1
 8001754:	4614      	mov	r4, r2
 8001756:	4605      	mov	r5, r0
 8001758:	b118      	cbz	r0, 8001762 <__swbuf_r+0x12>
 800175a:	6983      	ldr	r3, [r0, #24]
 800175c:	b90b      	cbnz	r3, 8001762 <__swbuf_r+0x12>
 800175e:	f7ff fbbd 	bl	8000edc <__sinit>
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <__swbuf_r+0x98>)
 8001764:	429c      	cmp	r4, r3
 8001766:	d12b      	bne.n	80017c0 <__swbuf_r+0x70>
 8001768:	686c      	ldr	r4, [r5, #4]
 800176a:	69a3      	ldr	r3, [r4, #24]
 800176c:	60a3      	str	r3, [r4, #8]
 800176e:	89a3      	ldrh	r3, [r4, #12]
 8001770:	071a      	lsls	r2, r3, #28
 8001772:	d52f      	bpl.n	80017d4 <__swbuf_r+0x84>
 8001774:	6923      	ldr	r3, [r4, #16]
 8001776:	b36b      	cbz	r3, 80017d4 <__swbuf_r+0x84>
 8001778:	6923      	ldr	r3, [r4, #16]
 800177a:	6820      	ldr	r0, [r4, #0]
 800177c:	1ac0      	subs	r0, r0, r3
 800177e:	6963      	ldr	r3, [r4, #20]
 8001780:	b2f6      	uxtb	r6, r6
 8001782:	4283      	cmp	r3, r0
 8001784:	4637      	mov	r7, r6
 8001786:	dc04      	bgt.n	8001792 <__swbuf_r+0x42>
 8001788:	4621      	mov	r1, r4
 800178a:	4628      	mov	r0, r5
 800178c:	f000 f948 	bl	8001a20 <_fflush_r>
 8001790:	bb30      	cbnz	r0, 80017e0 <__swbuf_r+0x90>
 8001792:	68a3      	ldr	r3, [r4, #8]
 8001794:	3b01      	subs	r3, #1
 8001796:	60a3      	str	r3, [r4, #8]
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	6022      	str	r2, [r4, #0]
 800179e:	701e      	strb	r6, [r3, #0]
 80017a0:	6963      	ldr	r3, [r4, #20]
 80017a2:	3001      	adds	r0, #1
 80017a4:	4283      	cmp	r3, r0
 80017a6:	d004      	beq.n	80017b2 <__swbuf_r+0x62>
 80017a8:	89a3      	ldrh	r3, [r4, #12]
 80017aa:	07db      	lsls	r3, r3, #31
 80017ac:	d506      	bpl.n	80017bc <__swbuf_r+0x6c>
 80017ae:	2e0a      	cmp	r6, #10
 80017b0:	d104      	bne.n	80017bc <__swbuf_r+0x6c>
 80017b2:	4621      	mov	r1, r4
 80017b4:	4628      	mov	r0, r5
 80017b6:	f000 f933 	bl	8001a20 <_fflush_r>
 80017ba:	b988      	cbnz	r0, 80017e0 <__swbuf_r+0x90>
 80017bc:	4638      	mov	r0, r7
 80017be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <__swbuf_r+0x9c>)
 80017c2:	429c      	cmp	r4, r3
 80017c4:	d101      	bne.n	80017ca <__swbuf_r+0x7a>
 80017c6:	68ac      	ldr	r4, [r5, #8]
 80017c8:	e7cf      	b.n	800176a <__swbuf_r+0x1a>
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <__swbuf_r+0xa0>)
 80017cc:	429c      	cmp	r4, r3
 80017ce:	bf08      	it	eq
 80017d0:	68ec      	ldreq	r4, [r5, #12]
 80017d2:	e7ca      	b.n	800176a <__swbuf_r+0x1a>
 80017d4:	4621      	mov	r1, r4
 80017d6:	4628      	mov	r0, r5
 80017d8:	f000 f81e 	bl	8001818 <__swsetup_r>
 80017dc:	2800      	cmp	r0, #0
 80017de:	d0cb      	beq.n	8001778 <__swbuf_r+0x28>
 80017e0:	f04f 37ff 	mov.w	r7, #4294967295
 80017e4:	e7ea      	b.n	80017bc <__swbuf_r+0x6c>
 80017e6:	bf00      	nop
 80017e8:	08001ce8 	.word	0x08001ce8
 80017ec:	08001d08 	.word	0x08001d08
 80017f0:	08001cc8 	.word	0x08001cc8

080017f4 <_write_r>:
 80017f4:	b538      	push	{r3, r4, r5, lr}
 80017f6:	4d07      	ldr	r5, [pc, #28]	; (8001814 <_write_r+0x20>)
 80017f8:	4604      	mov	r4, r0
 80017fa:	4608      	mov	r0, r1
 80017fc:	4611      	mov	r1, r2
 80017fe:	2200      	movs	r2, #0
 8001800:	602a      	str	r2, [r5, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	f7fe fdf7 	bl	80003f6 <_write>
 8001808:	1c43      	adds	r3, r0, #1
 800180a:	d102      	bne.n	8001812 <_write_r+0x1e>
 800180c:	682b      	ldr	r3, [r5, #0]
 800180e:	b103      	cbz	r3, 8001812 <_write_r+0x1e>
 8001810:	6023      	str	r3, [r4, #0]
 8001812:	bd38      	pop	{r3, r4, r5, pc}
 8001814:	200002b0 	.word	0x200002b0

08001818 <__swsetup_r>:
 8001818:	4b32      	ldr	r3, [pc, #200]	; (80018e4 <__swsetup_r+0xcc>)
 800181a:	b570      	push	{r4, r5, r6, lr}
 800181c:	681d      	ldr	r5, [r3, #0]
 800181e:	4606      	mov	r6, r0
 8001820:	460c      	mov	r4, r1
 8001822:	b125      	cbz	r5, 800182e <__swsetup_r+0x16>
 8001824:	69ab      	ldr	r3, [r5, #24]
 8001826:	b913      	cbnz	r3, 800182e <__swsetup_r+0x16>
 8001828:	4628      	mov	r0, r5
 800182a:	f7ff fb57 	bl	8000edc <__sinit>
 800182e:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <__swsetup_r+0xd0>)
 8001830:	429c      	cmp	r4, r3
 8001832:	d10f      	bne.n	8001854 <__swsetup_r+0x3c>
 8001834:	686c      	ldr	r4, [r5, #4]
 8001836:	89a3      	ldrh	r3, [r4, #12]
 8001838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800183c:	0719      	lsls	r1, r3, #28
 800183e:	d42c      	bmi.n	800189a <__swsetup_r+0x82>
 8001840:	06dd      	lsls	r5, r3, #27
 8001842:	d411      	bmi.n	8001868 <__swsetup_r+0x50>
 8001844:	2309      	movs	r3, #9
 8001846:	6033      	str	r3, [r6, #0]
 8001848:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800184c:	81a3      	strh	r3, [r4, #12]
 800184e:	f04f 30ff 	mov.w	r0, #4294967295
 8001852:	e03e      	b.n	80018d2 <__swsetup_r+0xba>
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <__swsetup_r+0xd4>)
 8001856:	429c      	cmp	r4, r3
 8001858:	d101      	bne.n	800185e <__swsetup_r+0x46>
 800185a:	68ac      	ldr	r4, [r5, #8]
 800185c:	e7eb      	b.n	8001836 <__swsetup_r+0x1e>
 800185e:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <__swsetup_r+0xd8>)
 8001860:	429c      	cmp	r4, r3
 8001862:	bf08      	it	eq
 8001864:	68ec      	ldreq	r4, [r5, #12]
 8001866:	e7e6      	b.n	8001836 <__swsetup_r+0x1e>
 8001868:	0758      	lsls	r0, r3, #29
 800186a:	d512      	bpl.n	8001892 <__swsetup_r+0x7a>
 800186c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800186e:	b141      	cbz	r1, 8001882 <__swsetup_r+0x6a>
 8001870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001874:	4299      	cmp	r1, r3
 8001876:	d002      	beq.n	800187e <__swsetup_r+0x66>
 8001878:	4630      	mov	r0, r6
 800187a:	f000 f98f 	bl	8001b9c <_free_r>
 800187e:	2300      	movs	r3, #0
 8001880:	6363      	str	r3, [r4, #52]	; 0x34
 8001882:	89a3      	ldrh	r3, [r4, #12]
 8001884:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001888:	81a3      	strh	r3, [r4, #12]
 800188a:	2300      	movs	r3, #0
 800188c:	6063      	str	r3, [r4, #4]
 800188e:	6923      	ldr	r3, [r4, #16]
 8001890:	6023      	str	r3, [r4, #0]
 8001892:	89a3      	ldrh	r3, [r4, #12]
 8001894:	f043 0308 	orr.w	r3, r3, #8
 8001898:	81a3      	strh	r3, [r4, #12]
 800189a:	6923      	ldr	r3, [r4, #16]
 800189c:	b94b      	cbnz	r3, 80018b2 <__swsetup_r+0x9a>
 800189e:	89a3      	ldrh	r3, [r4, #12]
 80018a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80018a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a8:	d003      	beq.n	80018b2 <__swsetup_r+0x9a>
 80018aa:	4621      	mov	r1, r4
 80018ac:	4630      	mov	r0, r6
 80018ae:	f000 f929 	bl	8001b04 <__smakebuf_r>
 80018b2:	89a0      	ldrh	r0, [r4, #12]
 80018b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018b8:	f010 0301 	ands.w	r3, r0, #1
 80018bc:	d00a      	beq.n	80018d4 <__swsetup_r+0xbc>
 80018be:	2300      	movs	r3, #0
 80018c0:	60a3      	str	r3, [r4, #8]
 80018c2:	6963      	ldr	r3, [r4, #20]
 80018c4:	425b      	negs	r3, r3
 80018c6:	61a3      	str	r3, [r4, #24]
 80018c8:	6923      	ldr	r3, [r4, #16]
 80018ca:	b943      	cbnz	r3, 80018de <__swsetup_r+0xc6>
 80018cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80018d0:	d1ba      	bne.n	8001848 <__swsetup_r+0x30>
 80018d2:	bd70      	pop	{r4, r5, r6, pc}
 80018d4:	0781      	lsls	r1, r0, #30
 80018d6:	bf58      	it	pl
 80018d8:	6963      	ldrpl	r3, [r4, #20]
 80018da:	60a3      	str	r3, [r4, #8]
 80018dc:	e7f4      	b.n	80018c8 <__swsetup_r+0xb0>
 80018de:	2000      	movs	r0, #0
 80018e0:	e7f7      	b.n	80018d2 <__swsetup_r+0xba>
 80018e2:	bf00      	nop
 80018e4:	20000000 	.word	0x20000000
 80018e8:	08001ce8 	.word	0x08001ce8
 80018ec:	08001d08 	.word	0x08001d08
 80018f0:	08001cc8 	.word	0x08001cc8

080018f4 <_close_r>:
 80018f4:	b538      	push	{r3, r4, r5, lr}
 80018f6:	4d06      	ldr	r5, [pc, #24]	; (8001910 <_close_r+0x1c>)
 80018f8:	2300      	movs	r3, #0
 80018fa:	4604      	mov	r4, r0
 80018fc:	4608      	mov	r0, r1
 80018fe:	602b      	str	r3, [r5, #0]
 8001900:	f7fe fd95 	bl	800042e <_close>
 8001904:	1c43      	adds	r3, r0, #1
 8001906:	d102      	bne.n	800190e <_close_r+0x1a>
 8001908:	682b      	ldr	r3, [r5, #0]
 800190a:	b103      	cbz	r3, 800190e <_close_r+0x1a>
 800190c:	6023      	str	r3, [r4, #0]
 800190e:	bd38      	pop	{r3, r4, r5, pc}
 8001910:	200002b0 	.word	0x200002b0

08001914 <__sflush_r>:
 8001914:	898a      	ldrh	r2, [r1, #12]
 8001916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800191a:	4605      	mov	r5, r0
 800191c:	0710      	lsls	r0, r2, #28
 800191e:	460c      	mov	r4, r1
 8001920:	d458      	bmi.n	80019d4 <__sflush_r+0xc0>
 8001922:	684b      	ldr	r3, [r1, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	dc05      	bgt.n	8001934 <__sflush_r+0x20>
 8001928:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800192a:	2b00      	cmp	r3, #0
 800192c:	dc02      	bgt.n	8001934 <__sflush_r+0x20>
 800192e:	2000      	movs	r0, #0
 8001930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001934:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001936:	2e00      	cmp	r6, #0
 8001938:	d0f9      	beq.n	800192e <__sflush_r+0x1a>
 800193a:	2300      	movs	r3, #0
 800193c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001940:	682f      	ldr	r7, [r5, #0]
 8001942:	602b      	str	r3, [r5, #0]
 8001944:	d032      	beq.n	80019ac <__sflush_r+0x98>
 8001946:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001948:	89a3      	ldrh	r3, [r4, #12]
 800194a:	075a      	lsls	r2, r3, #29
 800194c:	d505      	bpl.n	800195a <__sflush_r+0x46>
 800194e:	6863      	ldr	r3, [r4, #4]
 8001950:	1ac0      	subs	r0, r0, r3
 8001952:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001954:	b10b      	cbz	r3, 800195a <__sflush_r+0x46>
 8001956:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001958:	1ac0      	subs	r0, r0, r3
 800195a:	2300      	movs	r3, #0
 800195c:	4602      	mov	r2, r0
 800195e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001960:	6a21      	ldr	r1, [r4, #32]
 8001962:	4628      	mov	r0, r5
 8001964:	47b0      	blx	r6
 8001966:	1c43      	adds	r3, r0, #1
 8001968:	89a3      	ldrh	r3, [r4, #12]
 800196a:	d106      	bne.n	800197a <__sflush_r+0x66>
 800196c:	6829      	ldr	r1, [r5, #0]
 800196e:	291d      	cmp	r1, #29
 8001970:	d82c      	bhi.n	80019cc <__sflush_r+0xb8>
 8001972:	4a2a      	ldr	r2, [pc, #168]	; (8001a1c <__sflush_r+0x108>)
 8001974:	40ca      	lsrs	r2, r1
 8001976:	07d6      	lsls	r6, r2, #31
 8001978:	d528      	bpl.n	80019cc <__sflush_r+0xb8>
 800197a:	2200      	movs	r2, #0
 800197c:	6062      	str	r2, [r4, #4]
 800197e:	04d9      	lsls	r1, r3, #19
 8001980:	6922      	ldr	r2, [r4, #16]
 8001982:	6022      	str	r2, [r4, #0]
 8001984:	d504      	bpl.n	8001990 <__sflush_r+0x7c>
 8001986:	1c42      	adds	r2, r0, #1
 8001988:	d101      	bne.n	800198e <__sflush_r+0x7a>
 800198a:	682b      	ldr	r3, [r5, #0]
 800198c:	b903      	cbnz	r3, 8001990 <__sflush_r+0x7c>
 800198e:	6560      	str	r0, [r4, #84]	; 0x54
 8001990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001992:	602f      	str	r7, [r5, #0]
 8001994:	2900      	cmp	r1, #0
 8001996:	d0ca      	beq.n	800192e <__sflush_r+0x1a>
 8001998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800199c:	4299      	cmp	r1, r3
 800199e:	d002      	beq.n	80019a6 <__sflush_r+0x92>
 80019a0:	4628      	mov	r0, r5
 80019a2:	f000 f8fb 	bl	8001b9c <_free_r>
 80019a6:	2000      	movs	r0, #0
 80019a8:	6360      	str	r0, [r4, #52]	; 0x34
 80019aa:	e7c1      	b.n	8001930 <__sflush_r+0x1c>
 80019ac:	6a21      	ldr	r1, [r4, #32]
 80019ae:	2301      	movs	r3, #1
 80019b0:	4628      	mov	r0, r5
 80019b2:	47b0      	blx	r6
 80019b4:	1c41      	adds	r1, r0, #1
 80019b6:	d1c7      	bne.n	8001948 <__sflush_r+0x34>
 80019b8:	682b      	ldr	r3, [r5, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0c4      	beq.n	8001948 <__sflush_r+0x34>
 80019be:	2b1d      	cmp	r3, #29
 80019c0:	d001      	beq.n	80019c6 <__sflush_r+0xb2>
 80019c2:	2b16      	cmp	r3, #22
 80019c4:	d101      	bne.n	80019ca <__sflush_r+0xb6>
 80019c6:	602f      	str	r7, [r5, #0]
 80019c8:	e7b1      	b.n	800192e <__sflush_r+0x1a>
 80019ca:	89a3      	ldrh	r3, [r4, #12]
 80019cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019d0:	81a3      	strh	r3, [r4, #12]
 80019d2:	e7ad      	b.n	8001930 <__sflush_r+0x1c>
 80019d4:	690f      	ldr	r7, [r1, #16]
 80019d6:	2f00      	cmp	r7, #0
 80019d8:	d0a9      	beq.n	800192e <__sflush_r+0x1a>
 80019da:	0793      	lsls	r3, r2, #30
 80019dc:	680e      	ldr	r6, [r1, #0]
 80019de:	bf08      	it	eq
 80019e0:	694b      	ldreq	r3, [r1, #20]
 80019e2:	600f      	str	r7, [r1, #0]
 80019e4:	bf18      	it	ne
 80019e6:	2300      	movne	r3, #0
 80019e8:	eba6 0807 	sub.w	r8, r6, r7
 80019ec:	608b      	str	r3, [r1, #8]
 80019ee:	f1b8 0f00 	cmp.w	r8, #0
 80019f2:	dd9c      	ble.n	800192e <__sflush_r+0x1a>
 80019f4:	6a21      	ldr	r1, [r4, #32]
 80019f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80019f8:	4643      	mov	r3, r8
 80019fa:	463a      	mov	r2, r7
 80019fc:	4628      	mov	r0, r5
 80019fe:	47b0      	blx	r6
 8001a00:	2800      	cmp	r0, #0
 8001a02:	dc06      	bgt.n	8001a12 <__sflush_r+0xfe>
 8001a04:	89a3      	ldrh	r3, [r4, #12]
 8001a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a0a:	81a3      	strh	r3, [r4, #12]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	e78e      	b.n	8001930 <__sflush_r+0x1c>
 8001a12:	4407      	add	r7, r0
 8001a14:	eba8 0800 	sub.w	r8, r8, r0
 8001a18:	e7e9      	b.n	80019ee <__sflush_r+0xda>
 8001a1a:	bf00      	nop
 8001a1c:	20400001 	.word	0x20400001

08001a20 <_fflush_r>:
 8001a20:	b538      	push	{r3, r4, r5, lr}
 8001a22:	690b      	ldr	r3, [r1, #16]
 8001a24:	4605      	mov	r5, r0
 8001a26:	460c      	mov	r4, r1
 8001a28:	b913      	cbnz	r3, 8001a30 <_fflush_r+0x10>
 8001a2a:	2500      	movs	r5, #0
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	bd38      	pop	{r3, r4, r5, pc}
 8001a30:	b118      	cbz	r0, 8001a3a <_fflush_r+0x1a>
 8001a32:	6983      	ldr	r3, [r0, #24]
 8001a34:	b90b      	cbnz	r3, 8001a3a <_fflush_r+0x1a>
 8001a36:	f7ff fa51 	bl	8000edc <__sinit>
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <_fflush_r+0x6c>)
 8001a3c:	429c      	cmp	r4, r3
 8001a3e:	d11b      	bne.n	8001a78 <_fflush_r+0x58>
 8001a40:	686c      	ldr	r4, [r5, #4]
 8001a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0ef      	beq.n	8001a2a <_fflush_r+0xa>
 8001a4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001a4c:	07d0      	lsls	r0, r2, #31
 8001a4e:	d404      	bmi.n	8001a5a <_fflush_r+0x3a>
 8001a50:	0599      	lsls	r1, r3, #22
 8001a52:	d402      	bmi.n	8001a5a <_fflush_r+0x3a>
 8001a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a56:	f7ff fadf 	bl	8001018 <__retarget_lock_acquire_recursive>
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	f7ff ff59 	bl	8001914 <__sflush_r>
 8001a62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a64:	07da      	lsls	r2, r3, #31
 8001a66:	4605      	mov	r5, r0
 8001a68:	d4e0      	bmi.n	8001a2c <_fflush_r+0xc>
 8001a6a:	89a3      	ldrh	r3, [r4, #12]
 8001a6c:	059b      	lsls	r3, r3, #22
 8001a6e:	d4dd      	bmi.n	8001a2c <_fflush_r+0xc>
 8001a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a72:	f7ff fad2 	bl	800101a <__retarget_lock_release_recursive>
 8001a76:	e7d9      	b.n	8001a2c <_fflush_r+0xc>
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <_fflush_r+0x70>)
 8001a7a:	429c      	cmp	r4, r3
 8001a7c:	d101      	bne.n	8001a82 <_fflush_r+0x62>
 8001a7e:	68ac      	ldr	r4, [r5, #8]
 8001a80:	e7df      	b.n	8001a42 <_fflush_r+0x22>
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <_fflush_r+0x74>)
 8001a84:	429c      	cmp	r4, r3
 8001a86:	bf08      	it	eq
 8001a88:	68ec      	ldreq	r4, [r5, #12]
 8001a8a:	e7da      	b.n	8001a42 <_fflush_r+0x22>
 8001a8c:	08001ce8 	.word	0x08001ce8
 8001a90:	08001d08 	.word	0x08001d08
 8001a94:	08001cc8 	.word	0x08001cc8

08001a98 <_lseek_r>:
 8001a98:	b538      	push	{r3, r4, r5, lr}
 8001a9a:	4d07      	ldr	r5, [pc, #28]	; (8001ab8 <_lseek_r+0x20>)
 8001a9c:	4604      	mov	r4, r0
 8001a9e:	4608      	mov	r0, r1
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	602a      	str	r2, [r5, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f7fe fce5 	bl	8000476 <_lseek>
 8001aac:	1c43      	adds	r3, r0, #1
 8001aae:	d102      	bne.n	8001ab6 <_lseek_r+0x1e>
 8001ab0:	682b      	ldr	r3, [r5, #0]
 8001ab2:	b103      	cbz	r3, 8001ab6 <_lseek_r+0x1e>
 8001ab4:	6023      	str	r3, [r4, #0]
 8001ab6:	bd38      	pop	{r3, r4, r5, pc}
 8001ab8:	200002b0 	.word	0x200002b0

08001abc <__swhatbuf_r>:
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	460e      	mov	r6, r1
 8001ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ac4:	2900      	cmp	r1, #0
 8001ac6:	b096      	sub	sp, #88	; 0x58
 8001ac8:	4614      	mov	r4, r2
 8001aca:	461d      	mov	r5, r3
 8001acc:	da07      	bge.n	8001ade <__swhatbuf_r+0x22>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	602b      	str	r3, [r5, #0]
 8001ad2:	89b3      	ldrh	r3, [r6, #12]
 8001ad4:	061a      	lsls	r2, r3, #24
 8001ad6:	d410      	bmi.n	8001afa <__swhatbuf_r+0x3e>
 8001ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001adc:	e00e      	b.n	8001afc <__swhatbuf_r+0x40>
 8001ade:	466a      	mov	r2, sp
 8001ae0:	f000 f8bc 	bl	8001c5c <_fstat_r>
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	dbf2      	blt.n	8001ace <__swhatbuf_r+0x12>
 8001ae8:	9a01      	ldr	r2, [sp, #4]
 8001aea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001aee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001af2:	425a      	negs	r2, r3
 8001af4:	415a      	adcs	r2, r3
 8001af6:	602a      	str	r2, [r5, #0]
 8001af8:	e7ee      	b.n	8001ad8 <__swhatbuf_r+0x1c>
 8001afa:	2340      	movs	r3, #64	; 0x40
 8001afc:	2000      	movs	r0, #0
 8001afe:	6023      	str	r3, [r4, #0]
 8001b00:	b016      	add	sp, #88	; 0x58
 8001b02:	bd70      	pop	{r4, r5, r6, pc}

08001b04 <__smakebuf_r>:
 8001b04:	898b      	ldrh	r3, [r1, #12]
 8001b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b08:	079d      	lsls	r5, r3, #30
 8001b0a:	4606      	mov	r6, r0
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	d507      	bpl.n	8001b20 <__smakebuf_r+0x1c>
 8001b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001b14:	6023      	str	r3, [r4, #0]
 8001b16:	6123      	str	r3, [r4, #16]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	6163      	str	r3, [r4, #20]
 8001b1c:	b002      	add	sp, #8
 8001b1e:	bd70      	pop	{r4, r5, r6, pc}
 8001b20:	ab01      	add	r3, sp, #4
 8001b22:	466a      	mov	r2, sp
 8001b24:	f7ff ffca 	bl	8001abc <__swhatbuf_r>
 8001b28:	9900      	ldr	r1, [sp, #0]
 8001b2a:	4605      	mov	r5, r0
 8001b2c:	4630      	mov	r0, r6
 8001b2e:	f7ff fa75 	bl	800101c <_malloc_r>
 8001b32:	b948      	cbnz	r0, 8001b48 <__smakebuf_r+0x44>
 8001b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b38:	059a      	lsls	r2, r3, #22
 8001b3a:	d4ef      	bmi.n	8001b1c <__smakebuf_r+0x18>
 8001b3c:	f023 0303 	bic.w	r3, r3, #3
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	81a3      	strh	r3, [r4, #12]
 8001b46:	e7e3      	b.n	8001b10 <__smakebuf_r+0xc>
 8001b48:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <__smakebuf_r+0x7c>)
 8001b4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b4c:	89a3      	ldrh	r3, [r4, #12]
 8001b4e:	6020      	str	r0, [r4, #0]
 8001b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b54:	81a3      	strh	r3, [r4, #12]
 8001b56:	9b00      	ldr	r3, [sp, #0]
 8001b58:	6163      	str	r3, [r4, #20]
 8001b5a:	9b01      	ldr	r3, [sp, #4]
 8001b5c:	6120      	str	r0, [r4, #16]
 8001b5e:	b15b      	cbz	r3, 8001b78 <__smakebuf_r+0x74>
 8001b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b64:	4630      	mov	r0, r6
 8001b66:	f000 f88b 	bl	8001c80 <_isatty_r>
 8001b6a:	b128      	cbz	r0, 8001b78 <__smakebuf_r+0x74>
 8001b6c:	89a3      	ldrh	r3, [r4, #12]
 8001b6e:	f023 0303 	bic.w	r3, r3, #3
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	81a3      	strh	r3, [r4, #12]
 8001b78:	89a0      	ldrh	r0, [r4, #12]
 8001b7a:	4305      	orrs	r5, r0
 8001b7c:	81a5      	strh	r5, [r4, #12]
 8001b7e:	e7cd      	b.n	8001b1c <__smakebuf_r+0x18>
 8001b80:	08000e75 	.word	0x08000e75

08001b84 <__malloc_lock>:
 8001b84:	4801      	ldr	r0, [pc, #4]	; (8001b8c <__malloc_lock+0x8>)
 8001b86:	f7ff ba47 	b.w	8001018 <__retarget_lock_acquire_recursive>
 8001b8a:	bf00      	nop
 8001b8c:	200002a8 	.word	0x200002a8

08001b90 <__malloc_unlock>:
 8001b90:	4801      	ldr	r0, [pc, #4]	; (8001b98 <__malloc_unlock+0x8>)
 8001b92:	f7ff ba42 	b.w	800101a <__retarget_lock_release_recursive>
 8001b96:	bf00      	nop
 8001b98:	200002a8 	.word	0x200002a8

08001b9c <_free_r>:
 8001b9c:	b538      	push	{r3, r4, r5, lr}
 8001b9e:	4605      	mov	r5, r0
 8001ba0:	2900      	cmp	r1, #0
 8001ba2:	d045      	beq.n	8001c30 <_free_r+0x94>
 8001ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ba8:	1f0c      	subs	r4, r1, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	bfb8      	it	lt
 8001bae:	18e4      	addlt	r4, r4, r3
 8001bb0:	f7ff ffe8 	bl	8001b84 <__malloc_lock>
 8001bb4:	4a1f      	ldr	r2, [pc, #124]	; (8001c34 <_free_r+0x98>)
 8001bb6:	6813      	ldr	r3, [r2, #0]
 8001bb8:	4610      	mov	r0, r2
 8001bba:	b933      	cbnz	r3, 8001bca <_free_r+0x2e>
 8001bbc:	6063      	str	r3, [r4, #4]
 8001bbe:	6014      	str	r4, [r2, #0]
 8001bc0:	4628      	mov	r0, r5
 8001bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bc6:	f7ff bfe3 	b.w	8001b90 <__malloc_unlock>
 8001bca:	42a3      	cmp	r3, r4
 8001bcc:	d90b      	bls.n	8001be6 <_free_r+0x4a>
 8001bce:	6821      	ldr	r1, [r4, #0]
 8001bd0:	1862      	adds	r2, r4, r1
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	bf04      	itt	eq
 8001bd6:	681a      	ldreq	r2, [r3, #0]
 8001bd8:	685b      	ldreq	r3, [r3, #4]
 8001bda:	6063      	str	r3, [r4, #4]
 8001bdc:	bf04      	itt	eq
 8001bde:	1852      	addeq	r2, r2, r1
 8001be0:	6022      	streq	r2, [r4, #0]
 8001be2:	6004      	str	r4, [r0, #0]
 8001be4:	e7ec      	b.n	8001bc0 <_free_r+0x24>
 8001be6:	461a      	mov	r2, r3
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	b10b      	cbz	r3, 8001bf0 <_free_r+0x54>
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	d9fa      	bls.n	8001be6 <_free_r+0x4a>
 8001bf0:	6811      	ldr	r1, [r2, #0]
 8001bf2:	1850      	adds	r0, r2, r1
 8001bf4:	42a0      	cmp	r0, r4
 8001bf6:	d10b      	bne.n	8001c10 <_free_r+0x74>
 8001bf8:	6820      	ldr	r0, [r4, #0]
 8001bfa:	4401      	add	r1, r0
 8001bfc:	1850      	adds	r0, r2, r1
 8001bfe:	4283      	cmp	r3, r0
 8001c00:	6011      	str	r1, [r2, #0]
 8001c02:	d1dd      	bne.n	8001bc0 <_free_r+0x24>
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	6053      	str	r3, [r2, #4]
 8001c0a:	4401      	add	r1, r0
 8001c0c:	6011      	str	r1, [r2, #0]
 8001c0e:	e7d7      	b.n	8001bc0 <_free_r+0x24>
 8001c10:	d902      	bls.n	8001c18 <_free_r+0x7c>
 8001c12:	230c      	movs	r3, #12
 8001c14:	602b      	str	r3, [r5, #0]
 8001c16:	e7d3      	b.n	8001bc0 <_free_r+0x24>
 8001c18:	6820      	ldr	r0, [r4, #0]
 8001c1a:	1821      	adds	r1, r4, r0
 8001c1c:	428b      	cmp	r3, r1
 8001c1e:	bf04      	itt	eq
 8001c20:	6819      	ldreq	r1, [r3, #0]
 8001c22:	685b      	ldreq	r3, [r3, #4]
 8001c24:	6063      	str	r3, [r4, #4]
 8001c26:	bf04      	itt	eq
 8001c28:	1809      	addeq	r1, r1, r0
 8001c2a:	6021      	streq	r1, [r4, #0]
 8001c2c:	6054      	str	r4, [r2, #4]
 8001c2e:	e7c7      	b.n	8001bc0 <_free_r+0x24>
 8001c30:	bd38      	pop	{r3, r4, r5, pc}
 8001c32:	bf00      	nop
 8001c34:	20000084 	.word	0x20000084

08001c38 <_read_r>:
 8001c38:	b538      	push	{r3, r4, r5, lr}
 8001c3a:	4d07      	ldr	r5, [pc, #28]	; (8001c58 <_read_r+0x20>)
 8001c3c:	4604      	mov	r4, r0
 8001c3e:	4608      	mov	r0, r1
 8001c40:	4611      	mov	r1, r2
 8001c42:	2200      	movs	r2, #0
 8001c44:	602a      	str	r2, [r5, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	f7fe fbb8 	bl	80003bc <_read>
 8001c4c:	1c43      	adds	r3, r0, #1
 8001c4e:	d102      	bne.n	8001c56 <_read_r+0x1e>
 8001c50:	682b      	ldr	r3, [r5, #0]
 8001c52:	b103      	cbz	r3, 8001c56 <_read_r+0x1e>
 8001c54:	6023      	str	r3, [r4, #0]
 8001c56:	bd38      	pop	{r3, r4, r5, pc}
 8001c58:	200002b0 	.word	0x200002b0

08001c5c <_fstat_r>:
 8001c5c:	b538      	push	{r3, r4, r5, lr}
 8001c5e:	4d07      	ldr	r5, [pc, #28]	; (8001c7c <_fstat_r+0x20>)
 8001c60:	2300      	movs	r3, #0
 8001c62:	4604      	mov	r4, r0
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	602b      	str	r3, [r5, #0]
 8001c6a:	f7fe fbeb 	bl	8000444 <_fstat>
 8001c6e:	1c43      	adds	r3, r0, #1
 8001c70:	d102      	bne.n	8001c78 <_fstat_r+0x1c>
 8001c72:	682b      	ldr	r3, [r5, #0]
 8001c74:	b103      	cbz	r3, 8001c78 <_fstat_r+0x1c>
 8001c76:	6023      	str	r3, [r4, #0]
 8001c78:	bd38      	pop	{r3, r4, r5, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200002b0 	.word	0x200002b0

08001c80 <_isatty_r>:
 8001c80:	b538      	push	{r3, r4, r5, lr}
 8001c82:	4d06      	ldr	r5, [pc, #24]	; (8001c9c <_isatty_r+0x1c>)
 8001c84:	2300      	movs	r3, #0
 8001c86:	4604      	mov	r4, r0
 8001c88:	4608      	mov	r0, r1
 8001c8a:	602b      	str	r3, [r5, #0]
 8001c8c:	f7fe fbe9 	bl	8000462 <_isatty>
 8001c90:	1c43      	adds	r3, r0, #1
 8001c92:	d102      	bne.n	8001c9a <_isatty_r+0x1a>
 8001c94:	682b      	ldr	r3, [r5, #0]
 8001c96:	b103      	cbz	r3, 8001c9a <_isatty_r+0x1a>
 8001c98:	6023      	str	r3, [r4, #0]
 8001c9a:	bd38      	pop	{r3, r4, r5, pc}
 8001c9c:	200002b0 	.word	0x200002b0

08001ca0 <_init>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	bf00      	nop
 8001ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca6:	bc08      	pop	{r3}
 8001ca8:	469e      	mov	lr, r3
 8001caa:	4770      	bx	lr

08001cac <_fini>:
 8001cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cae:	bf00      	nop
 8001cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb2:	bc08      	pop	{r3}
 8001cb4:	469e      	mov	lr, r3
 8001cb6:	4770      	bx	lr
