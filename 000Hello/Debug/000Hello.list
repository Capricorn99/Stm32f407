
000Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000204c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080021fc  080021fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002380  08002380  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002380  08002380  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002380  08002380  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002380  08002380  00012380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002384  08002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  080023ec  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080023ec  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000038e6  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a5c  00000000  00000000  00023974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000268  00000000  00000000  000243d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000210  00000000  00000000  00024638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033a5  00000000  00000000  00024848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002914  00000000  00000000  00027bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000bbca  00000000  00000000  0002a501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000360cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001118  00000000  00000000  00036120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080021e4 	.word	0x080021e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	080021e4 	.word	0x080021e4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <delay>:
//arduino led

#define LED_PIN  9

void delay(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e002      	b.n	80002b2 <delay+0x12>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <delay+0x28>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d9f8      	bls.n	80002ac <delay+0xc>
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	0003d08f 	.word	0x0003d08f

080002cc <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80002d2:	4b14      	ldr	r3, [pc, #80]	; (8000324 <SPI2_GPIOInits+0x58>)
 80002d4:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 80002d6:	2302      	movs	r3, #2
 80002d8:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002da:	2305      	movs	r3, #5
 80002dc:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 80002de:	2300      	movs	r3, #0
 80002e0:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002e2:	2300      	movs	r3, #0
 80002e4:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002e6:	2302      	movs	r3, #2
 80002e8:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ea:	230d      	movs	r3, #13
 80002ec:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 fc4d 	bl	8000b90 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002f6:	230f      	movs	r3, #15
 80002f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fc47 	bl	8000b90 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000302:	230e      	movs	r3, #14
 8000304:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fc41 	bl	8000b90 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800030e:	230c      	movs	r3, #12
 8000310:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fc3b 	bl	8000b90 <GPIO_Init>


}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40020400 	.word	0x40020400

08000328 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <SPI2_Inits+0x34>)
 8000330:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000332:	2301      	movs	r3, #1
 8000334:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000336:	2301      	movs	r3, #1
 8000338:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; //2MHz
 800033a:	2302      	movs	r3, #2
 800033c:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800033e:	2300      	movs	r3, #0
 8000340:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000342:	2300      	movs	r3, #0
 8000344:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 8000346:	2300      	movs	r3, #0
 8000348:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 800034a:	463b      	mov	r3, r7
 800034c:	4618      	mov	r0, r3
 800034e:	f000 fe40 	bl	8000fd2 <SPI_Init>
}
 8000352:	bf00      	nop
 8000354:	3720      	adds	r7, #32
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40003800 	.word	0x40003800

08000360 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000366:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <GPIO_ButtonInit+0x54>)
 8000368:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800036a:	2300      	movs	r3, #0
 800036c:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800036e:	2300      	movs	r3, #0
 8000370:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000372:	2302      	movs	r3, #2
 8000374:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000376:	2300      	movs	r3, #0
 8000378:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 800037a:	f107 030c 	add.w	r3, r7, #12
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fc06 	bl	8000b90 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <GPIO_ButtonInit+0x58>)
 8000386:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000388:	230c      	movs	r3, #12
 800038a:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800038c:	2301      	movs	r3, #1
 800038e:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000390:	2302      	movs	r3, #2
 8000392:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_OD;
 8000394:	2301      	movs	r3, #1
 8000396:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000398:	2300      	movs	r3, #0
 800039a:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 800039c:	2101      	movs	r1, #1
 800039e:	4806      	ldr	r0, [pc, #24]	; (80003b8 <GPIO_ButtonInit+0x58>)
 80003a0:	f000 fb0e 	bl	80009c0 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 80003a4:	463b      	mov	r3, r7
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fbf2 	bl	8000b90 <GPIO_Init>

}
 80003ac:	bf00      	nop
 80003ae:	3718      	adds	r7, #24
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40020000 	.word	0x40020000
 80003b8:	40020c00 	.word	0x40020c00

080003bc <SPI_VerifyResponse>:


uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]

	if(ackbyte == (uint8_t)0xF5)
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	2bf5      	cmp	r3, #245	; 0xf5
 80003ca:	d101      	bne.n	80003d0 <SPI_VerifyResponse+0x14>
	{
		//ack
		return 1;
 80003cc:	2301      	movs	r3, #1
 80003ce:	e000      	b.n	80003d2 <SPI_VerifyResponse+0x16>
	}

	return 0;
 80003d0:	2300      	movs	r3, #0
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr

080003dc <main>:

int main(void)
{
 80003dc:	b5b0      	push	{r4, r5, r7, lr}
 80003de:	b08e      	sub	sp, #56	; 0x38
 80003e0:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xff;
 80003e2:	23ff      	movs	r3, #255	; 0xff
 80003e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t dummy_read;

	//initialise_monitor_handles();

	printf("Application is running\n");
 80003e8:	48b1      	ldr	r0, [pc, #708]	; (80006b0 <main+0x2d4>)
 80003ea:	f000 ffb9 	bl	8001360 <puts>

	GPIO_ButtonInit();
 80003ee:	f7ff ffb7 	bl	8000360 <GPIO_ButtonInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80003f2:	f7ff ff6b 	bl	80002cc <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80003f6:	f7ff ff97 	bl	8000328 <SPI2_Inits>

	printf("SPI Init. done\n");
 80003fa:	48ae      	ldr	r0, [pc, #696]	; (80006b4 <main+0x2d8>)
 80003fc:	f000 ffb0 	bl	8001360 <puts>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000400:	2101      	movs	r1, #1
 8000402:	48ad      	ldr	r0, [pc, #692]	; (80006b8 <main+0x2dc>)
 8000404:	f000 fdca 	bl	8000f9c <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000408:	bf00      	nop
 800040a:	2100      	movs	r1, #0
 800040c:	48ab      	ldr	r0, [pc, #684]	; (80006bc <main+0x2e0>)
 800040e:	f000 fd57 	bl	8000ec0 <GPIO_ReadFromInputPin>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f8      	beq.n	800040a <main+0x2e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000418:	f7ff ff42 	bl	80002a0 <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 800041c:	2101      	movs	r1, #1
 800041e:	48a6      	ldr	r0, [pc, #664]	; (80006b8 <main+0x2dc>)
 8000420:	f000 feca 	bl	80011b8 <SPI_PeripheralControl>

	    //1. CMD_LED_CTRL  	<pin no(1)>     <value(1)>

		uint8_t commandcode = COMMAND_LED_CTRL;
 8000424:	2350      	movs	r3, #80	; 0x50
 8000426:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		uint8_t ackbyte;
		uint8_t args[2];

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 800042a:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800042e:	2201      	movs	r2, #1
 8000430:	4619      	mov	r1, r3
 8000432:	48a1      	ldr	r0, [pc, #644]	; (80006b8 <main+0x2dc>)
 8000434:	f000 fe44 	bl	80010c0 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000438:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800043c:	2201      	movs	r2, #1
 800043e:	4619      	mov	r1, r3
 8000440:	489d      	ldr	r0, [pc, #628]	; (80006b8 <main+0x2dc>)
 8000442:	f000 fe7d 	bl	8001140 <SPI_ReceiveData>


		//Send some dummy bits (1 byte) fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000446:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800044a:	2201      	movs	r2, #1
 800044c:	4619      	mov	r1, r3
 800044e:	489a      	ldr	r0, [pc, #616]	; (80006b8 <main+0x2dc>)
 8000450:	f000 fe36 	bl	80010c0 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000458:	2201      	movs	r2, #1
 800045a:	4619      	mov	r1, r3
 800045c:	4896      	ldr	r0, [pc, #600]	; (80006b8 <main+0x2dc>)
 800045e:	f000 fe6f 	bl	8001140 <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 8000462:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ffa8 	bl	80003bc <SPI_VerifyResponse>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d016      	beq.n	80004a0 <main+0xc4>
		{
			args[0] = LED_PIN;
 8000472:	2309      	movs	r3, #9
 8000474:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			args[1] = LED_ON;
 8000478:	2301      	movs	r3, #1
 800047a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			//send arguments
			SPI_SendData(SPI2,args,2);
 800047e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000482:	2202      	movs	r2, #2
 8000484:	4619      	mov	r1, r3
 8000486:	488c      	ldr	r0, [pc, #560]	; (80006b8 <main+0x2dc>)
 8000488:	f000 fe1a 	bl	80010c0 <SPI_SendData>
			// dummy read
			SPI_ReceiveData(SPI2,args,1);
 800048c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000490:	2201      	movs	r2, #1
 8000492:	4619      	mov	r1, r3
 8000494:	4888      	ldr	r0, [pc, #544]	; (80006b8 <main+0x2dc>)
 8000496:	f000 fe53 	bl	8001140 <SPI_ReceiveData>
			printf("COMMAND_LED_CTRL Executed\n");
 800049a:	4889      	ldr	r0, [pc, #548]	; (80006c0 <main+0x2e4>)
 800049c:	f000 ff60 	bl	8001360 <puts>


		//2. CMD_SENOSR_READ   <analog pin number(1) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80004a0:	bf00      	nop
 80004a2:	2100      	movs	r1, #0
 80004a4:	4885      	ldr	r0, [pc, #532]	; (80006bc <main+0x2e0>)
 80004a6:	f000 fd0b 	bl	8000ec0 <GPIO_ReadFromInputPin>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0f8      	beq.n	80004a2 <main+0xc6>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80004b0:	f7ff fef6 	bl	80002a0 <delay>

		commandcode = COMMAND_SENSOR_READ;
 80004b4:	2351      	movs	r3, #81	; 0x51
 80004b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 80004ba:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80004be:	2201      	movs	r2, #1
 80004c0:	4619      	mov	r1, r3
 80004c2:	487d      	ldr	r0, [pc, #500]	; (80006b8 <main+0x2dc>)
 80004c4:	f000 fdfc 	bl	80010c0 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 80004c8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80004cc:	2201      	movs	r2, #1
 80004ce:	4619      	mov	r1, r3
 80004d0:	4879      	ldr	r0, [pc, #484]	; (80006b8 <main+0x2dc>)
 80004d2:	f000 fe35 	bl	8001140 <SPI_ReceiveData>


		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 80004d6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80004da:	2201      	movs	r2, #1
 80004dc:	4619      	mov	r1, r3
 80004de:	4876      	ldr	r0, [pc, #472]	; (80006b8 <main+0x2dc>)
 80004e0:	f000 fdee 	bl	80010c0 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 80004e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004e8:	2201      	movs	r2, #1
 80004ea:	4619      	mov	r1, r3
 80004ec:	4872      	ldr	r0, [pc, #456]	; (80006b8 <main+0x2dc>)
 80004ee:	f000 fe27 	bl	8001140 <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 80004f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ff60 	bl	80003bc <SPI_VerifyResponse>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d024      	beq.n	800054c <main+0x170>
		{
			args[0] = ANALOG_PIN0;
 8000502:	2300      	movs	r3, #0
 8000504:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending one byte of
 8000508:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800050c:	2201      	movs	r2, #1
 800050e:	4619      	mov	r1, r3
 8000510:	4869      	ldr	r0, [pc, #420]	; (80006b8 <main+0x2dc>)
 8000512:	f000 fdd5 	bl	80010c0 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000516:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800051a:	2201      	movs	r2, #1
 800051c:	4619      	mov	r1, r3
 800051e:	4866      	ldr	r0, [pc, #408]	; (80006b8 <main+0x2dc>)
 8000520:	f000 fe0e 	bl	8001140 <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 8000524:	f7ff febc 	bl	80002a0 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 8000528:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800052c:	2201      	movs	r2, #1
 800052e:	4619      	mov	r1, r3
 8000530:	4861      	ldr	r0, [pc, #388]	; (80006b8 <main+0x2dc>)
 8000532:	f000 fdc5 	bl	80010c0 <SPI_SendData>

			uint8_t analog_read;
			SPI_ReceiveData(SPI2,&analog_read,1);
 8000536:	1cfb      	adds	r3, r7, #3
 8000538:	2201      	movs	r2, #1
 800053a:	4619      	mov	r1, r3
 800053c:	485e      	ldr	r0, [pc, #376]	; (80006b8 <main+0x2dc>)
 800053e:	f000 fdff 	bl	8001140 <SPI_ReceiveData>
			printf("COMMAND_SENSOR_READ %d\n",analog_read);
 8000542:	78fb      	ldrb	r3, [r7, #3]
 8000544:	4619      	mov	r1, r3
 8000546:	485f      	ldr	r0, [pc, #380]	; (80006c4 <main+0x2e8>)
 8000548:	f000 fe84 	bl	8001254 <iprintf>
		}

		//3.  CMD_LED_READ 	 <pin no(1) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800054c:	bf00      	nop
 800054e:	2100      	movs	r1, #0
 8000550:	485a      	ldr	r0, [pc, #360]	; (80006bc <main+0x2e0>)
 8000552:	f000 fcb5 	bl	8000ec0 <GPIO_ReadFromInputPin>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0f8      	beq.n	800054e <main+0x172>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800055c:	f7ff fea0 	bl	80002a0 <delay>

		commandcode = COMMAND_LED_READ;
 8000560:	2352      	movs	r3, #82	; 0x52
 8000562:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000566:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800056a:	2201      	movs	r2, #1
 800056c:	4619      	mov	r1, r3
 800056e:	4852      	ldr	r0, [pc, #328]	; (80006b8 <main+0x2dc>)
 8000570:	f000 fda6 	bl	80010c0 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000574:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000578:	2201      	movs	r2, #1
 800057a:	4619      	mov	r1, r3
 800057c:	484e      	ldr	r0, [pc, #312]	; (80006b8 <main+0x2dc>)
 800057e:	f000 fddf 	bl	8001140 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000582:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000586:	2201      	movs	r2, #1
 8000588:	4619      	mov	r1, r3
 800058a:	484b      	ldr	r0, [pc, #300]	; (80006b8 <main+0x2dc>)
 800058c:	f000 fd98 	bl	80010c0 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000594:	2201      	movs	r2, #1
 8000596:	4619      	mov	r1, r3
 8000598:	4847      	ldr	r0, [pc, #284]	; (80006b8 <main+0x2dc>)
 800059a:	f000 fdd1 	bl	8001140 <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 800059e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff ff0a 	bl	80003bc <SPI_VerifyResponse>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d024      	beq.n	80005f8 <main+0x21c>
		{
			args[0] = LED_PIN;
 80005ae:	2309      	movs	r3, #9
 80005b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending one byte of
 80005b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005b8:	2201      	movs	r2, #1
 80005ba:	4619      	mov	r1, r3
 80005bc:	483e      	ldr	r0, [pc, #248]	; (80006b8 <main+0x2dc>)
 80005be:	f000 fd7f 	bl	80010c0 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 80005c2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	483b      	ldr	r0, [pc, #236]	; (80006b8 <main+0x2dc>)
 80005cc:	f000 fdb8 	bl	8001140 <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 80005d0:	f7ff fe66 	bl	80002a0 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 80005d4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80005d8:	2201      	movs	r2, #1
 80005da:	4619      	mov	r1, r3
 80005dc:	4836      	ldr	r0, [pc, #216]	; (80006b8 <main+0x2dc>)
 80005de:	f000 fd6f 	bl	80010c0 <SPI_SendData>

			uint8_t led_status;
			SPI_ReceiveData(SPI2,&led_status,1);
 80005e2:	1cbb      	adds	r3, r7, #2
 80005e4:	2201      	movs	r2, #1
 80005e6:	4619      	mov	r1, r3
 80005e8:	4833      	ldr	r0, [pc, #204]	; (80006b8 <main+0x2dc>)
 80005ea:	f000 fda9 	bl	8001140 <SPI_ReceiveData>
			printf("COMMAND_READ_LED %d\n",led_status);
 80005ee:	78bb      	ldrb	r3, [r7, #2]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4835      	ldr	r0, [pc, #212]	; (80006c8 <main+0x2ec>)
 80005f4:	f000 fe2e 	bl	8001254 <iprintf>
		}

		//4. CMD_PRINT 		<len(2)>  <message(len) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80005f8:	bf00      	nop
 80005fa:	2100      	movs	r1, #0
 80005fc:	482f      	ldr	r0, [pc, #188]	; (80006bc <main+0x2e0>)
 80005fe:	f000 fc5f 	bl	8000ec0 <GPIO_ReadFromInputPin>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0f8      	beq.n	80005fa <main+0x21e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000608:	f7ff fe4a 	bl	80002a0 <delay>

		commandcode = COMMAND_PRINT;
 800060c:	2353      	movs	r3, #83	; 0x53
 800060e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000612:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000616:	2201      	movs	r2, #1
 8000618:	4619      	mov	r1, r3
 800061a:	4827      	ldr	r0, [pc, #156]	; (80006b8 <main+0x2dc>)
 800061c:	f000 fd50 	bl	80010c0 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000620:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000624:	2201      	movs	r2, #1
 8000626:	4619      	mov	r1, r3
 8000628:	4823      	ldr	r0, [pc, #140]	; (80006b8 <main+0x2dc>)
 800062a:	f000 fd89 	bl	8001140 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 800062e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000632:	2201      	movs	r2, #1
 8000634:	4619      	mov	r1, r3
 8000636:	4820      	ldr	r0, [pc, #128]	; (80006b8 <main+0x2dc>)
 8000638:	f000 fd42 	bl	80010c0 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 800063c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000640:	2201      	movs	r2, #1
 8000642:	4619      	mov	r1, r3
 8000644:	481c      	ldr	r0, [pc, #112]	; (80006b8 <main+0x2dc>)
 8000646:	f000 fd7b 	bl	8001140 <SPI_ReceiveData>

		uint8_t message[] = "Hello ! How are you ??";
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <main+0x2f0>)
 800064c:	f107 0410 	add.w	r4, r7, #16
 8000650:	461d      	mov	r5, r3
 8000652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000656:	e895 0003 	ldmia.w	r5, {r0, r1}
 800065a:	6020      	str	r0, [r4, #0]
 800065c:	3404      	adds	r4, #4
 800065e:	8021      	strh	r1, [r4, #0]
 8000660:	3402      	adds	r4, #2
 8000662:	0c0b      	lsrs	r3, r1, #16
 8000664:	7023      	strb	r3, [r4, #0]
		if( SPI_VerifyResponse(ackbyte))
 8000666:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fea6 	bl	80003bc <SPI_VerifyResponse>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d048      	beq.n	8000708 <main+0x32c>
		{
			args[0] = strlen((char*)message);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fdb8 	bl	80001f0 <strlen>
 8000680:	4603      	mov	r3, r0
 8000682:	b2db      	uxtb	r3, r3
 8000684:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending length
 8000688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <main+0x2dc>)
 8000692:	f000 fd15 	bl	80010c0 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000696:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800069a:	2201      	movs	r2, #1
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <main+0x2dc>)
 80006a0:	f000 fd4e 	bl	8001140 <SPI_ReceiveData>

			delay();
 80006a4:	f7ff fdfc 	bl	80002a0 <delay>

			//send message
			for(int i = 0 ; i < args[0] ; i++){
 80006a8:	2300      	movs	r3, #0
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
 80006ac:	e023      	b.n	80006f6 <main+0x31a>
 80006ae:	bf00      	nop
 80006b0:	080021fc 	.word	0x080021fc
 80006b4:	08002214 	.word	0x08002214
 80006b8:	40003800 	.word	0x40003800
 80006bc:	40020000 	.word	0x40020000
 80006c0:	08002224 	.word	0x08002224
 80006c4:	08002240 	.word	0x08002240
 80006c8:	08002258 	.word	0x08002258
 80006cc:	080022b8 	.word	0x080022b8
				SPI_SendData(SPI2,&message[i],1);
 80006d0:	f107 0210 	add.w	r2, r7, #16
 80006d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006d6:	4413      	add	r3, r2
 80006d8:	2201      	movs	r2, #1
 80006da:	4619      	mov	r1, r3
 80006dc:	483b      	ldr	r0, [pc, #236]	; (80007cc <main+0x3f0>)
 80006de:	f000 fcef 	bl	80010c0 <SPI_SendData>
				SPI_ReceiveData(SPI2,&dummy_read,1);
 80006e2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	4838      	ldr	r0, [pc, #224]	; (80007cc <main+0x3f0>)
 80006ec:	f000 fd28 	bl	8001140 <SPI_ReceiveData>
			for(int i = 0 ; i < args[0] ; i++){
 80006f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f2:	3301      	adds	r3, #1
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
 80006f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006fa:	461a      	mov	r2, r3
 80006fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006fe:	4293      	cmp	r3, r2
 8000700:	dbe6      	blt.n	80006d0 <main+0x2f4>
			}

			printf("COMMAND_PRINT Executed \n");
 8000702:	4833      	ldr	r0, [pc, #204]	; (80007d0 <main+0x3f4>)
 8000704:	f000 fe2c 	bl	8001360 <puts>

		}

		//5. CMD_ID_READ
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000708:	bf00      	nop
 800070a:	2100      	movs	r1, #0
 800070c:	4831      	ldr	r0, [pc, #196]	; (80007d4 <main+0x3f8>)
 800070e:	f000 fbd7 	bl	8000ec0 <GPIO_ReadFromInputPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0f8      	beq.n	800070a <main+0x32e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000718:	f7ff fdc2 	bl	80002a0 <delay>

		commandcode = COMMAND_ID_READ;
 800071c:	2354      	movs	r3, #84	; 0x54
 800071e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000722:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000726:	2201      	movs	r2, #1
 8000728:	4619      	mov	r1, r3
 800072a:	4828      	ldr	r0, [pc, #160]	; (80007cc <main+0x3f0>)
 800072c:	f000 fcc8 	bl	80010c0 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000730:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000734:	2201      	movs	r2, #1
 8000736:	4619      	mov	r1, r3
 8000738:	4824      	ldr	r0, [pc, #144]	; (80007cc <main+0x3f0>)
 800073a:	f000 fd01 	bl	8001140 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 800073e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000742:	2201      	movs	r2, #1
 8000744:	4619      	mov	r1, r3
 8000746:	4821      	ldr	r0, [pc, #132]	; (80007cc <main+0x3f0>)
 8000748:	f000 fcba 	bl	80010c0 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 800074c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000750:	2201      	movs	r2, #1
 8000752:	4619      	mov	r1, r3
 8000754:	481d      	ldr	r0, [pc, #116]	; (80007cc <main+0x3f0>)
 8000756:	f000 fcf3 	bl	8001140 <SPI_ReceiveData>

		uint8_t id[11];
		uint32_t i=0;
 800075a:	2300      	movs	r3, #0
 800075c:	633b      	str	r3, [r7, #48]	; 0x30
		if( SPI_VerifyResponse(ackbyte))
 800075e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fe2a 	bl	80003bc <SPI_VerifyResponse>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d01e      	beq.n	80007ac <main+0x3d0>
		{
			//read 10 bytes id from the slave
			for(  i = 0 ; i < 10 ; i++)
 800076e:	2300      	movs	r3, #0
 8000770:	633b      	str	r3, [r7, #48]	; 0x30
 8000772:	e011      	b.n	8000798 <main+0x3bc>
			{
				//send dummy byte to fetch data from slave
				SPI_SendData(SPI2,&dummy_write,1);
 8000774:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000778:	2201      	movs	r2, #1
 800077a:	4619      	mov	r1, r3
 800077c:	4813      	ldr	r0, [pc, #76]	; (80007cc <main+0x3f0>)
 800077e:	f000 fc9f 	bl	80010c0 <SPI_SendData>
				SPI_ReceiveData(SPI2,&id[i],1);
 8000782:	1d3a      	adds	r2, r7, #4
 8000784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000786:	4413      	add	r3, r2
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	480f      	ldr	r0, [pc, #60]	; (80007cc <main+0x3f0>)
 800078e:	f000 fcd7 	bl	8001140 <SPI_ReceiveData>
			for(  i = 0 ; i < 10 ; i++)
 8000792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000794:	3301      	adds	r3, #1
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
 8000798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800079a:	2b09      	cmp	r3, #9
 800079c:	d9ea      	bls.n	8000774 <main+0x398>
			}

			id[10] = '\0';
 800079e:	2300      	movs	r3, #0
 80007a0:	73bb      	strb	r3, [r7, #14]

			printf("COMMAND_ID : %s \n",id);
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <main+0x3fc>)
 80007a8:	f000 fd54 	bl	8001254 <iprintf>

		}

		//lets confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 80007ac:	bf00      	nop
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <main+0x3f0>)
 80007b2:	f000 fc69 	bl	8001088 <SPI_GetFlagStatus>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1f8      	bne.n	80007ae <main+0x3d2>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 80007bc:	2100      	movs	r1, #0
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <main+0x3f0>)
 80007c0:	f000 fcfa 	bl	80011b8 <SPI_PeripheralControl>

		printf("SPI Communication Closed\n");
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <main+0x400>)
 80007c6:	f000 fdcb 	bl	8001360 <puts>
	{
 80007ca:	e61d      	b.n	8000408 <main+0x2c>
 80007cc:	40003800 	.word	0x40003800
 80007d0:	08002270 	.word	0x08002270
 80007d4:	40020000 	.word	0x40020000
 80007d8:	08002288 	.word	0x08002288
 80007dc:	0800229c 	.word	0x0800229c

080007e0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <ITM_SendChar+0x44>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <ITM_SendChar+0x44>)
 80007f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007f4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <ITM_SendChar+0x48>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <ITM_SendChar+0x48>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000802:	bf00      	nop
 8000804:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f8      	beq.n	8000804 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000812:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	6013      	str	r3, [r2, #0]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	e000edfc 	.word	0xe000edfc
 8000828:	e0000e00 	.word	0xe0000e00

0800082c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e00a      	b.n	8000854 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800083e:	f3af 8000 	nop.w
 8000842:	4601      	mov	r1, r0
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	60ba      	str	r2, [r7, #8]
 800084a:	b2ca      	uxtb	r2, r1
 800084c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	3301      	adds	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	429a      	cmp	r2, r3
 800085a:	dbf0      	blt.n	800083e <_read+0x12>
	}

return len;
 800085c:	687b      	ldr	r3, [r7, #4]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b086      	sub	sp, #24
 800086a:	af00      	add	r7, sp, #0
 800086c:	60f8      	str	r0, [r7, #12]
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	e009      	b.n	800088c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	60ba      	str	r2, [r7, #8]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffad 	bl	80007e0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3301      	adds	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	dbf1      	blt.n	8000878 <_write+0x12>
	}
	return len;
 8000894:	687b      	ldr	r3, [r7, #4]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <_close>:

int _close(int file)
{
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
	return -1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c4:	605a      	str	r2, [r3, #4]
	return 0;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <_isatty>:

int _isatty(int file)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b083      	sub	sp, #12
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
	return 1;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b085      	sub	sp, #20
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
	return 0;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
	...

08000900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000908:	4a14      	ldr	r2, [pc, #80]	; (800095c <_sbrk+0x5c>)
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <_sbrk+0x60>)
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d102      	bne.n	8000922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <_sbrk+0x64>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <_sbrk+0x68>)
 8000920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	429a      	cmp	r2, r3
 800092e:	d207      	bcs.n	8000940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000930:	f000 fc5e 	bl	80011f0 <__errno>
 8000934:	4603      	mov	r3, r0
 8000936:	220c      	movs	r2, #12
 8000938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	e009      	b.n	8000954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <_sbrk+0x64>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <_sbrk+0x64>)
 8000950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000952:	68fb      	ldr	r3, [r7, #12]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20020000 	.word	0x20020000
 8000960:	00000400 	.word	0x00000400
 8000964:	20000080 	.word	0x20000080
 8000968:	200000a0 	.word	0x200000a0

0800096c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800096e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000970:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000976:	490d      	ldr	r1, [pc, #52]	; (80009ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <LoopForever+0xe>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800097c:	e002      	b.n	8000984 <LoopCopyDataInit>

0800097e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000982:	3304      	adds	r3, #4

08000984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000988:	d3f9      	bcc.n	800097e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800098c:	4c0a      	ldr	r4, [pc, #40]	; (80009b8 <LoopForever+0x16>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000990:	e001      	b.n	8000996 <LoopFillZerobss>

08000992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000994:	3204      	adds	r2, #4

08000996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000998:	d3fb      	bcc.n	8000992 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800099a:	f000 fc2f 	bl	80011fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800099e:	f7ff fd1d 	bl	80003dc <main>

080009a2 <LoopForever>:

LoopForever:
    b LoopForever
 80009a2:	e7fe      	b.n	80009a2 <LoopForever>
  ldr   r0, =_estack
 80009a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ac:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80009b0:	08002388 	.word	0x08002388
  ldr r2, =_sbss
 80009b4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80009b8:	2000009c 	.word	0x2000009c

080009bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC_IRQHandler>
	...

080009c0 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t*pGPIOx, uint8_t EnorDi)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d162      	bne.n	8000a98 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a64      	ldr	r2, [pc, #400]	; (8000b68 <GPIO_PeriClockControl+0x1a8>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d106      	bne.n	80009e8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80009da:	4b64      	ldr	r3, [pc, #400]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a63      	ldr	r2, [pc, #396]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80009e6:	e0b9      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a61      	ldr	r2, [pc, #388]	; (8000b70 <GPIO_PeriClockControl+0x1b0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d106      	bne.n	80009fe <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80009f0:	4b5e      	ldr	r3, [pc, #376]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a5d      	ldr	r2, [pc, #372]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 80009f6:	f043 0302 	orr.w	r3, r3, #2
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009fc:	e0ae      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a5c      	ldr	r2, [pc, #368]	; (8000b74 <GPIO_PeriClockControl+0x1b4>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d106      	bne.n	8000a14 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000a06:	4b59      	ldr	r3, [pc, #356]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a58      	ldr	r2, [pc, #352]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a12:	e0a3      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a58      	ldr	r2, [pc, #352]	; (8000b78 <GPIO_PeriClockControl+0x1b8>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d106      	bne.n	8000a2a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000a1c:	4b53      	ldr	r3, [pc, #332]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	4a52      	ldr	r2, [pc, #328]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000a22:	f043 0308 	orr.w	r3, r3, #8
 8000a26:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a28:	e098      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a53      	ldr	r2, [pc, #332]	; (8000b7c <GPIO_PeriClockControl+0x1bc>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d106      	bne.n	8000a40 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000a32:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a4d      	ldr	r2, [pc, #308]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000a38:	f043 0310 	orr.w	r3, r3, #16
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a3e:	e08d      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a4f      	ldr	r2, [pc, #316]	; (8000b80 <GPIO_PeriClockControl+0x1c0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d106      	bne.n	8000a56 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	4a47      	ldr	r2, [pc, #284]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000a4e:	f043 0320 	orr.w	r3, r3, #32
 8000a52:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a54:	e082      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a4a      	ldr	r2, [pc, #296]	; (8000b84 <GPIO_PeriClockControl+0x1c4>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d106      	bne.n	8000a6c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000a5e:	4b43      	ldr	r3, [pc, #268]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a42      	ldr	r2, [pc, #264]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a6a:	e077      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a46      	ldr	r2, [pc, #280]	; (8000b88 <GPIO_PeriClockControl+0x1c8>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d106      	bne.n	8000a82 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000a74:	4b3d      	ldr	r3, [pc, #244]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a3c      	ldr	r2, [pc, #240]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a80:	e06c      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a41      	ldr	r2, [pc, #260]	; (8000b8c <GPIO_PeriClockControl+0x1cc>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d168      	bne.n	8000b5c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000a8a:	4b38      	ldr	r3, [pc, #224]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a37      	ldr	r2, [pc, #220]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a96:	e061      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a33      	ldr	r2, [pc, #204]	; (8000b68 <GPIO_PeriClockControl+0x1a8>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d106      	bne.n	8000aae <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000aa0:	4b32      	ldr	r3, [pc, #200]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	4a31      	ldr	r2, [pc, #196]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000aa6:	f023 0301 	bic.w	r3, r3, #1
 8000aaa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aac:	e056      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <GPIO_PeriClockControl+0x1b0>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d106      	bne.n	8000ac4 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a2c      	ldr	r2, [pc, #176]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000abc:	f023 0302 	bic.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ac2:	e04b      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a2b      	ldr	r2, [pc, #172]	; (8000b74 <GPIO_PeriClockControl+0x1b4>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d106      	bne.n	8000ada <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000acc:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a26      	ldr	r2, [pc, #152]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000ad2:	f023 0304 	bic.w	r3, r3, #4
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ad8:	e040      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <GPIO_PeriClockControl+0x1b8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d106      	bne.n	8000af0 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000ae2:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000ae8:	f023 0308 	bic.w	r3, r3, #8
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aee:	e035      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <GPIO_PeriClockControl+0x1bc>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d106      	bne.n	8000b06 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	4a1b      	ldr	r2, [pc, #108]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000afe:	f023 0310 	bic.w	r3, r3, #16
 8000b02:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b04:	e02a      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <GPIO_PeriClockControl+0x1c0>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d106      	bne.n	8000b1c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000b14:	f023 0320 	bic.w	r3, r3, #32
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b1a:	e01f      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <GPIO_PeriClockControl+0x1c4>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d106      	bne.n	8000b32 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b2e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b30:	e014      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <GPIO_PeriClockControl+0x1c8>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d106      	bne.n	8000b48 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b46:	e009      	b.n	8000b5c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <GPIO_PeriClockControl+0x1cc>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d105      	bne.n	8000b5c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <GPIO_PeriClockControl+0x1ac>)
 8000b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b5a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020400 	.word	0x40020400
 8000b74:	40020800 	.word	0x40020800
 8000b78:	40020c00 	.word	0x40020c00
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40021400 	.word	0x40021400
 8000b84:	40021800 	.word	0x40021800
 8000b88:	40021c00 	.word	0x40021c00
 8000b8c:	40022000 	.word	0x40022000

08000b90 <GPIO_Init>:

/*
 * Init & De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff0c 	bl	80009c0 <GPIO_PeriClockControl>

	//1. configure the mode of gpio
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	795b      	ldrb	r3, [r3, #5]
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d81f      	bhi.n	8000bf0 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	795b      	ldrb	r3, [r3, #5]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	791b      	ldrb	r3, [r3, #4]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	617b      	str	r3, [r7, #20]

		pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	791b      	ldrb	r3, [r3, #4]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	2303      	movs	r3, #3
 8000bd0:	408b      	lsls	r3, r1
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	400a      	ands	r2, r1
 8000bdc:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx ->MODER |= temp; //setting
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	6819      	ldr	r1, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	e0c2      	b.n	8000d76 <GPIO_Init+0x1e6>


	}else
	{
		//code later
		if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	795b      	ldrb	r3, [r3, #5]
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d817      	bhi.n	8000c28 <GPIO_Init+0x98>
		{
			//1. configure the FTSR
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000bf8:	4b47      	ldr	r3, [pc, #284]	; (8000d18 <GPIO_Init+0x188>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	7912      	ldrb	r2, [r2, #4]
 8000c00:	4611      	mov	r1, r2
 8000c02:	2201      	movs	r2, #1
 8000c04:	408a      	lsls	r2, r1
 8000c06:	4611      	mov	r1, r2
 8000c08:	4a43      	ldr	r2, [pc, #268]	; (8000d18 <GPIO_Init+0x188>)
 8000c0a:	430b      	orrs	r3, r1
 8000c0c:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI ->RTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000c0e:	4b42      	ldr	r3, [pc, #264]	; (8000d18 <GPIO_Init+0x188>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	7912      	ldrb	r2, [r2, #4]
 8000c16:	4611      	mov	r1, r2
 8000c18:	2201      	movs	r2, #1
 8000c1a:	408a      	lsls	r2, r1
 8000c1c:	43d2      	mvns	r2, r2
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4a3d      	ldr	r2, [pc, #244]	; (8000d18 <GPIO_Init+0x188>)
 8000c22:	400b      	ands	r3, r1
 8000c24:	6093      	str	r3, [r2, #8]
 8000c26:	e035      	b.n	8000c94 <GPIO_Init+0x104>
		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	795b      	ldrb	r3, [r3, #5]
 8000c2c:	2b05      	cmp	r3, #5
 8000c2e:	d817      	bhi.n	8000c60 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000c30:	4b39      	ldr	r3, [pc, #228]	; (8000d18 <GPIO_Init+0x188>)
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	7912      	ldrb	r2, [r2, #4]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	408a      	lsls	r2, r1
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4a35      	ldr	r2, [pc, #212]	; (8000d18 <GPIO_Init+0x188>)
 8000c42:	430b      	orrs	r3, r1
 8000c44:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000c46:	4b34      	ldr	r3, [pc, #208]	; (8000d18 <GPIO_Init+0x188>)
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	7912      	ldrb	r2, [r2, #4]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	2201      	movs	r2, #1
 8000c52:	408a      	lsls	r2, r1
 8000c54:	43d2      	mvns	r2, r2
 8000c56:	4611      	mov	r1, r2
 8000c58:	4a2f      	ldr	r2, [pc, #188]	; (8000d18 <GPIO_Init+0x188>)
 8000c5a:	400b      	ands	r3, r1
 8000c5c:	60d3      	str	r3, [r2, #12]
 8000c5e:	e019      	b.n	8000c94 <GPIO_Init+0x104>

		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	795b      	ldrb	r3, [r3, #5]
 8000c64:	2b06      	cmp	r3, #6
 8000c66:	d815      	bhi.n	8000c94 <GPIO_Init+0x104>
		{
			//1. configure the both FTSR and RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000c68:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <GPIO_Init+0x188>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	7912      	ldrb	r2, [r2, #4]
 8000c70:	4611      	mov	r1, r2
 8000c72:	2201      	movs	r2, #1
 8000c74:	408a      	lsls	r2, r1
 8000c76:	4611      	mov	r1, r2
 8000c78:	4a27      	ldr	r2, [pc, #156]	; (8000d18 <GPIO_Init+0x188>)
 8000c7a:	430b      	orrs	r3, r1
 8000c7c:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <GPIO_Init+0x188>)
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	7912      	ldrb	r2, [r2, #4]
 8000c86:	4611      	mov	r1, r2
 8000c88:	2201      	movs	r2, #1
 8000c8a:	408a      	lsls	r2, r1
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <GPIO_Init+0x188>)
 8000c90:	430b      	orrs	r3, r1
 8000c92:	60d3      	str	r3, [r2, #12]

		}

		//2. configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	791b      	ldrb	r3, [r3, #4]
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	791b      	ldrb	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <GPIO_Init+0x18c>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d045      	beq.n	8000d3c <GPIO_Init+0x1ac>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a1a      	ldr	r2, [pc, #104]	; (8000d20 <GPIO_Init+0x190>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d02b      	beq.n	8000d12 <GPIO_Init+0x182>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <GPIO_Init+0x194>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d024      	beq.n	8000d0e <GPIO_Init+0x17e>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <GPIO_Init+0x198>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d01d      	beq.n	8000d0a <GPIO_Init+0x17a>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <GPIO_Init+0x19c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d016      	beq.n	8000d06 <GPIO_Init+0x176>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <GPIO_Init+0x1a0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d00f      	beq.n	8000d02 <GPIO_Init+0x172>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <GPIO_Init+0x1a4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d008      	beq.n	8000cfe <GPIO_Init+0x16e>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <GPIO_Init+0x1a8>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d101      	bne.n	8000cfa <GPIO_Init+0x16a>
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	e021      	b.n	8000d3e <GPIO_Init+0x1ae>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e01f      	b.n	8000d3e <GPIO_Init+0x1ae>
 8000cfe:	2306      	movs	r3, #6
 8000d00:	e01d      	b.n	8000d3e <GPIO_Init+0x1ae>
 8000d02:	2305      	movs	r3, #5
 8000d04:	e01b      	b.n	8000d3e <GPIO_Init+0x1ae>
 8000d06:	2304      	movs	r3, #4
 8000d08:	e019      	b.n	8000d3e <GPIO_Init+0x1ae>
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e017      	b.n	8000d3e <GPIO_Init+0x1ae>
 8000d0e:	2302      	movs	r3, #2
 8000d10:	e015      	b.n	8000d3e <GPIO_Init+0x1ae>
 8000d12:	2301      	movs	r3, #1
 8000d14:	e013      	b.n	8000d3e <GPIO_Init+0x1ae>
 8000d16:	bf00      	nop
 8000d18:	40013c00 	.word	0x40013c00
 8000d1c:	40020000 	.word	0x40020000
 8000d20:	40020400 	.word	0x40020400
 8000d24:	40020800 	.word	0x40020800
 8000d28:	40020c00 	.word	0x40020c00
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40021400 	.word	0x40021400
 8000d34:	40021800 	.word	0x40021800
 8000d38:	40021c00 	.word	0x40021c00
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000d40:	4b5c      	ldr	r3, [pc, #368]	; (8000eb4 <GPIO_Init+0x324>)
 8000d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d44:	4a5b      	ldr	r2, [pc, #364]	; (8000eb4 <GPIO_Init+0x324>)
 8000d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]= portcode << (temp2*4);
 8000d4c:	7c7a      	ldrb	r2, [r7, #17]
 8000d4e:	7cbb      	ldrb	r3, [r7, #18]
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	fa02 f103 	lsl.w	r1, r2, r3
 8000d56:	4a58      	ldr	r2, [pc, #352]	; (8000eb8 <GPIO_Init+0x328>)
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI ->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000d60:	4b56      	ldr	r3, [pc, #344]	; (8000ebc <GPIO_Init+0x32c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	7912      	ldrb	r2, [r2, #4]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	408a      	lsls	r2, r1
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4a52      	ldr	r2, [pc, #328]	; (8000ebc <GPIO_Init+0x32c>)
 8000d72:	430b      	orrs	r3, r1
 8000d74:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
	//2. configure the speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	799b      	ldrb	r3, [r3, #6]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	791b      	ldrb	r3, [r3, #4]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	791b      	ldrb	r3, [r3, #4]
 8000d96:	4619      	mov	r1, r3
 8000d98:	2303      	movs	r3, #3
 8000d9a:	408b      	lsls	r3, r1
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	400a      	ands	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OSPEEDR |= temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6899      	ldr	r1, [r3, #8]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	430a      	orrs	r2, r1
 8000db6:	609a      	str	r2, [r3, #8]

	temp =0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
	//3. configure the pu pd settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	79db      	ldrb	r3, [r3, #7]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	791b      	ldrb	r3, [r3, #4]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	791b      	ldrb	r3, [r3, #4]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	2303      	movs	r3, #3
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	43db      	mvns	r3, r3
 8000de0:	4619      	mov	r1, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	400a      	ands	r2, r1
 8000de8:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->PUPDR |= temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68d9      	ldr	r1, [r3, #12]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	60da      	str	r2, [r3, #12]

	temp =0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]

	//4. configure
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinoType << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7a1b      	ldrb	r3, [r3, #8]
 8000e02:	461a      	mov	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	791b      	ldrb	r3, [r3, #4]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x01 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	791b      	ldrb	r3, [r3, #4]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	4619      	mov	r1, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	400a      	ands	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OTYPER |= temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6859      	ldr	r1, [r3, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	605a      	str	r2, [r3, #4]

	temp =0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]

	//5. configure
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	795b      	ldrb	r3, [r3, #5]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d132      	bne.n	8000eac <GPIO_Init+0x31c>
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	791b      	ldrb	r3, [r3, #4]
 8000e4a:	08db      	lsrs	r3, r3, #3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	791b      	ldrb	r3, [r3, #4]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	3208      	adds	r2, #8
 8000e62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	4619      	mov	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4011      	ands	r1, r2
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	3208      	adds	r2, #8
 8000e8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7a5b      	ldrb	r3, [r3, #9]
 8000e92:	4619      	mov	r1, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4311      	orrs	r1, r2
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	3208      	adds	r2, #8
 8000ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000eac:	bf00      	nop
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40013800 	.word	0x40013800
 8000ebc:	40013c00 	.word	0x40013c00

08000ec0 <GPIO_ReadFromInputPin>:

/*
 * Data read & write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (pGPIOx->IDR >> PinNumber) & 0x00000001;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
	return value;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
	...

08000eec <SPI_PeriClockControl>:
static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_RegDef_t*pSPIx, uint8_t EnorDi)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d120      	bne.n	8000f40 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a22      	ldr	r2, [pc, #136]	; (8000f8c <SPI_PeriClockControl+0xa0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d106      	bne.n	8000f14 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000f06:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <SPI_PeriClockControl+0xa4>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a21      	ldr	r2, [pc, #132]	; (8000f90 <SPI_PeriClockControl+0xa4>)
 8000f0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI3_PCLK_DI();
		}
	}

}
 8000f12:	e035      	b.n	8000f80 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <SPI_PeriClockControl+0xa8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d106      	bne.n	8000f2a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <SPI_PeriClockControl+0xa4>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <SPI_PeriClockControl+0xa4>)
 8000f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f26:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f28:	e02a      	b.n	8000f80 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <SPI_PeriClockControl+0xac>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d126      	bne.n	8000f80 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <SPI_PeriClockControl+0xa4>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a16      	ldr	r2, [pc, #88]	; (8000f90 <SPI_PeriClockControl+0xa4>)
 8000f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f3e:	e01f      	b.n	8000f80 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <SPI_PeriClockControl+0xa0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d106      	bne.n	8000f56 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <SPI_PeriClockControl+0xa4>)
 8000f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4c:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <SPI_PeriClockControl+0xa4>)
 8000f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f52:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000f54:	e014      	b.n	8000f80 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <SPI_PeriClockControl+0xa8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d106      	bne.n	8000f6c <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <SPI_PeriClockControl+0xa4>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <SPI_PeriClockControl+0xa4>)
 8000f64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000f6a:	e009      	b.n	8000f80 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SPI_PeriClockControl+0xac>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d105      	bne.n	8000f80 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <SPI_PeriClockControl+0xa4>)
 8000f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f78:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <SPI_PeriClockControl+0xa4>)
 8000f7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f7e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40013000 	.word	0x40013000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40003800 	.word	0x40003800
 8000f98:	40003c00 	.word	0x40003c00

08000f9c <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d106      	bne.n	8000fbc <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f043 0204 	orr.w	r2, r3, #4
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000fba:	e005      	b.n	8000fc8 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f023 0204 	bic.w	r2, r3, #4
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	605a      	str	r2, [r3, #4]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <SPI_Init>:
/************************
 *
 */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff83 	bl	8000eec <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	791b      	ldrb	r3, [r3, #4]
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	795b      	ldrb	r3, [r3, #5]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d104      	bne.n	800100a <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e014      	b.n	8001034 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	795b      	ldrb	r3, [r3, #5]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d104      	bne.n	800101c <SPI_Init+0x4a>
	{
		//BIDI mode should be set
		tempreg |= ~(1<<SPI_CR1_BIDIMODE);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e00b      	b.n	8001034 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	795b      	ldrb	r3, [r3, #5]
 8001020:	2b03      	cmp	r3, #3
 8001022:	d107      	bne.n	8001034 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800102a:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1<<SPI_CR1_RXONLY);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001032:	60fb      	str	r3, [r7, #12]
	}
	//3. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	799b      	ldrb	r3, [r3, #6]
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4313      	orrs	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	79db      	ldrb	r3, [r3, #7]
 8001046:	02db      	lsls	r3, r3, #11
 8001048:	461a      	mov	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]
	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7a1b      	ldrb	r3, [r3, #8]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7a5b      	ldrb	r3, [r3, #9]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7a9b      	ldrb	r3, [r3, #10]
 800106e:	025b      	lsls	r3, r3, #9
 8001070:	461a      	mov	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <SPI_GetFlagStatus>:
/*************************
 *
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	printf(" %x \n",pSPIx->SR & FlagName);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	4013      	ands	r3, r2
 800109a:	4619      	mov	r1, r3
 800109c:	4807      	ldr	r0, [pc, #28]	; (80010bc <SPI_GetFlagStatus+0x34>)
 800109e:	f000 f8d9 	bl	8001254 <iprintf>
	if(pSPIx->SR & FlagName)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	4013      	ands	r3, r2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SPI_GetFlagStatus+0x2a>
	{
		return FLAG_SET;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <SPI_GetFlagStatus+0x2c>
	}
	return FLAG_RESET;
 80010b2:	2300      	movs	r3, #0

}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	080022d0 	.word	0x080022d0

080010c0 <SPI_SendData>:
/**************************
 *
 */

void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]

	while(Len > 0)
 80010cc:	e02d      	b.n	800112a <SPI_SendData+0x6a>
	{
		uint8_t temp = *pTxBuffer;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	75fb      	strb	r3, [r7, #23]
		//1. wait until TXE is set
		printf("TXE \n");
 80010d4:	4819      	ldr	r0, [pc, #100]	; (800113c <SPI_SendData+0x7c>)
 80010d6:	f000 f943 	bl	8001360 <puts>
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );
 80010da:	bf00      	nop
 80010dc:	2102      	movs	r1, #2
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f7ff ffd2 	bl	8001088 <SPI_GetFlagStatus>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f8      	beq.n	80010dc <SPI_SendData+0x1c>

		//2. check the DFF bit in CR1
		if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00e      	beq.n	8001114 <SPI_SendData+0x54>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR =   *((uint16_t*)pTxBuffer);
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	60da      	str	r2, [r3, #12]
			Len--;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
			Len--;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3b01      	subs	r3, #1
 800110a:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	3301      	adds	r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	e00a      	b.n	800112a <SPI_SendData+0x6a>
		}else
		{
			//8 bit DFF
			pSPIx->DR =   *pTxBuffer;
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	60da      	str	r2, [r3, #12]
			Len--;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3b01      	subs	r3, #1
 8001122:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	3301      	adds	r3, #1
 8001128:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1ce      	bne.n	80010ce <SPI_SendData+0xe>
		}
	}

}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	080022d8 	.word	0x080022d8

08001140 <SPI_ReceiveData>:
 * @return            -
 *
 * @Note              -
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 800114c:	e02a      	b.n	80011a4 <SPI_ReceiveData+0x64>
		{
			printf("RXNE \n");
 800114e:	4819      	ldr	r0, [pc, #100]	; (80011b4 <SPI_ReceiveData+0x74>)
 8001150:	f000 f906 	bl	8001360 <puts>
			//1. wait until RXNE is set
			while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG) == FLAG_RESET );
 8001154:	bf00      	nop
 8001156:	2101      	movs	r1, #1
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f7ff ff95 	bl	8001088 <SPI_GetFlagStatus>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f8      	beq.n	8001156 <SPI_ReceiveData+0x16>

			//2. check the DFF bit in CR1
			if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00e      	beq.n	800118e <SPI_ReceiveData+0x4e>
			{
				//16 bit DFF
				//1. load the data from DR to Rxbuffer address
				 *((uint16_t*)pRxBuffer) = pSPIx->DR ;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	b29a      	uxth	r2, r3
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	801a      	strh	r2, [r3, #0]
				Len--;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3b01      	subs	r3, #1
 800117e:	607b      	str	r3, [r7, #4]
				Len--;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	3301      	adds	r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	e00a      	b.n	80011a4 <SPI_ReceiveData+0x64>
			}else
			{
				//8 bit DFF
				*(pRxBuffer) = pSPIx->DR ;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	701a      	strb	r2, [r3, #0]
				Len--;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	3301      	adds	r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1d1      	bne.n	800114e <SPI_ReceiveData+0xe>
			}
		}

}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	080022e0 	.word	0x080022e0

080011b8 <SPI_PeripheralControl>:
/**************************
 *
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d106      	bne.n	80011d8 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 80011d6:	e005      	b.n	80011e4 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
	...

080011f0 <__errno>:
 80011f0:	4b01      	ldr	r3, [pc, #4]	; (80011f8 <__errno+0x8>)
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000000 	.word	0x20000000

080011fc <__libc_init_array>:
 80011fc:	b570      	push	{r4, r5, r6, lr}
 80011fe:	4d0d      	ldr	r5, [pc, #52]	; (8001234 <__libc_init_array+0x38>)
 8001200:	4c0d      	ldr	r4, [pc, #52]	; (8001238 <__libc_init_array+0x3c>)
 8001202:	1b64      	subs	r4, r4, r5
 8001204:	10a4      	asrs	r4, r4, #2
 8001206:	2600      	movs	r6, #0
 8001208:	42a6      	cmp	r6, r4
 800120a:	d109      	bne.n	8001220 <__libc_init_array+0x24>
 800120c:	4d0b      	ldr	r5, [pc, #44]	; (800123c <__libc_init_array+0x40>)
 800120e:	4c0c      	ldr	r4, [pc, #48]	; (8001240 <__libc_init_array+0x44>)
 8001210:	f000 ffe8 	bl	80021e4 <_init>
 8001214:	1b64      	subs	r4, r4, r5
 8001216:	10a4      	asrs	r4, r4, #2
 8001218:	2600      	movs	r6, #0
 800121a:	42a6      	cmp	r6, r4
 800121c:	d105      	bne.n	800122a <__libc_init_array+0x2e>
 800121e:	bd70      	pop	{r4, r5, r6, pc}
 8001220:	f855 3b04 	ldr.w	r3, [r5], #4
 8001224:	4798      	blx	r3
 8001226:	3601      	adds	r6, #1
 8001228:	e7ee      	b.n	8001208 <__libc_init_array+0xc>
 800122a:	f855 3b04 	ldr.w	r3, [r5], #4
 800122e:	4798      	blx	r3
 8001230:	3601      	adds	r6, #1
 8001232:	e7f2      	b.n	800121a <__libc_init_array+0x1e>
 8001234:	08002380 	.word	0x08002380
 8001238:	08002380 	.word	0x08002380
 800123c:	08002380 	.word	0x08002380
 8001240:	08002384 	.word	0x08002384

08001244 <memset>:
 8001244:	4402      	add	r2, r0
 8001246:	4603      	mov	r3, r0
 8001248:	4293      	cmp	r3, r2
 800124a:	d100      	bne.n	800124e <memset+0xa>
 800124c:	4770      	bx	lr
 800124e:	f803 1b01 	strb.w	r1, [r3], #1
 8001252:	e7f9      	b.n	8001248 <memset+0x4>

08001254 <iprintf>:
 8001254:	b40f      	push	{r0, r1, r2, r3}
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <iprintf+0x2c>)
 8001258:	b513      	push	{r0, r1, r4, lr}
 800125a:	681c      	ldr	r4, [r3, #0]
 800125c:	b124      	cbz	r4, 8001268 <iprintf+0x14>
 800125e:	69a3      	ldr	r3, [r4, #24]
 8001260:	b913      	cbnz	r3, 8001268 <iprintf+0x14>
 8001262:	4620      	mov	r0, r4
 8001264:	f000 fa5e 	bl	8001724 <__sinit>
 8001268:	ab05      	add	r3, sp, #20
 800126a:	9a04      	ldr	r2, [sp, #16]
 800126c:	68a1      	ldr	r1, [r4, #8]
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	4620      	mov	r0, r4
 8001272:	f000 fc2b 	bl	8001acc <_vfiprintf_r>
 8001276:	b002      	add	sp, #8
 8001278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800127c:	b004      	add	sp, #16
 800127e:	4770      	bx	lr
 8001280:	20000000 	.word	0x20000000

08001284 <_puts_r>:
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	460e      	mov	r6, r1
 8001288:	4605      	mov	r5, r0
 800128a:	b118      	cbz	r0, 8001294 <_puts_r+0x10>
 800128c:	6983      	ldr	r3, [r0, #24]
 800128e:	b90b      	cbnz	r3, 8001294 <_puts_r+0x10>
 8001290:	f000 fa48 	bl	8001724 <__sinit>
 8001294:	69ab      	ldr	r3, [r5, #24]
 8001296:	68ac      	ldr	r4, [r5, #8]
 8001298:	b913      	cbnz	r3, 80012a0 <_puts_r+0x1c>
 800129a:	4628      	mov	r0, r5
 800129c:	f000 fa42 	bl	8001724 <__sinit>
 80012a0:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <_puts_r+0xd0>)
 80012a2:	429c      	cmp	r4, r3
 80012a4:	d120      	bne.n	80012e8 <_puts_r+0x64>
 80012a6:	686c      	ldr	r4, [r5, #4]
 80012a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012aa:	07db      	lsls	r3, r3, #31
 80012ac:	d405      	bmi.n	80012ba <_puts_r+0x36>
 80012ae:	89a3      	ldrh	r3, [r4, #12]
 80012b0:	0598      	lsls	r0, r3, #22
 80012b2:	d402      	bmi.n	80012ba <_puts_r+0x36>
 80012b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012b6:	f000 fad3 	bl	8001860 <__retarget_lock_acquire_recursive>
 80012ba:	89a3      	ldrh	r3, [r4, #12]
 80012bc:	0719      	lsls	r1, r3, #28
 80012be:	d51d      	bpl.n	80012fc <_puts_r+0x78>
 80012c0:	6923      	ldr	r3, [r4, #16]
 80012c2:	b1db      	cbz	r3, 80012fc <_puts_r+0x78>
 80012c4:	3e01      	subs	r6, #1
 80012c6:	68a3      	ldr	r3, [r4, #8]
 80012c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80012cc:	3b01      	subs	r3, #1
 80012ce:	60a3      	str	r3, [r4, #8]
 80012d0:	bb39      	cbnz	r1, 8001322 <_puts_r+0x9e>
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	da38      	bge.n	8001348 <_puts_r+0xc4>
 80012d6:	4622      	mov	r2, r4
 80012d8:	210a      	movs	r1, #10
 80012da:	4628      	mov	r0, r5
 80012dc:	f000 f848 	bl	8001370 <__swbuf_r>
 80012e0:	3001      	adds	r0, #1
 80012e2:	d011      	beq.n	8001308 <_puts_r+0x84>
 80012e4:	250a      	movs	r5, #10
 80012e6:	e011      	b.n	800130c <_puts_r+0x88>
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <_puts_r+0xd4>)
 80012ea:	429c      	cmp	r4, r3
 80012ec:	d101      	bne.n	80012f2 <_puts_r+0x6e>
 80012ee:	68ac      	ldr	r4, [r5, #8]
 80012f0:	e7da      	b.n	80012a8 <_puts_r+0x24>
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <_puts_r+0xd8>)
 80012f4:	429c      	cmp	r4, r3
 80012f6:	bf08      	it	eq
 80012f8:	68ec      	ldreq	r4, [r5, #12]
 80012fa:	e7d5      	b.n	80012a8 <_puts_r+0x24>
 80012fc:	4621      	mov	r1, r4
 80012fe:	4628      	mov	r0, r5
 8001300:	f000 f888 	bl	8001414 <__swsetup_r>
 8001304:	2800      	cmp	r0, #0
 8001306:	d0dd      	beq.n	80012c4 <_puts_r+0x40>
 8001308:	f04f 35ff 	mov.w	r5, #4294967295
 800130c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800130e:	07da      	lsls	r2, r3, #31
 8001310:	d405      	bmi.n	800131e <_puts_r+0x9a>
 8001312:	89a3      	ldrh	r3, [r4, #12]
 8001314:	059b      	lsls	r3, r3, #22
 8001316:	d402      	bmi.n	800131e <_puts_r+0x9a>
 8001318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800131a:	f000 faa2 	bl	8001862 <__retarget_lock_release_recursive>
 800131e:	4628      	mov	r0, r5
 8001320:	bd70      	pop	{r4, r5, r6, pc}
 8001322:	2b00      	cmp	r3, #0
 8001324:	da04      	bge.n	8001330 <_puts_r+0xac>
 8001326:	69a2      	ldr	r2, [r4, #24]
 8001328:	429a      	cmp	r2, r3
 800132a:	dc06      	bgt.n	800133a <_puts_r+0xb6>
 800132c:	290a      	cmp	r1, #10
 800132e:	d004      	beq.n	800133a <_puts_r+0xb6>
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	6022      	str	r2, [r4, #0]
 8001336:	7019      	strb	r1, [r3, #0]
 8001338:	e7c5      	b.n	80012c6 <_puts_r+0x42>
 800133a:	4622      	mov	r2, r4
 800133c:	4628      	mov	r0, r5
 800133e:	f000 f817 	bl	8001370 <__swbuf_r>
 8001342:	3001      	adds	r0, #1
 8001344:	d1bf      	bne.n	80012c6 <_puts_r+0x42>
 8001346:	e7df      	b.n	8001308 <_puts_r+0x84>
 8001348:	6823      	ldr	r3, [r4, #0]
 800134a:	250a      	movs	r5, #10
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	6022      	str	r2, [r4, #0]
 8001350:	701d      	strb	r5, [r3, #0]
 8001352:	e7db      	b.n	800130c <_puts_r+0x88>
 8001354:	0800230c 	.word	0x0800230c
 8001358:	0800232c 	.word	0x0800232c
 800135c:	080022ec 	.word	0x080022ec

08001360 <puts>:
 8001360:	4b02      	ldr	r3, [pc, #8]	; (800136c <puts+0xc>)
 8001362:	4601      	mov	r1, r0
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	f7ff bf8d 	b.w	8001284 <_puts_r>
 800136a:	bf00      	nop
 800136c:	20000000 	.word	0x20000000

08001370 <__swbuf_r>:
 8001370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001372:	460e      	mov	r6, r1
 8001374:	4614      	mov	r4, r2
 8001376:	4605      	mov	r5, r0
 8001378:	b118      	cbz	r0, 8001382 <__swbuf_r+0x12>
 800137a:	6983      	ldr	r3, [r0, #24]
 800137c:	b90b      	cbnz	r3, 8001382 <__swbuf_r+0x12>
 800137e:	f000 f9d1 	bl	8001724 <__sinit>
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <__swbuf_r+0x98>)
 8001384:	429c      	cmp	r4, r3
 8001386:	d12b      	bne.n	80013e0 <__swbuf_r+0x70>
 8001388:	686c      	ldr	r4, [r5, #4]
 800138a:	69a3      	ldr	r3, [r4, #24]
 800138c:	60a3      	str	r3, [r4, #8]
 800138e:	89a3      	ldrh	r3, [r4, #12]
 8001390:	071a      	lsls	r2, r3, #28
 8001392:	d52f      	bpl.n	80013f4 <__swbuf_r+0x84>
 8001394:	6923      	ldr	r3, [r4, #16]
 8001396:	b36b      	cbz	r3, 80013f4 <__swbuf_r+0x84>
 8001398:	6923      	ldr	r3, [r4, #16]
 800139a:	6820      	ldr	r0, [r4, #0]
 800139c:	1ac0      	subs	r0, r0, r3
 800139e:	6963      	ldr	r3, [r4, #20]
 80013a0:	b2f6      	uxtb	r6, r6
 80013a2:	4283      	cmp	r3, r0
 80013a4:	4637      	mov	r7, r6
 80013a6:	dc04      	bgt.n	80013b2 <__swbuf_r+0x42>
 80013a8:	4621      	mov	r1, r4
 80013aa:	4628      	mov	r0, r5
 80013ac:	f000 f926 	bl	80015fc <_fflush_r>
 80013b0:	bb30      	cbnz	r0, 8001400 <__swbuf_r+0x90>
 80013b2:	68a3      	ldr	r3, [r4, #8]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	60a3      	str	r3, [r4, #8]
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	6022      	str	r2, [r4, #0]
 80013be:	701e      	strb	r6, [r3, #0]
 80013c0:	6963      	ldr	r3, [r4, #20]
 80013c2:	3001      	adds	r0, #1
 80013c4:	4283      	cmp	r3, r0
 80013c6:	d004      	beq.n	80013d2 <__swbuf_r+0x62>
 80013c8:	89a3      	ldrh	r3, [r4, #12]
 80013ca:	07db      	lsls	r3, r3, #31
 80013cc:	d506      	bpl.n	80013dc <__swbuf_r+0x6c>
 80013ce:	2e0a      	cmp	r6, #10
 80013d0:	d104      	bne.n	80013dc <__swbuf_r+0x6c>
 80013d2:	4621      	mov	r1, r4
 80013d4:	4628      	mov	r0, r5
 80013d6:	f000 f911 	bl	80015fc <_fflush_r>
 80013da:	b988      	cbnz	r0, 8001400 <__swbuf_r+0x90>
 80013dc:	4638      	mov	r0, r7
 80013de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <__swbuf_r+0x9c>)
 80013e2:	429c      	cmp	r4, r3
 80013e4:	d101      	bne.n	80013ea <__swbuf_r+0x7a>
 80013e6:	68ac      	ldr	r4, [r5, #8]
 80013e8:	e7cf      	b.n	800138a <__swbuf_r+0x1a>
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <__swbuf_r+0xa0>)
 80013ec:	429c      	cmp	r4, r3
 80013ee:	bf08      	it	eq
 80013f0:	68ec      	ldreq	r4, [r5, #12]
 80013f2:	e7ca      	b.n	800138a <__swbuf_r+0x1a>
 80013f4:	4621      	mov	r1, r4
 80013f6:	4628      	mov	r0, r5
 80013f8:	f000 f80c 	bl	8001414 <__swsetup_r>
 80013fc:	2800      	cmp	r0, #0
 80013fe:	d0cb      	beq.n	8001398 <__swbuf_r+0x28>
 8001400:	f04f 37ff 	mov.w	r7, #4294967295
 8001404:	e7ea      	b.n	80013dc <__swbuf_r+0x6c>
 8001406:	bf00      	nop
 8001408:	0800230c 	.word	0x0800230c
 800140c:	0800232c 	.word	0x0800232c
 8001410:	080022ec 	.word	0x080022ec

08001414 <__swsetup_r>:
 8001414:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <__swsetup_r+0xcc>)
 8001416:	b570      	push	{r4, r5, r6, lr}
 8001418:	681d      	ldr	r5, [r3, #0]
 800141a:	4606      	mov	r6, r0
 800141c:	460c      	mov	r4, r1
 800141e:	b125      	cbz	r5, 800142a <__swsetup_r+0x16>
 8001420:	69ab      	ldr	r3, [r5, #24]
 8001422:	b913      	cbnz	r3, 800142a <__swsetup_r+0x16>
 8001424:	4628      	mov	r0, r5
 8001426:	f000 f97d 	bl	8001724 <__sinit>
 800142a:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <__swsetup_r+0xd0>)
 800142c:	429c      	cmp	r4, r3
 800142e:	d10f      	bne.n	8001450 <__swsetup_r+0x3c>
 8001430:	686c      	ldr	r4, [r5, #4]
 8001432:	89a3      	ldrh	r3, [r4, #12]
 8001434:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001438:	0719      	lsls	r1, r3, #28
 800143a:	d42c      	bmi.n	8001496 <__swsetup_r+0x82>
 800143c:	06dd      	lsls	r5, r3, #27
 800143e:	d411      	bmi.n	8001464 <__swsetup_r+0x50>
 8001440:	2309      	movs	r3, #9
 8001442:	6033      	str	r3, [r6, #0]
 8001444:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001448:	81a3      	strh	r3, [r4, #12]
 800144a:	f04f 30ff 	mov.w	r0, #4294967295
 800144e:	e03e      	b.n	80014ce <__swsetup_r+0xba>
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <__swsetup_r+0xd4>)
 8001452:	429c      	cmp	r4, r3
 8001454:	d101      	bne.n	800145a <__swsetup_r+0x46>
 8001456:	68ac      	ldr	r4, [r5, #8]
 8001458:	e7eb      	b.n	8001432 <__swsetup_r+0x1e>
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <__swsetup_r+0xd8>)
 800145c:	429c      	cmp	r4, r3
 800145e:	bf08      	it	eq
 8001460:	68ec      	ldreq	r4, [r5, #12]
 8001462:	e7e6      	b.n	8001432 <__swsetup_r+0x1e>
 8001464:	0758      	lsls	r0, r3, #29
 8001466:	d512      	bpl.n	800148e <__swsetup_r+0x7a>
 8001468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800146a:	b141      	cbz	r1, 800147e <__swsetup_r+0x6a>
 800146c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001470:	4299      	cmp	r1, r3
 8001472:	d002      	beq.n	800147a <__swsetup_r+0x66>
 8001474:	4630      	mov	r0, r6
 8001476:	f000 fa59 	bl	800192c <_free_r>
 800147a:	2300      	movs	r3, #0
 800147c:	6363      	str	r3, [r4, #52]	; 0x34
 800147e:	89a3      	ldrh	r3, [r4, #12]
 8001480:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001484:	81a3      	strh	r3, [r4, #12]
 8001486:	2300      	movs	r3, #0
 8001488:	6063      	str	r3, [r4, #4]
 800148a:	6923      	ldr	r3, [r4, #16]
 800148c:	6023      	str	r3, [r4, #0]
 800148e:	89a3      	ldrh	r3, [r4, #12]
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	81a3      	strh	r3, [r4, #12]
 8001496:	6923      	ldr	r3, [r4, #16]
 8001498:	b94b      	cbnz	r3, 80014ae <__swsetup_r+0x9a>
 800149a:	89a3      	ldrh	r3, [r4, #12]
 800149c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80014a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a4:	d003      	beq.n	80014ae <__swsetup_r+0x9a>
 80014a6:	4621      	mov	r1, r4
 80014a8:	4630      	mov	r0, r6
 80014aa:	f000 f9ff 	bl	80018ac <__smakebuf_r>
 80014ae:	89a0      	ldrh	r0, [r4, #12]
 80014b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014b4:	f010 0301 	ands.w	r3, r0, #1
 80014b8:	d00a      	beq.n	80014d0 <__swsetup_r+0xbc>
 80014ba:	2300      	movs	r3, #0
 80014bc:	60a3      	str	r3, [r4, #8]
 80014be:	6963      	ldr	r3, [r4, #20]
 80014c0:	425b      	negs	r3, r3
 80014c2:	61a3      	str	r3, [r4, #24]
 80014c4:	6923      	ldr	r3, [r4, #16]
 80014c6:	b943      	cbnz	r3, 80014da <__swsetup_r+0xc6>
 80014c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80014cc:	d1ba      	bne.n	8001444 <__swsetup_r+0x30>
 80014ce:	bd70      	pop	{r4, r5, r6, pc}
 80014d0:	0781      	lsls	r1, r0, #30
 80014d2:	bf58      	it	pl
 80014d4:	6963      	ldrpl	r3, [r4, #20]
 80014d6:	60a3      	str	r3, [r4, #8]
 80014d8:	e7f4      	b.n	80014c4 <__swsetup_r+0xb0>
 80014da:	2000      	movs	r0, #0
 80014dc:	e7f7      	b.n	80014ce <__swsetup_r+0xba>
 80014de:	bf00      	nop
 80014e0:	20000000 	.word	0x20000000
 80014e4:	0800230c 	.word	0x0800230c
 80014e8:	0800232c 	.word	0x0800232c
 80014ec:	080022ec 	.word	0x080022ec

080014f0 <__sflush_r>:
 80014f0:	898a      	ldrh	r2, [r1, #12]
 80014f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014f6:	4605      	mov	r5, r0
 80014f8:	0710      	lsls	r0, r2, #28
 80014fa:	460c      	mov	r4, r1
 80014fc:	d458      	bmi.n	80015b0 <__sflush_r+0xc0>
 80014fe:	684b      	ldr	r3, [r1, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	dc05      	bgt.n	8001510 <__sflush_r+0x20>
 8001504:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001506:	2b00      	cmp	r3, #0
 8001508:	dc02      	bgt.n	8001510 <__sflush_r+0x20>
 800150a:	2000      	movs	r0, #0
 800150c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001512:	2e00      	cmp	r6, #0
 8001514:	d0f9      	beq.n	800150a <__sflush_r+0x1a>
 8001516:	2300      	movs	r3, #0
 8001518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800151c:	682f      	ldr	r7, [r5, #0]
 800151e:	602b      	str	r3, [r5, #0]
 8001520:	d032      	beq.n	8001588 <__sflush_r+0x98>
 8001522:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001524:	89a3      	ldrh	r3, [r4, #12]
 8001526:	075a      	lsls	r2, r3, #29
 8001528:	d505      	bpl.n	8001536 <__sflush_r+0x46>
 800152a:	6863      	ldr	r3, [r4, #4]
 800152c:	1ac0      	subs	r0, r0, r3
 800152e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001530:	b10b      	cbz	r3, 8001536 <__sflush_r+0x46>
 8001532:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001534:	1ac0      	subs	r0, r0, r3
 8001536:	2300      	movs	r3, #0
 8001538:	4602      	mov	r2, r0
 800153a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800153c:	6a21      	ldr	r1, [r4, #32]
 800153e:	4628      	mov	r0, r5
 8001540:	47b0      	blx	r6
 8001542:	1c43      	adds	r3, r0, #1
 8001544:	89a3      	ldrh	r3, [r4, #12]
 8001546:	d106      	bne.n	8001556 <__sflush_r+0x66>
 8001548:	6829      	ldr	r1, [r5, #0]
 800154a:	291d      	cmp	r1, #29
 800154c:	d82c      	bhi.n	80015a8 <__sflush_r+0xb8>
 800154e:	4a2a      	ldr	r2, [pc, #168]	; (80015f8 <__sflush_r+0x108>)
 8001550:	40ca      	lsrs	r2, r1
 8001552:	07d6      	lsls	r6, r2, #31
 8001554:	d528      	bpl.n	80015a8 <__sflush_r+0xb8>
 8001556:	2200      	movs	r2, #0
 8001558:	6062      	str	r2, [r4, #4]
 800155a:	04d9      	lsls	r1, r3, #19
 800155c:	6922      	ldr	r2, [r4, #16]
 800155e:	6022      	str	r2, [r4, #0]
 8001560:	d504      	bpl.n	800156c <__sflush_r+0x7c>
 8001562:	1c42      	adds	r2, r0, #1
 8001564:	d101      	bne.n	800156a <__sflush_r+0x7a>
 8001566:	682b      	ldr	r3, [r5, #0]
 8001568:	b903      	cbnz	r3, 800156c <__sflush_r+0x7c>
 800156a:	6560      	str	r0, [r4, #84]	; 0x54
 800156c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800156e:	602f      	str	r7, [r5, #0]
 8001570:	2900      	cmp	r1, #0
 8001572:	d0ca      	beq.n	800150a <__sflush_r+0x1a>
 8001574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001578:	4299      	cmp	r1, r3
 800157a:	d002      	beq.n	8001582 <__sflush_r+0x92>
 800157c:	4628      	mov	r0, r5
 800157e:	f000 f9d5 	bl	800192c <_free_r>
 8001582:	2000      	movs	r0, #0
 8001584:	6360      	str	r0, [r4, #52]	; 0x34
 8001586:	e7c1      	b.n	800150c <__sflush_r+0x1c>
 8001588:	6a21      	ldr	r1, [r4, #32]
 800158a:	2301      	movs	r3, #1
 800158c:	4628      	mov	r0, r5
 800158e:	47b0      	blx	r6
 8001590:	1c41      	adds	r1, r0, #1
 8001592:	d1c7      	bne.n	8001524 <__sflush_r+0x34>
 8001594:	682b      	ldr	r3, [r5, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0c4      	beq.n	8001524 <__sflush_r+0x34>
 800159a:	2b1d      	cmp	r3, #29
 800159c:	d001      	beq.n	80015a2 <__sflush_r+0xb2>
 800159e:	2b16      	cmp	r3, #22
 80015a0:	d101      	bne.n	80015a6 <__sflush_r+0xb6>
 80015a2:	602f      	str	r7, [r5, #0]
 80015a4:	e7b1      	b.n	800150a <__sflush_r+0x1a>
 80015a6:	89a3      	ldrh	r3, [r4, #12]
 80015a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ac:	81a3      	strh	r3, [r4, #12]
 80015ae:	e7ad      	b.n	800150c <__sflush_r+0x1c>
 80015b0:	690f      	ldr	r7, [r1, #16]
 80015b2:	2f00      	cmp	r7, #0
 80015b4:	d0a9      	beq.n	800150a <__sflush_r+0x1a>
 80015b6:	0793      	lsls	r3, r2, #30
 80015b8:	680e      	ldr	r6, [r1, #0]
 80015ba:	bf08      	it	eq
 80015bc:	694b      	ldreq	r3, [r1, #20]
 80015be:	600f      	str	r7, [r1, #0]
 80015c0:	bf18      	it	ne
 80015c2:	2300      	movne	r3, #0
 80015c4:	eba6 0807 	sub.w	r8, r6, r7
 80015c8:	608b      	str	r3, [r1, #8]
 80015ca:	f1b8 0f00 	cmp.w	r8, #0
 80015ce:	dd9c      	ble.n	800150a <__sflush_r+0x1a>
 80015d0:	6a21      	ldr	r1, [r4, #32]
 80015d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80015d4:	4643      	mov	r3, r8
 80015d6:	463a      	mov	r2, r7
 80015d8:	4628      	mov	r0, r5
 80015da:	47b0      	blx	r6
 80015dc:	2800      	cmp	r0, #0
 80015de:	dc06      	bgt.n	80015ee <__sflush_r+0xfe>
 80015e0:	89a3      	ldrh	r3, [r4, #12]
 80015e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e6:	81a3      	strh	r3, [r4, #12]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	e78e      	b.n	800150c <__sflush_r+0x1c>
 80015ee:	4407      	add	r7, r0
 80015f0:	eba8 0800 	sub.w	r8, r8, r0
 80015f4:	e7e9      	b.n	80015ca <__sflush_r+0xda>
 80015f6:	bf00      	nop
 80015f8:	20400001 	.word	0x20400001

080015fc <_fflush_r>:
 80015fc:	b538      	push	{r3, r4, r5, lr}
 80015fe:	690b      	ldr	r3, [r1, #16]
 8001600:	4605      	mov	r5, r0
 8001602:	460c      	mov	r4, r1
 8001604:	b913      	cbnz	r3, 800160c <_fflush_r+0x10>
 8001606:	2500      	movs	r5, #0
 8001608:	4628      	mov	r0, r5
 800160a:	bd38      	pop	{r3, r4, r5, pc}
 800160c:	b118      	cbz	r0, 8001616 <_fflush_r+0x1a>
 800160e:	6983      	ldr	r3, [r0, #24]
 8001610:	b90b      	cbnz	r3, 8001616 <_fflush_r+0x1a>
 8001612:	f000 f887 	bl	8001724 <__sinit>
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <_fflush_r+0x6c>)
 8001618:	429c      	cmp	r4, r3
 800161a:	d11b      	bne.n	8001654 <_fflush_r+0x58>
 800161c:	686c      	ldr	r4, [r5, #4]
 800161e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0ef      	beq.n	8001606 <_fflush_r+0xa>
 8001626:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001628:	07d0      	lsls	r0, r2, #31
 800162a:	d404      	bmi.n	8001636 <_fflush_r+0x3a>
 800162c:	0599      	lsls	r1, r3, #22
 800162e:	d402      	bmi.n	8001636 <_fflush_r+0x3a>
 8001630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001632:	f000 f915 	bl	8001860 <__retarget_lock_acquire_recursive>
 8001636:	4628      	mov	r0, r5
 8001638:	4621      	mov	r1, r4
 800163a:	f7ff ff59 	bl	80014f0 <__sflush_r>
 800163e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001640:	07da      	lsls	r2, r3, #31
 8001642:	4605      	mov	r5, r0
 8001644:	d4e0      	bmi.n	8001608 <_fflush_r+0xc>
 8001646:	89a3      	ldrh	r3, [r4, #12]
 8001648:	059b      	lsls	r3, r3, #22
 800164a:	d4dd      	bmi.n	8001608 <_fflush_r+0xc>
 800164c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800164e:	f000 f908 	bl	8001862 <__retarget_lock_release_recursive>
 8001652:	e7d9      	b.n	8001608 <_fflush_r+0xc>
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <_fflush_r+0x70>)
 8001656:	429c      	cmp	r4, r3
 8001658:	d101      	bne.n	800165e <_fflush_r+0x62>
 800165a:	68ac      	ldr	r4, [r5, #8]
 800165c:	e7df      	b.n	800161e <_fflush_r+0x22>
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <_fflush_r+0x74>)
 8001660:	429c      	cmp	r4, r3
 8001662:	bf08      	it	eq
 8001664:	68ec      	ldreq	r4, [r5, #12]
 8001666:	e7da      	b.n	800161e <_fflush_r+0x22>
 8001668:	0800230c 	.word	0x0800230c
 800166c:	0800232c 	.word	0x0800232c
 8001670:	080022ec 	.word	0x080022ec

08001674 <std>:
 8001674:	2300      	movs	r3, #0
 8001676:	b510      	push	{r4, lr}
 8001678:	4604      	mov	r4, r0
 800167a:	e9c0 3300 	strd	r3, r3, [r0]
 800167e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001682:	6083      	str	r3, [r0, #8]
 8001684:	8181      	strh	r1, [r0, #12]
 8001686:	6643      	str	r3, [r0, #100]	; 0x64
 8001688:	81c2      	strh	r2, [r0, #14]
 800168a:	6183      	str	r3, [r0, #24]
 800168c:	4619      	mov	r1, r3
 800168e:	2208      	movs	r2, #8
 8001690:	305c      	adds	r0, #92	; 0x5c
 8001692:	f7ff fdd7 	bl	8001244 <memset>
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <std+0x38>)
 8001698:	6263      	str	r3, [r4, #36]	; 0x24
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <std+0x3c>)
 800169c:	62a3      	str	r3, [r4, #40]	; 0x28
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <std+0x40>)
 80016a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <std+0x44>)
 80016a4:	6224      	str	r4, [r4, #32]
 80016a6:	6323      	str	r3, [r4, #48]	; 0x30
 80016a8:	bd10      	pop	{r4, pc}
 80016aa:	bf00      	nop
 80016ac:	08002075 	.word	0x08002075
 80016b0:	08002097 	.word	0x08002097
 80016b4:	080020cf 	.word	0x080020cf
 80016b8:	080020f3 	.word	0x080020f3

080016bc <_cleanup_r>:
 80016bc:	4901      	ldr	r1, [pc, #4]	; (80016c4 <_cleanup_r+0x8>)
 80016be:	f000 b8af 	b.w	8001820 <_fwalk_reent>
 80016c2:	bf00      	nop
 80016c4:	080015fd 	.word	0x080015fd

080016c8 <__sfmoreglue>:
 80016c8:	b570      	push	{r4, r5, r6, lr}
 80016ca:	1e4a      	subs	r2, r1, #1
 80016cc:	2568      	movs	r5, #104	; 0x68
 80016ce:	4355      	muls	r5, r2
 80016d0:	460e      	mov	r6, r1
 80016d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80016d6:	f000 f977 	bl	80019c8 <_malloc_r>
 80016da:	4604      	mov	r4, r0
 80016dc:	b140      	cbz	r0, 80016f0 <__sfmoreglue+0x28>
 80016de:	2100      	movs	r1, #0
 80016e0:	e9c0 1600 	strd	r1, r6, [r0]
 80016e4:	300c      	adds	r0, #12
 80016e6:	60a0      	str	r0, [r4, #8]
 80016e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80016ec:	f7ff fdaa 	bl	8001244 <memset>
 80016f0:	4620      	mov	r0, r4
 80016f2:	bd70      	pop	{r4, r5, r6, pc}

080016f4 <__sfp_lock_acquire>:
 80016f4:	4801      	ldr	r0, [pc, #4]	; (80016fc <__sfp_lock_acquire+0x8>)
 80016f6:	f000 b8b3 	b.w	8001860 <__retarget_lock_acquire_recursive>
 80016fa:	bf00      	nop
 80016fc:	20000094 	.word	0x20000094

08001700 <__sfp_lock_release>:
 8001700:	4801      	ldr	r0, [pc, #4]	; (8001708 <__sfp_lock_release+0x8>)
 8001702:	f000 b8ae 	b.w	8001862 <__retarget_lock_release_recursive>
 8001706:	bf00      	nop
 8001708:	20000094 	.word	0x20000094

0800170c <__sinit_lock_acquire>:
 800170c:	4801      	ldr	r0, [pc, #4]	; (8001714 <__sinit_lock_acquire+0x8>)
 800170e:	f000 b8a7 	b.w	8001860 <__retarget_lock_acquire_recursive>
 8001712:	bf00      	nop
 8001714:	2000008f 	.word	0x2000008f

08001718 <__sinit_lock_release>:
 8001718:	4801      	ldr	r0, [pc, #4]	; (8001720 <__sinit_lock_release+0x8>)
 800171a:	f000 b8a2 	b.w	8001862 <__retarget_lock_release_recursive>
 800171e:	bf00      	nop
 8001720:	2000008f 	.word	0x2000008f

08001724 <__sinit>:
 8001724:	b510      	push	{r4, lr}
 8001726:	4604      	mov	r4, r0
 8001728:	f7ff fff0 	bl	800170c <__sinit_lock_acquire>
 800172c:	69a3      	ldr	r3, [r4, #24]
 800172e:	b11b      	cbz	r3, 8001738 <__sinit+0x14>
 8001730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001734:	f7ff bff0 	b.w	8001718 <__sinit_lock_release>
 8001738:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800173c:	6523      	str	r3, [r4, #80]	; 0x50
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <__sinit+0x68>)
 8001740:	4a13      	ldr	r2, [pc, #76]	; (8001790 <__sinit+0x6c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	62a2      	str	r2, [r4, #40]	; 0x28
 8001746:	42a3      	cmp	r3, r4
 8001748:	bf04      	itt	eq
 800174a:	2301      	moveq	r3, #1
 800174c:	61a3      	streq	r3, [r4, #24]
 800174e:	4620      	mov	r0, r4
 8001750:	f000 f820 	bl	8001794 <__sfp>
 8001754:	6060      	str	r0, [r4, #4]
 8001756:	4620      	mov	r0, r4
 8001758:	f000 f81c 	bl	8001794 <__sfp>
 800175c:	60a0      	str	r0, [r4, #8]
 800175e:	4620      	mov	r0, r4
 8001760:	f000 f818 	bl	8001794 <__sfp>
 8001764:	2200      	movs	r2, #0
 8001766:	60e0      	str	r0, [r4, #12]
 8001768:	2104      	movs	r1, #4
 800176a:	6860      	ldr	r0, [r4, #4]
 800176c:	f7ff ff82 	bl	8001674 <std>
 8001770:	68a0      	ldr	r0, [r4, #8]
 8001772:	2201      	movs	r2, #1
 8001774:	2109      	movs	r1, #9
 8001776:	f7ff ff7d 	bl	8001674 <std>
 800177a:	68e0      	ldr	r0, [r4, #12]
 800177c:	2202      	movs	r2, #2
 800177e:	2112      	movs	r1, #18
 8001780:	f7ff ff78 	bl	8001674 <std>
 8001784:	2301      	movs	r3, #1
 8001786:	61a3      	str	r3, [r4, #24]
 8001788:	e7d2      	b.n	8001730 <__sinit+0xc>
 800178a:	bf00      	nop
 800178c:	080022e8 	.word	0x080022e8
 8001790:	080016bd 	.word	0x080016bd

08001794 <__sfp>:
 8001794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001796:	4607      	mov	r7, r0
 8001798:	f7ff ffac 	bl	80016f4 <__sfp_lock_acquire>
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <__sfp+0x84>)
 800179e:	681e      	ldr	r6, [r3, #0]
 80017a0:	69b3      	ldr	r3, [r6, #24]
 80017a2:	b913      	cbnz	r3, 80017aa <__sfp+0x16>
 80017a4:	4630      	mov	r0, r6
 80017a6:	f7ff ffbd 	bl	8001724 <__sinit>
 80017aa:	3648      	adds	r6, #72	; 0x48
 80017ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	d503      	bpl.n	80017bc <__sfp+0x28>
 80017b4:	6833      	ldr	r3, [r6, #0]
 80017b6:	b30b      	cbz	r3, 80017fc <__sfp+0x68>
 80017b8:	6836      	ldr	r6, [r6, #0]
 80017ba:	e7f7      	b.n	80017ac <__sfp+0x18>
 80017bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80017c0:	b9d5      	cbnz	r5, 80017f8 <__sfp+0x64>
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <__sfp+0x88>)
 80017c4:	60e3      	str	r3, [r4, #12]
 80017c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80017ca:	6665      	str	r5, [r4, #100]	; 0x64
 80017cc:	f000 f847 	bl	800185e <__retarget_lock_init_recursive>
 80017d0:	f7ff ff96 	bl	8001700 <__sfp_lock_release>
 80017d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80017d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80017dc:	6025      	str	r5, [r4, #0]
 80017de:	61a5      	str	r5, [r4, #24]
 80017e0:	2208      	movs	r2, #8
 80017e2:	4629      	mov	r1, r5
 80017e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80017e8:	f7ff fd2c 	bl	8001244 <memset>
 80017ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80017f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80017f4:	4620      	mov	r0, r4
 80017f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017f8:	3468      	adds	r4, #104	; 0x68
 80017fa:	e7d9      	b.n	80017b0 <__sfp+0x1c>
 80017fc:	2104      	movs	r1, #4
 80017fe:	4638      	mov	r0, r7
 8001800:	f7ff ff62 	bl	80016c8 <__sfmoreglue>
 8001804:	4604      	mov	r4, r0
 8001806:	6030      	str	r0, [r6, #0]
 8001808:	2800      	cmp	r0, #0
 800180a:	d1d5      	bne.n	80017b8 <__sfp+0x24>
 800180c:	f7ff ff78 	bl	8001700 <__sfp_lock_release>
 8001810:	230c      	movs	r3, #12
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	e7ee      	b.n	80017f4 <__sfp+0x60>
 8001816:	bf00      	nop
 8001818:	080022e8 	.word	0x080022e8
 800181c:	ffff0001 	.word	0xffff0001

08001820 <_fwalk_reent>:
 8001820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001824:	4606      	mov	r6, r0
 8001826:	4688      	mov	r8, r1
 8001828:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800182c:	2700      	movs	r7, #0
 800182e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001832:	f1b9 0901 	subs.w	r9, r9, #1
 8001836:	d505      	bpl.n	8001844 <_fwalk_reent+0x24>
 8001838:	6824      	ldr	r4, [r4, #0]
 800183a:	2c00      	cmp	r4, #0
 800183c:	d1f7      	bne.n	800182e <_fwalk_reent+0xe>
 800183e:	4638      	mov	r0, r7
 8001840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001844:	89ab      	ldrh	r3, [r5, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d907      	bls.n	800185a <_fwalk_reent+0x3a>
 800184a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800184e:	3301      	adds	r3, #1
 8001850:	d003      	beq.n	800185a <_fwalk_reent+0x3a>
 8001852:	4629      	mov	r1, r5
 8001854:	4630      	mov	r0, r6
 8001856:	47c0      	blx	r8
 8001858:	4307      	orrs	r7, r0
 800185a:	3568      	adds	r5, #104	; 0x68
 800185c:	e7e9      	b.n	8001832 <_fwalk_reent+0x12>

0800185e <__retarget_lock_init_recursive>:
 800185e:	4770      	bx	lr

08001860 <__retarget_lock_acquire_recursive>:
 8001860:	4770      	bx	lr

08001862 <__retarget_lock_release_recursive>:
 8001862:	4770      	bx	lr

08001864 <__swhatbuf_r>:
 8001864:	b570      	push	{r4, r5, r6, lr}
 8001866:	460e      	mov	r6, r1
 8001868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800186c:	2900      	cmp	r1, #0
 800186e:	b096      	sub	sp, #88	; 0x58
 8001870:	4614      	mov	r4, r2
 8001872:	461d      	mov	r5, r3
 8001874:	da07      	bge.n	8001886 <__swhatbuf_r+0x22>
 8001876:	2300      	movs	r3, #0
 8001878:	602b      	str	r3, [r5, #0]
 800187a:	89b3      	ldrh	r3, [r6, #12]
 800187c:	061a      	lsls	r2, r3, #24
 800187e:	d410      	bmi.n	80018a2 <__swhatbuf_r+0x3e>
 8001880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001884:	e00e      	b.n	80018a4 <__swhatbuf_r+0x40>
 8001886:	466a      	mov	r2, sp
 8001888:	f000 fc5a 	bl	8002140 <_fstat_r>
 800188c:	2800      	cmp	r0, #0
 800188e:	dbf2      	blt.n	8001876 <__swhatbuf_r+0x12>
 8001890:	9a01      	ldr	r2, [sp, #4]
 8001892:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001896:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800189a:	425a      	negs	r2, r3
 800189c:	415a      	adcs	r2, r3
 800189e:	602a      	str	r2, [r5, #0]
 80018a0:	e7ee      	b.n	8001880 <__swhatbuf_r+0x1c>
 80018a2:	2340      	movs	r3, #64	; 0x40
 80018a4:	2000      	movs	r0, #0
 80018a6:	6023      	str	r3, [r4, #0]
 80018a8:	b016      	add	sp, #88	; 0x58
 80018aa:	bd70      	pop	{r4, r5, r6, pc}

080018ac <__smakebuf_r>:
 80018ac:	898b      	ldrh	r3, [r1, #12]
 80018ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018b0:	079d      	lsls	r5, r3, #30
 80018b2:	4606      	mov	r6, r0
 80018b4:	460c      	mov	r4, r1
 80018b6:	d507      	bpl.n	80018c8 <__smakebuf_r+0x1c>
 80018b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80018bc:	6023      	str	r3, [r4, #0]
 80018be:	6123      	str	r3, [r4, #16]
 80018c0:	2301      	movs	r3, #1
 80018c2:	6163      	str	r3, [r4, #20]
 80018c4:	b002      	add	sp, #8
 80018c6:	bd70      	pop	{r4, r5, r6, pc}
 80018c8:	ab01      	add	r3, sp, #4
 80018ca:	466a      	mov	r2, sp
 80018cc:	f7ff ffca 	bl	8001864 <__swhatbuf_r>
 80018d0:	9900      	ldr	r1, [sp, #0]
 80018d2:	4605      	mov	r5, r0
 80018d4:	4630      	mov	r0, r6
 80018d6:	f000 f877 	bl	80019c8 <_malloc_r>
 80018da:	b948      	cbnz	r0, 80018f0 <__smakebuf_r+0x44>
 80018dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018e0:	059a      	lsls	r2, r3, #22
 80018e2:	d4ef      	bmi.n	80018c4 <__smakebuf_r+0x18>
 80018e4:	f023 0303 	bic.w	r3, r3, #3
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	81a3      	strh	r3, [r4, #12]
 80018ee:	e7e3      	b.n	80018b8 <__smakebuf_r+0xc>
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <__smakebuf_r+0x7c>)
 80018f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80018f4:	89a3      	ldrh	r3, [r4, #12]
 80018f6:	6020      	str	r0, [r4, #0]
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	81a3      	strh	r3, [r4, #12]
 80018fe:	9b00      	ldr	r3, [sp, #0]
 8001900:	6163      	str	r3, [r4, #20]
 8001902:	9b01      	ldr	r3, [sp, #4]
 8001904:	6120      	str	r0, [r4, #16]
 8001906:	b15b      	cbz	r3, 8001920 <__smakebuf_r+0x74>
 8001908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800190c:	4630      	mov	r0, r6
 800190e:	f000 fc29 	bl	8002164 <_isatty_r>
 8001912:	b128      	cbz	r0, 8001920 <__smakebuf_r+0x74>
 8001914:	89a3      	ldrh	r3, [r4, #12]
 8001916:	f023 0303 	bic.w	r3, r3, #3
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	81a3      	strh	r3, [r4, #12]
 8001920:	89a0      	ldrh	r0, [r4, #12]
 8001922:	4305      	orrs	r5, r0
 8001924:	81a5      	strh	r5, [r4, #12]
 8001926:	e7cd      	b.n	80018c4 <__smakebuf_r+0x18>
 8001928:	080016bd 	.word	0x080016bd

0800192c <_free_r>:
 800192c:	b538      	push	{r3, r4, r5, lr}
 800192e:	4605      	mov	r5, r0
 8001930:	2900      	cmp	r1, #0
 8001932:	d045      	beq.n	80019c0 <_free_r+0x94>
 8001934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001938:	1f0c      	subs	r4, r1, #4
 800193a:	2b00      	cmp	r3, #0
 800193c:	bfb8      	it	lt
 800193e:	18e4      	addlt	r4, r4, r3
 8001940:	f000 fc32 	bl	80021a8 <__malloc_lock>
 8001944:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <_free_r+0x98>)
 8001946:	6813      	ldr	r3, [r2, #0]
 8001948:	4610      	mov	r0, r2
 800194a:	b933      	cbnz	r3, 800195a <_free_r+0x2e>
 800194c:	6063      	str	r3, [r4, #4]
 800194e:	6014      	str	r4, [r2, #0]
 8001950:	4628      	mov	r0, r5
 8001952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001956:	f000 bc2d 	b.w	80021b4 <__malloc_unlock>
 800195a:	42a3      	cmp	r3, r4
 800195c:	d90b      	bls.n	8001976 <_free_r+0x4a>
 800195e:	6821      	ldr	r1, [r4, #0]
 8001960:	1862      	adds	r2, r4, r1
 8001962:	4293      	cmp	r3, r2
 8001964:	bf04      	itt	eq
 8001966:	681a      	ldreq	r2, [r3, #0]
 8001968:	685b      	ldreq	r3, [r3, #4]
 800196a:	6063      	str	r3, [r4, #4]
 800196c:	bf04      	itt	eq
 800196e:	1852      	addeq	r2, r2, r1
 8001970:	6022      	streq	r2, [r4, #0]
 8001972:	6004      	str	r4, [r0, #0]
 8001974:	e7ec      	b.n	8001950 <_free_r+0x24>
 8001976:	461a      	mov	r2, r3
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	b10b      	cbz	r3, 8001980 <_free_r+0x54>
 800197c:	42a3      	cmp	r3, r4
 800197e:	d9fa      	bls.n	8001976 <_free_r+0x4a>
 8001980:	6811      	ldr	r1, [r2, #0]
 8001982:	1850      	adds	r0, r2, r1
 8001984:	42a0      	cmp	r0, r4
 8001986:	d10b      	bne.n	80019a0 <_free_r+0x74>
 8001988:	6820      	ldr	r0, [r4, #0]
 800198a:	4401      	add	r1, r0
 800198c:	1850      	adds	r0, r2, r1
 800198e:	4283      	cmp	r3, r0
 8001990:	6011      	str	r1, [r2, #0]
 8001992:	d1dd      	bne.n	8001950 <_free_r+0x24>
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	6053      	str	r3, [r2, #4]
 800199a:	4401      	add	r1, r0
 800199c:	6011      	str	r1, [r2, #0]
 800199e:	e7d7      	b.n	8001950 <_free_r+0x24>
 80019a0:	d902      	bls.n	80019a8 <_free_r+0x7c>
 80019a2:	230c      	movs	r3, #12
 80019a4:	602b      	str	r3, [r5, #0]
 80019a6:	e7d3      	b.n	8001950 <_free_r+0x24>
 80019a8:	6820      	ldr	r0, [r4, #0]
 80019aa:	1821      	adds	r1, r4, r0
 80019ac:	428b      	cmp	r3, r1
 80019ae:	bf04      	itt	eq
 80019b0:	6819      	ldreq	r1, [r3, #0]
 80019b2:	685b      	ldreq	r3, [r3, #4]
 80019b4:	6063      	str	r3, [r4, #4]
 80019b6:	bf04      	itt	eq
 80019b8:	1809      	addeq	r1, r1, r0
 80019ba:	6021      	streq	r1, [r4, #0]
 80019bc:	6054      	str	r4, [r2, #4]
 80019be:	e7c7      	b.n	8001950 <_free_r+0x24>
 80019c0:	bd38      	pop	{r3, r4, r5, pc}
 80019c2:	bf00      	nop
 80019c4:	20000084 	.word	0x20000084

080019c8 <_malloc_r>:
 80019c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ca:	1ccd      	adds	r5, r1, #3
 80019cc:	f025 0503 	bic.w	r5, r5, #3
 80019d0:	3508      	adds	r5, #8
 80019d2:	2d0c      	cmp	r5, #12
 80019d4:	bf38      	it	cc
 80019d6:	250c      	movcc	r5, #12
 80019d8:	2d00      	cmp	r5, #0
 80019da:	4606      	mov	r6, r0
 80019dc:	db01      	blt.n	80019e2 <_malloc_r+0x1a>
 80019de:	42a9      	cmp	r1, r5
 80019e0:	d903      	bls.n	80019ea <_malloc_r+0x22>
 80019e2:	230c      	movs	r3, #12
 80019e4:	6033      	str	r3, [r6, #0]
 80019e6:	2000      	movs	r0, #0
 80019e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019ea:	f000 fbdd 	bl	80021a8 <__malloc_lock>
 80019ee:	4921      	ldr	r1, [pc, #132]	; (8001a74 <_malloc_r+0xac>)
 80019f0:	680a      	ldr	r2, [r1, #0]
 80019f2:	4614      	mov	r4, r2
 80019f4:	b99c      	cbnz	r4, 8001a1e <_malloc_r+0x56>
 80019f6:	4f20      	ldr	r7, [pc, #128]	; (8001a78 <_malloc_r+0xb0>)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b923      	cbnz	r3, 8001a06 <_malloc_r+0x3e>
 80019fc:	4621      	mov	r1, r4
 80019fe:	4630      	mov	r0, r6
 8001a00:	f000 fb28 	bl	8002054 <_sbrk_r>
 8001a04:	6038      	str	r0, [r7, #0]
 8001a06:	4629      	mov	r1, r5
 8001a08:	4630      	mov	r0, r6
 8001a0a:	f000 fb23 	bl	8002054 <_sbrk_r>
 8001a0e:	1c43      	adds	r3, r0, #1
 8001a10:	d123      	bne.n	8001a5a <_malloc_r+0x92>
 8001a12:	230c      	movs	r3, #12
 8001a14:	6033      	str	r3, [r6, #0]
 8001a16:	4630      	mov	r0, r6
 8001a18:	f000 fbcc 	bl	80021b4 <__malloc_unlock>
 8001a1c:	e7e3      	b.n	80019e6 <_malloc_r+0x1e>
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	1b5b      	subs	r3, r3, r5
 8001a22:	d417      	bmi.n	8001a54 <_malloc_r+0x8c>
 8001a24:	2b0b      	cmp	r3, #11
 8001a26:	d903      	bls.n	8001a30 <_malloc_r+0x68>
 8001a28:	6023      	str	r3, [r4, #0]
 8001a2a:	441c      	add	r4, r3
 8001a2c:	6025      	str	r5, [r4, #0]
 8001a2e:	e004      	b.n	8001a3a <_malloc_r+0x72>
 8001a30:	6863      	ldr	r3, [r4, #4]
 8001a32:	42a2      	cmp	r2, r4
 8001a34:	bf0c      	ite	eq
 8001a36:	600b      	streq	r3, [r1, #0]
 8001a38:	6053      	strne	r3, [r2, #4]
 8001a3a:	4630      	mov	r0, r6
 8001a3c:	f000 fbba 	bl	80021b4 <__malloc_unlock>
 8001a40:	f104 000b 	add.w	r0, r4, #11
 8001a44:	1d23      	adds	r3, r4, #4
 8001a46:	f020 0007 	bic.w	r0, r0, #7
 8001a4a:	1ac2      	subs	r2, r0, r3
 8001a4c:	d0cc      	beq.n	80019e8 <_malloc_r+0x20>
 8001a4e:	1a1b      	subs	r3, r3, r0
 8001a50:	50a3      	str	r3, [r4, r2]
 8001a52:	e7c9      	b.n	80019e8 <_malloc_r+0x20>
 8001a54:	4622      	mov	r2, r4
 8001a56:	6864      	ldr	r4, [r4, #4]
 8001a58:	e7cc      	b.n	80019f4 <_malloc_r+0x2c>
 8001a5a:	1cc4      	adds	r4, r0, #3
 8001a5c:	f024 0403 	bic.w	r4, r4, #3
 8001a60:	42a0      	cmp	r0, r4
 8001a62:	d0e3      	beq.n	8001a2c <_malloc_r+0x64>
 8001a64:	1a21      	subs	r1, r4, r0
 8001a66:	4630      	mov	r0, r6
 8001a68:	f000 faf4 	bl	8002054 <_sbrk_r>
 8001a6c:	3001      	adds	r0, #1
 8001a6e:	d1dd      	bne.n	8001a2c <_malloc_r+0x64>
 8001a70:	e7cf      	b.n	8001a12 <_malloc_r+0x4a>
 8001a72:	bf00      	nop
 8001a74:	20000084 	.word	0x20000084
 8001a78:	20000088 	.word	0x20000088

08001a7c <__sfputc_r>:
 8001a7c:	6893      	ldr	r3, [r2, #8]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	b410      	push	{r4}
 8001a84:	6093      	str	r3, [r2, #8]
 8001a86:	da07      	bge.n	8001a98 <__sfputc_r+0x1c>
 8001a88:	6994      	ldr	r4, [r2, #24]
 8001a8a:	42a3      	cmp	r3, r4
 8001a8c:	db01      	blt.n	8001a92 <__sfputc_r+0x16>
 8001a8e:	290a      	cmp	r1, #10
 8001a90:	d102      	bne.n	8001a98 <__sfputc_r+0x1c>
 8001a92:	bc10      	pop	{r4}
 8001a94:	f7ff bc6c 	b.w	8001370 <__swbuf_r>
 8001a98:	6813      	ldr	r3, [r2, #0]
 8001a9a:	1c58      	adds	r0, r3, #1
 8001a9c:	6010      	str	r0, [r2, #0]
 8001a9e:	7019      	strb	r1, [r3, #0]
 8001aa0:	4608      	mov	r0, r1
 8001aa2:	bc10      	pop	{r4}
 8001aa4:	4770      	bx	lr

08001aa6 <__sfputs_r>:
 8001aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aa8:	4606      	mov	r6, r0
 8001aaa:	460f      	mov	r7, r1
 8001aac:	4614      	mov	r4, r2
 8001aae:	18d5      	adds	r5, r2, r3
 8001ab0:	42ac      	cmp	r4, r5
 8001ab2:	d101      	bne.n	8001ab8 <__sfputs_r+0x12>
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e007      	b.n	8001ac8 <__sfputs_r+0x22>
 8001ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001abc:	463a      	mov	r2, r7
 8001abe:	4630      	mov	r0, r6
 8001ac0:	f7ff ffdc 	bl	8001a7c <__sfputc_r>
 8001ac4:	1c43      	adds	r3, r0, #1
 8001ac6:	d1f3      	bne.n	8001ab0 <__sfputs_r+0xa>
 8001ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001acc <_vfiprintf_r>:
 8001acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ad0:	460d      	mov	r5, r1
 8001ad2:	b09d      	sub	sp, #116	; 0x74
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	4698      	mov	r8, r3
 8001ad8:	4606      	mov	r6, r0
 8001ada:	b118      	cbz	r0, 8001ae4 <_vfiprintf_r+0x18>
 8001adc:	6983      	ldr	r3, [r0, #24]
 8001ade:	b90b      	cbnz	r3, 8001ae4 <_vfiprintf_r+0x18>
 8001ae0:	f7ff fe20 	bl	8001724 <__sinit>
 8001ae4:	4b89      	ldr	r3, [pc, #548]	; (8001d0c <_vfiprintf_r+0x240>)
 8001ae6:	429d      	cmp	r5, r3
 8001ae8:	d11b      	bne.n	8001b22 <_vfiprintf_r+0x56>
 8001aea:	6875      	ldr	r5, [r6, #4]
 8001aec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001aee:	07d9      	lsls	r1, r3, #31
 8001af0:	d405      	bmi.n	8001afe <_vfiprintf_r+0x32>
 8001af2:	89ab      	ldrh	r3, [r5, #12]
 8001af4:	059a      	lsls	r2, r3, #22
 8001af6:	d402      	bmi.n	8001afe <_vfiprintf_r+0x32>
 8001af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001afa:	f7ff feb1 	bl	8001860 <__retarget_lock_acquire_recursive>
 8001afe:	89ab      	ldrh	r3, [r5, #12]
 8001b00:	071b      	lsls	r3, r3, #28
 8001b02:	d501      	bpl.n	8001b08 <_vfiprintf_r+0x3c>
 8001b04:	692b      	ldr	r3, [r5, #16]
 8001b06:	b9eb      	cbnz	r3, 8001b44 <_vfiprintf_r+0x78>
 8001b08:	4629      	mov	r1, r5
 8001b0a:	4630      	mov	r0, r6
 8001b0c:	f7ff fc82 	bl	8001414 <__swsetup_r>
 8001b10:	b1c0      	cbz	r0, 8001b44 <_vfiprintf_r+0x78>
 8001b12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b14:	07dc      	lsls	r4, r3, #31
 8001b16:	d50e      	bpl.n	8001b36 <_vfiprintf_r+0x6a>
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	b01d      	add	sp, #116	; 0x74
 8001b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b22:	4b7b      	ldr	r3, [pc, #492]	; (8001d10 <_vfiprintf_r+0x244>)
 8001b24:	429d      	cmp	r5, r3
 8001b26:	d101      	bne.n	8001b2c <_vfiprintf_r+0x60>
 8001b28:	68b5      	ldr	r5, [r6, #8]
 8001b2a:	e7df      	b.n	8001aec <_vfiprintf_r+0x20>
 8001b2c:	4b79      	ldr	r3, [pc, #484]	; (8001d14 <_vfiprintf_r+0x248>)
 8001b2e:	429d      	cmp	r5, r3
 8001b30:	bf08      	it	eq
 8001b32:	68f5      	ldreq	r5, [r6, #12]
 8001b34:	e7da      	b.n	8001aec <_vfiprintf_r+0x20>
 8001b36:	89ab      	ldrh	r3, [r5, #12]
 8001b38:	0598      	lsls	r0, r3, #22
 8001b3a:	d4ed      	bmi.n	8001b18 <_vfiprintf_r+0x4c>
 8001b3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b3e:	f7ff fe90 	bl	8001862 <__retarget_lock_release_recursive>
 8001b42:	e7e9      	b.n	8001b18 <_vfiprintf_r+0x4c>
 8001b44:	2300      	movs	r3, #0
 8001b46:	9309      	str	r3, [sp, #36]	; 0x24
 8001b48:	2320      	movs	r3, #32
 8001b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b52:	2330      	movs	r3, #48	; 0x30
 8001b54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001d18 <_vfiprintf_r+0x24c>
 8001b58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b5c:	f04f 0901 	mov.w	r9, #1
 8001b60:	4623      	mov	r3, r4
 8001b62:	469a      	mov	sl, r3
 8001b64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b68:	b10a      	cbz	r2, 8001b6e <_vfiprintf_r+0xa2>
 8001b6a:	2a25      	cmp	r2, #37	; 0x25
 8001b6c:	d1f9      	bne.n	8001b62 <_vfiprintf_r+0x96>
 8001b6e:	ebba 0b04 	subs.w	fp, sl, r4
 8001b72:	d00b      	beq.n	8001b8c <_vfiprintf_r+0xc0>
 8001b74:	465b      	mov	r3, fp
 8001b76:	4622      	mov	r2, r4
 8001b78:	4629      	mov	r1, r5
 8001b7a:	4630      	mov	r0, r6
 8001b7c:	f7ff ff93 	bl	8001aa6 <__sfputs_r>
 8001b80:	3001      	adds	r0, #1
 8001b82:	f000 80aa 	beq.w	8001cda <_vfiprintf_r+0x20e>
 8001b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b88:	445a      	add	r2, fp
 8001b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8001b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80a2 	beq.w	8001cda <_vfiprintf_r+0x20e>
 8001b96:	2300      	movs	r3, #0
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ba0:	f10a 0a01 	add.w	sl, sl, #1
 8001ba4:	9304      	str	r3, [sp, #16]
 8001ba6:	9307      	str	r3, [sp, #28]
 8001ba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bac:	931a      	str	r3, [sp, #104]	; 0x68
 8001bae:	4654      	mov	r4, sl
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bb6:	4858      	ldr	r0, [pc, #352]	; (8001d18 <_vfiprintf_r+0x24c>)
 8001bb8:	f7fe fb22 	bl	8000200 <memchr>
 8001bbc:	9a04      	ldr	r2, [sp, #16]
 8001bbe:	b9d8      	cbnz	r0, 8001bf8 <_vfiprintf_r+0x12c>
 8001bc0:	06d1      	lsls	r1, r2, #27
 8001bc2:	bf44      	itt	mi
 8001bc4:	2320      	movmi	r3, #32
 8001bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001bca:	0713      	lsls	r3, r2, #28
 8001bcc:	bf44      	itt	mi
 8001bce:	232b      	movmi	r3, #43	; 0x2b
 8001bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8001bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8001bda:	d015      	beq.n	8001c08 <_vfiprintf_r+0x13c>
 8001bdc:	9a07      	ldr	r2, [sp, #28]
 8001bde:	4654      	mov	r4, sl
 8001be0:	2000      	movs	r0, #0
 8001be2:	f04f 0c0a 	mov.w	ip, #10
 8001be6:	4621      	mov	r1, r4
 8001be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001bec:	3b30      	subs	r3, #48	; 0x30
 8001bee:	2b09      	cmp	r3, #9
 8001bf0:	d94e      	bls.n	8001c90 <_vfiprintf_r+0x1c4>
 8001bf2:	b1b0      	cbz	r0, 8001c22 <_vfiprintf_r+0x156>
 8001bf4:	9207      	str	r2, [sp, #28]
 8001bf6:	e014      	b.n	8001c22 <_vfiprintf_r+0x156>
 8001bf8:	eba0 0308 	sub.w	r3, r0, r8
 8001bfc:	fa09 f303 	lsl.w	r3, r9, r3
 8001c00:	4313      	orrs	r3, r2
 8001c02:	9304      	str	r3, [sp, #16]
 8001c04:	46a2      	mov	sl, r4
 8001c06:	e7d2      	b.n	8001bae <_vfiprintf_r+0xe2>
 8001c08:	9b03      	ldr	r3, [sp, #12]
 8001c0a:	1d19      	adds	r1, r3, #4
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	9103      	str	r1, [sp, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bfbb      	ittet	lt
 8001c14:	425b      	neglt	r3, r3
 8001c16:	f042 0202 	orrlt.w	r2, r2, #2
 8001c1a:	9307      	strge	r3, [sp, #28]
 8001c1c:	9307      	strlt	r3, [sp, #28]
 8001c1e:	bfb8      	it	lt
 8001c20:	9204      	strlt	r2, [sp, #16]
 8001c22:	7823      	ldrb	r3, [r4, #0]
 8001c24:	2b2e      	cmp	r3, #46	; 0x2e
 8001c26:	d10c      	bne.n	8001c42 <_vfiprintf_r+0x176>
 8001c28:	7863      	ldrb	r3, [r4, #1]
 8001c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8001c2c:	d135      	bne.n	8001c9a <_vfiprintf_r+0x1ce>
 8001c2e:	9b03      	ldr	r3, [sp, #12]
 8001c30:	1d1a      	adds	r2, r3, #4
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	9203      	str	r2, [sp, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bfb8      	it	lt
 8001c3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c3e:	3402      	adds	r4, #2
 8001c40:	9305      	str	r3, [sp, #20]
 8001c42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001d28 <_vfiprintf_r+0x25c>
 8001c46:	7821      	ldrb	r1, [r4, #0]
 8001c48:	2203      	movs	r2, #3
 8001c4a:	4650      	mov	r0, sl
 8001c4c:	f7fe fad8 	bl	8000200 <memchr>
 8001c50:	b140      	cbz	r0, 8001c64 <_vfiprintf_r+0x198>
 8001c52:	2340      	movs	r3, #64	; 0x40
 8001c54:	eba0 000a 	sub.w	r0, r0, sl
 8001c58:	fa03 f000 	lsl.w	r0, r3, r0
 8001c5c:	9b04      	ldr	r3, [sp, #16]
 8001c5e:	4303      	orrs	r3, r0
 8001c60:	3401      	adds	r4, #1
 8001c62:	9304      	str	r3, [sp, #16]
 8001c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c68:	482c      	ldr	r0, [pc, #176]	; (8001d1c <_vfiprintf_r+0x250>)
 8001c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c6e:	2206      	movs	r2, #6
 8001c70:	f7fe fac6 	bl	8000200 <memchr>
 8001c74:	2800      	cmp	r0, #0
 8001c76:	d03f      	beq.n	8001cf8 <_vfiprintf_r+0x22c>
 8001c78:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <_vfiprintf_r+0x254>)
 8001c7a:	bb1b      	cbnz	r3, 8001cc4 <_vfiprintf_r+0x1f8>
 8001c7c:	9b03      	ldr	r3, [sp, #12]
 8001c7e:	3307      	adds	r3, #7
 8001c80:	f023 0307 	bic.w	r3, r3, #7
 8001c84:	3308      	adds	r3, #8
 8001c86:	9303      	str	r3, [sp, #12]
 8001c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c8a:	443b      	add	r3, r7
 8001c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8001c8e:	e767      	b.n	8001b60 <_vfiprintf_r+0x94>
 8001c90:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c94:	460c      	mov	r4, r1
 8001c96:	2001      	movs	r0, #1
 8001c98:	e7a5      	b.n	8001be6 <_vfiprintf_r+0x11a>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	3401      	adds	r4, #1
 8001c9e:	9305      	str	r3, [sp, #20]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 0c0a 	mov.w	ip, #10
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cac:	3a30      	subs	r2, #48	; 0x30
 8001cae:	2a09      	cmp	r2, #9
 8001cb0:	d903      	bls.n	8001cba <_vfiprintf_r+0x1ee>
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0c5      	beq.n	8001c42 <_vfiprintf_r+0x176>
 8001cb6:	9105      	str	r1, [sp, #20]
 8001cb8:	e7c3      	b.n	8001c42 <_vfiprintf_r+0x176>
 8001cba:	fb0c 2101 	mla	r1, ip, r1, r2
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e7f0      	b.n	8001ca6 <_vfiprintf_r+0x1da>
 8001cc4:	ab03      	add	r3, sp, #12
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	462a      	mov	r2, r5
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <_vfiprintf_r+0x258>)
 8001ccc:	a904      	add	r1, sp, #16
 8001cce:	4630      	mov	r0, r6
 8001cd0:	f3af 8000 	nop.w
 8001cd4:	4607      	mov	r7, r0
 8001cd6:	1c78      	adds	r0, r7, #1
 8001cd8:	d1d6      	bne.n	8001c88 <_vfiprintf_r+0x1bc>
 8001cda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001cdc:	07d9      	lsls	r1, r3, #31
 8001cde:	d405      	bmi.n	8001cec <_vfiprintf_r+0x220>
 8001ce0:	89ab      	ldrh	r3, [r5, #12]
 8001ce2:	059a      	lsls	r2, r3, #22
 8001ce4:	d402      	bmi.n	8001cec <_vfiprintf_r+0x220>
 8001ce6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ce8:	f7ff fdbb 	bl	8001862 <__retarget_lock_release_recursive>
 8001cec:	89ab      	ldrh	r3, [r5, #12]
 8001cee:	065b      	lsls	r3, r3, #25
 8001cf0:	f53f af12 	bmi.w	8001b18 <_vfiprintf_r+0x4c>
 8001cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001cf6:	e711      	b.n	8001b1c <_vfiprintf_r+0x50>
 8001cf8:	ab03      	add	r3, sp, #12
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	462a      	mov	r2, r5
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <_vfiprintf_r+0x258>)
 8001d00:	a904      	add	r1, sp, #16
 8001d02:	4630      	mov	r0, r6
 8001d04:	f000 f880 	bl	8001e08 <_printf_i>
 8001d08:	e7e4      	b.n	8001cd4 <_vfiprintf_r+0x208>
 8001d0a:	bf00      	nop
 8001d0c:	0800230c 	.word	0x0800230c
 8001d10:	0800232c 	.word	0x0800232c
 8001d14:	080022ec 	.word	0x080022ec
 8001d18:	0800234c 	.word	0x0800234c
 8001d1c:	08002356 	.word	0x08002356
 8001d20:	00000000 	.word	0x00000000
 8001d24:	08001aa7 	.word	0x08001aa7
 8001d28:	08002352 	.word	0x08002352

08001d2c <_printf_common>:
 8001d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d30:	4616      	mov	r6, r2
 8001d32:	4699      	mov	r9, r3
 8001d34:	688a      	ldr	r2, [r1, #8]
 8001d36:	690b      	ldr	r3, [r1, #16]
 8001d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	bfb8      	it	lt
 8001d40:	4613      	movlt	r3, r2
 8001d42:	6033      	str	r3, [r6, #0]
 8001d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d48:	4607      	mov	r7, r0
 8001d4a:	460c      	mov	r4, r1
 8001d4c:	b10a      	cbz	r2, 8001d52 <_printf_common+0x26>
 8001d4e:	3301      	adds	r3, #1
 8001d50:	6033      	str	r3, [r6, #0]
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	0699      	lsls	r1, r3, #26
 8001d56:	bf42      	ittt	mi
 8001d58:	6833      	ldrmi	r3, [r6, #0]
 8001d5a:	3302      	addmi	r3, #2
 8001d5c:	6033      	strmi	r3, [r6, #0]
 8001d5e:	6825      	ldr	r5, [r4, #0]
 8001d60:	f015 0506 	ands.w	r5, r5, #6
 8001d64:	d106      	bne.n	8001d74 <_printf_common+0x48>
 8001d66:	f104 0a19 	add.w	sl, r4, #25
 8001d6a:	68e3      	ldr	r3, [r4, #12]
 8001d6c:	6832      	ldr	r2, [r6, #0]
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	42ab      	cmp	r3, r5
 8001d72:	dc26      	bgt.n	8001dc2 <_printf_common+0x96>
 8001d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001d78:	1e13      	subs	r3, r2, #0
 8001d7a:	6822      	ldr	r2, [r4, #0]
 8001d7c:	bf18      	it	ne
 8001d7e:	2301      	movne	r3, #1
 8001d80:	0692      	lsls	r2, r2, #26
 8001d82:	d42b      	bmi.n	8001ddc <_printf_common+0xb0>
 8001d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d88:	4649      	mov	r1, r9
 8001d8a:	4638      	mov	r0, r7
 8001d8c:	47c0      	blx	r8
 8001d8e:	3001      	adds	r0, #1
 8001d90:	d01e      	beq.n	8001dd0 <_printf_common+0xa4>
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	68e5      	ldr	r5, [r4, #12]
 8001d96:	6832      	ldr	r2, [r6, #0]
 8001d98:	f003 0306 	and.w	r3, r3, #6
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	bf08      	it	eq
 8001da0:	1aad      	subeq	r5, r5, r2
 8001da2:	68a3      	ldr	r3, [r4, #8]
 8001da4:	6922      	ldr	r2, [r4, #16]
 8001da6:	bf0c      	ite	eq
 8001da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001dac:	2500      	movne	r5, #0
 8001dae:	4293      	cmp	r3, r2
 8001db0:	bfc4      	itt	gt
 8001db2:	1a9b      	subgt	r3, r3, r2
 8001db4:	18ed      	addgt	r5, r5, r3
 8001db6:	2600      	movs	r6, #0
 8001db8:	341a      	adds	r4, #26
 8001dba:	42b5      	cmp	r5, r6
 8001dbc:	d11a      	bne.n	8001df4 <_printf_common+0xc8>
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	e008      	b.n	8001dd4 <_printf_common+0xa8>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	4652      	mov	r2, sl
 8001dc6:	4649      	mov	r1, r9
 8001dc8:	4638      	mov	r0, r7
 8001dca:	47c0      	blx	r8
 8001dcc:	3001      	adds	r0, #1
 8001dce:	d103      	bne.n	8001dd8 <_printf_common+0xac>
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dd8:	3501      	adds	r5, #1
 8001dda:	e7c6      	b.n	8001d6a <_printf_common+0x3e>
 8001ddc:	18e1      	adds	r1, r4, r3
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	2030      	movs	r0, #48	; 0x30
 8001de2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001de6:	4422      	add	r2, r4
 8001de8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001dec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001df0:	3302      	adds	r3, #2
 8001df2:	e7c7      	b.n	8001d84 <_printf_common+0x58>
 8001df4:	2301      	movs	r3, #1
 8001df6:	4622      	mov	r2, r4
 8001df8:	4649      	mov	r1, r9
 8001dfa:	4638      	mov	r0, r7
 8001dfc:	47c0      	blx	r8
 8001dfe:	3001      	adds	r0, #1
 8001e00:	d0e6      	beq.n	8001dd0 <_printf_common+0xa4>
 8001e02:	3601      	adds	r6, #1
 8001e04:	e7d9      	b.n	8001dba <_printf_common+0x8e>
	...

08001e08 <_printf_i>:
 8001e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e0c:	460c      	mov	r4, r1
 8001e0e:	4691      	mov	r9, r2
 8001e10:	7e27      	ldrb	r7, [r4, #24]
 8001e12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001e14:	2f78      	cmp	r7, #120	; 0x78
 8001e16:	4680      	mov	r8, r0
 8001e18:	469a      	mov	sl, r3
 8001e1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e1e:	d807      	bhi.n	8001e30 <_printf_i+0x28>
 8001e20:	2f62      	cmp	r7, #98	; 0x62
 8001e22:	d80a      	bhi.n	8001e3a <_printf_i+0x32>
 8001e24:	2f00      	cmp	r7, #0
 8001e26:	f000 80d8 	beq.w	8001fda <_printf_i+0x1d2>
 8001e2a:	2f58      	cmp	r7, #88	; 0x58
 8001e2c:	f000 80a3 	beq.w	8001f76 <_printf_i+0x16e>
 8001e30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001e38:	e03a      	b.n	8001eb0 <_printf_i+0xa8>
 8001e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001e3e:	2b15      	cmp	r3, #21
 8001e40:	d8f6      	bhi.n	8001e30 <_printf_i+0x28>
 8001e42:	a001      	add	r0, pc, #4	; (adr r0, 8001e48 <_printf_i+0x40>)
 8001e44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001e48:	08001ea1 	.word	0x08001ea1
 8001e4c:	08001eb5 	.word	0x08001eb5
 8001e50:	08001e31 	.word	0x08001e31
 8001e54:	08001e31 	.word	0x08001e31
 8001e58:	08001e31 	.word	0x08001e31
 8001e5c:	08001e31 	.word	0x08001e31
 8001e60:	08001eb5 	.word	0x08001eb5
 8001e64:	08001e31 	.word	0x08001e31
 8001e68:	08001e31 	.word	0x08001e31
 8001e6c:	08001e31 	.word	0x08001e31
 8001e70:	08001e31 	.word	0x08001e31
 8001e74:	08001fc1 	.word	0x08001fc1
 8001e78:	08001ee5 	.word	0x08001ee5
 8001e7c:	08001fa3 	.word	0x08001fa3
 8001e80:	08001e31 	.word	0x08001e31
 8001e84:	08001e31 	.word	0x08001e31
 8001e88:	08001fe3 	.word	0x08001fe3
 8001e8c:	08001e31 	.word	0x08001e31
 8001e90:	08001ee5 	.word	0x08001ee5
 8001e94:	08001e31 	.word	0x08001e31
 8001e98:	08001e31 	.word	0x08001e31
 8001e9c:	08001fab 	.word	0x08001fab
 8001ea0:	680b      	ldr	r3, [r1, #0]
 8001ea2:	1d1a      	adds	r2, r3, #4
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	600a      	str	r2, [r1, #0]
 8001ea8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0a3      	b.n	8001ffc <_printf_i+0x1f4>
 8001eb4:	6825      	ldr	r5, [r4, #0]
 8001eb6:	6808      	ldr	r0, [r1, #0]
 8001eb8:	062e      	lsls	r6, r5, #24
 8001eba:	f100 0304 	add.w	r3, r0, #4
 8001ebe:	d50a      	bpl.n	8001ed6 <_printf_i+0xce>
 8001ec0:	6805      	ldr	r5, [r0, #0]
 8001ec2:	600b      	str	r3, [r1, #0]
 8001ec4:	2d00      	cmp	r5, #0
 8001ec6:	da03      	bge.n	8001ed0 <_printf_i+0xc8>
 8001ec8:	232d      	movs	r3, #45	; 0x2d
 8001eca:	426d      	negs	r5, r5
 8001ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ed0:	485e      	ldr	r0, [pc, #376]	; (800204c <_printf_i+0x244>)
 8001ed2:	230a      	movs	r3, #10
 8001ed4:	e019      	b.n	8001f0a <_printf_i+0x102>
 8001ed6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001eda:	6805      	ldr	r5, [r0, #0]
 8001edc:	600b      	str	r3, [r1, #0]
 8001ede:	bf18      	it	ne
 8001ee0:	b22d      	sxthne	r5, r5
 8001ee2:	e7ef      	b.n	8001ec4 <_printf_i+0xbc>
 8001ee4:	680b      	ldr	r3, [r1, #0]
 8001ee6:	6825      	ldr	r5, [r4, #0]
 8001ee8:	1d18      	adds	r0, r3, #4
 8001eea:	6008      	str	r0, [r1, #0]
 8001eec:	0628      	lsls	r0, r5, #24
 8001eee:	d501      	bpl.n	8001ef4 <_printf_i+0xec>
 8001ef0:	681d      	ldr	r5, [r3, #0]
 8001ef2:	e002      	b.n	8001efa <_printf_i+0xf2>
 8001ef4:	0669      	lsls	r1, r5, #25
 8001ef6:	d5fb      	bpl.n	8001ef0 <_printf_i+0xe8>
 8001ef8:	881d      	ldrh	r5, [r3, #0]
 8001efa:	4854      	ldr	r0, [pc, #336]	; (800204c <_printf_i+0x244>)
 8001efc:	2f6f      	cmp	r7, #111	; 0x6f
 8001efe:	bf0c      	ite	eq
 8001f00:	2308      	moveq	r3, #8
 8001f02:	230a      	movne	r3, #10
 8001f04:	2100      	movs	r1, #0
 8001f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f0a:	6866      	ldr	r6, [r4, #4]
 8001f0c:	60a6      	str	r6, [r4, #8]
 8001f0e:	2e00      	cmp	r6, #0
 8001f10:	bfa2      	ittt	ge
 8001f12:	6821      	ldrge	r1, [r4, #0]
 8001f14:	f021 0104 	bicge.w	r1, r1, #4
 8001f18:	6021      	strge	r1, [r4, #0]
 8001f1a:	b90d      	cbnz	r5, 8001f20 <_printf_i+0x118>
 8001f1c:	2e00      	cmp	r6, #0
 8001f1e:	d04d      	beq.n	8001fbc <_printf_i+0x1b4>
 8001f20:	4616      	mov	r6, r2
 8001f22:	fbb5 f1f3 	udiv	r1, r5, r3
 8001f26:	fb03 5711 	mls	r7, r3, r1, r5
 8001f2a:	5dc7      	ldrb	r7, [r0, r7]
 8001f2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001f30:	462f      	mov	r7, r5
 8001f32:	42bb      	cmp	r3, r7
 8001f34:	460d      	mov	r5, r1
 8001f36:	d9f4      	bls.n	8001f22 <_printf_i+0x11a>
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d10b      	bne.n	8001f54 <_printf_i+0x14c>
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	07df      	lsls	r7, r3, #31
 8001f40:	d508      	bpl.n	8001f54 <_printf_i+0x14c>
 8001f42:	6923      	ldr	r3, [r4, #16]
 8001f44:	6861      	ldr	r1, [r4, #4]
 8001f46:	4299      	cmp	r1, r3
 8001f48:	bfde      	ittt	le
 8001f4a:	2330      	movle	r3, #48	; 0x30
 8001f4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001f50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001f54:	1b92      	subs	r2, r2, r6
 8001f56:	6122      	str	r2, [r4, #16]
 8001f58:	f8cd a000 	str.w	sl, [sp]
 8001f5c:	464b      	mov	r3, r9
 8001f5e:	aa03      	add	r2, sp, #12
 8001f60:	4621      	mov	r1, r4
 8001f62:	4640      	mov	r0, r8
 8001f64:	f7ff fee2 	bl	8001d2c <_printf_common>
 8001f68:	3001      	adds	r0, #1
 8001f6a:	d14c      	bne.n	8002006 <_printf_i+0x1fe>
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	b004      	add	sp, #16
 8001f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f76:	4835      	ldr	r0, [pc, #212]	; (800204c <_printf_i+0x244>)
 8001f78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	680e      	ldr	r6, [r1, #0]
 8001f80:	061f      	lsls	r7, r3, #24
 8001f82:	f856 5b04 	ldr.w	r5, [r6], #4
 8001f86:	600e      	str	r6, [r1, #0]
 8001f88:	d514      	bpl.n	8001fb4 <_printf_i+0x1ac>
 8001f8a:	07d9      	lsls	r1, r3, #31
 8001f8c:	bf44      	itt	mi
 8001f8e:	f043 0320 	orrmi.w	r3, r3, #32
 8001f92:	6023      	strmi	r3, [r4, #0]
 8001f94:	b91d      	cbnz	r5, 8001f9e <_printf_i+0x196>
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	f023 0320 	bic.w	r3, r3, #32
 8001f9c:	6023      	str	r3, [r4, #0]
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	e7b0      	b.n	8001f04 <_printf_i+0xfc>
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	f043 0320 	orr.w	r3, r3, #32
 8001fa8:	6023      	str	r3, [r4, #0]
 8001faa:	2378      	movs	r3, #120	; 0x78
 8001fac:	4828      	ldr	r0, [pc, #160]	; (8002050 <_printf_i+0x248>)
 8001fae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001fb2:	e7e3      	b.n	8001f7c <_printf_i+0x174>
 8001fb4:	065e      	lsls	r6, r3, #25
 8001fb6:	bf48      	it	mi
 8001fb8:	b2ad      	uxthmi	r5, r5
 8001fba:	e7e6      	b.n	8001f8a <_printf_i+0x182>
 8001fbc:	4616      	mov	r6, r2
 8001fbe:	e7bb      	b.n	8001f38 <_printf_i+0x130>
 8001fc0:	680b      	ldr	r3, [r1, #0]
 8001fc2:	6826      	ldr	r6, [r4, #0]
 8001fc4:	6960      	ldr	r0, [r4, #20]
 8001fc6:	1d1d      	adds	r5, r3, #4
 8001fc8:	600d      	str	r5, [r1, #0]
 8001fca:	0635      	lsls	r5, r6, #24
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	d501      	bpl.n	8001fd4 <_printf_i+0x1cc>
 8001fd0:	6018      	str	r0, [r3, #0]
 8001fd2:	e002      	b.n	8001fda <_printf_i+0x1d2>
 8001fd4:	0671      	lsls	r1, r6, #25
 8001fd6:	d5fb      	bpl.n	8001fd0 <_printf_i+0x1c8>
 8001fd8:	8018      	strh	r0, [r3, #0]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	6123      	str	r3, [r4, #16]
 8001fde:	4616      	mov	r6, r2
 8001fe0:	e7ba      	b.n	8001f58 <_printf_i+0x150>
 8001fe2:	680b      	ldr	r3, [r1, #0]
 8001fe4:	1d1a      	adds	r2, r3, #4
 8001fe6:	600a      	str	r2, [r1, #0]
 8001fe8:	681e      	ldr	r6, [r3, #0]
 8001fea:	6862      	ldr	r2, [r4, #4]
 8001fec:	2100      	movs	r1, #0
 8001fee:	4630      	mov	r0, r6
 8001ff0:	f7fe f906 	bl	8000200 <memchr>
 8001ff4:	b108      	cbz	r0, 8001ffa <_printf_i+0x1f2>
 8001ff6:	1b80      	subs	r0, r0, r6
 8001ff8:	6060      	str	r0, [r4, #4]
 8001ffa:	6863      	ldr	r3, [r4, #4]
 8001ffc:	6123      	str	r3, [r4, #16]
 8001ffe:	2300      	movs	r3, #0
 8002000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002004:	e7a8      	b.n	8001f58 <_printf_i+0x150>
 8002006:	6923      	ldr	r3, [r4, #16]
 8002008:	4632      	mov	r2, r6
 800200a:	4649      	mov	r1, r9
 800200c:	4640      	mov	r0, r8
 800200e:	47d0      	blx	sl
 8002010:	3001      	adds	r0, #1
 8002012:	d0ab      	beq.n	8001f6c <_printf_i+0x164>
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	079b      	lsls	r3, r3, #30
 8002018:	d413      	bmi.n	8002042 <_printf_i+0x23a>
 800201a:	68e0      	ldr	r0, [r4, #12]
 800201c:	9b03      	ldr	r3, [sp, #12]
 800201e:	4298      	cmp	r0, r3
 8002020:	bfb8      	it	lt
 8002022:	4618      	movlt	r0, r3
 8002024:	e7a4      	b.n	8001f70 <_printf_i+0x168>
 8002026:	2301      	movs	r3, #1
 8002028:	4632      	mov	r2, r6
 800202a:	4649      	mov	r1, r9
 800202c:	4640      	mov	r0, r8
 800202e:	47d0      	blx	sl
 8002030:	3001      	adds	r0, #1
 8002032:	d09b      	beq.n	8001f6c <_printf_i+0x164>
 8002034:	3501      	adds	r5, #1
 8002036:	68e3      	ldr	r3, [r4, #12]
 8002038:	9903      	ldr	r1, [sp, #12]
 800203a:	1a5b      	subs	r3, r3, r1
 800203c:	42ab      	cmp	r3, r5
 800203e:	dcf2      	bgt.n	8002026 <_printf_i+0x21e>
 8002040:	e7eb      	b.n	800201a <_printf_i+0x212>
 8002042:	2500      	movs	r5, #0
 8002044:	f104 0619 	add.w	r6, r4, #25
 8002048:	e7f5      	b.n	8002036 <_printf_i+0x22e>
 800204a:	bf00      	nop
 800204c:	0800235d 	.word	0x0800235d
 8002050:	0800236e 	.word	0x0800236e

08002054 <_sbrk_r>:
 8002054:	b538      	push	{r3, r4, r5, lr}
 8002056:	4d06      	ldr	r5, [pc, #24]	; (8002070 <_sbrk_r+0x1c>)
 8002058:	2300      	movs	r3, #0
 800205a:	4604      	mov	r4, r0
 800205c:	4608      	mov	r0, r1
 800205e:	602b      	str	r3, [r5, #0]
 8002060:	f7fe fc4e 	bl	8000900 <_sbrk>
 8002064:	1c43      	adds	r3, r0, #1
 8002066:	d102      	bne.n	800206e <_sbrk_r+0x1a>
 8002068:	682b      	ldr	r3, [r5, #0]
 800206a:	b103      	cbz	r3, 800206e <_sbrk_r+0x1a>
 800206c:	6023      	str	r3, [r4, #0]
 800206e:	bd38      	pop	{r3, r4, r5, pc}
 8002070:	20000098 	.word	0x20000098

08002074 <__sread>:
 8002074:	b510      	push	{r4, lr}
 8002076:	460c      	mov	r4, r1
 8002078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800207c:	f000 f8a0 	bl	80021c0 <_read_r>
 8002080:	2800      	cmp	r0, #0
 8002082:	bfab      	itete	ge
 8002084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002086:	89a3      	ldrhlt	r3, [r4, #12]
 8002088:	181b      	addge	r3, r3, r0
 800208a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800208e:	bfac      	ite	ge
 8002090:	6563      	strge	r3, [r4, #84]	; 0x54
 8002092:	81a3      	strhlt	r3, [r4, #12]
 8002094:	bd10      	pop	{r4, pc}

08002096 <__swrite>:
 8002096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800209a:	461f      	mov	r7, r3
 800209c:	898b      	ldrh	r3, [r1, #12]
 800209e:	05db      	lsls	r3, r3, #23
 80020a0:	4605      	mov	r5, r0
 80020a2:	460c      	mov	r4, r1
 80020a4:	4616      	mov	r6, r2
 80020a6:	d505      	bpl.n	80020b4 <__swrite+0x1e>
 80020a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ac:	2302      	movs	r3, #2
 80020ae:	2200      	movs	r2, #0
 80020b0:	f000 f868 	bl	8002184 <_lseek_r>
 80020b4:	89a3      	ldrh	r3, [r4, #12]
 80020b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020be:	81a3      	strh	r3, [r4, #12]
 80020c0:	4632      	mov	r2, r6
 80020c2:	463b      	mov	r3, r7
 80020c4:	4628      	mov	r0, r5
 80020c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020ca:	f000 b817 	b.w	80020fc <_write_r>

080020ce <__sseek>:
 80020ce:	b510      	push	{r4, lr}
 80020d0:	460c      	mov	r4, r1
 80020d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020d6:	f000 f855 	bl	8002184 <_lseek_r>
 80020da:	1c43      	adds	r3, r0, #1
 80020dc:	89a3      	ldrh	r3, [r4, #12]
 80020de:	bf15      	itete	ne
 80020e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80020e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80020e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80020ea:	81a3      	strheq	r3, [r4, #12]
 80020ec:	bf18      	it	ne
 80020ee:	81a3      	strhne	r3, [r4, #12]
 80020f0:	bd10      	pop	{r4, pc}

080020f2 <__sclose>:
 80020f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020f6:	f000 b813 	b.w	8002120 <_close_r>
	...

080020fc <_write_r>:
 80020fc:	b538      	push	{r3, r4, r5, lr}
 80020fe:	4d07      	ldr	r5, [pc, #28]	; (800211c <_write_r+0x20>)
 8002100:	4604      	mov	r4, r0
 8002102:	4608      	mov	r0, r1
 8002104:	4611      	mov	r1, r2
 8002106:	2200      	movs	r2, #0
 8002108:	602a      	str	r2, [r5, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	f7fe fbab 	bl	8000866 <_write>
 8002110:	1c43      	adds	r3, r0, #1
 8002112:	d102      	bne.n	800211a <_write_r+0x1e>
 8002114:	682b      	ldr	r3, [r5, #0]
 8002116:	b103      	cbz	r3, 800211a <_write_r+0x1e>
 8002118:	6023      	str	r3, [r4, #0]
 800211a:	bd38      	pop	{r3, r4, r5, pc}
 800211c:	20000098 	.word	0x20000098

08002120 <_close_r>:
 8002120:	b538      	push	{r3, r4, r5, lr}
 8002122:	4d06      	ldr	r5, [pc, #24]	; (800213c <_close_r+0x1c>)
 8002124:	2300      	movs	r3, #0
 8002126:	4604      	mov	r4, r0
 8002128:	4608      	mov	r0, r1
 800212a:	602b      	str	r3, [r5, #0]
 800212c:	f7fe fbb7 	bl	800089e <_close>
 8002130:	1c43      	adds	r3, r0, #1
 8002132:	d102      	bne.n	800213a <_close_r+0x1a>
 8002134:	682b      	ldr	r3, [r5, #0]
 8002136:	b103      	cbz	r3, 800213a <_close_r+0x1a>
 8002138:	6023      	str	r3, [r4, #0]
 800213a:	bd38      	pop	{r3, r4, r5, pc}
 800213c:	20000098 	.word	0x20000098

08002140 <_fstat_r>:
 8002140:	b538      	push	{r3, r4, r5, lr}
 8002142:	4d07      	ldr	r5, [pc, #28]	; (8002160 <_fstat_r+0x20>)
 8002144:	2300      	movs	r3, #0
 8002146:	4604      	mov	r4, r0
 8002148:	4608      	mov	r0, r1
 800214a:	4611      	mov	r1, r2
 800214c:	602b      	str	r3, [r5, #0]
 800214e:	f7fe fbb1 	bl	80008b4 <_fstat>
 8002152:	1c43      	adds	r3, r0, #1
 8002154:	d102      	bne.n	800215c <_fstat_r+0x1c>
 8002156:	682b      	ldr	r3, [r5, #0]
 8002158:	b103      	cbz	r3, 800215c <_fstat_r+0x1c>
 800215a:	6023      	str	r3, [r4, #0]
 800215c:	bd38      	pop	{r3, r4, r5, pc}
 800215e:	bf00      	nop
 8002160:	20000098 	.word	0x20000098

08002164 <_isatty_r>:
 8002164:	b538      	push	{r3, r4, r5, lr}
 8002166:	4d06      	ldr	r5, [pc, #24]	; (8002180 <_isatty_r+0x1c>)
 8002168:	2300      	movs	r3, #0
 800216a:	4604      	mov	r4, r0
 800216c:	4608      	mov	r0, r1
 800216e:	602b      	str	r3, [r5, #0]
 8002170:	f7fe fbaf 	bl	80008d2 <_isatty>
 8002174:	1c43      	adds	r3, r0, #1
 8002176:	d102      	bne.n	800217e <_isatty_r+0x1a>
 8002178:	682b      	ldr	r3, [r5, #0]
 800217a:	b103      	cbz	r3, 800217e <_isatty_r+0x1a>
 800217c:	6023      	str	r3, [r4, #0]
 800217e:	bd38      	pop	{r3, r4, r5, pc}
 8002180:	20000098 	.word	0x20000098

08002184 <_lseek_r>:
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	4d07      	ldr	r5, [pc, #28]	; (80021a4 <_lseek_r+0x20>)
 8002188:	4604      	mov	r4, r0
 800218a:	4608      	mov	r0, r1
 800218c:	4611      	mov	r1, r2
 800218e:	2200      	movs	r2, #0
 8002190:	602a      	str	r2, [r5, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	f7fe fba7 	bl	80008e6 <_lseek>
 8002198:	1c43      	adds	r3, r0, #1
 800219a:	d102      	bne.n	80021a2 <_lseek_r+0x1e>
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	b103      	cbz	r3, 80021a2 <_lseek_r+0x1e>
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
 80021a4:	20000098 	.word	0x20000098

080021a8 <__malloc_lock>:
 80021a8:	4801      	ldr	r0, [pc, #4]	; (80021b0 <__malloc_lock+0x8>)
 80021aa:	f7ff bb59 	b.w	8001860 <__retarget_lock_acquire_recursive>
 80021ae:	bf00      	nop
 80021b0:	20000090 	.word	0x20000090

080021b4 <__malloc_unlock>:
 80021b4:	4801      	ldr	r0, [pc, #4]	; (80021bc <__malloc_unlock+0x8>)
 80021b6:	f7ff bb54 	b.w	8001862 <__retarget_lock_release_recursive>
 80021ba:	bf00      	nop
 80021bc:	20000090 	.word	0x20000090

080021c0 <_read_r>:
 80021c0:	b538      	push	{r3, r4, r5, lr}
 80021c2:	4d07      	ldr	r5, [pc, #28]	; (80021e0 <_read_r+0x20>)
 80021c4:	4604      	mov	r4, r0
 80021c6:	4608      	mov	r0, r1
 80021c8:	4611      	mov	r1, r2
 80021ca:	2200      	movs	r2, #0
 80021cc:	602a      	str	r2, [r5, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f7fe fb2c 	bl	800082c <_read>
 80021d4:	1c43      	adds	r3, r0, #1
 80021d6:	d102      	bne.n	80021de <_read_r+0x1e>
 80021d8:	682b      	ldr	r3, [r5, #0]
 80021da:	b103      	cbz	r3, 80021de <_read_r+0x1e>
 80021dc:	6023      	str	r3, [r4, #0]
 80021de:	bd38      	pop	{r3, r4, r5, pc}
 80021e0:	20000098 	.word	0x20000098

080021e4 <_init>:
 80021e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e6:	bf00      	nop
 80021e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ea:	bc08      	pop	{r3}
 80021ec:	469e      	mov	lr, r3
 80021ee:	4770      	bx	lr

080021f0 <_fini>:
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f2:	bf00      	nop
 80021f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021f6:	bc08      	pop	{r3}
 80021f8:	469e      	mov	lr, r3
 80021fa:	4770      	bx	lr
