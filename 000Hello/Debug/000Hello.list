
000Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08002960  08002960  00012960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002da0  08002da0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002da0  08002da0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002da0  08002da0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002da0  08002da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002da4  08002da4  00012da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000078  08002e20  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08002e20  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004238  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dd8  00000000  00000000  000242da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003a8  00000000  00000000  000250b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000320  00000000  00000000  00025460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d64  00000000  00000000  00025780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003b9c  00000000  00000000  000294e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000dc10  00000000  00000000  0002d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0003ac90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001550  00000000  00000000  0003ace4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002948 	.word	0x08002948

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08002948 	.word	0x08002948

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:

#include "lcd5110.h"
#include "keypad4x4.h"
#include "ade7753.h"

void delay(void) {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	0007a11f 	.word	0x0007a11f

080002bc <int_to_string>:
    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
}

void int_to_string(uint32_t num , char* buf)
{
 80002bc:	b480      	push	{r7}
 80002be:	b087      	sub	sp, #28
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
	int buf_len;
	if (num == 0) {
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d105      	bne.n	80002d8 <int_to_string+0x1c>
		buf[0] = 48;
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	2230      	movs	r2, #48	; 0x30
 80002d0:	701a      	strb	r2, [r3, #0]
		buf_len = 1;
 80002d2:	2301      	movs	r3, #1
 80002d4:	617b      	str	r3, [r7, #20]
 80002d6:	e042      	b.n	800035e <int_to_string+0xa2>
	}
	else {
		for (buf_len = 0; num > 0; buf_len++) {
 80002d8:	2300      	movs	r3, #0
 80002da:	617b      	str	r3, [r7, #20]
 80002dc:	e019      	b.n	8000312 <int_to_string+0x56>
			buf[buf_len] = (num % 10) + 48;
 80002de:	6879      	ldr	r1, [r7, #4]
 80002e0:	4b24      	ldr	r3, [pc, #144]	; (8000374 <int_to_string+0xb8>)
 80002e2:	fba3 2301 	umull	r2, r3, r3, r1
 80002e6:	08da      	lsrs	r2, r3, #3
 80002e8:	4613      	mov	r3, r2
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	4413      	add	r3, r2
 80002ee:	005b      	lsls	r3, r3, #1
 80002f0:	1aca      	subs	r2, r1, r3
 80002f2:	b2d2      	uxtb	r2, r2
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	6839      	ldr	r1, [r7, #0]
 80002f8:	440b      	add	r3, r1
 80002fa:	3230      	adds	r2, #48	; 0x30
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	701a      	strb	r2, [r3, #0]
			num /= 10;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a1c      	ldr	r2, [pc, #112]	; (8000374 <int_to_string+0xb8>)
 8000304:	fba2 2303 	umull	r2, r3, r2, r3
 8000308:	08db      	lsrs	r3, r3, #3
 800030a:	607b      	str	r3, [r7, #4]
		for (buf_len = 0; num > 0; buf_len++) {
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	3301      	adds	r3, #1
 8000310:	617b      	str	r3, [r7, #20]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d1e2      	bne.n	80002de <int_to_string+0x22>
		}

		for (int low = 0, high = buf_len - 1; low < high; low++, high--)
 8000318:	2300      	movs	r3, #0
 800031a:	613b      	str	r3, [r7, #16]
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	3b01      	subs	r3, #1
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	e018      	b.n	8000356 <int_to_string+0x9a>
		{
			int temp = buf[low];
 8000324:	693b      	ldr	r3, [r7, #16]
 8000326:	683a      	ldr	r2, [r7, #0]
 8000328:	4413      	add	r3, r2
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	60bb      	str	r3, [r7, #8]
			buf[low] = buf[high];
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	683a      	ldr	r2, [r7, #0]
 8000332:	441a      	add	r2, r3
 8000334:	693b      	ldr	r3, [r7, #16]
 8000336:	6839      	ldr	r1, [r7, #0]
 8000338:	440b      	add	r3, r1
 800033a:	7812      	ldrb	r2, [r2, #0]
 800033c:	701a      	strb	r2, [r3, #0]
			buf[high] = temp;
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	683a      	ldr	r2, [r7, #0]
 8000342:	4413      	add	r3, r2
 8000344:	68ba      	ldr	r2, [r7, #8]
 8000346:	b2d2      	uxtb	r2, r2
 8000348:	701a      	strb	r2, [r3, #0]
		for (int low = 0, high = buf_len - 1; low < high; low++, high--)
 800034a:	693b      	ldr	r3, [r7, #16]
 800034c:	3301      	adds	r3, #1
 800034e:	613b      	str	r3, [r7, #16]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	3b01      	subs	r3, #1
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	693a      	ldr	r2, [r7, #16]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	429a      	cmp	r2, r3
 800035c:	dbe2      	blt.n	8000324 <int_to_string+0x68>
		}
	}
	buf[buf_len] = '\0';
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	683a      	ldr	r2, [r7, #0]
 8000362:	4413      	add	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	701a      	strb	r2, [r3, #0]
}
 8000368:	bf00      	nop
 800036a:	371c      	adds	r7, #28
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	cccccccd 	.word	0xcccccccd

08000378 <main>:

int main(void) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
	char* buf;

	LCD5110_Init(0x37);
 800037e:	2037      	movs	r0, #55	; 0x37
 8000380:	f000 fc78 	bl	8000c74 <LCD5110_Init>
	ADE_Inits();
 8000384:	f000 f9ea 	bl	800075c <ADE_Inits>


	//ADE_WriteData(SPI2, MODE, 0x000C, 2);

	printf("MODE : %x \n", ADE_ReadData(SPI2, MODE, 2));
 8000388:	2202      	movs	r2, #2
 800038a:	2109      	movs	r1, #9
 800038c:	481b      	ldr	r0, [pc, #108]	; (80003fc <main+0x84>)
 800038e:	f000 f9f7 	bl	8000780 <ADE_ReadData>
 8000392:	4603      	mov	r3, r0
 8000394:	4619      	mov	r1, r3
 8000396:	481a      	ldr	r0, [pc, #104]	; (8000400 <main+0x88>)
 8000398:	f001 fb84 	bl	8001aa4 <iprintf>
	while(1)
	{
		uint32_t vrms = ADE_ReadData(SPI2, VRMS, 3);
 800039c:	2203      	movs	r2, #3
 800039e:	2117      	movs	r1, #23
 80003a0:	4816      	ldr	r0, [pc, #88]	; (80003fc <main+0x84>)
 80003a2:	f000 f9ed 	bl	8000780 <ADE_ReadData>
 80003a6:	6078      	str	r0, [r7, #4]
		int_to_string(vrms, buf);
 80003a8:	6839      	ldr	r1, [r7, #0]
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f7ff ff86 	bl	80002bc <int_to_string>

//		printf("VRMS : %x \n", vrms);
		LCD5110_Clear();
 80003b0:	f000 fd24 	bl	8000dfc <LCD5110_Clear>
		LCD5110_Puts("Vrms: ", LCD5110_Pixel_Set, LCD5110_FontSize_5x7);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2101      	movs	r1, #1
 80003b8:	4812      	ldr	r0, [pc, #72]	; (8000404 <main+0x8c>)
 80003ba:	f000 feb1 	bl	8001120 <LCD5110_Puts>
		LCD5110_Puts(buf, LCD5110_Pixel_Set, LCD5110_FontSize_5x7);
 80003be:	2200      	movs	r2, #0
 80003c0:	2101      	movs	r1, #1
 80003c2:	6838      	ldr	r0, [r7, #0]
 80003c4:	f000 feac 	bl	8001120 <LCD5110_Puts>
		LCD5110_Refresh();
 80003c8:	f000 fd4a 	bl	8000e60 <LCD5110_Refresh>
		delay();
 80003cc:	f7ff ff60 	bl	8000290 <delay>

		if(GPIO_ReadFromInputPin(PORT_SAG, PIN_SAG) ==  0)
 80003d0:	210b      	movs	r1, #11
 80003d2:	480d      	ldr	r0, [pc, #52]	; (8000408 <main+0x90>)
 80003d4:	f001 f944 	bl	8001660 <GPIO_ReadFromInputPin>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d105      	bne.n	80003ea <main+0x72>
		{
			GPIO_WriteToOutputPin(PORT_SAG_LED, PIN_SAG_LED, 1);
 80003de:	2201      	movs	r2, #1
 80003e0:	2105      	movs	r1, #5
 80003e2:	480a      	ldr	r0, [pc, #40]	; (800040c <main+0x94>)
 80003e4:	f001 f951 	bl	800168a <GPIO_WriteToOutputPin>
 80003e8:	e004      	b.n	80003f4 <main+0x7c>
		}
		else
		{
			GPIO_WriteToOutputPin(PORT_SAG_LED, PIN_SAG_LED, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2105      	movs	r1, #5
 80003ee:	4807      	ldr	r0, [pc, #28]	; (800040c <main+0x94>)
 80003f0:	f001 f94b 	bl	800168a <GPIO_WriteToOutputPin>
		}
		delay();
 80003f4:	f7ff ff4c 	bl	8000290 <delay>
	{
 80003f8:	e7d0      	b.n	800039c <main+0x24>
 80003fa:	bf00      	nop
 80003fc:	40003800 	.word	0x40003800
 8000400:	08002960 	.word	0x08002960
 8000404:	0800296c 	.word	0x0800296c
 8000408:	40020c00 	.word	0x40020c00
 800040c:	40021000 	.word	0x40021000

08000410 <SysTick_Handler>:
//    }
}



void SysTick_Handler(void) {
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
    TM_KEYPAD_Update();
 8000414:	f000 fb2c 	bl	8000a70 <TM_KEYPAD_Update>
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}

0800041c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <ITM_SendChar+0x44>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a0d      	ldr	r2, [pc, #52]	; (8000460 <ITM_SendChar+0x44>)
 800042c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000430:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <ITM_SendChar+0x48>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a0b      	ldr	r2, [pc, #44]	; (8000464 <ITM_SendChar+0x48>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800043e:	bf00      	nop
 8000440:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	2b00      	cmp	r3, #0
 800044c:	d0f8      	beq.n	8000440 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800044e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	6013      	str	r3, [r2, #0]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	e000edfc 	.word	0xe000edfc
 8000464:	e0000e00 	.word	0xe0000e00

08000468 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
 8000478:	e00a      	b.n	8000490 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800047a:	f3af 8000 	nop.w
 800047e:	4601      	mov	r1, r0
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	1c5a      	adds	r2, r3, #1
 8000484:	60ba      	str	r2, [r7, #8]
 8000486:	b2ca      	uxtb	r2, r1
 8000488:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	3301      	adds	r3, #1
 800048e:	617b      	str	r3, [r7, #20]
 8000490:	697a      	ldr	r2, [r7, #20]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	429a      	cmp	r2, r3
 8000496:	dbf0      	blt.n	800047a <_read+0x12>
	}

return len;
 8000498:	687b      	ldr	r3, [r7, #4]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b086      	sub	sp, #24
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	60f8      	str	r0, [r7, #12]
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
 80004b2:	e009      	b.n	80004c8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	1c5a      	adds	r2, r3, #1
 80004b8:	60ba      	str	r2, [r7, #8]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff ffad 	bl	800041c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	3301      	adds	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	dbf1      	blt.n	80004b4 <_write+0x12>
	}
	return len;
 80004d0:	687b      	ldr	r3, [r7, #4]
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <_close>:

int _close(int file)
{
 80004da:	b480      	push	{r7}
 80004dc:	b083      	sub	sp, #12
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
	return -1;
 80004e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000500:	605a      	str	r2, [r3, #4]
	return 0;
 8000502:	2300      	movs	r3, #0
}
 8000504:	4618      	mov	r0, r3
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr

0800050e <_isatty>:

int _isatty(int file)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
	return 1;
 8000516:	2301      	movs	r3, #1
}
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000522:	b480      	push	{r7}
 8000524:	b085      	sub	sp, #20
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	60b9      	str	r1, [r7, #8]
 800052c:	607a      	str	r2, [r7, #4]
	return 0;
 800052e:	2300      	movs	r3, #0
}
 8000530:	4618      	mov	r0, r3
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
	...

0800053c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000544:	4a14      	ldr	r2, [pc, #80]	; (8000598 <_sbrk+0x5c>)
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <_sbrk+0x60>)
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000550:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <_sbrk+0x64>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d102      	bne.n	800055e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <_sbrk+0x64>)
 800055a:	4a12      	ldr	r2, [pc, #72]	; (80005a4 <_sbrk+0x68>)
 800055c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <_sbrk+0x64>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	693a      	ldr	r2, [r7, #16]
 8000568:	429a      	cmp	r2, r3
 800056a:	d207      	bcs.n	800057c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800056c:	f001 fa68 	bl	8001a40 <__errno>
 8000570:	4603      	mov	r3, r0
 8000572:	220c      	movs	r2, #12
 8000574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	e009      	b.n	8000590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <_sbrk+0x64>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000582:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <_sbrk+0x64>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <_sbrk+0x64>)
 800058c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800058e:	68fb      	ldr	r3, [r7, #12]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3718      	adds	r7, #24
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20020000 	.word	0x20020000
 800059c:	00000400 	.word	0x00000400
 80005a0:	20000094 	.word	0x20000094
 80005a4:	200002f8 	.word	0x200002f8

080005a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
    ldr   r0, =_estack
 80005a8:	480d      	ldr	r0, [pc, #52]	; (80005e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005aa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b2:	490d      	ldr	r1, [pc, #52]	; (80005e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b4:	4a0d      	ldr	r2, [pc, #52]	; (80005ec <LoopForever+0xe>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c8:	4c0a      	ldr	r4, [pc, #40]	; (80005f4 <LoopForever+0x16>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005d6:	f001 fa39 	bl	8001a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005da:	f7ff fecd 	bl	8000378 <main>

080005de <LoopForever>:

LoopForever:
    b LoopForever
 80005de:	e7fe      	b.n	80005de <LoopForever>
    ldr   r0, =_estack
 80005e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80005ec:	08002da8 	.word	0x08002da8
  ldr r2, =_sbss
 80005f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80005f4:	200002f8 	.word	0x200002f8

080005f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f8:	e7fe      	b.n	80005f8 <ADC_IRQHandler>
	...

080005fc <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = SPI_PORT;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <SPI2_GPIOInits+0x58>)
 8000604:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 8000606:	2302      	movs	r3, #2
 8000608:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800060a:	2305      	movs	r3, #5
 800060c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 800060e:	2300      	movs	r3, #0
 8000610:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000612:	2300      	movs	r3, #0
 8000614:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000616:	2302      	movs	r3, #2
 8000618:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = SPI_PIN_SCLK;
 800061a:	230d      	movs	r3, #13
 800061c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fe81 	bl	8001328 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = SPI_PIN_MOSI;
 8000626:	230f      	movs	r3, #15
 8000628:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fe7b 	bl	8001328 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = SPI_PIN_MISO;
 8000632:	230e      	movs	r3, #14
 8000634:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fe75 	bl	8001328 <GPIO_Init>

	//NSS
 	SPIPins.GPIO_PinConfig.GPIO_PinNumber = SPI_PIN_NSS;
 800063e:	230c      	movs	r3, #12
 8000640:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fe6f 	bl	8001328 <GPIO_Init>

}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40020400 	.word	0x40020400

08000658 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <SPI2_Inits+0x40>)
 800065e:	4a0f      	ldr	r2, [pc, #60]	; (800069c <SPI2_Inits+0x44>)
 8000660:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <SPI2_Inits+0x40>)
 8000664:	2201      	movs	r2, #1
 8000666:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <SPI2_Inits+0x40>)
 800066a:	2201      	movs	r2, #1
 800066c:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <SPI2_Inits+0x40>)
 8000670:	2202      	movs	r2, #2
 8000672:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <SPI2_Inits+0x40>)
 8000676:	2200      	movs	r2, #0
 8000678:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <SPI2_Inits+0x40>)
 800067c:	2200      	movs	r2, #0
 800067e:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;					//CPHA 1
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <SPI2_Inits+0x40>)
 8000682:	2201      	movs	r2, #1
 8000684:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 8000686:	4b04      	ldr	r3, [pc, #16]	; (8000698 <SPI2_Inits+0x40>)
 8000688:	2200      	movs	r2, #0
 800068a:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 800068c:	4802      	ldr	r0, [pc, #8]	; (8000698 <SPI2_Inits+0x40>)
 800068e:	f001 f942 	bl	8001916 <SPI_Init>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000c8 	.word	0x200000c8
 800069c:	40003800 	.word	0x40003800

080006a0 <ZeroX_Inits>:

/*
 * PIN PD5 as input for interrupt
 */
void ZeroX_Inits(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
	//Input pin trigger as falling edge
	GPIO_Handle_t GpioZX;
	GpioZX.pGPIOx = IT_PORT_ZX;
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <ZeroX_Inits+0x3c>)
 80006a8:	607b      	str	r3, [r7, #4]
	GpioZX.GPIO_PinConfig.GPIO_PinNumber = IT_PIN_ZX;
 80006aa:	230d      	movs	r3, #13
 80006ac:	723b      	strb	r3, [r7, #8]
	GpioZX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 80006ae:	2304      	movs	r3, #4
 80006b0:	727b      	strb	r3, [r7, #9]
	GpioZX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80006b2:	2302      	movs	r3, #2
 80006b4:	72bb      	strb	r3, [r7, #10]
	GpioZX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80006b6:	2301      	movs	r3, #1
 80006b8:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GpioZX);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fe33 	bl	8001328 <GPIO_Init>

	//IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRIO0);
 80006c2:	2100      	movs	r1, #0
 80006c4:	2028      	movs	r0, #40	; 0x28
 80006c6:	f001 f889 	bl	80017dc <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
 80006ca:	2101      	movs	r1, #1
 80006cc:	2028      	movs	r0, #40	; 0x28
 80006ce:	f001 f801 	bl	80016d4 <GPIO_IRQInterruptConfig>
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40020c00 	.word	0x40020c00

080006e0 <SAG_Inits>:

void SAG_Inits(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
	//Input pin
	GPIO_Handle_t GpioSAG;
	GpioSAG.pGPIOx = PORT_SAG;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <SAG_Inits+0x70>)
 80006e8:	60fb      	str	r3, [r7, #12]
	GpioSAG.GPIO_PinConfig.GPIO_PinNumber = PIN_SAG;
 80006ea:	230b      	movs	r3, #11
 80006ec:	743b      	strb	r3, [r7, #16]
	GpioSAG.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80006ee:	2300      	movs	r3, #0
 80006f0:	747b      	strb	r3, [r7, #17]
	GpioSAG.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80006f2:	2302      	movs	r3, #2
 80006f4:	74bb      	strb	r3, [r7, #18]
	GpioSAG.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80006f6:	2300      	movs	r3, #0
 80006f8:	74fb      	strb	r3, [r7, #19]
	GPIO_Init(&GpioSAG);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fe12 	bl	8001328 <GPIO_Init>

	//Output led
	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx = PORT_SAG_LED;
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <SAG_Inits+0x74>)
 8000706:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_SAG_LED;
 8000708:	2305      	movs	r3, #5
 800070a:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800070c:	2301      	movs	r3, #1
 800070e:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000710:	2302      	movs	r3, #2
 8000712:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 8000714:	2300      	movs	r3, #0
 8000716:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000718:	2300      	movs	r3, #0
 800071a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(&GpioLed);
 800071c:	463b      	mov	r3, r7
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fe02 	bl	8001328 <GPIO_Init>

	//ADE side
	ADE_WriteData(SPI2, MODE, 0x0004, 2);
 8000724:	2302      	movs	r3, #2
 8000726:	2204      	movs	r2, #4
 8000728:	2109      	movs	r1, #9
 800072a:	480b      	ldr	r0, [pc, #44]	; (8000758 <SAG_Inits+0x78>)
 800072c:	f000 f863 	bl	80007f6 <ADE_WriteData>
	ADE_WriteData(SPI2, SAGCYC, 0x04, 1);
 8000730:	2301      	movs	r3, #1
 8000732:	2204      	movs	r2, #4
 8000734:	211e      	movs	r1, #30
 8000736:	4808      	ldr	r0, [pc, #32]	; (8000758 <SAG_Inits+0x78>)
 8000738:	f000 f85d 	bl	80007f6 <ADE_WriteData>
	ADE_WriteData(SPI2, SAGLVL, 0x17, 1);
 800073c:	2301      	movs	r3, #1
 800073e:	2217      	movs	r2, #23
 8000740:	211f      	movs	r1, #31
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <SAG_Inits+0x78>)
 8000744:	f000 f857 	bl	80007f6 <ADE_WriteData>

}
 8000748:	bf00      	nop
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40020c00 	.word	0x40020c00
 8000754:	40021000 	.word	0x40021000
 8000758:	40003800 	.word	0x40003800

0800075c <ADE_Inits>:
void ADE_Inits(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	SPI2_GPIOInits();
 8000760:	f7ff ff4c 	bl	80005fc <SPI2_GPIOInits>
	SPI2_Inits();
 8000764:	f7ff ff78 	bl	8000658 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2, ENABLE);
 8000768:	2101      	movs	r1, #1
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <ADE_Inits+0x20>)
 800076c:	f001 f8b8 	bl	80018e0 <SPI_SSOEConfig>
	ZeroX_Inits();
 8000770:	f7ff ff96 	bl	80006a0 <ZeroX_Inits>
	SAG_Inits();
 8000774:	f7ff ffb4 	bl	80006e0 <SAG_Inits>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40003800 	.word	0x40003800

08000780 <ADE_ReadData>:


uint32_t ADE_ReadData( SPI_RegDef_t *pSPIx, uint8_t addr, uint32_t bytes_to_read)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	460b      	mov	r3, r1
 800078a:	607a      	str	r2, [r7, #4]
 800078c:	72fb      	strb	r3, [r7, #11]
	uint32_t data = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
	uint8_t dummy_write = 0xff;
 8000792:	23ff      	movs	r3, #255	; 0xff
 8000794:	75fb      	strb	r3, [r7, #23]
	uint8_t dummy_write2 = 0x00;
 8000796:	2300      	movs	r3, #0
 8000798:	75bb      	strb	r3, [r7, #22]
	SPI_PeripheralControl(pSPIx, ENABLE); //SS pin pull to low
 800079a:	2101      	movs	r1, #1
 800079c:	68f8      	ldr	r0, [r7, #12]
 800079e:	f001 f933 	bl	8001a08 <SPI_PeripheralControl>
	SPI_Transfer(pSPIx, addr);
 80007a2:	7afb      	ldrb	r3, [r7, #11]
 80007a4:	4619      	mov	r1, r3
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	f001 f910 	bl	80019cc <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_read; i++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
 80007b0:	e00f      	b.n	80007d2 <ADE_ReadData+0x52>
	{
		data <<= 8;
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	021b      	lsls	r3, r3, #8
 80007b6:	61fb      	str	r3, [r7, #28]
		data |= SPI_Transfer(pSPIx, dummy_write);
 80007b8:	7dfb      	ldrb	r3, [r7, #23]
 80007ba:	4619      	mov	r1, r3
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f001 f905 	bl	80019cc <SPI_Transfer>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461a      	mov	r2, r3
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	61fb      	str	r3, [r7, #28]
	for(uint32_t i = 0; i < bytes_to_read; i++)
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	3301      	adds	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	69ba      	ldr	r2, [r7, #24]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d3eb      	bcc.n	80007b2 <ADE_ReadData+0x32>
		//printf("%x\n", data);
	}

	SPI_Transfer(pSPIx, dummy_write2);
 80007da:	7dbb      	ldrb	r3, [r7, #22]
 80007dc:	4619      	mov	r1, r3
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	f001 f8f4 	bl	80019cc <SPI_Transfer>

	SPI_PeripheralControl(pSPIx, DISABLE); //SS pin pull to high
 80007e4:	2100      	movs	r1, #0
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	f001 f90e 	bl	8001a08 <SPI_PeripheralControl>
	return data;
 80007ec:	69fb      	ldr	r3, [r7, #28]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <ADE_WriteData>:
 *
 * @Note              -
 */

void ADE_WriteData(SPI_RegDef_t *pSPIx, uint8_t address, uint32_t write_buffer, uint32_t bytes_to_write)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	60f8      	str	r0, [r7, #12]
 80007fe:	607a      	str	r2, [r7, #4]
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	460b      	mov	r3, r1
 8000804:	72fb      	strb	r3, [r7, #11]
	uint8_t data = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	74fb      	strb	r3, [r7, #19]
	address |= 0x80;
 800080a:	7afb      	ldrb	r3, [r7, #11]
 800080c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000810:	72fb      	strb	r3, [r7, #11]
	uint8_t dummy_write = 0xff;
 8000812:	23ff      	movs	r3, #255	; 0xff
 8000814:	74bb      	strb	r3, [r7, #18]
	uint8_t dummy_write2 = 0x00;
 8000816:	2300      	movs	r3, #0
 8000818:	747b      	strb	r3, [r7, #17]
	SPI_PeripheralControl(pSPIx, ENABLE); //SS pin pull to low
 800081a:	2101      	movs	r1, #1
 800081c:	68f8      	ldr	r0, [r7, #12]
 800081e:	f001 f8f3 	bl	8001a08 <SPI_PeripheralControl>
	SPI_Transfer(pSPIx, address);
 8000822:	7afb      	ldrb	r3, [r7, #11]
 8000824:	4619      	mov	r1, r3
 8000826:	68f8      	ldr	r0, [r7, #12]
 8000828:	f001 f8d0 	bl	80019cc <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_write; i++)
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	e010      	b.n	8000854 <ADE_WriteData+0x5e>
	{
		data = (uint8_t)(write_buffer >> 8*(bytes_to_write - i - 1));
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	3b01      	subs	r3, #1
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	fa22 f303 	lsr.w	r3, r2, r3
 8000842:	74fb      	strb	r3, [r7, #19]
		SPI_Transfer(pSPIx, data);
 8000844:	7cfb      	ldrb	r3, [r7, #19]
 8000846:	4619      	mov	r1, r3
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	f001 f8bf 	bl	80019cc <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_write; i++)
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	3301      	adds	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	429a      	cmp	r2, r3
 800085a:	d3ea      	bcc.n	8000832 <ADE_WriteData+0x3c>
	}
	SPI_Transfer(pSPIx, dummy_write2);
 800085c:	7c7b      	ldrb	r3, [r7, #17]
 800085e:	4619      	mov	r1, r3
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f001 f8b3 	bl	80019cc <SPI_Transfer>

	SPI_PeripheralControl(pSPIx, DISABLE);; //SS pin pull to high
 8000866:	2100      	movs	r1, #0
 8000868:	68f8      	ldr	r0, [r7, #12]
 800086a:	f001 f8cd 	bl	8001a08 <SPI_PeripheralControl>
}
 800086e:	bf00      	nop
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

    uint32_t pending = EXTI->PR;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <EXTI15_10_IRQHandler+0x4c>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	607b      	str	r3, [r7, #4]
    if(pending & (1 << IT_PIN_ZX))
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800088a:	2b00      	cmp	r3, #0
 800088c:	d00d      	beq.n	80008aa <EXTI15_10_IRQHandler+0x32>
    {
        EXTI->PR = 1 << IT_PIN_ZX; // clear pending flag, otherwise we'd get endless interrupts
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <EXTI15_10_IRQHandler+0x4c>)
 8000890:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000894:	615a      	str	r2, [r3, #20]
        // handle pin ZX here
    	printf("VRMS : %x \n", ADE_ReadData(SPI2, VRMS, 3));
 8000896:	2203      	movs	r2, #3
 8000898:	2117      	movs	r1, #23
 800089a:	480b      	ldr	r0, [pc, #44]	; (80008c8 <EXTI15_10_IRQHandler+0x50>)
 800089c:	f7ff ff70 	bl	8000780 <ADE_ReadData>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4619      	mov	r1, r3
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <EXTI15_10_IRQHandler+0x54>)
 80008a6:	f001 f8fd 	bl	8001aa4 <iprintf>

    }
    if(pending & (1 << 6)) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <EXTI15_10_IRQHandler+0x42>
        EXTI->PR = 1 << 6;
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <EXTI15_10_IRQHandler+0x4c>)
 80008b6:	2240      	movs	r2, #64	; 0x40
 80008b8:	615a      	str	r2, [r3, #20]
        // handle pin 6 here
    }
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40013c00 	.word	0x40013c00
 80008c8:	40003800 	.word	0x40003800
 80008cc:	08002974 	.word	0x08002974

080008d0 <TM_KEYPAD_INT_SetColumn>:

	return temp;
}

/* Private */
void TM_KEYPAD_INT_SetColumn(uint8_t column) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_COLUMN_1_HIGH;
 80008da:	2201      	movs	r2, #1
 80008dc:	2100      	movs	r1, #0
 80008de:	481d      	ldr	r0, [pc, #116]	; (8000954 <TM_KEYPAD_INT_SetColumn+0x84>)
 80008e0:	f000 fed3 	bl	800168a <GPIO_WriteToOutputPin>
	KEYPAD_COLUMN_2_HIGH;
 80008e4:	2201      	movs	r2, #1
 80008e6:	2101      	movs	r1, #1
 80008e8:	481a      	ldr	r0, [pc, #104]	; (8000954 <TM_KEYPAD_INT_SetColumn+0x84>)
 80008ea:	f000 fece 	bl	800168a <GPIO_WriteToOutputPin>
	KEYPAD_COLUMN_3_HIGH;
 80008ee:	2201      	movs	r2, #1
 80008f0:	2102      	movs	r1, #2
 80008f2:	4818      	ldr	r0, [pc, #96]	; (8000954 <TM_KEYPAD_INT_SetColumn+0x84>)
 80008f4:	f000 fec9 	bl	800168a <GPIO_WriteToOutputPin>
	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large) {
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <TM_KEYPAD_INT_SetColumn+0x88>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d104      	bne.n	800090a <TM_KEYPAD_INT_SetColumn+0x3a>
		KEYPAD_COLUMN_4_HIGH;
 8000900:	2201      	movs	r2, #1
 8000902:	2103      	movs	r1, #3
 8000904:	4813      	ldr	r0, [pc, #76]	; (8000954 <TM_KEYPAD_INT_SetColumn+0x84>)
 8000906:	f000 fec0 	bl	800168a <GPIO_WriteToOutputPin>
	}

	/* Set column low */
	if (column == 1) {
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d104      	bne.n	800091a <TM_KEYPAD_INT_SetColumn+0x4a>
		KEYPAD_COLUMN_1_LOW;
 8000910:	2200      	movs	r2, #0
 8000912:	2100      	movs	r1, #0
 8000914:	480f      	ldr	r0, [pc, #60]	; (8000954 <TM_KEYPAD_INT_SetColumn+0x84>)
 8000916:	f000 feb8 	bl	800168a <GPIO_WriteToOutputPin>
	}
	if (column == 2) {
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d104      	bne.n	800092a <TM_KEYPAD_INT_SetColumn+0x5a>
		KEYPAD_COLUMN_2_LOW;
 8000920:	2200      	movs	r2, #0
 8000922:	2101      	movs	r1, #1
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <TM_KEYPAD_INT_SetColumn+0x84>)
 8000926:	f000 feb0 	bl	800168a <GPIO_WriteToOutputPin>
	}
	if (column == 3) {
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d104      	bne.n	800093a <TM_KEYPAD_INT_SetColumn+0x6a>
		KEYPAD_COLUMN_3_LOW;
 8000930:	2200      	movs	r2, #0
 8000932:	2102      	movs	r1, #2
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <TM_KEYPAD_INT_SetColumn+0x84>)
 8000936:	f000 fea8 	bl	800168a <GPIO_WriteToOutputPin>
	}
	if (column == 4) {
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b04      	cmp	r3, #4
 800093e:	d104      	bne.n	800094a <TM_KEYPAD_INT_SetColumn+0x7a>
		KEYPAD_COLUMN_4_LOW;
 8000940:	2200      	movs	r2, #0
 8000942:	2103      	movs	r1, #3
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <TM_KEYPAD_INT_SetColumn+0x84>)
 8000946:	f000 fea0 	bl	800168a <GPIO_WriteToOutputPin>
	}
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40020c00 	.word	0x40020c00
 8000958:	200000e8 	.word	0x200000e8

0800095c <TM_KEYPAD_INT_CheckRow>:

uint8_t TM_KEYPAD_INT_CheckRow(uint8_t column) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
	/* Read rows */

	/* Scan row 1 */
	if (KEYPAD_ROW_1_CHECK) {
 8000966:	2100      	movs	r1, #0
 8000968:	481d      	ldr	r0, [pc, #116]	; (80009e0 <TM_KEYPAD_INT_CheckRow+0x84>)
 800096a:	f000 fe79 	bl	8001660 <GPIO_ReadFromInputPin>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d104      	bne.n	800097e <TM_KEYPAD_INT_CheckRow+0x22>
		return KEYPAD_INT_Buttons[0][column - 1];
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	3b01      	subs	r3, #1
 8000978:	4a1a      	ldr	r2, [pc, #104]	; (80009e4 <TM_KEYPAD_INT_CheckRow+0x88>)
 800097a:	5cd3      	ldrb	r3, [r2, r3]
 800097c:	e02b      	b.n	80009d6 <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 2 */
	if (KEYPAD_ROW_2_CHECK) {
 800097e:	2101      	movs	r1, #1
 8000980:	4817      	ldr	r0, [pc, #92]	; (80009e0 <TM_KEYPAD_INT_CheckRow+0x84>)
 8000982:	f000 fe6d 	bl	8001660 <GPIO_ReadFromInputPin>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d105      	bne.n	8000998 <TM_KEYPAD_INT_CheckRow+0x3c>
		return KEYPAD_INT_Buttons[1][column - 1];
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	3b01      	subs	r3, #1
 8000990:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <TM_KEYPAD_INT_CheckRow+0x88>)
 8000992:	4413      	add	r3, r2
 8000994:	791b      	ldrb	r3, [r3, #4]
 8000996:	e01e      	b.n	80009d6 <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 3 */
	if (KEYPAD_ROW_3_CHECK) {
 8000998:	2102      	movs	r1, #2
 800099a:	4811      	ldr	r0, [pc, #68]	; (80009e0 <TM_KEYPAD_INT_CheckRow+0x84>)
 800099c:	f000 fe60 	bl	8001660 <GPIO_ReadFromInputPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d105      	bne.n	80009b2 <TM_KEYPAD_INT_CheckRow+0x56>
		return KEYPAD_INT_Buttons[2][column - 1];
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	3b01      	subs	r3, #1
 80009aa:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <TM_KEYPAD_INT_CheckRow+0x88>)
 80009ac:	4413      	add	r3, r2
 80009ae:	7a1b      	ldrb	r3, [r3, #8]
 80009b0:	e011      	b.n	80009d6 <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 4 */
	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large && KEYPAD_ROW_4_CHECK) {
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <TM_KEYPAD_INT_CheckRow+0x8c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d10c      	bne.n	80009d4 <TM_KEYPAD_INT_CheckRow+0x78>
 80009ba:	2103      	movs	r1, #3
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <TM_KEYPAD_INT_CheckRow+0x84>)
 80009be:	f000 fe4f 	bl	8001660 <GPIO_ReadFromInputPin>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d105      	bne.n	80009d4 <TM_KEYPAD_INT_CheckRow+0x78>
		return KEYPAD_INT_Buttons[3][column - 1];
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <TM_KEYPAD_INT_CheckRow+0x88>)
 80009ce:	4413      	add	r3, r2
 80009d0:	7b1b      	ldrb	r3, [r3, #12]
 80009d2:	e000      	b.n	80009d6 <TM_KEYPAD_INT_CheckRow+0x7a>
	}

	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 80009d4:	23ff      	movs	r3, #255	; 0xff
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40020800 	.word	0x40020800
 80009e4:	20000000 	.word	0x20000000
 80009e8:	200000e8 	.word	0x200000e8

080009ec <TM_KEYPAD_INT_Read>:

uint8_t TM_KEYPAD_INT_Read(void) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	TM_KEYPAD_INT_SetColumn(1);
 80009f2:	2001      	movs	r0, #1
 80009f4:	f7ff ff6c 	bl	80008d0 <TM_KEYPAD_INT_SetColumn>
	/* Check rows */
	check = TM_KEYPAD_INT_CheckRow(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f7ff ffaf 	bl	800095c <TM_KEYPAD_INT_CheckRow>
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2bff      	cmp	r3, #255	; 0xff
 8000a06:	d001      	beq.n	8000a0c <TM_KEYPAD_INT_Read+0x20>
		return check;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	e02b      	b.n	8000a64 <TM_KEYPAD_INT_Read+0x78>
	}

	/* Set row 2 to LOW */
	TM_KEYPAD_INT_SetColumn(2);
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	f7ff ff5f 	bl	80008d0 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(2);
 8000a12:	2002      	movs	r0, #2
 8000a14:	f7ff ffa2 	bl	800095c <TM_KEYPAD_INT_CheckRow>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	2bff      	cmp	r3, #255	; 0xff
 8000a20:	d001      	beq.n	8000a26 <TM_KEYPAD_INT_Read+0x3a>
		return check;
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	e01e      	b.n	8000a64 <TM_KEYPAD_INT_Read+0x78>
	}

	/* Set row 3 to LOW */
	TM_KEYPAD_INT_SetColumn(3);
 8000a26:	2003      	movs	r0, #3
 8000a28:	f7ff ff52 	bl	80008d0 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(3);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f7ff ff95 	bl	800095c <TM_KEYPAD_INT_CheckRow>
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d001      	beq.n	8000a40 <TM_KEYPAD_INT_Read+0x54>
		return check;
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	e011      	b.n	8000a64 <TM_KEYPAD_INT_Read+0x78>
	}

	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large) {
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <TM_KEYPAD_INT_Read+0x80>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10c      	bne.n	8000a62 <TM_KEYPAD_INT_Read+0x76>
		/* Set column 4 to LOW */
		TM_KEYPAD_INT_SetColumn(4);
 8000a48:	2004      	movs	r0, #4
 8000a4a:	f7ff ff41 	bl	80008d0 <TM_KEYPAD_INT_SetColumn>
		/* Check rows */
		check = TM_KEYPAD_INT_CheckRow(4);
 8000a4e:	2004      	movs	r0, #4
 8000a50:	f7ff ff84 	bl	800095c <TM_KEYPAD_INT_CheckRow>
 8000a54:	4603      	mov	r3, r0
 8000a56:	71fb      	strb	r3, [r7, #7]
		if (check != KEYPAD_NO_PRESSED) {
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	2bff      	cmp	r3, #255	; 0xff
 8000a5c:	d001      	beq.n	8000a62 <TM_KEYPAD_INT_Read+0x76>
			return check;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	e000      	b.n	8000a64 <TM_KEYPAD_INT_Read+0x78>
		}
	}

	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 8000a62:	23ff      	movs	r3, #255	; 0xff
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000e8 	.word	0x200000e8

08000a70 <TM_KEYPAD_Update>:

void TM_KEYPAD_Update(void) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	static uint16_t millis = 0;

	/* Every X ms read */
	if (++millis >= KEYPAD_READ_INTERVAL) {// && KeypadStatus == TM_KEYPAD_Button_NOPRESSED) {
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <TM_KEYPAD_Update+0x30>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <TM_KEYPAD_Update+0x30>)
 8000a7e:	801a      	strh	r2, [r3, #0]
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <TM_KEYPAD_Update+0x30>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	2b31      	cmp	r3, #49	; 0x31
 8000a86:	d908      	bls.n	8000a9a <TM_KEYPAD_Update+0x2a>
		/* Reset */
		millis = 0;
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <TM_KEYPAD_Update+0x30>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	801a      	strh	r2, [r3, #0]

		/* Read keyboard */
		KeypadStatus = (TM_KEYPAD_Button_t) TM_KEYPAD_INT_Read();
 8000a8e:	f7ff ffad 	bl	80009ec <TM_KEYPAD_INT_Read>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <TM_KEYPAD_Update+0x34>)
 8000a98:	701a      	strb	r2, [r3, #0]
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000098 	.word	0x20000098
 8000aa4:	20000010 	.word	0x20000010

08000aa8 <SPI1_GPIOInits>:
 *
 * PA6 -> GPIO_OUTPUT_PIN
 * ALT function mode : 0
 */
void SPI1_GPIOInits(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 8000aae:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <SPI1_GPIOInits+0xa0>)
 8000ab0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 8000aba:	2300      	movs	r3, #0
 8000abc:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fc2b 	bl	8001328 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 fc25 	bl	8001328 <GPIO_Init>

	//MISO
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000ade:	2306      	movs	r3, #6
 8000ae0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 fc1f 	bl	8001328 <GPIO_Init>

	//NSS
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8000aea:	2304      	movs	r3, #4
 8000aec:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fc19 	bl	8001328 <GPIO_Init>

	//CE
	SPIPins.pGPIOx = LCD5110_CE_PORT;
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <SPI1_GPIOInits+0xa4>)
 8000af8:	607b      	str	r3, [r7, #4]
 	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_CE_PIN;
 8000afa:	2301      	movs	r3, #1
 8000afc:	723b      	strb	r3, [r7, #8]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000afe:	2301      	movs	r3, #1
 8000b00:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 8000b06:	2300      	movs	r3, #0
 8000b08:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&SPIPins);
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fc0b 	bl	8001328 <GPIO_Init>

	//DC Pin GPIO
	SPIPins.pGPIOx = LCD5110_DC_PORT;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <SPI1_GPIOInits+0xa8>)
 8000b14:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_DC_PIN;
 8000b16:	2305      	movs	r3, #5
 8000b18:	723b      	strb	r3, [r7, #8]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 8000b22:	2300      	movs	r3, #0
 8000b24:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&SPIPins);
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 fbfd 	bl	8001328 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = LCD5110_RST_PORT;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <SPI1_GPIOInits+0xa0>)
 8000b30:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_RST_PIN;
 8000b32:	2303      	movs	r3, #3
 8000b34:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 fbf5 	bl	8001328 <GPIO_Init>
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40020800 	.word	0x40020800

08000b54 <SPI1_Inits>:



void SPI1_Inits(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	SPI1handle.pSPIx = SPI1;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <SPI1_Inits+0x40>)
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <SPI1_Inits+0x44>)
 8000b5c:	601a      	str	r2, [r3, #0]
	SPI1handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <SPI1_Inits+0x40>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	715a      	strb	r2, [r3, #5]
	SPI1handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <SPI1_Inits+0x40>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	711a      	strb	r2, [r3, #4]
	SPI1handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <SPI1_Inits+0x40>)
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	719a      	strb	r2, [r3, #6]
	SPI1handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <SPI1_Inits+0x40>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	71da      	strb	r2, [r3, #7]
	SPI1handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <SPI1_Inits+0x40>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	721a      	strb	r2, [r3, #8]
	SPI1handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <SPI1_Inits+0x40>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	725a      	strb	r2, [r3, #9]
	SPI1handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 8000b82:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <SPI1_Inits+0x40>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI1handle);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <SPI1_Inits+0x40>)
 8000b8a:	f000 fec4 	bl	8001916 <SPI_Init>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000a8 	.word	0x200000a8
 8000b98:	40013000 	.word	0x40013000

08000b9c <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]

	SPI_PeripheralControl(SPI1, ENABLE); //SS pin pull to LOW
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <LCD5110_send+0x40>)
 8000baa:	f000 ff2d 	bl	8001a08 <SPI_PeripheralControl>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	480b      	ldr	r0, [pc, #44]	; (8000be0 <LCD5110_send+0x44>)
 8000bb4:	f000 fd69 	bl	800168a <GPIO_WriteToOutputPin>

	SPI_Transfer(SPI1, data);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <LCD5110_send+0x40>)
 8000bbe:	f000 ff05 	bl	80019cc <SPI_Transfer>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 1);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <LCD5110_send+0x44>)
 8000bc8:	f000 fd5f 	bl	800168a <GPIO_WriteToOutputPin>

	SPI_PeripheralControl(SPI1, DISABLE); //SS pin pull to HIGH
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4803      	ldr	r0, [pc, #12]	; (8000bdc <LCD5110_send+0x40>)
 8000bd0:	f000 ff1a 	bl	8001a08 <SPI_PeripheralControl>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40013000 	.word	0x40013000
 8000be0:	40020400 	.word	0x40020400

08000be4 <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	460a      	mov	r2, r1
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d002      	beq.n	8000c00 <LCD5110_Pin+0x1c>
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d00f      	beq.n	8000c1e <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 8000bfe:	e01d      	b.n	8000c3c <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d005      	beq.n	8000c12 <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2105      	movs	r1, #5
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <LCD5110_Pin+0x60>)
 8000c0c:	f000 fd3d 	bl	800168a <GPIO_WriteToOutputPin>
			break;
 8000c10:	e014      	b.n	8000c3c <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2105      	movs	r1, #5
 8000c16:	480b      	ldr	r0, [pc, #44]	; (8000c44 <LCD5110_Pin+0x60>)
 8000c18:	f000 fd37 	bl	800168a <GPIO_WriteToOutputPin>
			break;
 8000c1c:	e00e      	b.n	8000c3c <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d005      	beq.n	8000c30 <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2103      	movs	r1, #3
 8000c28:	4807      	ldr	r0, [pc, #28]	; (8000c48 <LCD5110_Pin+0x64>)
 8000c2a:	f000 fd2e 	bl	800168a <GPIO_WriteToOutputPin>
			break;
 8000c2e:	e004      	b.n	8000c3a <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2103      	movs	r1, #3
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <LCD5110_Pin+0x64>)
 8000c36:	f000 fd28 	bl	800168a <GPIO_WriteToOutputPin>
			break;
 8000c3a:	bf00      	nop
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40020800 	.word	0x40020800
 8000c48:	40020000 	.word	0x40020000

08000c4c <LCD5110_Delay>:

void LCD5110_Delay(unsigned long micros) {
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++) {
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e002      	b.n	8000c60 <LCD5110_Delay+0x14>
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f8      	bhi.n	8000c5a <LCD5110_Delay+0xe>
	}
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	SPI1_GPIOInits();
 8000c7e:	f7ff ff13 	bl	8000aa8 <SPI1_GPIOInits>
	SPI1_Inits();
 8000c82:	f7ff ff67 	bl	8000b54 <SPI1_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI1, ENABLE);
 8000c86:	2101      	movs	r1, #1
 8000c88:	481c      	ldr	r0, [pc, #112]	; (8000cfc <LCD5110_Init+0x88>)
 8000c8a:	f000 fe29 	bl	80018e0 <SPI_SSOEConfig>

	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2002      	movs	r0, #2
 8000c92:	f7ff ffa7 	bl	8000be4 <LCD5110_Pin>
	LCD5110_Delay(10000);
 8000c96:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c9a:	f7ff ffd7 	bl	8000c4c <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f7ff ff9f 	bl	8000be4 <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 8000ca6:	2121      	movs	r1, #33	; 0x21
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f000 f829 	bl	8000d00 <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 8000cae:	2114      	movs	r1, #20
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 f825 	bl	8000d00 <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	da01      	bge.n	8000cc2 <LCD5110_Init+0x4e>
		contrast = 0x7F;
 8000cbe:	237f      	movs	r3, #127	; 0x7f
 8000cc0:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	4619      	mov	r1, r3
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 f817 	bl	8000d00 <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f000 f813 	bl	8000d00 <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8000cda:	210c      	movs	r1, #12
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 f80f 	bl	8000d00 <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 8000ce2:	f000 f8b1 	bl	8000e48 <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8000ce6:	210c      	movs	r1, #12
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f000 f809 	bl	8000d00 <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 8000cee:	f000 f885 	bl	8000dfc <LCD5110_Clear>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40013000 	.word	0x40013000

08000d00 <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	460a      	mov	r2, r1
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d006      	beq.n	8000d24 <LCD5110_Write+0x24>
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d109      	bne.n	8000d2e <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff ff61 	bl	8000be4 <LCD5110_Pin>
			break;
 8000d22:	e005      	b.n	8000d30 <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 8000d24:	2100      	movs	r1, #0
 8000d26:	2001      	movs	r0, #1
 8000d28:	f7ff ff5c 	bl	8000be4 <LCD5110_Pin>
			break;
 8000d2c:	e000      	b.n	8000d30 <LCD5110_Write+0x30>
		default: break;
 8000d2e:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 8000d30:	79bb      	ldrb	r3, [r7, #6]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff32 	bl	8000b9c <LCD5110_send>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <LCD5110_DrawPixel>:

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
}

void LCD5110_DrawPixel(unsigned char x, unsigned char y, LCD5110_Pixel_t pixel) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	71bb      	strb	r3, [r7, #6]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	717b      	strb	r3, [r7, #5]
	if (x >= LCD5110_WIDTH) {
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b53      	cmp	r3, #83	; 0x53
 8000d56:	d849      	bhi.n	8000dec <LCD5110_DrawPixel+0xac>
		return;
	}
	if (y >= LCD5110_HEIGHT) {
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	2b2f      	cmp	r3, #47	; 0x2f
 8000d5c:	d848      	bhi.n	8000df0 <LCD5110_DrawPixel+0xb0>
		return;
	}

	if (pixel != LCD5110_Pixel_Clear) {
 8000d5e:	797b      	ldrb	r3, [r7, #5]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d01d      	beq.n	8000da0 <LCD5110_DrawPixel+0x60>
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] |= 1 << (y % 8);
 8000d64:	79fa      	ldrb	r2, [r7, #7]
 8000d66:	79bb      	ldrb	r3, [r7, #6]
 8000d68:	08db      	lsrs	r3, r3, #3
 8000d6a:	b2d8      	uxtb	r0, r3
 8000d6c:	4601      	mov	r1, r0
 8000d6e:	2354      	movs	r3, #84	; 0x54
 8000d70:	fb03 f301 	mul.w	r3, r3, r1
 8000d74:	4413      	add	r3, r2
 8000d76:	4a20      	ldr	r2, [pc, #128]	; (8000df8 <LCD5110_DrawPixel+0xb8>)
 8000d78:	5cd3      	ldrb	r3, [r2, r3]
 8000d7a:	b25a      	sxtb	r2, r3
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	2101      	movs	r1, #1
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b259      	sxtb	r1, r3
 8000d8e:	79fa      	ldrb	r2, [r7, #7]
 8000d90:	2354      	movs	r3, #84	; 0x54
 8000d92:	fb03 f300 	mul.w	r3, r3, r0
 8000d96:	4413      	add	r3, r2
 8000d98:	b2c9      	uxtb	r1, r1
 8000d9a:	4a17      	ldr	r2, [pc, #92]	; (8000df8 <LCD5110_DrawPixel+0xb8>)
 8000d9c:	54d1      	strb	r1, [r2, r3]
 8000d9e:	e01e      	b.n	8000dde <LCD5110_DrawPixel+0x9e>
	} else {
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] &= ~(1 << (y % 8));
 8000da0:	79fa      	ldrb	r2, [r7, #7]
 8000da2:	79bb      	ldrb	r3, [r7, #6]
 8000da4:	08db      	lsrs	r3, r3, #3
 8000da6:	b2d8      	uxtb	r0, r3
 8000da8:	4601      	mov	r1, r0
 8000daa:	2354      	movs	r3, #84	; 0x54
 8000dac:	fb03 f301 	mul.w	r3, r3, r1
 8000db0:	4413      	add	r3, r2
 8000db2:	4a11      	ldr	r2, [pc, #68]	; (8000df8 <LCD5110_DrawPixel+0xb8>)
 8000db4:	5cd3      	ldrb	r3, [r2, r3]
 8000db6:	b25a      	sxtb	r2, r3
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	4013      	ands	r3, r2
 8000dcc:	b259      	sxtb	r1, r3
 8000dce:	79fa      	ldrb	r2, [r7, #7]
 8000dd0:	2354      	movs	r3, #84	; 0x54
 8000dd2:	fb03 f300 	mul.w	r3, r3, r0
 8000dd6:	4413      	add	r3, r2
 8000dd8:	b2c9      	uxtb	r1, r1
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <LCD5110_DrawPixel+0xb8>)
 8000ddc:	54d1      	strb	r1, [r2, r3]
	}
	LCD5110_UpdateArea(x, y, x, y);
 8000dde:	79bb      	ldrb	r3, [r7, #6]
 8000de0:	79fa      	ldrb	r2, [r7, #7]
 8000de2:	79b9      	ldrb	r1, [r7, #6]
 8000de4:	79f8      	ldrb	r0, [r7, #7]
 8000de6:	f000 f89d 	bl	8000f24 <LCD5110_UpdateArea>
 8000dea:	e002      	b.n	8000df2 <LCD5110_DrawPixel+0xb2>
		return;
 8000dec:	bf00      	nop
 8000dee:	e000      	b.n	8000df2 <LCD5110_DrawPixel+0xb2>
		return;
 8000df0:	bf00      	nop
}
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200000f0 	.word	0x200000f0

08000dfc <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 8000e02:	f000 f821 	bl	8000e48 <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	e007      	b.n	8000e1c <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <LCD5110_Clear+0x48>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000e22:	d3f3      	bcc.n	8000e0c <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 8000e24:	2100      	movs	r1, #0
 8000e26:	2000      	movs	r0, #0
 8000e28:	f000 f8b8 	bl	8000f9c <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 8000e2c:	232f      	movs	r3, #47	; 0x2f
 8000e2e:	2253      	movs	r2, #83	; 0x53
 8000e30:	2100      	movs	r1, #0
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 f876 	bl	8000f24 <LCD5110_UpdateArea>
	LCD5110_Refresh();
 8000e38:	f000 f812 	bl	8000e60 <LCD5110_Refresh>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200000f0 	.word	0x200000f0

08000e48 <LCD5110_Home>:

void LCD5110_Home(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff ff56 	bl	8000d00 <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 8000e54:	2140      	movs	r1, #64	; 0x40
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff ff52 	bl	8000d00 <LCD5110_Write>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	e03b      	b.n	8000ee4 <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 8000e6c:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <LCD5110_Refresh+0xb0>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	3301      	adds	r3, #1
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dc2f      	bgt.n	8000edc <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	4a24      	ldr	r2, [pc, #144]	; (8000f14 <LCD5110_Refresh+0xb4>)
 8000e82:	7812      	ldrb	r2, [r2, #0]
 8000e84:	4293      	cmp	r3, r2
 8000e86:	dc31      	bgt.n	8000eec <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	4619      	mov	r1, r3
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff ff34 	bl	8000d00 <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <LCD5110_Refresh+0xb8>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f7ff ff2b 	bl	8000d00 <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <LCD5110_Refresh+0xb8>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	71bb      	strb	r3, [r7, #6]
 8000eb0:	e00e      	b.n	8000ed0 <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2254      	movs	r2, #84	; 0x54
 8000eb6:	fb02 f203 	mul.w	r2, r2, r3
 8000eba:	79bb      	ldrb	r3, [r7, #6]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <LCD5110_Refresh+0xbc>)
 8000ec0:	5cd3      	ldrb	r3, [r2, r3]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f7ff ff1b 	bl	8000d00 <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	71bb      	strb	r3, [r7, #6]
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <LCD5110_Refresh+0xc0>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	79ba      	ldrb	r2, [r7, #6]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d9eb      	bls.n	8000eb2 <LCD5110_Refresh+0x52>
 8000eda:	e000      	b.n	8000ede <LCD5110_Refresh+0x7e>
			continue;
 8000edc:	bf00      	nop
	for (i = 0; i < 6; i++) {
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b05      	cmp	r3, #5
 8000ee8:	d9c0      	bls.n	8000e6c <LCD5110_Refresh+0xc>
 8000eea:	e000      	b.n	8000eee <LCD5110_Refresh+0x8e>
			break;
 8000eec:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <LCD5110_Refresh+0xb8>)
 8000ef0:	2253      	movs	r2, #83	; 0x53
 8000ef2:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <LCD5110_Refresh+0xc0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <LCD5110_Refresh+0xb0>)
 8000efc:	222f      	movs	r2, #47	; 0x2f
 8000efe:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <LCD5110_Refresh+0xb4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000009c 	.word	0x2000009c
 8000f14:	2000009d 	.word	0x2000009d
 8000f18:	2000009a 	.word	0x2000009a
 8000f1c:	200000f0 	.word	0x200000f0
 8000f20:	2000009b 	.word	0x2000009b

08000f24 <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 8000f24:	b490      	push	{r4, r7}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	4611      	mov	r1, r2
 8000f30:	461a      	mov	r2, r3
 8000f32:	4623      	mov	r3, r4
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	4603      	mov	r3, r0
 8000f38:	71bb      	strb	r3, [r7, #6]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	717b      	strb	r3, [r7, #5]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <LCD5110_UpdateArea+0x68>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	79fa      	ldrb	r2, [r7, #7]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d202      	bcs.n	8000f52 <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 8000f4c:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <LCD5110_UpdateArea+0x68>)
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <LCD5110_UpdateArea+0x6c>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	797a      	ldrb	r2, [r7, #5]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d902      	bls.n	8000f62 <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 8000f5c:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <LCD5110_UpdateArea+0x6c>)
 8000f5e:	797b      	ldrb	r3, [r7, #5]
 8000f60:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <LCD5110_UpdateArea+0x70>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	79ba      	ldrb	r2, [r7, #6]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d202      	bcs.n	8000f72 <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 8000f6c:	4a09      	ldr	r2, [pc, #36]	; (8000f94 <LCD5110_UpdateArea+0x70>)
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <LCD5110_UpdateArea+0x74>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	793a      	ldrb	r2, [r7, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d902      	bls.n	8000f82 <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <LCD5110_UpdateArea+0x74>)
 8000f7e:	793b      	ldrb	r3, [r7, #4]
 8000f80:	7013      	strb	r3, [r2, #0]
	}
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc90      	pop	{r4, r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	2000009a 	.word	0x2000009a
 8000f90:	2000009b 	.word	0x2000009b
 8000f94:	2000009c 	.word	0x2000009c
 8000f98:	2000009d 	.word	0x2000009d

08000f9c <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 8000fac:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <LCD5110_GotoXY+0x28>)
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <LCD5110_GotoXY+0x2c>)
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	7013      	strb	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200000ec 	.word	0x200000ec
 8000fc8:	200000ed 	.word	0x200000ed

08000fcc <LCD5110_Putc>:

void LCD5110_Putc(char c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	71bb      	strb	r3, [r7, #6]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == LCD5110_FontSize_3x5) {
 8000fde:	797b      	ldrb	r3, [r7, #5]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d104      	bne.n	8000fee <LCD5110_Putc+0x22>
		c_width = LCD5110_CHAR3x5_WIDTH;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR3x5_HEIGHT;
 8000fe8:	2306      	movs	r3, #6
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e003      	b.n	8000ff6 <LCD5110_Putc+0x2a>
	} else {
		c_width = LCD5110_CHAR5x7_WIDTH;
 8000fee:	2306      	movs	r3, #6
 8000ff0:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR5x7_HEIGHT;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	73fb      	strb	r3, [r7, #15]
	}
	if ((LCD5110_x + c_width) > LCD5110_WIDTH) {
 8000ff6:	4b46      	ldr	r3, [pc, #280]	; (8001110 <LCD5110_Putc+0x144>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	4413      	add	r3, r2
 8001000:	2b54      	cmp	r3, #84	; 0x54
 8001002:	dd09      	ble.n	8001018 <LCD5110_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		LCD5110_y += c_height;
 8001004:	4b43      	ldr	r3, [pc, #268]	; (8001114 <LCD5110_Putc+0x148>)
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	4413      	add	r3, r2
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b41      	ldr	r3, [pc, #260]	; (8001114 <LCD5110_Putc+0x148>)
 8001010:	701a      	strb	r2, [r3, #0]
		LCD5110_x = 0;
 8001012:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <LCD5110_Putc+0x144>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8001018:	2300      	movs	r3, #0
 800101a:	737b      	strb	r3, [r7, #13]
 800101c:	e068      	b.n	80010f0 <LCD5110_Putc+0x124>
		if (c < 32) {
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b1f      	cmp	r3, #31
 8001022:	d91c      	bls.n	800105e <LCD5110_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == LCD5110_FontSize_3x5) {
 8001024:	797b      	ldrb	r3, [r7, #5]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d10c      	bne.n	8001044 <LCD5110_Putc+0x78>
			b = LCD5110_Font3x5[c - 32][i];
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f1a3 0220 	sub.w	r2, r3, #32
 8001030:	7b79      	ldrb	r1, [r7, #13]
 8001032:	4839      	ldr	r0, [pc, #228]	; (8001118 <LCD5110_Putc+0x14c>)
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	4403      	add	r3, r0
 800103c:	440b      	add	r3, r1
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	733b      	strb	r3, [r7, #12]
 8001042:	e00c      	b.n	800105e <LCD5110_Putc+0x92>
		} else {
			b = LCD5110_Font5x7[c - 32][i];
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f1a3 0220 	sub.w	r2, r3, #32
 800104a:	7b79      	ldrb	r1, [r7, #13]
 800104c:	4833      	ldr	r0, [pc, #204]	; (800111c <LCD5110_Putc+0x150>)
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4403      	add	r3, r0
 8001058:	440b      	add	r3, r1
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 800105e:	7b3b      	ldrb	r3, [r7, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d105      	bne.n	8001070 <LCD5110_Putc+0xa4>
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <LCD5110_Putc+0xa4>
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b20      	cmp	r3, #32
 800106e:	d13b      	bne.n	80010e8 <LCD5110_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8001070:	2300      	movs	r3, #0
 8001072:	72fb      	strb	r3, [r7, #11]
 8001074:	e02d      	b.n	80010d2 <LCD5110_Putc+0x106>
			if (color == LCD5110_Pixel_Set) {
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d112      	bne.n	80010a2 <LCD5110_Putc+0xd6>
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Set : LCD5110_Pixel_Clear);
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <LCD5110_Putc+0x144>)
 800107e:	7818      	ldrb	r0, [r3, #0]
 8001080:	4b24      	ldr	r3, [pc, #144]	; (8001114 <LCD5110_Putc+0x148>)
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	7afb      	ldrb	r3, [r7, #11]
 8001086:	4413      	add	r3, r2
 8001088:	b2d9      	uxtb	r1, r3
 800108a:	7b3a      	ldrb	r2, [r7, #12]
 800108c:	7afb      	ldrb	r3, [r7, #11]
 800108e:	fa42 f303 	asr.w	r3, r2, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	461a      	mov	r2, r3
 800109c:	f7ff fe50 	bl	8000d40 <LCD5110_DrawPixel>
 80010a0:	e014      	b.n	80010cc <LCD5110_Putc+0x100>
			} else {
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Clear : LCD5110_Pixel_Set);
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <LCD5110_Putc+0x144>)
 80010a4:	7818      	ldrb	r0, [r3, #0]
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <LCD5110_Putc+0x148>)
 80010a8:	781a      	ldrb	r2, [r3, #0]
 80010aa:	7afb      	ldrb	r3, [r7, #11]
 80010ac:	4413      	add	r3, r2
 80010ae:	b2d9      	uxtb	r1, r3
 80010b0:	7b3a      	ldrb	r2, [r7, #12]
 80010b2:	7afb      	ldrb	r3, [r7, #11]
 80010b4:	fa42 f303 	asr.w	r3, r2, r3
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	bf0c      	ite	eq
 80010c0:	2301      	moveq	r3, #1
 80010c2:	2300      	movne	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	f7ff fe3a 	bl	8000d40 <LCD5110_DrawPixel>
		for (j = 0; j < c_height; j++) {
 80010cc:	7afb      	ldrb	r3, [r7, #11]
 80010ce:	3301      	adds	r3, #1
 80010d0:	72fb      	strb	r3, [r7, #11]
 80010d2:	7afa      	ldrb	r2, [r7, #11]
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d3cd      	bcc.n	8001076 <LCD5110_Putc+0xaa>
			}
		}
		LCD5110_x++;
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <LCD5110_Putc+0x144>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <LCD5110_Putc+0x144>)
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e000      	b.n	80010ea <LCD5110_Putc+0x11e>
			continue;
 80010e8:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 80010ea:	7b7b      	ldrb	r3, [r7, #13]
 80010ec:	3301      	adds	r3, #1
 80010ee:	737b      	strb	r3, [r7, #13]
 80010f0:	7b7a      	ldrb	r2, [r7, #13]
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	429a      	cmp	r2, r3
 80010f8:	db91      	blt.n	800101e <LCD5110_Putc+0x52>
	}
	LCD5110_x++;
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <LCD5110_Putc+0x144>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b03      	ldr	r3, [pc, #12]	; (8001110 <LCD5110_Putc+0x144>)
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200000ec 	.word	0x200000ec
 8001114:	200000ed 	.word	0x200000ed
 8001118:	08002bc8 	.word	0x08002bc8
 800111c:	08002980 	.word	0x08002980

08001120 <LCD5110_Puts>:

void LCD5110_Puts(char *c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
 800112c:	4613      	mov	r3, r2
 800112e:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 8001130:	e008      	b.n	8001144 <LCD5110_Puts+0x24>
		LCD5110_Putc(*c++, color, size);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	78ba      	ldrb	r2, [r7, #2]
 800113c:	78f9      	ldrb	r1, [r7, #3]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff44 	bl	8000fcc <LCD5110_Putc>
	while (*c) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f2      	bne.n	8001132 <LCD5110_Puts+0x12>
	}
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t*pGPIOx, uint8_t EnorDi)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d162      	bne.n	8001230 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a64      	ldr	r2, [pc, #400]	; (8001300 <GPIO_PeriClockControl+0x1a8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d106      	bne.n	8001180 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8001172:	4b64      	ldr	r3, [pc, #400]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a63      	ldr	r2, [pc, #396]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800117e:	e0b9      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a61      	ldr	r2, [pc, #388]	; (8001308 <GPIO_PeriClockControl+0x1b0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d106      	bne.n	8001196 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8001188:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	4a5d      	ldr	r2, [pc, #372]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 800118e:	f043 0302 	orr.w	r3, r3, #2
 8001192:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001194:	e0ae      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a5c      	ldr	r2, [pc, #368]	; (800130c <GPIO_PeriClockControl+0x1b4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d106      	bne.n	80011ac <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800119e:	4b59      	ldr	r3, [pc, #356]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a58      	ldr	r2, [pc, #352]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011aa:	e0a3      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a58      	ldr	r2, [pc, #352]	; (8001310 <GPIO_PeriClockControl+0x1b8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d106      	bne.n	80011c2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80011b4:	4b53      	ldr	r3, [pc, #332]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4a52      	ldr	r2, [pc, #328]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011c0:	e098      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a53      	ldr	r2, [pc, #332]	; (8001314 <GPIO_PeriClockControl+0x1bc>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d106      	bne.n	80011d8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80011ca:	4b4e      	ldr	r3, [pc, #312]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a4d      	ldr	r2, [pc, #308]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80011d0:	f043 0310 	orr.w	r3, r3, #16
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011d6:	e08d      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a4f      	ldr	r2, [pc, #316]	; (8001318 <GPIO_PeriClockControl+0x1c0>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d106      	bne.n	80011ee <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80011e0:	4b48      	ldr	r3, [pc, #288]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	4a47      	ldr	r2, [pc, #284]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80011e6:	f043 0320 	orr.w	r3, r3, #32
 80011ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011ec:	e082      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4a      	ldr	r2, [pc, #296]	; (800131c <GPIO_PeriClockControl+0x1c4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d106      	bne.n	8001204 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80011f6:	4b43      	ldr	r3, [pc, #268]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a42      	ldr	r2, [pc, #264]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80011fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001202:	e077      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a46      	ldr	r2, [pc, #280]	; (8001320 <GPIO_PeriClockControl+0x1c8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d106      	bne.n	800121a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800120c:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	4a3c      	ldr	r2, [pc, #240]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 8001212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001216:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001218:	e06c      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a41      	ldr	r2, [pc, #260]	; (8001324 <GPIO_PeriClockControl+0x1cc>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d168      	bne.n	80012f4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8001222:	4b38      	ldr	r3, [pc, #224]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a37      	ldr	r2, [pc, #220]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800122e:	e061      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a33      	ldr	r2, [pc, #204]	; (8001300 <GPIO_PeriClockControl+0x1a8>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d106      	bne.n	8001246 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8001238:	4b32      	ldr	r3, [pc, #200]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	4a31      	ldr	r2, [pc, #196]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 800123e:	f023 0301 	bic.w	r3, r3, #1
 8001242:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001244:	e056      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <GPIO_PeriClockControl+0x1b0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d106      	bne.n	800125c <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a2c      	ldr	r2, [pc, #176]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 8001254:	f023 0302 	bic.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
}
 800125a:	e04b      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a2b      	ldr	r2, [pc, #172]	; (800130c <GPIO_PeriClockControl+0x1b4>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d106      	bne.n	8001272 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	4a26      	ldr	r2, [pc, #152]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 800126a:	f023 0304 	bic.w	r3, r3, #4
 800126e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001270:	e040      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a26      	ldr	r2, [pc, #152]	; (8001310 <GPIO_PeriClockControl+0x1b8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d106      	bne.n	8001288 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a21      	ldr	r2, [pc, #132]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 8001280:	f023 0308 	bic.w	r3, r3, #8
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001286:	e035      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a22      	ldr	r2, [pc, #136]	; (8001314 <GPIO_PeriClockControl+0x1bc>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d106      	bne.n	800129e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 8001296:	f023 0310 	bic.w	r3, r3, #16
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800129c:	e02a      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <GPIO_PeriClockControl+0x1c0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d106      	bne.n	80012b4 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a16      	ldr	r2, [pc, #88]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80012ac:	f023 0320 	bic.w	r3, r3, #32
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012b2:	e01f      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a19      	ldr	r2, [pc, #100]	; (800131c <GPIO_PeriClockControl+0x1c4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d106      	bne.n	80012ca <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a10      	ldr	r2, [pc, #64]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80012c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012c8:	e014      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a14      	ldr	r2, [pc, #80]	; (8001320 <GPIO_PeriClockControl+0x1c8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d106      	bne.n	80012e0 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80012d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012de:	e009      	b.n	80012f4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <GPIO_PeriClockControl+0x1cc>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d105      	bne.n	80012f4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	4a05      	ldr	r2, [pc, #20]	; (8001304 <GPIO_PeriClockControl+0x1ac>)
 80012ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40020000 	.word	0x40020000
 8001304:	40023800 	.word	0x40023800
 8001308:	40020400 	.word	0x40020400
 800130c:	40020800 	.word	0x40020800
 8001310:	40020c00 	.word	0x40020c00
 8001314:	40021000 	.word	0x40021000
 8001318:	40021400 	.word	0x40021400
 800131c:	40021800 	.word	0x40021800
 8001320:	40021c00 	.word	0x40021c00
 8001324:	40022000 	.word	0x40022000

08001328 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2101      	movs	r1, #1
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff0c 	bl	8001158 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	795b      	ldrb	r3, [r3, #5]
 8001344:	2b03      	cmp	r3, #3
 8001346:	d820      	bhi.n	800138a <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	795b      	ldrb	r3, [r3, #5]
 800134c:	461a      	mov	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	791b      	ldrb	r3, [r3, #4]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	791b      	ldrb	r3, [r3, #4]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2103      	movs	r1, #3
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	400a      	ands	r2, r1
 8001376:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	430a      	orrs	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e0cb      	b.n	8001522 <GPIO_Init+0x1fa>

	}else
	{
		// interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	795b      	ldrb	r3, [r3, #5]
 800138e:	2b04      	cmp	r3, #4
 8001390:	d117      	bne.n	80013c2 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001392:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <GPIO_Init+0x198>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	7912      	ldrb	r2, [r2, #4]
 800139a:	4611      	mov	r1, r2
 800139c:	2201      	movs	r2, #1
 800139e:	408a      	lsls	r2, r1
 80013a0:	4611      	mov	r1, r2
 80013a2:	4a47      	ldr	r2, [pc, #284]	; (80014c0 <GPIO_Init+0x198>)
 80013a4:	430b      	orrs	r3, r1
 80013a6:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80013a8:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <GPIO_Init+0x198>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	7912      	ldrb	r2, [r2, #4]
 80013b0:	4611      	mov	r1, r2
 80013b2:	2201      	movs	r2, #1
 80013b4:	408a      	lsls	r2, r1
 80013b6:	43d2      	mvns	r2, r2
 80013b8:	4611      	mov	r1, r2
 80013ba:	4a41      	ldr	r2, [pc, #260]	; (80014c0 <GPIO_Init+0x198>)
 80013bc:	400b      	ands	r3, r1
 80013be:	6093      	str	r3, [r2, #8]
 80013c0:	e035      	b.n	800142e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	795b      	ldrb	r3, [r3, #5]
 80013c6:	2b05      	cmp	r3, #5
 80013c8:	d117      	bne.n	80013fa <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80013ca:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <GPIO_Init+0x198>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	7912      	ldrb	r2, [r2, #4]
 80013d2:	4611      	mov	r1, r2
 80013d4:	2201      	movs	r2, #1
 80013d6:	408a      	lsls	r2, r1
 80013d8:	4611      	mov	r1, r2
 80013da:	4a39      	ldr	r2, [pc, #228]	; (80014c0 <GPIO_Init+0x198>)
 80013dc:	430b      	orrs	r3, r1
 80013de:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80013e0:	4b37      	ldr	r3, [pc, #220]	; (80014c0 <GPIO_Init+0x198>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	7912      	ldrb	r2, [r2, #4]
 80013e8:	4611      	mov	r1, r2
 80013ea:	2201      	movs	r2, #1
 80013ec:	408a      	lsls	r2, r1
 80013ee:	43d2      	mvns	r2, r2
 80013f0:	4611      	mov	r1, r2
 80013f2:	4a33      	ldr	r2, [pc, #204]	; (80014c0 <GPIO_Init+0x198>)
 80013f4:	400b      	ands	r3, r1
 80013f6:	60d3      	str	r3, [r2, #12]
 80013f8:	e019      	b.n	800142e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	795b      	ldrb	r3, [r3, #5]
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d115      	bne.n	800142e <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001402:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <GPIO_Init+0x198>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	7912      	ldrb	r2, [r2, #4]
 800140a:	4611      	mov	r1, r2
 800140c:	2201      	movs	r2, #1
 800140e:	408a      	lsls	r2, r1
 8001410:	4611      	mov	r1, r2
 8001412:	4a2b      	ldr	r2, [pc, #172]	; (80014c0 <GPIO_Init+0x198>)
 8001414:	430b      	orrs	r3, r1
 8001416:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <GPIO_Init+0x198>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	7912      	ldrb	r2, [r2, #4]
 8001420:	4611      	mov	r1, r2
 8001422:	2201      	movs	r2, #1
 8001424:	408a      	lsls	r2, r1
 8001426:	4611      	mov	r1, r2
 8001428:	4a25      	ldr	r2, [pc, #148]	; (80014c0 <GPIO_Init+0x198>)
 800142a:	430b      	orrs	r3, r1
 800142c:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	791b      	ldrb	r3, [r3, #4]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	791b      	ldrb	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1f      	ldr	r2, [pc, #124]	; (80014c4 <GPIO_Init+0x19c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d04e      	beq.n	80014e8 <GPIO_Init+0x1c0>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <GPIO_Init+0x1a0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d032      	beq.n	80014ba <GPIO_Init+0x192>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <GPIO_Init+0x1a4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d02b      	beq.n	80014b6 <GPIO_Init+0x18e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <GPIO_Init+0x1a8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d024      	beq.n	80014b2 <GPIO_Init+0x18a>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <GPIO_Init+0x1ac>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d01d      	beq.n	80014ae <GPIO_Init+0x186>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <GPIO_Init+0x1b0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d016      	beq.n	80014aa <GPIO_Init+0x182>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a16      	ldr	r2, [pc, #88]	; (80014dc <GPIO_Init+0x1b4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d00f      	beq.n	80014a6 <GPIO_Init+0x17e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <GPIO_Init+0x1b8>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d008      	beq.n	80014a2 <GPIO_Init+0x17a>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <GPIO_Init+0x1bc>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <GPIO_Init+0x176>
 800149a:	2308      	movs	r3, #8
 800149c:	e025      	b.n	80014ea <GPIO_Init+0x1c2>
 800149e:	2300      	movs	r3, #0
 80014a0:	e023      	b.n	80014ea <GPIO_Init+0x1c2>
 80014a2:	2307      	movs	r3, #7
 80014a4:	e021      	b.n	80014ea <GPIO_Init+0x1c2>
 80014a6:	2306      	movs	r3, #6
 80014a8:	e01f      	b.n	80014ea <GPIO_Init+0x1c2>
 80014aa:	2305      	movs	r3, #5
 80014ac:	e01d      	b.n	80014ea <GPIO_Init+0x1c2>
 80014ae:	2304      	movs	r3, #4
 80014b0:	e01b      	b.n	80014ea <GPIO_Init+0x1c2>
 80014b2:	2303      	movs	r3, #3
 80014b4:	e019      	b.n	80014ea <GPIO_Init+0x1c2>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e017      	b.n	80014ea <GPIO_Init+0x1c2>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e015      	b.n	80014ea <GPIO_Init+0x1c2>
 80014be:	bf00      	nop
 80014c0:	40013c00 	.word	0x40013c00
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40021800 	.word	0x40021800
 80014e0:	40021c00 	.word	0x40021c00
 80014e4:	40022000 	.word	0x40022000
 80014e8:	2300      	movs	r3, #0
 80014ea:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80014ec:	4b59      	ldr	r3, [pc, #356]	; (8001654 <GPIO_Init+0x32c>)
 80014ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f0:	4a58      	ldr	r2, [pc, #352]	; (8001654 <GPIO_Init+0x32c>)
 80014f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f6:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80014f8:	7c7a      	ldrb	r2, [r7, #17]
 80014fa:	7cbb      	ldrb	r3, [r7, #18]
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	fa02 f103 	lsl.w	r1, r2, r3
 8001502:	4a55      	ldr	r2, [pc, #340]	; (8001658 <GPIO_Init+0x330>)
 8001504:	7cfb      	ldrb	r3, [r7, #19]
 8001506:	3302      	adds	r3, #2
 8001508:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <GPIO_Init+0x334>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	7912      	ldrb	r2, [r2, #4]
 8001514:	4611      	mov	r1, r2
 8001516:	2201      	movs	r2, #1
 8001518:	408a      	lsls	r2, r1
 800151a:	4611      	mov	r1, r2
 800151c:	4a4f      	ldr	r2, [pc, #316]	; (800165c <GPIO_Init+0x334>)
 800151e:	430b      	orrs	r3, r1
 8001520:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	799b      	ldrb	r3, [r3, #6]
 8001526:	461a      	mov	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	791b      	ldrb	r3, [r3, #4]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	791b      	ldrb	r3, [r3, #4]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2103      	movs	r1, #3
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	4619      	mov	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	400a      	ands	r2, r1
 8001550:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6899      	ldr	r1, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	430a      	orrs	r2, r1
 8001560:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	79db      	ldrb	r3, [r3, #7]
 8001566:	461a      	mov	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	791b      	ldrb	r3, [r3, #4]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	791b      	ldrb	r3, [r3, #4]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2103      	movs	r1, #3
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	4619      	mov	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	400a      	ands	r2, r1
 8001590:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68d9      	ldr	r1, [r3, #12]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	430a      	orrs	r2, r1
 80015a0:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinoType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	7a1b      	ldrb	r3, [r3, #8]
 80015a6:	461a      	mov	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	791b      	ldrb	r3, [r3, #4]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	791b      	ldrb	r3, [r3, #4]
 80015bc:	4619      	mov	r1, r3
 80015be:	2301      	movs	r3, #1
 80015c0:	408b      	lsls	r3, r1
 80015c2:	43db      	mvns	r3, r3
 80015c4:	4619      	mov	r1, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	400a      	ands	r2, r1
 80015cc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6859      	ldr	r1, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	430a      	orrs	r2, r1
 80015dc:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	795b      	ldrb	r3, [r3, #5]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d131      	bne.n	800164a <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	791b      	ldrb	r3, [r3, #4]
 80015ea:	08db      	lsrs	r3, r3, #3
 80015ec:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	791b      	ldrb	r3, [r3, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	7c3a      	ldrb	r2, [r7, #16]
 80015fe:	3208      	adds	r2, #8
 8001600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	4618      	mov	r0, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	7c3a      	ldrb	r2, [r7, #16]
 8001618:	4001      	ands	r1, r0
 800161a:	3208      	adds	r2, #8
 800161c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	7c3a      	ldrb	r2, [r7, #16]
 8001626:	3208      	adds	r2, #8
 8001628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7a5b      	ldrb	r3, [r3, #9]
 8001630:	461a      	mov	r2, r3
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	7c3a      	ldrb	r2, [r7, #16]
 8001642:	4301      	orrs	r1, r0
 8001644:	3208      	adds	r2, #8
 8001646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40013800 	.word	0x40013800
 800165c:	40013c00 	.word	0x40013c00

08001660 <GPIO_ReadFromInputPin>:

/*
 * Data read & write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (pGPIOx->IDR >> PinNumber) & 0x00000001;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	fa22 f303 	lsr.w	r3, r2, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
	return value;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <GPIO_WriteToOutputPin>:
	uint16_t value;
	value = (uint8_t)pGPIOx->IDR;
	return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	70fb      	strb	r3, [r7, #3]
 8001696:	4613      	mov	r3, r2
 8001698:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 800169a:	78bb      	ldrb	r3, [r7, #2]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d109      	bne.n	80016b4 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx -> ODR |= (1 << PinNumber);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	78fa      	ldrb	r2, [r7, #3]
 80016a6:	2101      	movs	r1, #1
 80016a8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	615a      	str	r2, [r3, #20]
	} else
	{
		//write 0
		pGPIOx -> ODR &= ~(1 << PinNumber);
	}
}
 80016b2:	e009      	b.n	80016c8 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx -> ODR &= ~(1 << PinNumber);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	78fa      	ldrb	r2, [r7, #3]
 80016ba:	2101      	movs	r1, #1
 80016bc:	fa01 f202 	lsl.w	r2, r1, r2
 80016c0:	43d2      	mvns	r2, r2
 80016c2:	401a      	ands	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	615a      	str	r2, [r3, #20]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
	...

080016d4 <GPIO_IRQInterruptConfig>:
}
/*
 * IRQ Configuration & ISR handling
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	460a      	mov	r2, r1
 80016de:	71fb      	strb	r3, [r7, #7]
 80016e0:	4613      	mov	r3, r2
 80016e2:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 80016e4:	79bb      	ldrb	r3, [r7, #6]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d133      	bne.n	8001752 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <=31)
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	2b1f      	cmp	r3, #31
 80016ee:	d80a      	bhi.n	8001706 <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80016f0:	4b34      	ldr	r3, [pc, #208]	; (80017c4 <GPIO_IRQInterruptConfig+0xf0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	79fa      	ldrb	r2, [r7, #7]
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	4611      	mov	r1, r2
 80016fe:	4a31      	ldr	r2, [pc, #196]	; (80017c4 <GPIO_IRQInterruptConfig+0xf0>)
 8001700:	430b      	orrs	r3, r1
 8001702:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
		}
	}

}
 8001704:	e059      	b.n	80017ba <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber >31 && IRQNumber < 64)
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b1f      	cmp	r3, #31
 800170a:	d90f      	bls.n	800172c <GPIO_IRQInterruptConfig+0x58>
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	2b3f      	cmp	r3, #63	; 0x3f
 8001710:	d80c      	bhi.n	800172c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << IRQNumber %32 );
 8001712:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <GPIO_IRQInterruptConfig+0xf4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	79fa      	ldrb	r2, [r7, #7]
 8001718:	f002 021f 	and.w	r2, r2, #31
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f202 	lsl.w	r2, r1, r2
 8001722:	4611      	mov	r1, r2
 8001724:	4a28      	ldr	r2, [pc, #160]	; (80017c8 <GPIO_IRQInterruptConfig+0xf4>)
 8001726:	430b      	orrs	r3, r1
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e046      	b.n	80017ba <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >=64 && IRQNumber < 96)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	2b3f      	cmp	r3, #63	; 0x3f
 8001730:	d943      	bls.n	80017ba <GPIO_IRQInterruptConfig+0xe6>
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b5f      	cmp	r3, #95	; 0x5f
 8001736:	d840      	bhi.n	80017ba <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << IRQNumber % 64 );
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <GPIO_IRQInterruptConfig+0xf8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	79fa      	ldrb	r2, [r7, #7]
 800173e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001742:	2101      	movs	r1, #1
 8001744:	fa01 f202 	lsl.w	r2, r1, r2
 8001748:	4611      	mov	r1, r2
 800174a:	4a20      	ldr	r2, [pc, #128]	; (80017cc <GPIO_IRQInterruptConfig+0xf8>)
 800174c:	430b      	orrs	r3, r1
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	e033      	b.n	80017ba <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <=31)
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b1f      	cmp	r3, #31
 8001756:	d80a      	bhi.n	800176e <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <GPIO_IRQInterruptConfig+0xfc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	79fa      	ldrb	r2, [r7, #7]
 800175e:	2101      	movs	r1, #1
 8001760:	fa01 f202 	lsl.w	r2, r1, r2
 8001764:	4611      	mov	r1, r2
 8001766:	4a1a      	ldr	r2, [pc, #104]	; (80017d0 <GPIO_IRQInterruptConfig+0xfc>)
 8001768:	430b      	orrs	r3, r1
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	e025      	b.n	80017ba <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber >31 && IRQNumber < 64)
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b1f      	cmp	r3, #31
 8001772:	d90f      	bls.n	8001794 <GPIO_IRQInterruptConfig+0xc0>
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2b3f      	cmp	r3, #63	; 0x3f
 8001778:	d80c      	bhi.n	8001794 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << IRQNumber % 32 );
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <GPIO_IRQInterruptConfig+0x100>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	79fa      	ldrb	r2, [r7, #7]
 8001780:	f002 021f 	and.w	r2, r2, #31
 8001784:	2101      	movs	r1, #1
 8001786:	fa01 f202 	lsl.w	r2, r1, r2
 800178a:	4611      	mov	r1, r2
 800178c:	4a11      	ldr	r2, [pc, #68]	; (80017d4 <GPIO_IRQInterruptConfig+0x100>)
 800178e:	430b      	orrs	r3, r1
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e012      	b.n	80017ba <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >=64 && IRQNumber < 96)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	2b3f      	cmp	r3, #63	; 0x3f
 8001798:	d90f      	bls.n	80017ba <GPIO_IRQInterruptConfig+0xe6>
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b5f      	cmp	r3, #95	; 0x5f
 800179e:	d80c      	bhi.n	80017ba <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <GPIO_IRQInterruptConfig+0x104>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	79fa      	ldrb	r2, [r7, #7]
 80017a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80017aa:	2101      	movs	r1, #1
 80017ac:	fa01 f202 	lsl.w	r2, r1, r2
 80017b0:	4611      	mov	r1, r2
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <GPIO_IRQInterruptConfig+0x104>)
 80017b4:	430b      	orrs	r3, r1
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	e7ff      	b.n	80017ba <GPIO_IRQInterruptConfig+0xe6>
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000e104 	.word	0xe000e104
 80017cc:	e000e108 	.word	0xe000e108
 80017d0:	e000e180 	.word	0xe000e180
 80017d4:	e000e184 	.word	0xe000e184
 80017d8:	e000e188 	.word	0xe000e188

080017dc <GPIO_IRQPriorityConfig>:
void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
	//1. First find out the ipr register
	uint8_t iprx = IRQNumber /4;
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber %4;
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * iprx_section) + (8- NO_PR_BITS_IMPLEMENTED);
 80017f6:	7bbb      	ldrb	r3, [r7, #14]
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	3304      	adds	r3, #4
 80017fe:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount );
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001808:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	7b7b      	ldrb	r3, [r7, #13]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	409a      	lsls	r2, r3
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800181c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]

}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
	...

08001830 <SPI_PeriClockControl>:
static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_RegDef_t*pSPIx, uint8_t EnorDi)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d120      	bne.n	8001884 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a22      	ldr	r2, [pc, #136]	; (80018d0 <SPI_PeriClockControl+0xa0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d106      	bne.n	8001858 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <SPI_PeriClockControl+0xa4>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <SPI_PeriClockControl+0xa4>)
 8001850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI3_PCLK_DI();
		}
	}

}
 8001856:	e035      	b.n	80018c4 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <SPI_PeriClockControl+0xa8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d106      	bne.n	800186e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <SPI_PeriClockControl+0xa4>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <SPI_PeriClockControl+0xa4>)
 8001866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800186c:	e02a      	b.n	80018c4 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a1a      	ldr	r2, [pc, #104]	; (80018dc <SPI_PeriClockControl+0xac>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d126      	bne.n	80018c4 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <SPI_PeriClockControl+0xa4>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	4a16      	ldr	r2, [pc, #88]	; (80018d4 <SPI_PeriClockControl+0xa4>)
 800187c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001880:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001882:	e01f      	b.n	80018c4 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <SPI_PeriClockControl+0xa0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d106      	bne.n	800189a <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <SPI_PeriClockControl+0xa4>)
 800188e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001890:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <SPI_PeriClockControl+0xa4>)
 8001892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001896:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001898:	e014      	b.n	80018c4 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <SPI_PeriClockControl+0xa8>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d106      	bne.n	80018b0 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <SPI_PeriClockControl+0xa4>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <SPI_PeriClockControl+0xa4>)
 80018a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018ac:	6453      	str	r3, [r2, #68]	; 0x44
}
 80018ae:	e009      	b.n	80018c4 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <SPI_PeriClockControl+0xac>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d105      	bne.n	80018c4 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <SPI_PeriClockControl+0xa4>)
 80018ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018bc:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <SPI_PeriClockControl+0xa4>)
 80018be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80018c2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40013000 	.word	0x40013000
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40003800 	.word	0x40003800
 80018dc:	40003c00 	.word	0x40003c00

080018e0 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d106      	bne.n	8001900 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f043 0204 	orr.w	r2, r3, #4
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 80018fe:	e005      	b.n	800190c <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f023 0204 	bic.w	r2, r3, #4
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	605a      	str	r2, [r3, #4]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <SPI_Init>:
/************************
 *
 */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2101      	movs	r1, #1
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff83 	bl	8001830 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	791b      	ldrb	r3, [r3, #4]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	461a      	mov	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	795b      	ldrb	r3, [r3, #5]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d104      	bne.n	800194e <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e014      	b.n	8001978 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	795b      	ldrb	r3, [r3, #5]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d104      	bne.n	8001960 <SPI_Init+0x4a>
	{
		//BIDI mode should be set
		tempreg |= ~(1<<SPI_CR1_BIDIMODE);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	e00b      	b.n	8001978 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	795b      	ldrb	r3, [r3, #5]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d107      	bne.n	8001978 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800196e:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1<<SPI_CR1_RXONLY);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001976:	60fb      	str	r3, [r7, #12]
	}
	//3. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	799b      	ldrb	r3, [r3, #6]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	461a      	mov	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	79db      	ldrb	r3, [r3, #7]
 800198a:	02db      	lsls	r3, r3, #11
 800198c:	461a      	mov	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4313      	orrs	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7a1b      	ldrb	r3, [r3, #8]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7a5b      	ldrb	r3, [r3, #9]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7a9b      	ldrb	r3, [r3, #10]
 80019b2:	025b      	lsls	r3, r3, #9
 80019b4:	461a      	mov	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	601a      	str	r2, [r3, #0]
}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <SPI_Transfer>:
		}

}

uint8_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
	pSPIx->DR = data;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60da      	str	r2, [r3, #12]
	while( ( (pSPIx->SR & 0x0003) == 0) || (pSPIx->SR & 0x0080) );
 80019de:	bf00      	nop
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f9      	beq.n	80019e0 <SPI_Transfer+0x14>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f3      	bne.n	80019e0 <SPI_Transfer+0x14>
	//while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );

	//printf("%x \n", pSPIx->DR);
	return pSPIx->DR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	b2db      	uxtb	r3, r3
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <SPI_PeripheralControl>:
/**************************
 *
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d106      	bne.n	8001a28 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	601a      	str	r2, [r3, #0]
	} else
	{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 8001a26:	e005      	b.n	8001a34 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	601a      	str	r2, [r3, #0]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
	...

08001a40 <__errno>:
 8001a40:	4b01      	ldr	r3, [pc, #4]	; (8001a48 <__errno+0x8>)
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000014 	.word	0x20000014

08001a4c <__libc_init_array>:
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	4d0d      	ldr	r5, [pc, #52]	; (8001a84 <__libc_init_array+0x38>)
 8001a50:	4c0d      	ldr	r4, [pc, #52]	; (8001a88 <__libc_init_array+0x3c>)
 8001a52:	1b64      	subs	r4, r4, r5
 8001a54:	10a4      	asrs	r4, r4, #2
 8001a56:	2600      	movs	r6, #0
 8001a58:	42a6      	cmp	r6, r4
 8001a5a:	d109      	bne.n	8001a70 <__libc_init_array+0x24>
 8001a5c:	4d0b      	ldr	r5, [pc, #44]	; (8001a8c <__libc_init_array+0x40>)
 8001a5e:	4c0c      	ldr	r4, [pc, #48]	; (8001a90 <__libc_init_array+0x44>)
 8001a60:	f000 ff72 	bl	8002948 <_init>
 8001a64:	1b64      	subs	r4, r4, r5
 8001a66:	10a4      	asrs	r4, r4, #2
 8001a68:	2600      	movs	r6, #0
 8001a6a:	42a6      	cmp	r6, r4
 8001a6c:	d105      	bne.n	8001a7a <__libc_init_array+0x2e>
 8001a6e:	bd70      	pop	{r4, r5, r6, pc}
 8001a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a74:	4798      	blx	r3
 8001a76:	3601      	adds	r6, #1
 8001a78:	e7ee      	b.n	8001a58 <__libc_init_array+0xc>
 8001a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a7e:	4798      	blx	r3
 8001a80:	3601      	adds	r6, #1
 8001a82:	e7f2      	b.n	8001a6a <__libc_init_array+0x1e>
 8001a84:	08002da0 	.word	0x08002da0
 8001a88:	08002da0 	.word	0x08002da0
 8001a8c:	08002da0 	.word	0x08002da0
 8001a90:	08002da4 	.word	0x08002da4

08001a94 <memset>:
 8001a94:	4402      	add	r2, r0
 8001a96:	4603      	mov	r3, r0
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d100      	bne.n	8001a9e <memset+0xa>
 8001a9c:	4770      	bx	lr
 8001a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8001aa2:	e7f9      	b.n	8001a98 <memset+0x4>

08001aa4 <iprintf>:
 8001aa4:	b40f      	push	{r0, r1, r2, r3}
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <iprintf+0x2c>)
 8001aa8:	b513      	push	{r0, r1, r4, lr}
 8001aaa:	681c      	ldr	r4, [r3, #0]
 8001aac:	b124      	cbz	r4, 8001ab8 <iprintf+0x14>
 8001aae:	69a3      	ldr	r3, [r4, #24]
 8001ab0:	b913      	cbnz	r3, 8001ab8 <iprintf+0x14>
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f000 f866 	bl	8001b84 <__sinit>
 8001ab8:	ab05      	add	r3, sp, #20
 8001aba:	9a04      	ldr	r2, [sp, #16]
 8001abc:	68a1      	ldr	r1, [r4, #8]
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f000 f981 	bl	8001dc8 <_vfiprintf_r>
 8001ac6:	b002      	add	sp, #8
 8001ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001acc:	b004      	add	sp, #16
 8001ace:	4770      	bx	lr
 8001ad0:	20000014 	.word	0x20000014

08001ad4 <std>:
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	b510      	push	{r4, lr}
 8001ad8:	4604      	mov	r4, r0
 8001ada:	e9c0 3300 	strd	r3, r3, [r0]
 8001ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ae2:	6083      	str	r3, [r0, #8]
 8001ae4:	8181      	strh	r1, [r0, #12]
 8001ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8001ae8:	81c2      	strh	r2, [r0, #14]
 8001aea:	6183      	str	r3, [r0, #24]
 8001aec:	4619      	mov	r1, r3
 8001aee:	2208      	movs	r2, #8
 8001af0:	305c      	adds	r0, #92	; 0x5c
 8001af2:	f7ff ffcf 	bl	8001a94 <memset>
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <std+0x38>)
 8001af8:	6263      	str	r3, [r4, #36]	; 0x24
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <std+0x3c>)
 8001afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <std+0x40>)
 8001b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <std+0x44>)
 8001b04:	6224      	str	r4, [r4, #32]
 8001b06:	6323      	str	r3, [r4, #48]	; 0x30
 8001b08:	bd10      	pop	{r4, pc}
 8001b0a:	bf00      	nop
 8001b0c:	08002371 	.word	0x08002371
 8001b10:	08002393 	.word	0x08002393
 8001b14:	080023cb 	.word	0x080023cb
 8001b18:	080023ef 	.word	0x080023ef

08001b1c <_cleanup_r>:
 8001b1c:	4901      	ldr	r1, [pc, #4]	; (8001b24 <_cleanup_r+0x8>)
 8001b1e:	f000 b8af 	b.w	8001c80 <_fwalk_reent>
 8001b22:	bf00      	nop
 8001b24:	080026c9 	.word	0x080026c9

08001b28 <__sfmoreglue>:
 8001b28:	b570      	push	{r4, r5, r6, lr}
 8001b2a:	1e4a      	subs	r2, r1, #1
 8001b2c:	2568      	movs	r5, #104	; 0x68
 8001b2e:	4355      	muls	r5, r2
 8001b30:	460e      	mov	r6, r1
 8001b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b36:	f000 f8c5 	bl	8001cc4 <_malloc_r>
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	b140      	cbz	r0, 8001b50 <__sfmoreglue+0x28>
 8001b3e:	2100      	movs	r1, #0
 8001b40:	e9c0 1600 	strd	r1, r6, [r0]
 8001b44:	300c      	adds	r0, #12
 8001b46:	60a0      	str	r0, [r4, #8]
 8001b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001b4c:	f7ff ffa2 	bl	8001a94 <memset>
 8001b50:	4620      	mov	r0, r4
 8001b52:	bd70      	pop	{r4, r5, r6, pc}

08001b54 <__sfp_lock_acquire>:
 8001b54:	4801      	ldr	r0, [pc, #4]	; (8001b5c <__sfp_lock_acquire+0x8>)
 8001b56:	f000 b8b3 	b.w	8001cc0 <__retarget_lock_acquire_recursive>
 8001b5a:	bf00      	nop
 8001b5c:	200002f0 	.word	0x200002f0

08001b60 <__sfp_lock_release>:
 8001b60:	4801      	ldr	r0, [pc, #4]	; (8001b68 <__sfp_lock_release+0x8>)
 8001b62:	f000 b8ae 	b.w	8001cc2 <__retarget_lock_release_recursive>
 8001b66:	bf00      	nop
 8001b68:	200002f0 	.word	0x200002f0

08001b6c <__sinit_lock_acquire>:
 8001b6c:	4801      	ldr	r0, [pc, #4]	; (8001b74 <__sinit_lock_acquire+0x8>)
 8001b6e:	f000 b8a7 	b.w	8001cc0 <__retarget_lock_acquire_recursive>
 8001b72:	bf00      	nop
 8001b74:	200002eb 	.word	0x200002eb

08001b78 <__sinit_lock_release>:
 8001b78:	4801      	ldr	r0, [pc, #4]	; (8001b80 <__sinit_lock_release+0x8>)
 8001b7a:	f000 b8a2 	b.w	8001cc2 <__retarget_lock_release_recursive>
 8001b7e:	bf00      	nop
 8001b80:	200002eb 	.word	0x200002eb

08001b84 <__sinit>:
 8001b84:	b510      	push	{r4, lr}
 8001b86:	4604      	mov	r4, r0
 8001b88:	f7ff fff0 	bl	8001b6c <__sinit_lock_acquire>
 8001b8c:	69a3      	ldr	r3, [r4, #24]
 8001b8e:	b11b      	cbz	r3, 8001b98 <__sinit+0x14>
 8001b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b94:	f7ff bff0 	b.w	8001b78 <__sinit_lock_release>
 8001b98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <__sinit+0x68>)
 8001ba0:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <__sinit+0x6c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	62a2      	str	r2, [r4, #40]	; 0x28
 8001ba6:	42a3      	cmp	r3, r4
 8001ba8:	bf04      	itt	eq
 8001baa:	2301      	moveq	r3, #1
 8001bac:	61a3      	streq	r3, [r4, #24]
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f000 f820 	bl	8001bf4 <__sfp>
 8001bb4:	6060      	str	r0, [r4, #4]
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f000 f81c 	bl	8001bf4 <__sfp>
 8001bbc:	60a0      	str	r0, [r4, #8]
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f000 f818 	bl	8001bf4 <__sfp>
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60e0      	str	r0, [r4, #12]
 8001bc8:	2104      	movs	r1, #4
 8001bca:	6860      	ldr	r0, [r4, #4]
 8001bcc:	f7ff ff82 	bl	8001ad4 <std>
 8001bd0:	68a0      	ldr	r0, [r4, #8]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	2109      	movs	r1, #9
 8001bd6:	f7ff ff7d 	bl	8001ad4 <std>
 8001bda:	68e0      	ldr	r0, [r4, #12]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	2112      	movs	r1, #18
 8001be0:	f7ff ff78 	bl	8001ad4 <std>
 8001be4:	2301      	movs	r3, #1
 8001be6:	61a3      	str	r3, [r4, #24]
 8001be8:	e7d2      	b.n	8001b90 <__sinit+0xc>
 8001bea:	bf00      	nop
 8001bec:	08002d08 	.word	0x08002d08
 8001bf0:	08001b1d 	.word	0x08001b1d

08001bf4 <__sfp>:
 8001bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf6:	4607      	mov	r7, r0
 8001bf8:	f7ff ffac 	bl	8001b54 <__sfp_lock_acquire>
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <__sfp+0x84>)
 8001bfe:	681e      	ldr	r6, [r3, #0]
 8001c00:	69b3      	ldr	r3, [r6, #24]
 8001c02:	b913      	cbnz	r3, 8001c0a <__sfp+0x16>
 8001c04:	4630      	mov	r0, r6
 8001c06:	f7ff ffbd 	bl	8001b84 <__sinit>
 8001c0a:	3648      	adds	r6, #72	; 0x48
 8001c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	d503      	bpl.n	8001c1c <__sfp+0x28>
 8001c14:	6833      	ldr	r3, [r6, #0]
 8001c16:	b30b      	cbz	r3, 8001c5c <__sfp+0x68>
 8001c18:	6836      	ldr	r6, [r6, #0]
 8001c1a:	e7f7      	b.n	8001c0c <__sfp+0x18>
 8001c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c20:	b9d5      	cbnz	r5, 8001c58 <__sfp+0x64>
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <__sfp+0x88>)
 8001c24:	60e3      	str	r3, [r4, #12]
 8001c26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001c2a:	6665      	str	r5, [r4, #100]	; 0x64
 8001c2c:	f000 f847 	bl	8001cbe <__retarget_lock_init_recursive>
 8001c30:	f7ff ff96 	bl	8001b60 <__sfp_lock_release>
 8001c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001c3c:	6025      	str	r5, [r4, #0]
 8001c3e:	61a5      	str	r5, [r4, #24]
 8001c40:	2208      	movs	r2, #8
 8001c42:	4629      	mov	r1, r5
 8001c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001c48:	f7ff ff24 	bl	8001a94 <memset>
 8001c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001c54:	4620      	mov	r0, r4
 8001c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c58:	3468      	adds	r4, #104	; 0x68
 8001c5a:	e7d9      	b.n	8001c10 <__sfp+0x1c>
 8001c5c:	2104      	movs	r1, #4
 8001c5e:	4638      	mov	r0, r7
 8001c60:	f7ff ff62 	bl	8001b28 <__sfmoreglue>
 8001c64:	4604      	mov	r4, r0
 8001c66:	6030      	str	r0, [r6, #0]
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d1d5      	bne.n	8001c18 <__sfp+0x24>
 8001c6c:	f7ff ff78 	bl	8001b60 <__sfp_lock_release>
 8001c70:	230c      	movs	r3, #12
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	e7ee      	b.n	8001c54 <__sfp+0x60>
 8001c76:	bf00      	nop
 8001c78:	08002d08 	.word	0x08002d08
 8001c7c:	ffff0001 	.word	0xffff0001

08001c80 <_fwalk_reent>:
 8001c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c84:	4606      	mov	r6, r0
 8001c86:	4688      	mov	r8, r1
 8001c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c8c:	2700      	movs	r7, #0
 8001c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001c92:	f1b9 0901 	subs.w	r9, r9, #1
 8001c96:	d505      	bpl.n	8001ca4 <_fwalk_reent+0x24>
 8001c98:	6824      	ldr	r4, [r4, #0]
 8001c9a:	2c00      	cmp	r4, #0
 8001c9c:	d1f7      	bne.n	8001c8e <_fwalk_reent+0xe>
 8001c9e:	4638      	mov	r0, r7
 8001ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ca4:	89ab      	ldrh	r3, [r5, #12]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d907      	bls.n	8001cba <_fwalk_reent+0x3a>
 8001caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	d003      	beq.n	8001cba <_fwalk_reent+0x3a>
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	4630      	mov	r0, r6
 8001cb6:	47c0      	blx	r8
 8001cb8:	4307      	orrs	r7, r0
 8001cba:	3568      	adds	r5, #104	; 0x68
 8001cbc:	e7e9      	b.n	8001c92 <_fwalk_reent+0x12>

08001cbe <__retarget_lock_init_recursive>:
 8001cbe:	4770      	bx	lr

08001cc0 <__retarget_lock_acquire_recursive>:
 8001cc0:	4770      	bx	lr

08001cc2 <__retarget_lock_release_recursive>:
 8001cc2:	4770      	bx	lr

08001cc4 <_malloc_r>:
 8001cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc6:	1ccd      	adds	r5, r1, #3
 8001cc8:	f025 0503 	bic.w	r5, r5, #3
 8001ccc:	3508      	adds	r5, #8
 8001cce:	2d0c      	cmp	r5, #12
 8001cd0:	bf38      	it	cc
 8001cd2:	250c      	movcc	r5, #12
 8001cd4:	2d00      	cmp	r5, #0
 8001cd6:	4606      	mov	r6, r0
 8001cd8:	db01      	blt.n	8001cde <_malloc_r+0x1a>
 8001cda:	42a9      	cmp	r1, r5
 8001cdc:	d903      	bls.n	8001ce6 <_malloc_r+0x22>
 8001cde:	230c      	movs	r3, #12
 8001ce0:	6033      	str	r3, [r6, #0]
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ce6:	f000 fda1 	bl	800282c <__malloc_lock>
 8001cea:	4921      	ldr	r1, [pc, #132]	; (8001d70 <_malloc_r+0xac>)
 8001cec:	680a      	ldr	r2, [r1, #0]
 8001cee:	4614      	mov	r4, r2
 8001cf0:	b99c      	cbnz	r4, 8001d1a <_malloc_r+0x56>
 8001cf2:	4f20      	ldr	r7, [pc, #128]	; (8001d74 <_malloc_r+0xb0>)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b923      	cbnz	r3, 8001d02 <_malloc_r+0x3e>
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	4630      	mov	r0, r6
 8001cfc:	f000 fb28 	bl	8002350 <_sbrk_r>
 8001d00:	6038      	str	r0, [r7, #0]
 8001d02:	4629      	mov	r1, r5
 8001d04:	4630      	mov	r0, r6
 8001d06:	f000 fb23 	bl	8002350 <_sbrk_r>
 8001d0a:	1c43      	adds	r3, r0, #1
 8001d0c:	d123      	bne.n	8001d56 <_malloc_r+0x92>
 8001d0e:	230c      	movs	r3, #12
 8001d10:	6033      	str	r3, [r6, #0]
 8001d12:	4630      	mov	r0, r6
 8001d14:	f000 fd90 	bl	8002838 <__malloc_unlock>
 8001d18:	e7e3      	b.n	8001ce2 <_malloc_r+0x1e>
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	1b5b      	subs	r3, r3, r5
 8001d1e:	d417      	bmi.n	8001d50 <_malloc_r+0x8c>
 8001d20:	2b0b      	cmp	r3, #11
 8001d22:	d903      	bls.n	8001d2c <_malloc_r+0x68>
 8001d24:	6023      	str	r3, [r4, #0]
 8001d26:	441c      	add	r4, r3
 8001d28:	6025      	str	r5, [r4, #0]
 8001d2a:	e004      	b.n	8001d36 <_malloc_r+0x72>
 8001d2c:	6863      	ldr	r3, [r4, #4]
 8001d2e:	42a2      	cmp	r2, r4
 8001d30:	bf0c      	ite	eq
 8001d32:	600b      	streq	r3, [r1, #0]
 8001d34:	6053      	strne	r3, [r2, #4]
 8001d36:	4630      	mov	r0, r6
 8001d38:	f000 fd7e 	bl	8002838 <__malloc_unlock>
 8001d3c:	f104 000b 	add.w	r0, r4, #11
 8001d40:	1d23      	adds	r3, r4, #4
 8001d42:	f020 0007 	bic.w	r0, r0, #7
 8001d46:	1ac2      	subs	r2, r0, r3
 8001d48:	d0cc      	beq.n	8001ce4 <_malloc_r+0x20>
 8001d4a:	1a1b      	subs	r3, r3, r0
 8001d4c:	50a3      	str	r3, [r4, r2]
 8001d4e:	e7c9      	b.n	8001ce4 <_malloc_r+0x20>
 8001d50:	4622      	mov	r2, r4
 8001d52:	6864      	ldr	r4, [r4, #4]
 8001d54:	e7cc      	b.n	8001cf0 <_malloc_r+0x2c>
 8001d56:	1cc4      	adds	r4, r0, #3
 8001d58:	f024 0403 	bic.w	r4, r4, #3
 8001d5c:	42a0      	cmp	r0, r4
 8001d5e:	d0e3      	beq.n	8001d28 <_malloc_r+0x64>
 8001d60:	1a21      	subs	r1, r4, r0
 8001d62:	4630      	mov	r0, r6
 8001d64:	f000 faf4 	bl	8002350 <_sbrk_r>
 8001d68:	3001      	adds	r0, #1
 8001d6a:	d1dd      	bne.n	8001d28 <_malloc_r+0x64>
 8001d6c:	e7cf      	b.n	8001d0e <_malloc_r+0x4a>
 8001d6e:	bf00      	nop
 8001d70:	200000a0 	.word	0x200000a0
 8001d74:	200000a4 	.word	0x200000a4

08001d78 <__sfputc_r>:
 8001d78:	6893      	ldr	r3, [r2, #8]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	b410      	push	{r4}
 8001d80:	6093      	str	r3, [r2, #8]
 8001d82:	da07      	bge.n	8001d94 <__sfputc_r+0x1c>
 8001d84:	6994      	ldr	r4, [r2, #24]
 8001d86:	42a3      	cmp	r3, r4
 8001d88:	db01      	blt.n	8001d8e <__sfputc_r+0x16>
 8001d8a:	290a      	cmp	r1, #10
 8001d8c:	d102      	bne.n	8001d94 <__sfputc_r+0x1c>
 8001d8e:	bc10      	pop	{r4}
 8001d90:	f000 bb32 	b.w	80023f8 <__swbuf_r>
 8001d94:	6813      	ldr	r3, [r2, #0]
 8001d96:	1c58      	adds	r0, r3, #1
 8001d98:	6010      	str	r0, [r2, #0]
 8001d9a:	7019      	strb	r1, [r3, #0]
 8001d9c:	4608      	mov	r0, r1
 8001d9e:	bc10      	pop	{r4}
 8001da0:	4770      	bx	lr

08001da2 <__sfputs_r>:
 8001da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da4:	4606      	mov	r6, r0
 8001da6:	460f      	mov	r7, r1
 8001da8:	4614      	mov	r4, r2
 8001daa:	18d5      	adds	r5, r2, r3
 8001dac:	42ac      	cmp	r4, r5
 8001dae:	d101      	bne.n	8001db4 <__sfputs_r+0x12>
 8001db0:	2000      	movs	r0, #0
 8001db2:	e007      	b.n	8001dc4 <__sfputs_r+0x22>
 8001db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001db8:	463a      	mov	r2, r7
 8001dba:	4630      	mov	r0, r6
 8001dbc:	f7ff ffdc 	bl	8001d78 <__sfputc_r>
 8001dc0:	1c43      	adds	r3, r0, #1
 8001dc2:	d1f3      	bne.n	8001dac <__sfputs_r+0xa>
 8001dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001dc8 <_vfiprintf_r>:
 8001dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dcc:	460d      	mov	r5, r1
 8001dce:	b09d      	sub	sp, #116	; 0x74
 8001dd0:	4614      	mov	r4, r2
 8001dd2:	4698      	mov	r8, r3
 8001dd4:	4606      	mov	r6, r0
 8001dd6:	b118      	cbz	r0, 8001de0 <_vfiprintf_r+0x18>
 8001dd8:	6983      	ldr	r3, [r0, #24]
 8001dda:	b90b      	cbnz	r3, 8001de0 <_vfiprintf_r+0x18>
 8001ddc:	f7ff fed2 	bl	8001b84 <__sinit>
 8001de0:	4b89      	ldr	r3, [pc, #548]	; (8002008 <_vfiprintf_r+0x240>)
 8001de2:	429d      	cmp	r5, r3
 8001de4:	d11b      	bne.n	8001e1e <_vfiprintf_r+0x56>
 8001de6:	6875      	ldr	r5, [r6, #4]
 8001de8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001dea:	07d9      	lsls	r1, r3, #31
 8001dec:	d405      	bmi.n	8001dfa <_vfiprintf_r+0x32>
 8001dee:	89ab      	ldrh	r3, [r5, #12]
 8001df0:	059a      	lsls	r2, r3, #22
 8001df2:	d402      	bmi.n	8001dfa <_vfiprintf_r+0x32>
 8001df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001df6:	f7ff ff63 	bl	8001cc0 <__retarget_lock_acquire_recursive>
 8001dfa:	89ab      	ldrh	r3, [r5, #12]
 8001dfc:	071b      	lsls	r3, r3, #28
 8001dfe:	d501      	bpl.n	8001e04 <_vfiprintf_r+0x3c>
 8001e00:	692b      	ldr	r3, [r5, #16]
 8001e02:	b9eb      	cbnz	r3, 8001e40 <_vfiprintf_r+0x78>
 8001e04:	4629      	mov	r1, r5
 8001e06:	4630      	mov	r0, r6
 8001e08:	f000 fb5a 	bl	80024c0 <__swsetup_r>
 8001e0c:	b1c0      	cbz	r0, 8001e40 <_vfiprintf_r+0x78>
 8001e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e10:	07dc      	lsls	r4, r3, #31
 8001e12:	d50e      	bpl.n	8001e32 <_vfiprintf_r+0x6a>
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	b01d      	add	sp, #116	; 0x74
 8001e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e1e:	4b7b      	ldr	r3, [pc, #492]	; (800200c <_vfiprintf_r+0x244>)
 8001e20:	429d      	cmp	r5, r3
 8001e22:	d101      	bne.n	8001e28 <_vfiprintf_r+0x60>
 8001e24:	68b5      	ldr	r5, [r6, #8]
 8001e26:	e7df      	b.n	8001de8 <_vfiprintf_r+0x20>
 8001e28:	4b79      	ldr	r3, [pc, #484]	; (8002010 <_vfiprintf_r+0x248>)
 8001e2a:	429d      	cmp	r5, r3
 8001e2c:	bf08      	it	eq
 8001e2e:	68f5      	ldreq	r5, [r6, #12]
 8001e30:	e7da      	b.n	8001de8 <_vfiprintf_r+0x20>
 8001e32:	89ab      	ldrh	r3, [r5, #12]
 8001e34:	0598      	lsls	r0, r3, #22
 8001e36:	d4ed      	bmi.n	8001e14 <_vfiprintf_r+0x4c>
 8001e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e3a:	f7ff ff42 	bl	8001cc2 <__retarget_lock_release_recursive>
 8001e3e:	e7e9      	b.n	8001e14 <_vfiprintf_r+0x4c>
 8001e40:	2300      	movs	r3, #0
 8001e42:	9309      	str	r3, [sp, #36]	; 0x24
 8001e44:	2320      	movs	r3, #32
 8001e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e4e:	2330      	movs	r3, #48	; 0x30
 8001e50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002014 <_vfiprintf_r+0x24c>
 8001e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e58:	f04f 0901 	mov.w	r9, #1
 8001e5c:	4623      	mov	r3, r4
 8001e5e:	469a      	mov	sl, r3
 8001e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e64:	b10a      	cbz	r2, 8001e6a <_vfiprintf_r+0xa2>
 8001e66:	2a25      	cmp	r2, #37	; 0x25
 8001e68:	d1f9      	bne.n	8001e5e <_vfiprintf_r+0x96>
 8001e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8001e6e:	d00b      	beq.n	8001e88 <_vfiprintf_r+0xc0>
 8001e70:	465b      	mov	r3, fp
 8001e72:	4622      	mov	r2, r4
 8001e74:	4629      	mov	r1, r5
 8001e76:	4630      	mov	r0, r6
 8001e78:	f7ff ff93 	bl	8001da2 <__sfputs_r>
 8001e7c:	3001      	adds	r0, #1
 8001e7e:	f000 80aa 	beq.w	8001fd6 <_vfiprintf_r+0x20e>
 8001e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e84:	445a      	add	r2, fp
 8001e86:	9209      	str	r2, [sp, #36]	; 0x24
 8001e88:	f89a 3000 	ldrb.w	r3, [sl]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80a2 	beq.w	8001fd6 <_vfiprintf_r+0x20e>
 8001e92:	2300      	movs	r3, #0
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e9c:	f10a 0a01 	add.w	sl, sl, #1
 8001ea0:	9304      	str	r3, [sp, #16]
 8001ea2:	9307      	str	r3, [sp, #28]
 8001ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8001eaa:	4654      	mov	r4, sl
 8001eac:	2205      	movs	r2, #5
 8001eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001eb2:	4858      	ldr	r0, [pc, #352]	; (8002014 <_vfiprintf_r+0x24c>)
 8001eb4:	f7fe f99c 	bl	80001f0 <memchr>
 8001eb8:	9a04      	ldr	r2, [sp, #16]
 8001eba:	b9d8      	cbnz	r0, 8001ef4 <_vfiprintf_r+0x12c>
 8001ebc:	06d1      	lsls	r1, r2, #27
 8001ebe:	bf44      	itt	mi
 8001ec0:	2320      	movmi	r3, #32
 8001ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ec6:	0713      	lsls	r3, r2, #28
 8001ec8:	bf44      	itt	mi
 8001eca:	232b      	movmi	r3, #43	; 0x2b
 8001ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8001ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8001ed6:	d015      	beq.n	8001f04 <_vfiprintf_r+0x13c>
 8001ed8:	9a07      	ldr	r2, [sp, #28]
 8001eda:	4654      	mov	r4, sl
 8001edc:	2000      	movs	r0, #0
 8001ede:	f04f 0c0a 	mov.w	ip, #10
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ee8:	3b30      	subs	r3, #48	; 0x30
 8001eea:	2b09      	cmp	r3, #9
 8001eec:	d94e      	bls.n	8001f8c <_vfiprintf_r+0x1c4>
 8001eee:	b1b0      	cbz	r0, 8001f1e <_vfiprintf_r+0x156>
 8001ef0:	9207      	str	r2, [sp, #28]
 8001ef2:	e014      	b.n	8001f1e <_vfiprintf_r+0x156>
 8001ef4:	eba0 0308 	sub.w	r3, r0, r8
 8001ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8001efc:	4313      	orrs	r3, r2
 8001efe:	9304      	str	r3, [sp, #16]
 8001f00:	46a2      	mov	sl, r4
 8001f02:	e7d2      	b.n	8001eaa <_vfiprintf_r+0xe2>
 8001f04:	9b03      	ldr	r3, [sp, #12]
 8001f06:	1d19      	adds	r1, r3, #4
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	9103      	str	r1, [sp, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bfbb      	ittet	lt
 8001f10:	425b      	neglt	r3, r3
 8001f12:	f042 0202 	orrlt.w	r2, r2, #2
 8001f16:	9307      	strge	r3, [sp, #28]
 8001f18:	9307      	strlt	r3, [sp, #28]
 8001f1a:	bfb8      	it	lt
 8001f1c:	9204      	strlt	r2, [sp, #16]
 8001f1e:	7823      	ldrb	r3, [r4, #0]
 8001f20:	2b2e      	cmp	r3, #46	; 0x2e
 8001f22:	d10c      	bne.n	8001f3e <_vfiprintf_r+0x176>
 8001f24:	7863      	ldrb	r3, [r4, #1]
 8001f26:	2b2a      	cmp	r3, #42	; 0x2a
 8001f28:	d135      	bne.n	8001f96 <_vfiprintf_r+0x1ce>
 8001f2a:	9b03      	ldr	r3, [sp, #12]
 8001f2c:	1d1a      	adds	r2, r3, #4
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	9203      	str	r2, [sp, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bfb8      	it	lt
 8001f36:	f04f 33ff 	movlt.w	r3, #4294967295
 8001f3a:	3402      	adds	r4, #2
 8001f3c:	9305      	str	r3, [sp, #20]
 8001f3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002024 <_vfiprintf_r+0x25c>
 8001f42:	7821      	ldrb	r1, [r4, #0]
 8001f44:	2203      	movs	r2, #3
 8001f46:	4650      	mov	r0, sl
 8001f48:	f7fe f952 	bl	80001f0 <memchr>
 8001f4c:	b140      	cbz	r0, 8001f60 <_vfiprintf_r+0x198>
 8001f4e:	2340      	movs	r3, #64	; 0x40
 8001f50:	eba0 000a 	sub.w	r0, r0, sl
 8001f54:	fa03 f000 	lsl.w	r0, r3, r0
 8001f58:	9b04      	ldr	r3, [sp, #16]
 8001f5a:	4303      	orrs	r3, r0
 8001f5c:	3401      	adds	r4, #1
 8001f5e:	9304      	str	r3, [sp, #16]
 8001f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f64:	482c      	ldr	r0, [pc, #176]	; (8002018 <_vfiprintf_r+0x250>)
 8001f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f6a:	2206      	movs	r2, #6
 8001f6c:	f7fe f940 	bl	80001f0 <memchr>
 8001f70:	2800      	cmp	r0, #0
 8001f72:	d03f      	beq.n	8001ff4 <_vfiprintf_r+0x22c>
 8001f74:	4b29      	ldr	r3, [pc, #164]	; (800201c <_vfiprintf_r+0x254>)
 8001f76:	bb1b      	cbnz	r3, 8001fc0 <_vfiprintf_r+0x1f8>
 8001f78:	9b03      	ldr	r3, [sp, #12]
 8001f7a:	3307      	adds	r3, #7
 8001f7c:	f023 0307 	bic.w	r3, r3, #7
 8001f80:	3308      	adds	r3, #8
 8001f82:	9303      	str	r3, [sp, #12]
 8001f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f86:	443b      	add	r3, r7
 8001f88:	9309      	str	r3, [sp, #36]	; 0x24
 8001f8a:	e767      	b.n	8001e5c <_vfiprintf_r+0x94>
 8001f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f90:	460c      	mov	r4, r1
 8001f92:	2001      	movs	r0, #1
 8001f94:	e7a5      	b.n	8001ee2 <_vfiprintf_r+0x11a>
 8001f96:	2300      	movs	r3, #0
 8001f98:	3401      	adds	r4, #1
 8001f9a:	9305      	str	r3, [sp, #20]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f04f 0c0a 	mov.w	ip, #10
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001fa8:	3a30      	subs	r2, #48	; 0x30
 8001faa:	2a09      	cmp	r2, #9
 8001fac:	d903      	bls.n	8001fb6 <_vfiprintf_r+0x1ee>
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0c5      	beq.n	8001f3e <_vfiprintf_r+0x176>
 8001fb2:	9105      	str	r1, [sp, #20]
 8001fb4:	e7c3      	b.n	8001f3e <_vfiprintf_r+0x176>
 8001fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8001fba:	4604      	mov	r4, r0
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e7f0      	b.n	8001fa2 <_vfiprintf_r+0x1da>
 8001fc0:	ab03      	add	r3, sp, #12
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	462a      	mov	r2, r5
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <_vfiprintf_r+0x258>)
 8001fc8:	a904      	add	r1, sp, #16
 8001fca:	4630      	mov	r0, r6
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	4607      	mov	r7, r0
 8001fd2:	1c78      	adds	r0, r7, #1
 8001fd4:	d1d6      	bne.n	8001f84 <_vfiprintf_r+0x1bc>
 8001fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001fd8:	07d9      	lsls	r1, r3, #31
 8001fda:	d405      	bmi.n	8001fe8 <_vfiprintf_r+0x220>
 8001fdc:	89ab      	ldrh	r3, [r5, #12]
 8001fde:	059a      	lsls	r2, r3, #22
 8001fe0:	d402      	bmi.n	8001fe8 <_vfiprintf_r+0x220>
 8001fe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001fe4:	f7ff fe6d 	bl	8001cc2 <__retarget_lock_release_recursive>
 8001fe8:	89ab      	ldrh	r3, [r5, #12]
 8001fea:	065b      	lsls	r3, r3, #25
 8001fec:	f53f af12 	bmi.w	8001e14 <_vfiprintf_r+0x4c>
 8001ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ff2:	e711      	b.n	8001e18 <_vfiprintf_r+0x50>
 8001ff4:	ab03      	add	r3, sp, #12
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	462a      	mov	r2, r5
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <_vfiprintf_r+0x258>)
 8001ffc:	a904      	add	r1, sp, #16
 8001ffe:	4630      	mov	r0, r6
 8002000:	f000 f880 	bl	8002104 <_printf_i>
 8002004:	e7e4      	b.n	8001fd0 <_vfiprintf_r+0x208>
 8002006:	bf00      	nop
 8002008:	08002d2c 	.word	0x08002d2c
 800200c:	08002d4c 	.word	0x08002d4c
 8002010:	08002d0c 	.word	0x08002d0c
 8002014:	08002d6c 	.word	0x08002d6c
 8002018:	08002d76 	.word	0x08002d76
 800201c:	00000000 	.word	0x00000000
 8002020:	08001da3 	.word	0x08001da3
 8002024:	08002d72 	.word	0x08002d72

08002028 <_printf_common>:
 8002028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800202c:	4616      	mov	r6, r2
 800202e:	4699      	mov	r9, r3
 8002030:	688a      	ldr	r2, [r1, #8]
 8002032:	690b      	ldr	r3, [r1, #16]
 8002034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002038:	4293      	cmp	r3, r2
 800203a:	bfb8      	it	lt
 800203c:	4613      	movlt	r3, r2
 800203e:	6033      	str	r3, [r6, #0]
 8002040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002044:	4607      	mov	r7, r0
 8002046:	460c      	mov	r4, r1
 8002048:	b10a      	cbz	r2, 800204e <_printf_common+0x26>
 800204a:	3301      	adds	r3, #1
 800204c:	6033      	str	r3, [r6, #0]
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	0699      	lsls	r1, r3, #26
 8002052:	bf42      	ittt	mi
 8002054:	6833      	ldrmi	r3, [r6, #0]
 8002056:	3302      	addmi	r3, #2
 8002058:	6033      	strmi	r3, [r6, #0]
 800205a:	6825      	ldr	r5, [r4, #0]
 800205c:	f015 0506 	ands.w	r5, r5, #6
 8002060:	d106      	bne.n	8002070 <_printf_common+0x48>
 8002062:	f104 0a19 	add.w	sl, r4, #25
 8002066:	68e3      	ldr	r3, [r4, #12]
 8002068:	6832      	ldr	r2, [r6, #0]
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	42ab      	cmp	r3, r5
 800206e:	dc26      	bgt.n	80020be <_printf_common+0x96>
 8002070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002074:	1e13      	subs	r3, r2, #0
 8002076:	6822      	ldr	r2, [r4, #0]
 8002078:	bf18      	it	ne
 800207a:	2301      	movne	r3, #1
 800207c:	0692      	lsls	r2, r2, #26
 800207e:	d42b      	bmi.n	80020d8 <_printf_common+0xb0>
 8002080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002084:	4649      	mov	r1, r9
 8002086:	4638      	mov	r0, r7
 8002088:	47c0      	blx	r8
 800208a:	3001      	adds	r0, #1
 800208c:	d01e      	beq.n	80020cc <_printf_common+0xa4>
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	68e5      	ldr	r5, [r4, #12]
 8002092:	6832      	ldr	r2, [r6, #0]
 8002094:	f003 0306 	and.w	r3, r3, #6
 8002098:	2b04      	cmp	r3, #4
 800209a:	bf08      	it	eq
 800209c:	1aad      	subeq	r5, r5, r2
 800209e:	68a3      	ldr	r3, [r4, #8]
 80020a0:	6922      	ldr	r2, [r4, #16]
 80020a2:	bf0c      	ite	eq
 80020a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020a8:	2500      	movne	r5, #0
 80020aa:	4293      	cmp	r3, r2
 80020ac:	bfc4      	itt	gt
 80020ae:	1a9b      	subgt	r3, r3, r2
 80020b0:	18ed      	addgt	r5, r5, r3
 80020b2:	2600      	movs	r6, #0
 80020b4:	341a      	adds	r4, #26
 80020b6:	42b5      	cmp	r5, r6
 80020b8:	d11a      	bne.n	80020f0 <_printf_common+0xc8>
 80020ba:	2000      	movs	r0, #0
 80020bc:	e008      	b.n	80020d0 <_printf_common+0xa8>
 80020be:	2301      	movs	r3, #1
 80020c0:	4652      	mov	r2, sl
 80020c2:	4649      	mov	r1, r9
 80020c4:	4638      	mov	r0, r7
 80020c6:	47c0      	blx	r8
 80020c8:	3001      	adds	r0, #1
 80020ca:	d103      	bne.n	80020d4 <_printf_common+0xac>
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020d4:	3501      	adds	r5, #1
 80020d6:	e7c6      	b.n	8002066 <_printf_common+0x3e>
 80020d8:	18e1      	adds	r1, r4, r3
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	2030      	movs	r0, #48	; 0x30
 80020de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80020e2:	4422      	add	r2, r4
 80020e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80020e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80020ec:	3302      	adds	r3, #2
 80020ee:	e7c7      	b.n	8002080 <_printf_common+0x58>
 80020f0:	2301      	movs	r3, #1
 80020f2:	4622      	mov	r2, r4
 80020f4:	4649      	mov	r1, r9
 80020f6:	4638      	mov	r0, r7
 80020f8:	47c0      	blx	r8
 80020fa:	3001      	adds	r0, #1
 80020fc:	d0e6      	beq.n	80020cc <_printf_common+0xa4>
 80020fe:	3601      	adds	r6, #1
 8002100:	e7d9      	b.n	80020b6 <_printf_common+0x8e>
	...

08002104 <_printf_i>:
 8002104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002108:	460c      	mov	r4, r1
 800210a:	4691      	mov	r9, r2
 800210c:	7e27      	ldrb	r7, [r4, #24]
 800210e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002110:	2f78      	cmp	r7, #120	; 0x78
 8002112:	4680      	mov	r8, r0
 8002114:	469a      	mov	sl, r3
 8002116:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800211a:	d807      	bhi.n	800212c <_printf_i+0x28>
 800211c:	2f62      	cmp	r7, #98	; 0x62
 800211e:	d80a      	bhi.n	8002136 <_printf_i+0x32>
 8002120:	2f00      	cmp	r7, #0
 8002122:	f000 80d8 	beq.w	80022d6 <_printf_i+0x1d2>
 8002126:	2f58      	cmp	r7, #88	; 0x58
 8002128:	f000 80a3 	beq.w	8002272 <_printf_i+0x16e>
 800212c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002134:	e03a      	b.n	80021ac <_printf_i+0xa8>
 8002136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800213a:	2b15      	cmp	r3, #21
 800213c:	d8f6      	bhi.n	800212c <_printf_i+0x28>
 800213e:	a001      	add	r0, pc, #4	; (adr r0, 8002144 <_printf_i+0x40>)
 8002140:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002144:	0800219d 	.word	0x0800219d
 8002148:	080021b1 	.word	0x080021b1
 800214c:	0800212d 	.word	0x0800212d
 8002150:	0800212d 	.word	0x0800212d
 8002154:	0800212d 	.word	0x0800212d
 8002158:	0800212d 	.word	0x0800212d
 800215c:	080021b1 	.word	0x080021b1
 8002160:	0800212d 	.word	0x0800212d
 8002164:	0800212d 	.word	0x0800212d
 8002168:	0800212d 	.word	0x0800212d
 800216c:	0800212d 	.word	0x0800212d
 8002170:	080022bd 	.word	0x080022bd
 8002174:	080021e1 	.word	0x080021e1
 8002178:	0800229f 	.word	0x0800229f
 800217c:	0800212d 	.word	0x0800212d
 8002180:	0800212d 	.word	0x0800212d
 8002184:	080022df 	.word	0x080022df
 8002188:	0800212d 	.word	0x0800212d
 800218c:	080021e1 	.word	0x080021e1
 8002190:	0800212d 	.word	0x0800212d
 8002194:	0800212d 	.word	0x0800212d
 8002198:	080022a7 	.word	0x080022a7
 800219c:	680b      	ldr	r3, [r1, #0]
 800219e:	1d1a      	adds	r2, r3, #4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	600a      	str	r2, [r1, #0]
 80021a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80021a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0a3      	b.n	80022f8 <_printf_i+0x1f4>
 80021b0:	6825      	ldr	r5, [r4, #0]
 80021b2:	6808      	ldr	r0, [r1, #0]
 80021b4:	062e      	lsls	r6, r5, #24
 80021b6:	f100 0304 	add.w	r3, r0, #4
 80021ba:	d50a      	bpl.n	80021d2 <_printf_i+0xce>
 80021bc:	6805      	ldr	r5, [r0, #0]
 80021be:	600b      	str	r3, [r1, #0]
 80021c0:	2d00      	cmp	r5, #0
 80021c2:	da03      	bge.n	80021cc <_printf_i+0xc8>
 80021c4:	232d      	movs	r3, #45	; 0x2d
 80021c6:	426d      	negs	r5, r5
 80021c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021cc:	485e      	ldr	r0, [pc, #376]	; (8002348 <_printf_i+0x244>)
 80021ce:	230a      	movs	r3, #10
 80021d0:	e019      	b.n	8002206 <_printf_i+0x102>
 80021d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80021d6:	6805      	ldr	r5, [r0, #0]
 80021d8:	600b      	str	r3, [r1, #0]
 80021da:	bf18      	it	ne
 80021dc:	b22d      	sxthne	r5, r5
 80021de:	e7ef      	b.n	80021c0 <_printf_i+0xbc>
 80021e0:	680b      	ldr	r3, [r1, #0]
 80021e2:	6825      	ldr	r5, [r4, #0]
 80021e4:	1d18      	adds	r0, r3, #4
 80021e6:	6008      	str	r0, [r1, #0]
 80021e8:	0628      	lsls	r0, r5, #24
 80021ea:	d501      	bpl.n	80021f0 <_printf_i+0xec>
 80021ec:	681d      	ldr	r5, [r3, #0]
 80021ee:	e002      	b.n	80021f6 <_printf_i+0xf2>
 80021f0:	0669      	lsls	r1, r5, #25
 80021f2:	d5fb      	bpl.n	80021ec <_printf_i+0xe8>
 80021f4:	881d      	ldrh	r5, [r3, #0]
 80021f6:	4854      	ldr	r0, [pc, #336]	; (8002348 <_printf_i+0x244>)
 80021f8:	2f6f      	cmp	r7, #111	; 0x6f
 80021fa:	bf0c      	ite	eq
 80021fc:	2308      	moveq	r3, #8
 80021fe:	230a      	movne	r3, #10
 8002200:	2100      	movs	r1, #0
 8002202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002206:	6866      	ldr	r6, [r4, #4]
 8002208:	60a6      	str	r6, [r4, #8]
 800220a:	2e00      	cmp	r6, #0
 800220c:	bfa2      	ittt	ge
 800220e:	6821      	ldrge	r1, [r4, #0]
 8002210:	f021 0104 	bicge.w	r1, r1, #4
 8002214:	6021      	strge	r1, [r4, #0]
 8002216:	b90d      	cbnz	r5, 800221c <_printf_i+0x118>
 8002218:	2e00      	cmp	r6, #0
 800221a:	d04d      	beq.n	80022b8 <_printf_i+0x1b4>
 800221c:	4616      	mov	r6, r2
 800221e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002222:	fb03 5711 	mls	r7, r3, r1, r5
 8002226:	5dc7      	ldrb	r7, [r0, r7]
 8002228:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800222c:	462f      	mov	r7, r5
 800222e:	42bb      	cmp	r3, r7
 8002230:	460d      	mov	r5, r1
 8002232:	d9f4      	bls.n	800221e <_printf_i+0x11a>
 8002234:	2b08      	cmp	r3, #8
 8002236:	d10b      	bne.n	8002250 <_printf_i+0x14c>
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	07df      	lsls	r7, r3, #31
 800223c:	d508      	bpl.n	8002250 <_printf_i+0x14c>
 800223e:	6923      	ldr	r3, [r4, #16]
 8002240:	6861      	ldr	r1, [r4, #4]
 8002242:	4299      	cmp	r1, r3
 8002244:	bfde      	ittt	le
 8002246:	2330      	movle	r3, #48	; 0x30
 8002248:	f806 3c01 	strble.w	r3, [r6, #-1]
 800224c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002250:	1b92      	subs	r2, r2, r6
 8002252:	6122      	str	r2, [r4, #16]
 8002254:	f8cd a000 	str.w	sl, [sp]
 8002258:	464b      	mov	r3, r9
 800225a:	aa03      	add	r2, sp, #12
 800225c:	4621      	mov	r1, r4
 800225e:	4640      	mov	r0, r8
 8002260:	f7ff fee2 	bl	8002028 <_printf_common>
 8002264:	3001      	adds	r0, #1
 8002266:	d14c      	bne.n	8002302 <_printf_i+0x1fe>
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	b004      	add	sp, #16
 800226e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002272:	4835      	ldr	r0, [pc, #212]	; (8002348 <_printf_i+0x244>)
 8002274:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	680e      	ldr	r6, [r1, #0]
 800227c:	061f      	lsls	r7, r3, #24
 800227e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002282:	600e      	str	r6, [r1, #0]
 8002284:	d514      	bpl.n	80022b0 <_printf_i+0x1ac>
 8002286:	07d9      	lsls	r1, r3, #31
 8002288:	bf44      	itt	mi
 800228a:	f043 0320 	orrmi.w	r3, r3, #32
 800228e:	6023      	strmi	r3, [r4, #0]
 8002290:	b91d      	cbnz	r5, 800229a <_printf_i+0x196>
 8002292:	6823      	ldr	r3, [r4, #0]
 8002294:	f023 0320 	bic.w	r3, r3, #32
 8002298:	6023      	str	r3, [r4, #0]
 800229a:	2310      	movs	r3, #16
 800229c:	e7b0      	b.n	8002200 <_printf_i+0xfc>
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	f043 0320 	orr.w	r3, r3, #32
 80022a4:	6023      	str	r3, [r4, #0]
 80022a6:	2378      	movs	r3, #120	; 0x78
 80022a8:	4828      	ldr	r0, [pc, #160]	; (800234c <_printf_i+0x248>)
 80022aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80022ae:	e7e3      	b.n	8002278 <_printf_i+0x174>
 80022b0:	065e      	lsls	r6, r3, #25
 80022b2:	bf48      	it	mi
 80022b4:	b2ad      	uxthmi	r5, r5
 80022b6:	e7e6      	b.n	8002286 <_printf_i+0x182>
 80022b8:	4616      	mov	r6, r2
 80022ba:	e7bb      	b.n	8002234 <_printf_i+0x130>
 80022bc:	680b      	ldr	r3, [r1, #0]
 80022be:	6826      	ldr	r6, [r4, #0]
 80022c0:	6960      	ldr	r0, [r4, #20]
 80022c2:	1d1d      	adds	r5, r3, #4
 80022c4:	600d      	str	r5, [r1, #0]
 80022c6:	0635      	lsls	r5, r6, #24
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	d501      	bpl.n	80022d0 <_printf_i+0x1cc>
 80022cc:	6018      	str	r0, [r3, #0]
 80022ce:	e002      	b.n	80022d6 <_printf_i+0x1d2>
 80022d0:	0671      	lsls	r1, r6, #25
 80022d2:	d5fb      	bpl.n	80022cc <_printf_i+0x1c8>
 80022d4:	8018      	strh	r0, [r3, #0]
 80022d6:	2300      	movs	r3, #0
 80022d8:	6123      	str	r3, [r4, #16]
 80022da:	4616      	mov	r6, r2
 80022dc:	e7ba      	b.n	8002254 <_printf_i+0x150>
 80022de:	680b      	ldr	r3, [r1, #0]
 80022e0:	1d1a      	adds	r2, r3, #4
 80022e2:	600a      	str	r2, [r1, #0]
 80022e4:	681e      	ldr	r6, [r3, #0]
 80022e6:	6862      	ldr	r2, [r4, #4]
 80022e8:	2100      	movs	r1, #0
 80022ea:	4630      	mov	r0, r6
 80022ec:	f7fd ff80 	bl	80001f0 <memchr>
 80022f0:	b108      	cbz	r0, 80022f6 <_printf_i+0x1f2>
 80022f2:	1b80      	subs	r0, r0, r6
 80022f4:	6060      	str	r0, [r4, #4]
 80022f6:	6863      	ldr	r3, [r4, #4]
 80022f8:	6123      	str	r3, [r4, #16]
 80022fa:	2300      	movs	r3, #0
 80022fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002300:	e7a8      	b.n	8002254 <_printf_i+0x150>
 8002302:	6923      	ldr	r3, [r4, #16]
 8002304:	4632      	mov	r2, r6
 8002306:	4649      	mov	r1, r9
 8002308:	4640      	mov	r0, r8
 800230a:	47d0      	blx	sl
 800230c:	3001      	adds	r0, #1
 800230e:	d0ab      	beq.n	8002268 <_printf_i+0x164>
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	079b      	lsls	r3, r3, #30
 8002314:	d413      	bmi.n	800233e <_printf_i+0x23a>
 8002316:	68e0      	ldr	r0, [r4, #12]
 8002318:	9b03      	ldr	r3, [sp, #12]
 800231a:	4298      	cmp	r0, r3
 800231c:	bfb8      	it	lt
 800231e:	4618      	movlt	r0, r3
 8002320:	e7a4      	b.n	800226c <_printf_i+0x168>
 8002322:	2301      	movs	r3, #1
 8002324:	4632      	mov	r2, r6
 8002326:	4649      	mov	r1, r9
 8002328:	4640      	mov	r0, r8
 800232a:	47d0      	blx	sl
 800232c:	3001      	adds	r0, #1
 800232e:	d09b      	beq.n	8002268 <_printf_i+0x164>
 8002330:	3501      	adds	r5, #1
 8002332:	68e3      	ldr	r3, [r4, #12]
 8002334:	9903      	ldr	r1, [sp, #12]
 8002336:	1a5b      	subs	r3, r3, r1
 8002338:	42ab      	cmp	r3, r5
 800233a:	dcf2      	bgt.n	8002322 <_printf_i+0x21e>
 800233c:	e7eb      	b.n	8002316 <_printf_i+0x212>
 800233e:	2500      	movs	r5, #0
 8002340:	f104 0619 	add.w	r6, r4, #25
 8002344:	e7f5      	b.n	8002332 <_printf_i+0x22e>
 8002346:	bf00      	nop
 8002348:	08002d7d 	.word	0x08002d7d
 800234c:	08002d8e 	.word	0x08002d8e

08002350 <_sbrk_r>:
 8002350:	b538      	push	{r3, r4, r5, lr}
 8002352:	4d06      	ldr	r5, [pc, #24]	; (800236c <_sbrk_r+0x1c>)
 8002354:	2300      	movs	r3, #0
 8002356:	4604      	mov	r4, r0
 8002358:	4608      	mov	r0, r1
 800235a:	602b      	str	r3, [r5, #0]
 800235c:	f7fe f8ee 	bl	800053c <_sbrk>
 8002360:	1c43      	adds	r3, r0, #1
 8002362:	d102      	bne.n	800236a <_sbrk_r+0x1a>
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	b103      	cbz	r3, 800236a <_sbrk_r+0x1a>
 8002368:	6023      	str	r3, [r4, #0]
 800236a:	bd38      	pop	{r3, r4, r5, pc}
 800236c:	200002f4 	.word	0x200002f4

08002370 <__sread>:
 8002370:	b510      	push	{r4, lr}
 8002372:	460c      	mov	r4, r1
 8002374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002378:	f000 fab2 	bl	80028e0 <_read_r>
 800237c:	2800      	cmp	r0, #0
 800237e:	bfab      	itete	ge
 8002380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002382:	89a3      	ldrhlt	r3, [r4, #12]
 8002384:	181b      	addge	r3, r3, r0
 8002386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800238a:	bfac      	ite	ge
 800238c:	6563      	strge	r3, [r4, #84]	; 0x54
 800238e:	81a3      	strhlt	r3, [r4, #12]
 8002390:	bd10      	pop	{r4, pc}

08002392 <__swrite>:
 8002392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002396:	461f      	mov	r7, r3
 8002398:	898b      	ldrh	r3, [r1, #12]
 800239a:	05db      	lsls	r3, r3, #23
 800239c:	4605      	mov	r5, r0
 800239e:	460c      	mov	r4, r1
 80023a0:	4616      	mov	r6, r2
 80023a2:	d505      	bpl.n	80023b0 <__swrite+0x1e>
 80023a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023a8:	2302      	movs	r3, #2
 80023aa:	2200      	movs	r2, #0
 80023ac:	f000 f9c8 	bl	8002740 <_lseek_r>
 80023b0:	89a3      	ldrh	r3, [r4, #12]
 80023b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023ba:	81a3      	strh	r3, [r4, #12]
 80023bc:	4632      	mov	r2, r6
 80023be:	463b      	mov	r3, r7
 80023c0:	4628      	mov	r0, r5
 80023c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023c6:	f000 b869 	b.w	800249c <_write_r>

080023ca <__sseek>:
 80023ca:	b510      	push	{r4, lr}
 80023cc:	460c      	mov	r4, r1
 80023ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023d2:	f000 f9b5 	bl	8002740 <_lseek_r>
 80023d6:	1c43      	adds	r3, r0, #1
 80023d8:	89a3      	ldrh	r3, [r4, #12]
 80023da:	bf15      	itete	ne
 80023dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80023de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80023e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80023e6:	81a3      	strheq	r3, [r4, #12]
 80023e8:	bf18      	it	ne
 80023ea:	81a3      	strhne	r3, [r4, #12]
 80023ec:	bd10      	pop	{r4, pc}

080023ee <__sclose>:
 80023ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023f2:	f000 b8d3 	b.w	800259c <_close_r>
	...

080023f8 <__swbuf_r>:
 80023f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fa:	460e      	mov	r6, r1
 80023fc:	4614      	mov	r4, r2
 80023fe:	4605      	mov	r5, r0
 8002400:	b118      	cbz	r0, 800240a <__swbuf_r+0x12>
 8002402:	6983      	ldr	r3, [r0, #24]
 8002404:	b90b      	cbnz	r3, 800240a <__swbuf_r+0x12>
 8002406:	f7ff fbbd 	bl	8001b84 <__sinit>
 800240a:	4b21      	ldr	r3, [pc, #132]	; (8002490 <__swbuf_r+0x98>)
 800240c:	429c      	cmp	r4, r3
 800240e:	d12b      	bne.n	8002468 <__swbuf_r+0x70>
 8002410:	686c      	ldr	r4, [r5, #4]
 8002412:	69a3      	ldr	r3, [r4, #24]
 8002414:	60a3      	str	r3, [r4, #8]
 8002416:	89a3      	ldrh	r3, [r4, #12]
 8002418:	071a      	lsls	r2, r3, #28
 800241a:	d52f      	bpl.n	800247c <__swbuf_r+0x84>
 800241c:	6923      	ldr	r3, [r4, #16]
 800241e:	b36b      	cbz	r3, 800247c <__swbuf_r+0x84>
 8002420:	6923      	ldr	r3, [r4, #16]
 8002422:	6820      	ldr	r0, [r4, #0]
 8002424:	1ac0      	subs	r0, r0, r3
 8002426:	6963      	ldr	r3, [r4, #20]
 8002428:	b2f6      	uxtb	r6, r6
 800242a:	4283      	cmp	r3, r0
 800242c:	4637      	mov	r7, r6
 800242e:	dc04      	bgt.n	800243a <__swbuf_r+0x42>
 8002430:	4621      	mov	r1, r4
 8002432:	4628      	mov	r0, r5
 8002434:	f000 f948 	bl	80026c8 <_fflush_r>
 8002438:	bb30      	cbnz	r0, 8002488 <__swbuf_r+0x90>
 800243a:	68a3      	ldr	r3, [r4, #8]
 800243c:	3b01      	subs	r3, #1
 800243e:	60a3      	str	r3, [r4, #8]
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	6022      	str	r2, [r4, #0]
 8002446:	701e      	strb	r6, [r3, #0]
 8002448:	6963      	ldr	r3, [r4, #20]
 800244a:	3001      	adds	r0, #1
 800244c:	4283      	cmp	r3, r0
 800244e:	d004      	beq.n	800245a <__swbuf_r+0x62>
 8002450:	89a3      	ldrh	r3, [r4, #12]
 8002452:	07db      	lsls	r3, r3, #31
 8002454:	d506      	bpl.n	8002464 <__swbuf_r+0x6c>
 8002456:	2e0a      	cmp	r6, #10
 8002458:	d104      	bne.n	8002464 <__swbuf_r+0x6c>
 800245a:	4621      	mov	r1, r4
 800245c:	4628      	mov	r0, r5
 800245e:	f000 f933 	bl	80026c8 <_fflush_r>
 8002462:	b988      	cbnz	r0, 8002488 <__swbuf_r+0x90>
 8002464:	4638      	mov	r0, r7
 8002466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <__swbuf_r+0x9c>)
 800246a:	429c      	cmp	r4, r3
 800246c:	d101      	bne.n	8002472 <__swbuf_r+0x7a>
 800246e:	68ac      	ldr	r4, [r5, #8]
 8002470:	e7cf      	b.n	8002412 <__swbuf_r+0x1a>
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <__swbuf_r+0xa0>)
 8002474:	429c      	cmp	r4, r3
 8002476:	bf08      	it	eq
 8002478:	68ec      	ldreq	r4, [r5, #12]
 800247a:	e7ca      	b.n	8002412 <__swbuf_r+0x1a>
 800247c:	4621      	mov	r1, r4
 800247e:	4628      	mov	r0, r5
 8002480:	f000 f81e 	bl	80024c0 <__swsetup_r>
 8002484:	2800      	cmp	r0, #0
 8002486:	d0cb      	beq.n	8002420 <__swbuf_r+0x28>
 8002488:	f04f 37ff 	mov.w	r7, #4294967295
 800248c:	e7ea      	b.n	8002464 <__swbuf_r+0x6c>
 800248e:	bf00      	nop
 8002490:	08002d2c 	.word	0x08002d2c
 8002494:	08002d4c 	.word	0x08002d4c
 8002498:	08002d0c 	.word	0x08002d0c

0800249c <_write_r>:
 800249c:	b538      	push	{r3, r4, r5, lr}
 800249e:	4d07      	ldr	r5, [pc, #28]	; (80024bc <_write_r+0x20>)
 80024a0:	4604      	mov	r4, r0
 80024a2:	4608      	mov	r0, r1
 80024a4:	4611      	mov	r1, r2
 80024a6:	2200      	movs	r2, #0
 80024a8:	602a      	str	r2, [r5, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	f7fd fff9 	bl	80004a2 <_write>
 80024b0:	1c43      	adds	r3, r0, #1
 80024b2:	d102      	bne.n	80024ba <_write_r+0x1e>
 80024b4:	682b      	ldr	r3, [r5, #0]
 80024b6:	b103      	cbz	r3, 80024ba <_write_r+0x1e>
 80024b8:	6023      	str	r3, [r4, #0]
 80024ba:	bd38      	pop	{r3, r4, r5, pc}
 80024bc:	200002f4 	.word	0x200002f4

080024c0 <__swsetup_r>:
 80024c0:	4b32      	ldr	r3, [pc, #200]	; (800258c <__swsetup_r+0xcc>)
 80024c2:	b570      	push	{r4, r5, r6, lr}
 80024c4:	681d      	ldr	r5, [r3, #0]
 80024c6:	4606      	mov	r6, r0
 80024c8:	460c      	mov	r4, r1
 80024ca:	b125      	cbz	r5, 80024d6 <__swsetup_r+0x16>
 80024cc:	69ab      	ldr	r3, [r5, #24]
 80024ce:	b913      	cbnz	r3, 80024d6 <__swsetup_r+0x16>
 80024d0:	4628      	mov	r0, r5
 80024d2:	f7ff fb57 	bl	8001b84 <__sinit>
 80024d6:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <__swsetup_r+0xd0>)
 80024d8:	429c      	cmp	r4, r3
 80024da:	d10f      	bne.n	80024fc <__swsetup_r+0x3c>
 80024dc:	686c      	ldr	r4, [r5, #4]
 80024de:	89a3      	ldrh	r3, [r4, #12]
 80024e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80024e4:	0719      	lsls	r1, r3, #28
 80024e6:	d42c      	bmi.n	8002542 <__swsetup_r+0x82>
 80024e8:	06dd      	lsls	r5, r3, #27
 80024ea:	d411      	bmi.n	8002510 <__swsetup_r+0x50>
 80024ec:	2309      	movs	r3, #9
 80024ee:	6033      	str	r3, [r6, #0]
 80024f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80024f4:	81a3      	strh	r3, [r4, #12]
 80024f6:	f04f 30ff 	mov.w	r0, #4294967295
 80024fa:	e03e      	b.n	800257a <__swsetup_r+0xba>
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <__swsetup_r+0xd4>)
 80024fe:	429c      	cmp	r4, r3
 8002500:	d101      	bne.n	8002506 <__swsetup_r+0x46>
 8002502:	68ac      	ldr	r4, [r5, #8]
 8002504:	e7eb      	b.n	80024de <__swsetup_r+0x1e>
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <__swsetup_r+0xd8>)
 8002508:	429c      	cmp	r4, r3
 800250a:	bf08      	it	eq
 800250c:	68ec      	ldreq	r4, [r5, #12]
 800250e:	e7e6      	b.n	80024de <__swsetup_r+0x1e>
 8002510:	0758      	lsls	r0, r3, #29
 8002512:	d512      	bpl.n	800253a <__swsetup_r+0x7a>
 8002514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002516:	b141      	cbz	r1, 800252a <__swsetup_r+0x6a>
 8002518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800251c:	4299      	cmp	r1, r3
 800251e:	d002      	beq.n	8002526 <__swsetup_r+0x66>
 8002520:	4630      	mov	r0, r6
 8002522:	f000 f98f 	bl	8002844 <_free_r>
 8002526:	2300      	movs	r3, #0
 8002528:	6363      	str	r3, [r4, #52]	; 0x34
 800252a:	89a3      	ldrh	r3, [r4, #12]
 800252c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002530:	81a3      	strh	r3, [r4, #12]
 8002532:	2300      	movs	r3, #0
 8002534:	6063      	str	r3, [r4, #4]
 8002536:	6923      	ldr	r3, [r4, #16]
 8002538:	6023      	str	r3, [r4, #0]
 800253a:	89a3      	ldrh	r3, [r4, #12]
 800253c:	f043 0308 	orr.w	r3, r3, #8
 8002540:	81a3      	strh	r3, [r4, #12]
 8002542:	6923      	ldr	r3, [r4, #16]
 8002544:	b94b      	cbnz	r3, 800255a <__swsetup_r+0x9a>
 8002546:	89a3      	ldrh	r3, [r4, #12]
 8002548:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800254c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002550:	d003      	beq.n	800255a <__swsetup_r+0x9a>
 8002552:	4621      	mov	r1, r4
 8002554:	4630      	mov	r0, r6
 8002556:	f000 f929 	bl	80027ac <__smakebuf_r>
 800255a:	89a0      	ldrh	r0, [r4, #12]
 800255c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002560:	f010 0301 	ands.w	r3, r0, #1
 8002564:	d00a      	beq.n	800257c <__swsetup_r+0xbc>
 8002566:	2300      	movs	r3, #0
 8002568:	60a3      	str	r3, [r4, #8]
 800256a:	6963      	ldr	r3, [r4, #20]
 800256c:	425b      	negs	r3, r3
 800256e:	61a3      	str	r3, [r4, #24]
 8002570:	6923      	ldr	r3, [r4, #16]
 8002572:	b943      	cbnz	r3, 8002586 <__swsetup_r+0xc6>
 8002574:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002578:	d1ba      	bne.n	80024f0 <__swsetup_r+0x30>
 800257a:	bd70      	pop	{r4, r5, r6, pc}
 800257c:	0781      	lsls	r1, r0, #30
 800257e:	bf58      	it	pl
 8002580:	6963      	ldrpl	r3, [r4, #20]
 8002582:	60a3      	str	r3, [r4, #8]
 8002584:	e7f4      	b.n	8002570 <__swsetup_r+0xb0>
 8002586:	2000      	movs	r0, #0
 8002588:	e7f7      	b.n	800257a <__swsetup_r+0xba>
 800258a:	bf00      	nop
 800258c:	20000014 	.word	0x20000014
 8002590:	08002d2c 	.word	0x08002d2c
 8002594:	08002d4c 	.word	0x08002d4c
 8002598:	08002d0c 	.word	0x08002d0c

0800259c <_close_r>:
 800259c:	b538      	push	{r3, r4, r5, lr}
 800259e:	4d06      	ldr	r5, [pc, #24]	; (80025b8 <_close_r+0x1c>)
 80025a0:	2300      	movs	r3, #0
 80025a2:	4604      	mov	r4, r0
 80025a4:	4608      	mov	r0, r1
 80025a6:	602b      	str	r3, [r5, #0]
 80025a8:	f7fd ff97 	bl	80004da <_close>
 80025ac:	1c43      	adds	r3, r0, #1
 80025ae:	d102      	bne.n	80025b6 <_close_r+0x1a>
 80025b0:	682b      	ldr	r3, [r5, #0]
 80025b2:	b103      	cbz	r3, 80025b6 <_close_r+0x1a>
 80025b4:	6023      	str	r3, [r4, #0]
 80025b6:	bd38      	pop	{r3, r4, r5, pc}
 80025b8:	200002f4 	.word	0x200002f4

080025bc <__sflush_r>:
 80025bc:	898a      	ldrh	r2, [r1, #12]
 80025be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025c2:	4605      	mov	r5, r0
 80025c4:	0710      	lsls	r0, r2, #28
 80025c6:	460c      	mov	r4, r1
 80025c8:	d458      	bmi.n	800267c <__sflush_r+0xc0>
 80025ca:	684b      	ldr	r3, [r1, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	dc05      	bgt.n	80025dc <__sflush_r+0x20>
 80025d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	dc02      	bgt.n	80025dc <__sflush_r+0x20>
 80025d6:	2000      	movs	r0, #0
 80025d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025de:	2e00      	cmp	r6, #0
 80025e0:	d0f9      	beq.n	80025d6 <__sflush_r+0x1a>
 80025e2:	2300      	movs	r3, #0
 80025e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80025e8:	682f      	ldr	r7, [r5, #0]
 80025ea:	602b      	str	r3, [r5, #0]
 80025ec:	d032      	beq.n	8002654 <__sflush_r+0x98>
 80025ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025f0:	89a3      	ldrh	r3, [r4, #12]
 80025f2:	075a      	lsls	r2, r3, #29
 80025f4:	d505      	bpl.n	8002602 <__sflush_r+0x46>
 80025f6:	6863      	ldr	r3, [r4, #4]
 80025f8:	1ac0      	subs	r0, r0, r3
 80025fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025fc:	b10b      	cbz	r3, 8002602 <__sflush_r+0x46>
 80025fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002600:	1ac0      	subs	r0, r0, r3
 8002602:	2300      	movs	r3, #0
 8002604:	4602      	mov	r2, r0
 8002606:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002608:	6a21      	ldr	r1, [r4, #32]
 800260a:	4628      	mov	r0, r5
 800260c:	47b0      	blx	r6
 800260e:	1c43      	adds	r3, r0, #1
 8002610:	89a3      	ldrh	r3, [r4, #12]
 8002612:	d106      	bne.n	8002622 <__sflush_r+0x66>
 8002614:	6829      	ldr	r1, [r5, #0]
 8002616:	291d      	cmp	r1, #29
 8002618:	d82c      	bhi.n	8002674 <__sflush_r+0xb8>
 800261a:	4a2a      	ldr	r2, [pc, #168]	; (80026c4 <__sflush_r+0x108>)
 800261c:	40ca      	lsrs	r2, r1
 800261e:	07d6      	lsls	r6, r2, #31
 8002620:	d528      	bpl.n	8002674 <__sflush_r+0xb8>
 8002622:	2200      	movs	r2, #0
 8002624:	6062      	str	r2, [r4, #4]
 8002626:	04d9      	lsls	r1, r3, #19
 8002628:	6922      	ldr	r2, [r4, #16]
 800262a:	6022      	str	r2, [r4, #0]
 800262c:	d504      	bpl.n	8002638 <__sflush_r+0x7c>
 800262e:	1c42      	adds	r2, r0, #1
 8002630:	d101      	bne.n	8002636 <__sflush_r+0x7a>
 8002632:	682b      	ldr	r3, [r5, #0]
 8002634:	b903      	cbnz	r3, 8002638 <__sflush_r+0x7c>
 8002636:	6560      	str	r0, [r4, #84]	; 0x54
 8002638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800263a:	602f      	str	r7, [r5, #0]
 800263c:	2900      	cmp	r1, #0
 800263e:	d0ca      	beq.n	80025d6 <__sflush_r+0x1a>
 8002640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002644:	4299      	cmp	r1, r3
 8002646:	d002      	beq.n	800264e <__sflush_r+0x92>
 8002648:	4628      	mov	r0, r5
 800264a:	f000 f8fb 	bl	8002844 <_free_r>
 800264e:	2000      	movs	r0, #0
 8002650:	6360      	str	r0, [r4, #52]	; 0x34
 8002652:	e7c1      	b.n	80025d8 <__sflush_r+0x1c>
 8002654:	6a21      	ldr	r1, [r4, #32]
 8002656:	2301      	movs	r3, #1
 8002658:	4628      	mov	r0, r5
 800265a:	47b0      	blx	r6
 800265c:	1c41      	adds	r1, r0, #1
 800265e:	d1c7      	bne.n	80025f0 <__sflush_r+0x34>
 8002660:	682b      	ldr	r3, [r5, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0c4      	beq.n	80025f0 <__sflush_r+0x34>
 8002666:	2b1d      	cmp	r3, #29
 8002668:	d001      	beq.n	800266e <__sflush_r+0xb2>
 800266a:	2b16      	cmp	r3, #22
 800266c:	d101      	bne.n	8002672 <__sflush_r+0xb6>
 800266e:	602f      	str	r7, [r5, #0]
 8002670:	e7b1      	b.n	80025d6 <__sflush_r+0x1a>
 8002672:	89a3      	ldrh	r3, [r4, #12]
 8002674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002678:	81a3      	strh	r3, [r4, #12]
 800267a:	e7ad      	b.n	80025d8 <__sflush_r+0x1c>
 800267c:	690f      	ldr	r7, [r1, #16]
 800267e:	2f00      	cmp	r7, #0
 8002680:	d0a9      	beq.n	80025d6 <__sflush_r+0x1a>
 8002682:	0793      	lsls	r3, r2, #30
 8002684:	680e      	ldr	r6, [r1, #0]
 8002686:	bf08      	it	eq
 8002688:	694b      	ldreq	r3, [r1, #20]
 800268a:	600f      	str	r7, [r1, #0]
 800268c:	bf18      	it	ne
 800268e:	2300      	movne	r3, #0
 8002690:	eba6 0807 	sub.w	r8, r6, r7
 8002694:	608b      	str	r3, [r1, #8]
 8002696:	f1b8 0f00 	cmp.w	r8, #0
 800269a:	dd9c      	ble.n	80025d6 <__sflush_r+0x1a>
 800269c:	6a21      	ldr	r1, [r4, #32]
 800269e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80026a0:	4643      	mov	r3, r8
 80026a2:	463a      	mov	r2, r7
 80026a4:	4628      	mov	r0, r5
 80026a6:	47b0      	blx	r6
 80026a8:	2800      	cmp	r0, #0
 80026aa:	dc06      	bgt.n	80026ba <__sflush_r+0xfe>
 80026ac:	89a3      	ldrh	r3, [r4, #12]
 80026ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026b2:	81a3      	strh	r3, [r4, #12]
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	e78e      	b.n	80025d8 <__sflush_r+0x1c>
 80026ba:	4407      	add	r7, r0
 80026bc:	eba8 0800 	sub.w	r8, r8, r0
 80026c0:	e7e9      	b.n	8002696 <__sflush_r+0xda>
 80026c2:	bf00      	nop
 80026c4:	20400001 	.word	0x20400001

080026c8 <_fflush_r>:
 80026c8:	b538      	push	{r3, r4, r5, lr}
 80026ca:	690b      	ldr	r3, [r1, #16]
 80026cc:	4605      	mov	r5, r0
 80026ce:	460c      	mov	r4, r1
 80026d0:	b913      	cbnz	r3, 80026d8 <_fflush_r+0x10>
 80026d2:	2500      	movs	r5, #0
 80026d4:	4628      	mov	r0, r5
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
 80026d8:	b118      	cbz	r0, 80026e2 <_fflush_r+0x1a>
 80026da:	6983      	ldr	r3, [r0, #24]
 80026dc:	b90b      	cbnz	r3, 80026e2 <_fflush_r+0x1a>
 80026de:	f7ff fa51 	bl	8001b84 <__sinit>
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <_fflush_r+0x6c>)
 80026e4:	429c      	cmp	r4, r3
 80026e6:	d11b      	bne.n	8002720 <_fflush_r+0x58>
 80026e8:	686c      	ldr	r4, [r5, #4]
 80026ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0ef      	beq.n	80026d2 <_fflush_r+0xa>
 80026f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80026f4:	07d0      	lsls	r0, r2, #31
 80026f6:	d404      	bmi.n	8002702 <_fflush_r+0x3a>
 80026f8:	0599      	lsls	r1, r3, #22
 80026fa:	d402      	bmi.n	8002702 <_fflush_r+0x3a>
 80026fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026fe:	f7ff fadf 	bl	8001cc0 <__retarget_lock_acquire_recursive>
 8002702:	4628      	mov	r0, r5
 8002704:	4621      	mov	r1, r4
 8002706:	f7ff ff59 	bl	80025bc <__sflush_r>
 800270a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800270c:	07da      	lsls	r2, r3, #31
 800270e:	4605      	mov	r5, r0
 8002710:	d4e0      	bmi.n	80026d4 <_fflush_r+0xc>
 8002712:	89a3      	ldrh	r3, [r4, #12]
 8002714:	059b      	lsls	r3, r3, #22
 8002716:	d4dd      	bmi.n	80026d4 <_fflush_r+0xc>
 8002718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800271a:	f7ff fad2 	bl	8001cc2 <__retarget_lock_release_recursive>
 800271e:	e7d9      	b.n	80026d4 <_fflush_r+0xc>
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <_fflush_r+0x70>)
 8002722:	429c      	cmp	r4, r3
 8002724:	d101      	bne.n	800272a <_fflush_r+0x62>
 8002726:	68ac      	ldr	r4, [r5, #8]
 8002728:	e7df      	b.n	80026ea <_fflush_r+0x22>
 800272a:	4b04      	ldr	r3, [pc, #16]	; (800273c <_fflush_r+0x74>)
 800272c:	429c      	cmp	r4, r3
 800272e:	bf08      	it	eq
 8002730:	68ec      	ldreq	r4, [r5, #12]
 8002732:	e7da      	b.n	80026ea <_fflush_r+0x22>
 8002734:	08002d2c 	.word	0x08002d2c
 8002738:	08002d4c 	.word	0x08002d4c
 800273c:	08002d0c 	.word	0x08002d0c

08002740 <_lseek_r>:
 8002740:	b538      	push	{r3, r4, r5, lr}
 8002742:	4d07      	ldr	r5, [pc, #28]	; (8002760 <_lseek_r+0x20>)
 8002744:	4604      	mov	r4, r0
 8002746:	4608      	mov	r0, r1
 8002748:	4611      	mov	r1, r2
 800274a:	2200      	movs	r2, #0
 800274c:	602a      	str	r2, [r5, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	f7fd fee7 	bl	8000522 <_lseek>
 8002754:	1c43      	adds	r3, r0, #1
 8002756:	d102      	bne.n	800275e <_lseek_r+0x1e>
 8002758:	682b      	ldr	r3, [r5, #0]
 800275a:	b103      	cbz	r3, 800275e <_lseek_r+0x1e>
 800275c:	6023      	str	r3, [r4, #0]
 800275e:	bd38      	pop	{r3, r4, r5, pc}
 8002760:	200002f4 	.word	0x200002f4

08002764 <__swhatbuf_r>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	460e      	mov	r6, r1
 8002768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800276c:	2900      	cmp	r1, #0
 800276e:	b096      	sub	sp, #88	; 0x58
 8002770:	4614      	mov	r4, r2
 8002772:	461d      	mov	r5, r3
 8002774:	da07      	bge.n	8002786 <__swhatbuf_r+0x22>
 8002776:	2300      	movs	r3, #0
 8002778:	602b      	str	r3, [r5, #0]
 800277a:	89b3      	ldrh	r3, [r6, #12]
 800277c:	061a      	lsls	r2, r3, #24
 800277e:	d410      	bmi.n	80027a2 <__swhatbuf_r+0x3e>
 8002780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002784:	e00e      	b.n	80027a4 <__swhatbuf_r+0x40>
 8002786:	466a      	mov	r2, sp
 8002788:	f000 f8bc 	bl	8002904 <_fstat_r>
 800278c:	2800      	cmp	r0, #0
 800278e:	dbf2      	blt.n	8002776 <__swhatbuf_r+0x12>
 8002790:	9a01      	ldr	r2, [sp, #4]
 8002792:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002796:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800279a:	425a      	negs	r2, r3
 800279c:	415a      	adcs	r2, r3
 800279e:	602a      	str	r2, [r5, #0]
 80027a0:	e7ee      	b.n	8002780 <__swhatbuf_r+0x1c>
 80027a2:	2340      	movs	r3, #64	; 0x40
 80027a4:	2000      	movs	r0, #0
 80027a6:	6023      	str	r3, [r4, #0]
 80027a8:	b016      	add	sp, #88	; 0x58
 80027aa:	bd70      	pop	{r4, r5, r6, pc}

080027ac <__smakebuf_r>:
 80027ac:	898b      	ldrh	r3, [r1, #12]
 80027ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027b0:	079d      	lsls	r5, r3, #30
 80027b2:	4606      	mov	r6, r0
 80027b4:	460c      	mov	r4, r1
 80027b6:	d507      	bpl.n	80027c8 <__smakebuf_r+0x1c>
 80027b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027bc:	6023      	str	r3, [r4, #0]
 80027be:	6123      	str	r3, [r4, #16]
 80027c0:	2301      	movs	r3, #1
 80027c2:	6163      	str	r3, [r4, #20]
 80027c4:	b002      	add	sp, #8
 80027c6:	bd70      	pop	{r4, r5, r6, pc}
 80027c8:	ab01      	add	r3, sp, #4
 80027ca:	466a      	mov	r2, sp
 80027cc:	f7ff ffca 	bl	8002764 <__swhatbuf_r>
 80027d0:	9900      	ldr	r1, [sp, #0]
 80027d2:	4605      	mov	r5, r0
 80027d4:	4630      	mov	r0, r6
 80027d6:	f7ff fa75 	bl	8001cc4 <_malloc_r>
 80027da:	b948      	cbnz	r0, 80027f0 <__smakebuf_r+0x44>
 80027dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027e0:	059a      	lsls	r2, r3, #22
 80027e2:	d4ef      	bmi.n	80027c4 <__smakebuf_r+0x18>
 80027e4:	f023 0303 	bic.w	r3, r3, #3
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	81a3      	strh	r3, [r4, #12]
 80027ee:	e7e3      	b.n	80027b8 <__smakebuf_r+0xc>
 80027f0:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <__smakebuf_r+0x7c>)
 80027f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80027f4:	89a3      	ldrh	r3, [r4, #12]
 80027f6:	6020      	str	r0, [r4, #0]
 80027f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027fc:	81a3      	strh	r3, [r4, #12]
 80027fe:	9b00      	ldr	r3, [sp, #0]
 8002800:	6163      	str	r3, [r4, #20]
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	6120      	str	r0, [r4, #16]
 8002806:	b15b      	cbz	r3, 8002820 <__smakebuf_r+0x74>
 8002808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800280c:	4630      	mov	r0, r6
 800280e:	f000 f88b 	bl	8002928 <_isatty_r>
 8002812:	b128      	cbz	r0, 8002820 <__smakebuf_r+0x74>
 8002814:	89a3      	ldrh	r3, [r4, #12]
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	81a3      	strh	r3, [r4, #12]
 8002820:	89a0      	ldrh	r0, [r4, #12]
 8002822:	4305      	orrs	r5, r0
 8002824:	81a5      	strh	r5, [r4, #12]
 8002826:	e7cd      	b.n	80027c4 <__smakebuf_r+0x18>
 8002828:	08001b1d 	.word	0x08001b1d

0800282c <__malloc_lock>:
 800282c:	4801      	ldr	r0, [pc, #4]	; (8002834 <__malloc_lock+0x8>)
 800282e:	f7ff ba47 	b.w	8001cc0 <__retarget_lock_acquire_recursive>
 8002832:	bf00      	nop
 8002834:	200002ec 	.word	0x200002ec

08002838 <__malloc_unlock>:
 8002838:	4801      	ldr	r0, [pc, #4]	; (8002840 <__malloc_unlock+0x8>)
 800283a:	f7ff ba42 	b.w	8001cc2 <__retarget_lock_release_recursive>
 800283e:	bf00      	nop
 8002840:	200002ec 	.word	0x200002ec

08002844 <_free_r>:
 8002844:	b538      	push	{r3, r4, r5, lr}
 8002846:	4605      	mov	r5, r0
 8002848:	2900      	cmp	r1, #0
 800284a:	d045      	beq.n	80028d8 <_free_r+0x94>
 800284c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002850:	1f0c      	subs	r4, r1, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	bfb8      	it	lt
 8002856:	18e4      	addlt	r4, r4, r3
 8002858:	f7ff ffe8 	bl	800282c <__malloc_lock>
 800285c:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <_free_r+0x98>)
 800285e:	6813      	ldr	r3, [r2, #0]
 8002860:	4610      	mov	r0, r2
 8002862:	b933      	cbnz	r3, 8002872 <_free_r+0x2e>
 8002864:	6063      	str	r3, [r4, #4]
 8002866:	6014      	str	r4, [r2, #0]
 8002868:	4628      	mov	r0, r5
 800286a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800286e:	f7ff bfe3 	b.w	8002838 <__malloc_unlock>
 8002872:	42a3      	cmp	r3, r4
 8002874:	d90b      	bls.n	800288e <_free_r+0x4a>
 8002876:	6821      	ldr	r1, [r4, #0]
 8002878:	1862      	adds	r2, r4, r1
 800287a:	4293      	cmp	r3, r2
 800287c:	bf04      	itt	eq
 800287e:	681a      	ldreq	r2, [r3, #0]
 8002880:	685b      	ldreq	r3, [r3, #4]
 8002882:	6063      	str	r3, [r4, #4]
 8002884:	bf04      	itt	eq
 8002886:	1852      	addeq	r2, r2, r1
 8002888:	6022      	streq	r2, [r4, #0]
 800288a:	6004      	str	r4, [r0, #0]
 800288c:	e7ec      	b.n	8002868 <_free_r+0x24>
 800288e:	461a      	mov	r2, r3
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	b10b      	cbz	r3, 8002898 <_free_r+0x54>
 8002894:	42a3      	cmp	r3, r4
 8002896:	d9fa      	bls.n	800288e <_free_r+0x4a>
 8002898:	6811      	ldr	r1, [r2, #0]
 800289a:	1850      	adds	r0, r2, r1
 800289c:	42a0      	cmp	r0, r4
 800289e:	d10b      	bne.n	80028b8 <_free_r+0x74>
 80028a0:	6820      	ldr	r0, [r4, #0]
 80028a2:	4401      	add	r1, r0
 80028a4:	1850      	adds	r0, r2, r1
 80028a6:	4283      	cmp	r3, r0
 80028a8:	6011      	str	r1, [r2, #0]
 80028aa:	d1dd      	bne.n	8002868 <_free_r+0x24>
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	6053      	str	r3, [r2, #4]
 80028b2:	4401      	add	r1, r0
 80028b4:	6011      	str	r1, [r2, #0]
 80028b6:	e7d7      	b.n	8002868 <_free_r+0x24>
 80028b8:	d902      	bls.n	80028c0 <_free_r+0x7c>
 80028ba:	230c      	movs	r3, #12
 80028bc:	602b      	str	r3, [r5, #0]
 80028be:	e7d3      	b.n	8002868 <_free_r+0x24>
 80028c0:	6820      	ldr	r0, [r4, #0]
 80028c2:	1821      	adds	r1, r4, r0
 80028c4:	428b      	cmp	r3, r1
 80028c6:	bf04      	itt	eq
 80028c8:	6819      	ldreq	r1, [r3, #0]
 80028ca:	685b      	ldreq	r3, [r3, #4]
 80028cc:	6063      	str	r3, [r4, #4]
 80028ce:	bf04      	itt	eq
 80028d0:	1809      	addeq	r1, r1, r0
 80028d2:	6021      	streq	r1, [r4, #0]
 80028d4:	6054      	str	r4, [r2, #4]
 80028d6:	e7c7      	b.n	8002868 <_free_r+0x24>
 80028d8:	bd38      	pop	{r3, r4, r5, pc}
 80028da:	bf00      	nop
 80028dc:	200000a0 	.word	0x200000a0

080028e0 <_read_r>:
 80028e0:	b538      	push	{r3, r4, r5, lr}
 80028e2:	4d07      	ldr	r5, [pc, #28]	; (8002900 <_read_r+0x20>)
 80028e4:	4604      	mov	r4, r0
 80028e6:	4608      	mov	r0, r1
 80028e8:	4611      	mov	r1, r2
 80028ea:	2200      	movs	r2, #0
 80028ec:	602a      	str	r2, [r5, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f7fd fdba 	bl	8000468 <_read>
 80028f4:	1c43      	adds	r3, r0, #1
 80028f6:	d102      	bne.n	80028fe <_read_r+0x1e>
 80028f8:	682b      	ldr	r3, [r5, #0]
 80028fa:	b103      	cbz	r3, 80028fe <_read_r+0x1e>
 80028fc:	6023      	str	r3, [r4, #0]
 80028fe:	bd38      	pop	{r3, r4, r5, pc}
 8002900:	200002f4 	.word	0x200002f4

08002904 <_fstat_r>:
 8002904:	b538      	push	{r3, r4, r5, lr}
 8002906:	4d07      	ldr	r5, [pc, #28]	; (8002924 <_fstat_r+0x20>)
 8002908:	2300      	movs	r3, #0
 800290a:	4604      	mov	r4, r0
 800290c:	4608      	mov	r0, r1
 800290e:	4611      	mov	r1, r2
 8002910:	602b      	str	r3, [r5, #0]
 8002912:	f7fd fded 	bl	80004f0 <_fstat>
 8002916:	1c43      	adds	r3, r0, #1
 8002918:	d102      	bne.n	8002920 <_fstat_r+0x1c>
 800291a:	682b      	ldr	r3, [r5, #0]
 800291c:	b103      	cbz	r3, 8002920 <_fstat_r+0x1c>
 800291e:	6023      	str	r3, [r4, #0]
 8002920:	bd38      	pop	{r3, r4, r5, pc}
 8002922:	bf00      	nop
 8002924:	200002f4 	.word	0x200002f4

08002928 <_isatty_r>:
 8002928:	b538      	push	{r3, r4, r5, lr}
 800292a:	4d06      	ldr	r5, [pc, #24]	; (8002944 <_isatty_r+0x1c>)
 800292c:	2300      	movs	r3, #0
 800292e:	4604      	mov	r4, r0
 8002930:	4608      	mov	r0, r1
 8002932:	602b      	str	r3, [r5, #0]
 8002934:	f7fd fdeb 	bl	800050e <_isatty>
 8002938:	1c43      	adds	r3, r0, #1
 800293a:	d102      	bne.n	8002942 <_isatty_r+0x1a>
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	b103      	cbz	r3, 8002942 <_isatty_r+0x1a>
 8002940:	6023      	str	r3, [r4, #0]
 8002942:	bd38      	pop	{r3, r4, r5, pc}
 8002944:	200002f4 	.word	0x200002f4

08002948 <_init>:
 8002948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294a:	bf00      	nop
 800294c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294e:	bc08      	pop	{r3}
 8002950:	469e      	mov	lr, r3
 8002952:	4770      	bx	lr

08002954 <_fini>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	bf00      	nop
 8002958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295a:	bc08      	pop	{r3}
 800295c:	469e      	mov	lr, r3
 800295e:	4770      	bx	lr
