
000Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ae4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08001c94  08001c94  00011c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d3c  08001d3c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08001d3c  08001d3c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d3c  08001d3c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d3c  08001d3c  00011d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d40  08001d40  00011d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08001d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000078  08001dbc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08001dbc  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000027e2  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000085f  00000000  00000000  00022884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  000230e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  000232c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000344b  00000000  00000000  00023450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002225  00000000  00000000  0002689b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c8af  00000000  00000000  00028ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0003536f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e34  00000000  00000000  000353c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001c7c 	.word	0x08001c7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08001c7c 	.word	0x08001c7c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <init_systick_timer>:
 *      Author: DELL7470
 */
#include "keypad4x4.h"
#define SYSTICK_TIM_CLK 16000000UL
void init_systick_timer(uint32_t tick_hz) //tan so nhay vào ngắt trong 1 giây
{
 8000290:	b480      	push	{r7}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000298:	4b14      	ldr	r3, [pc, #80]	; (80002ec <init_systick_timer+0x5c>)
 800029a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800029c:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <init_systick_timer+0x60>)
 800029e:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80002a0:	4a14      	ldr	r2, [pc, #80]	; (80002f4 <init_systick_timer+0x64>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a8:	3b01      	subs	r3, #1
 80002aa:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	431a      	orrs	r2, r3
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f043 0202 	orr.w	r2, r3, #2
 80002c6:	693b      	ldr	r3, [r7, #16]
 80002c8:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0204 	orr.w	r2, r3, #4
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f043 0201 	orr.w	r2, r3, #1
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	601a      	str	r2, [r3, #0]

}
 80002e2:	bf00      	nop
 80002e4:	371c      	adds	r7, #28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e014 	.word	0xe000e014
 80002f0:	e000e010 	.word	0xe000e010
 80002f4:	00f42400 	.word	0x00f42400

080002f8 <main>:

int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b086      	sub	sp, #24
 80002fc:	af00      	add	r7, sp, #0
    /* Create keypad instance */
    TM_KEYPAD_Button_t Keypad_Button;
    char buff[20];

    /* Initialize matrix keyboard */
    TM_KEYPAD_Init(TM_KEYPAD_Type_Large);
 80002fe:	2000      	movs	r0, #0
 8000300:	f000 f90a 	bl	8000518 <TM_KEYPAD_Init>
    init_systick_timer(1000);
 8000304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000308:	f7ff ffc2 	bl	8000290 <init_systick_timer>

    while (1) {
        /* Read keyboard data */
        Keypad_Button = TM_KEYPAD_Read();
 800030c:	f000 f976 	bl	80005fc <TM_KEYPAD_Read>
 8000310:	4603      	mov	r3, r0
 8000312:	75fb      	strb	r3, [r7, #23]

        /* Keypad was pressed */
        if (Keypad_Button != TM_KEYPAD_Button_NOPRESSED) /* Keypad is pressed */
 8000314:	7dfb      	ldrb	r3, [r7, #23]
 8000316:	2bff      	cmp	r3, #255	; 0xff
 8000318:	d0f8      	beq.n	800030c <main+0x14>
        	{
            /* Print to user */
            printf(buff, "Pressed: %u us\n", (uint8_t)Keypad_Button);
 800031a:	7dfa      	ldrb	r2, [r7, #23]
 800031c:	463b      	mov	r3, r7
 800031e:	4902      	ldr	r1, [pc, #8]	; (8000328 <main+0x30>)
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fd59 	bl	8000dd8 <iprintf>
        Keypad_Button = TM_KEYPAD_Read();
 8000326:	e7f1      	b.n	800030c <main+0x14>
 8000328:	08001c94 	.word	0x08001c94

0800032c <SysTick_Handler>:
    }
}

/* 1ms handler */
void SysTick_Handler(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
    /* Process keypad */
    TM_KEYPAD_Update();
 8000330:	f000 fa46 	bl	80007c0 <TM_KEYPAD_Update>
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}

08000338 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <ITM_SendChar+0x44>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a0d      	ldr	r2, [pc, #52]	; (800037c <ITM_SendChar+0x44>)
 8000348:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800034c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800034e:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <ITM_SendChar+0x48>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a0b      	ldr	r2, [pc, #44]	; (8000380 <ITM_SendChar+0x48>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800035a:	bf00      	nop
 800035c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f8      	beq.n	800035c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800036a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	6013      	str	r3, [r2, #0]
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	e000edfc 	.word	0xe000edfc
 8000380:	e0000e00 	.word	0xe0000e00

08000384 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]
 8000394:	e00a      	b.n	80003ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000396:	f3af 8000 	nop.w
 800039a:	4601      	mov	r1, r0
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	1c5a      	adds	r2, r3, #1
 80003a0:	60ba      	str	r2, [r7, #8]
 80003a2:	b2ca      	uxtb	r2, r1
 80003a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	3301      	adds	r3, #1
 80003aa:	617b      	str	r3, [r7, #20]
 80003ac:	697a      	ldr	r2, [r7, #20]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	dbf0      	blt.n	8000396 <_read+0x12>
	}

return len;
 80003b4:	687b      	ldr	r3, [r7, #4]
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3718      	adds	r7, #24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	60f8      	str	r0, [r7, #12]
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
 80003ce:	e009      	b.n	80003e4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	1c5a      	adds	r2, r3, #1
 80003d4:	60ba      	str	r2, [r7, #8]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ffad 	bl	8000338 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	3301      	adds	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	697a      	ldr	r2, [r7, #20]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	dbf1      	blt.n	80003d0 <_write+0x12>
	}
	return len;
 80003ec:	687b      	ldr	r3, [r7, #4]
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_close>:

int _close(int file)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
	return -1;
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000402:	4618      	mov	r0, r3
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr

0800040c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800041c:	605a      	str	r2, [r3, #4]
	return 0;
 800041e:	2300      	movs	r3, #0
}
 8000420:	4618      	mov	r0, r3
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr

0800042a <_isatty>:

int _isatty(int file)
{
 800042a:	b480      	push	{r7}
 800042c:	b083      	sub	sp, #12
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
	return 1;
 8000432:	2301      	movs	r3, #1
}
 8000434:	4618      	mov	r0, r3
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr

0800043e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800043e:	b480      	push	{r7}
 8000440:	b085      	sub	sp, #20
 8000442:	af00      	add	r7, sp, #0
 8000444:	60f8      	str	r0, [r7, #12]
 8000446:	60b9      	str	r1, [r7, #8]
 8000448:	607a      	str	r2, [r7, #4]
	return 0;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	3714      	adds	r7, #20
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
	...

08000458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000460:	4a14      	ldr	r2, [pc, #80]	; (80004b4 <_sbrk+0x5c>)
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <_sbrk+0x60>)
 8000464:	1ad3      	subs	r3, r2, r3
 8000466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800046c:	4b13      	ldr	r3, [pc, #76]	; (80004bc <_sbrk+0x64>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d102      	bne.n	800047a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <_sbrk+0x64>)
 8000476:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <_sbrk+0x68>)
 8000478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <_sbrk+0x64>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4413      	add	r3, r2
 8000482:	693a      	ldr	r2, [r7, #16]
 8000484:	429a      	cmp	r2, r3
 8000486:	d207      	bcs.n	8000498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000488:	f000 fc74 	bl	8000d74 <__errno>
 800048c:	4603      	mov	r3, r0
 800048e:	220c      	movs	r2, #12
 8000490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000492:	f04f 33ff 	mov.w	r3, #4294967295
 8000496:	e009      	b.n	80004ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <_sbrk+0x64>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <_sbrk+0x64>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4413      	add	r3, r2
 80004a6:	4a05      	ldr	r2, [pc, #20]	; (80004bc <_sbrk+0x64>)
 80004a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004aa:	68fb      	ldr	r3, [r7, #12]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20020000 	.word	0x20020000
 80004b8:	00000400 	.word	0x00000400
 80004bc:	20000094 	.word	0x20000094
 80004c0:	200000b8 	.word	0x200000b8

080004c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
    ldr   r0, =_estack
 80004c4:	480d      	ldr	r0, [pc, #52]	; (80004fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004c6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004cc:	480c      	ldr	r0, [pc, #48]	; (8000500 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ce:	490d      	ldr	r1, [pc, #52]	; (8000504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <LoopForever+0xe>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d4:	e002      	b.n	80004dc <LoopCopyDataInit>

080004d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004da:	3304      	adds	r3, #4

080004dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e0:	d3f9      	bcc.n	80004d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e4:	4c0a      	ldr	r4, [pc, #40]	; (8000510 <LoopForever+0x16>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e8:	e001      	b.n	80004ee <LoopFillZerobss>

080004ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ec:	3204      	adds	r2, #4

080004ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f0:	d3fb      	bcc.n	80004ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004f2:	f000 fc45 	bl	8000d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f6:	f7ff feff 	bl	80002f8 <main>

080004fa <LoopForever>:

LoopForever:
    b LoopForever
 80004fa:	e7fe      	b.n	80004fa <LoopForever>
    ldr   r0, =_estack
 80004fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000504:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000508:	08001d44 	.word	0x08001d44
  ldr r2, =_sbss
 800050c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000510:	200000b4 	.word	0x200000b4

08000514 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000514:	e7fe      	b.n	8000514 <ADC_IRQHandler>
	...

08000518 <TM_KEYPAD_Init>:

/* Private variables */
TM_KEYPAD_Type_t TM_KEYPAD_INT_KeypadType;
static TM_KEYPAD_Button_t KeypadStatus = TM_KEYPAD_Button_NOPRESSED;

void TM_KEYPAD_Init(TM_KEYPAD_Type_t type) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	/* Set keyboard type */
	TM_KEYPAD_INT_KeypadType = type;
 8000522:	4a33      	ldr	r2, [pc, #204]	; (80005f0 <TM_KEYPAD_Init+0xd8>)
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	7013      	strb	r3, [r2, #0]

	GPIO_Handle_t GpioC_Out, GpioR_In;

	/* Columns are output */
	/* Column 1 */
	GpioC_Out.pGPIOx = KEYPAD_COLUMN_1_PORT;
 8000528:	4b32      	ldr	r3, [pc, #200]	; (80005f4 <TM_KEYPAD_Init+0xdc>)
 800052a:	617b      	str	r3, [r7, #20]
	GpioC_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_1_PIN;
 800052c:	2300      	movs	r3, #0
 800052e:	763b      	strb	r3, [r7, #24]
	GpioC_Out.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000530:	2301      	movs	r3, #1
 8000532:	767b      	strb	r3, [r7, #25]
	GpioC_Out.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000534:	2301      	movs	r3, #1
 8000536:	76bb      	strb	r3, [r7, #26]
	GpioC_Out.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 8000538:	2300      	movs	r3, #0
 800053a:	773b      	strb	r3, [r7, #28]
	GpioC_Out.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800053c:	2300      	movs	r3, #0
 800053e:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(&GpioC_Out);
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4618      	mov	r0, r3
 8000546:	f000 fa43 	bl	80009d0 <GPIO_Init>

	/* Column 2 */
	GpioC_Out.pGPIOx = KEYPAD_COLUMN_2_PORT;
 800054a:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <TM_KEYPAD_Init+0xdc>)
 800054c:	617b      	str	r3, [r7, #20]
	GpioC_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_2_PIN;
 800054e:	2301      	movs	r3, #1
 8000550:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioC_Out);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fa3a 	bl	80009d0 <GPIO_Init>

	/* Column 3 */
	GpioC_Out.pGPIOx = KEYPAD_COLUMN_3_PORT;
 800055c:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <TM_KEYPAD_Init+0xdc>)
 800055e:	617b      	str	r3, [r7, #20]
	GpioC_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_3_PIN;
 8000560:	2302      	movs	r3, #2
 8000562:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioC_Out);
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fa31 	bl	80009d0 <GPIO_Init>

	/* Column 4 */
	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large) {
 800056e:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <TM_KEYPAD_Init+0xd8>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d108      	bne.n	8000588 <TM_KEYPAD_Init+0x70>
		GpioC_Out.pGPIOx = KEYPAD_COLUMN_2_PORT;
 8000576:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <TM_KEYPAD_Init+0xdc>)
 8000578:	617b      	str	r3, [r7, #20]
		GpioC_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_2_PIN;
 800057a:	2301      	movs	r3, #1
 800057c:	763b      	strb	r3, [r7, #24]
		GPIO_Init(&GpioC_Out);
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fa24 	bl	80009d0 <GPIO_Init>
	}


	/* Rows are inputs */
	/* Row 1 */
	GpioR_In.pGPIOx = KEYPAD_ROW_1_PORT;
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <TM_KEYPAD_Init+0xe0>)
 800058a:	60bb      	str	r3, [r7, #8]
	GpioR_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_1_PIN;
 800058c:	2301      	movs	r3, #1
 800058e:	733b      	strb	r3, [r7, #12]
	GpioR_In.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000590:	2300      	movs	r3, #0
 8000592:	737b      	strb	r3, [r7, #13]
	GpioR_In.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000594:	2301      	movs	r3, #1
 8000596:	73bb      	strb	r3, [r7, #14]
	GpioR_In.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 8000598:	2300      	movs	r3, #0
 800059a:	743b      	strb	r3, [r7, #16]
	GpioR_In.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800059c:	2301      	movs	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(&GpioR_In);
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fa13 	bl	80009d0 <GPIO_Init>

	/* Row 2 */
	GpioR_In.pGPIOx = KEYPAD_ROW_2_PORT;
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <TM_KEYPAD_Init+0xe0>)
 80005ac:	60bb      	str	r3, [r7, #8]
	GpioR_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_2_PIN;
 80005ae:	2302      	movs	r3, #2
 80005b0:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioR_In);
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fa0a 	bl	80009d0 <GPIO_Init>

	/* Row 3 */
	GpioR_In.pGPIOx = KEYPAD_ROW_3_PORT;
 80005bc:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <TM_KEYPAD_Init+0xe0>)
 80005be:	60bb      	str	r3, [r7, #8]
	GpioR_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_3_PIN;
 80005c0:	2303      	movs	r3, #3
 80005c2:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioR_In);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fa01 	bl	80009d0 <GPIO_Init>

	/* Row 4 */
	GpioR_In.pGPIOx = KEYPAD_ROW_4_PORT;
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <TM_KEYPAD_Init+0xe0>)
 80005d0:	60bb      	str	r3, [r7, #8]
	GpioR_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_4_PIN;
 80005d2:	2305      	movs	r3, #5
 80005d4:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioR_In);
 80005d6:	f107 0308 	add.w	r3, r7, #8
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f9f8 	bl	80009d0 <GPIO_Init>

	/* All columns high */
	TM_KEYPAD_INT_SetColumn(0);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 f81d 	bl	8000620 <TM_KEYPAD_INT_SetColumn>
}
 80005e6:	bf00      	nop
 80005e8:	3720      	adds	r7, #32
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000a4 	.word	0x200000a4
 80005f4:	40020c00 	.word	0x40020c00
 80005f8:	40020800 	.word	0x40020800

080005fc <TM_KEYPAD_Read>:

TM_KEYPAD_Button_t TM_KEYPAD_Read(void) {
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
	TM_KEYPAD_Button_t temp;

	/* Get keypad status */
	temp = KeypadStatus;
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <TM_KEYPAD_Read+0x20>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	71fb      	strb	r3, [r7, #7]

	/* Reset keypad status */
	KeypadStatus = TM_KEYPAD_Button_NOPRESSED;
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <TM_KEYPAD_Read+0x20>)
 800060a:	22ff      	movs	r2, #255	; 0xff
 800060c:	701a      	strb	r2, [r3, #0]

	return temp;
 800060e:	79fb      	ldrb	r3, [r7, #7]
}
 8000610:	4618      	mov	r0, r3
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000010 	.word	0x20000010

08000620 <TM_KEYPAD_INT_SetColumn>:

/* Private */
void TM_KEYPAD_INT_SetColumn(uint8_t column) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_COLUMN_1_HIGH;
 800062a:	2201      	movs	r2, #1
 800062c:	2100      	movs	r1, #0
 800062e:	481d      	ldr	r0, [pc, #116]	; (80006a4 <TM_KEYPAD_INT_SetColumn+0x84>)
 8000630:	f000 fb7b 	bl	8000d2a <GPIO_WriteToOutputPin>
	KEYPAD_COLUMN_2_HIGH;
 8000634:	2201      	movs	r2, #1
 8000636:	2101      	movs	r1, #1
 8000638:	481a      	ldr	r0, [pc, #104]	; (80006a4 <TM_KEYPAD_INT_SetColumn+0x84>)
 800063a:	f000 fb76 	bl	8000d2a <GPIO_WriteToOutputPin>
	KEYPAD_COLUMN_3_HIGH;
 800063e:	2201      	movs	r2, #1
 8000640:	2102      	movs	r1, #2
 8000642:	4818      	ldr	r0, [pc, #96]	; (80006a4 <TM_KEYPAD_INT_SetColumn+0x84>)
 8000644:	f000 fb71 	bl	8000d2a <GPIO_WriteToOutputPin>
	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large) {
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <TM_KEYPAD_INT_SetColumn+0x88>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d104      	bne.n	800065a <TM_KEYPAD_INT_SetColumn+0x3a>
		KEYPAD_COLUMN_4_HIGH;
 8000650:	2201      	movs	r2, #1
 8000652:	2103      	movs	r1, #3
 8000654:	4813      	ldr	r0, [pc, #76]	; (80006a4 <TM_KEYPAD_INT_SetColumn+0x84>)
 8000656:	f000 fb68 	bl	8000d2a <GPIO_WriteToOutputPin>
	}

	/* Set column low */
	if (column == 1) {
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d104      	bne.n	800066a <TM_KEYPAD_INT_SetColumn+0x4a>
		KEYPAD_COLUMN_1_LOW;
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	480f      	ldr	r0, [pc, #60]	; (80006a4 <TM_KEYPAD_INT_SetColumn+0x84>)
 8000666:	f000 fb60 	bl	8000d2a <GPIO_WriteToOutputPin>
	}
	if (column == 2) {
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b02      	cmp	r3, #2
 800066e:	d104      	bne.n	800067a <TM_KEYPAD_INT_SetColumn+0x5a>
		KEYPAD_COLUMN_2_LOW;
 8000670:	2200      	movs	r2, #0
 8000672:	2101      	movs	r1, #1
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <TM_KEYPAD_INT_SetColumn+0x84>)
 8000676:	f000 fb58 	bl	8000d2a <GPIO_WriteToOutputPin>
	}
	if (column == 3) {
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2b03      	cmp	r3, #3
 800067e:	d104      	bne.n	800068a <TM_KEYPAD_INT_SetColumn+0x6a>
		KEYPAD_COLUMN_3_LOW;
 8000680:	2200      	movs	r2, #0
 8000682:	2102      	movs	r1, #2
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <TM_KEYPAD_INT_SetColumn+0x84>)
 8000686:	f000 fb50 	bl	8000d2a <GPIO_WriteToOutputPin>
	}
	if (column == 4) {
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b04      	cmp	r3, #4
 800068e:	d104      	bne.n	800069a <TM_KEYPAD_INT_SetColumn+0x7a>
		KEYPAD_COLUMN_4_LOW;
 8000690:	2200      	movs	r2, #0
 8000692:	2103      	movs	r1, #3
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <TM_KEYPAD_INT_SetColumn+0x84>)
 8000696:	f000 fb48 	bl	8000d2a <GPIO_WriteToOutputPin>
	}
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40020c00 	.word	0x40020c00
 80006a8:	200000a4 	.word	0x200000a4

080006ac <TM_KEYPAD_INT_CheckRow>:

uint8_t TM_KEYPAD_INT_CheckRow(uint8_t column) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
	/* Read rows */

	/* Scan row 1 */
	if (KEYPAD_ROW_1_CHECK) {
 80006b6:	2101      	movs	r1, #1
 80006b8:	481d      	ldr	r0, [pc, #116]	; (8000730 <TM_KEYPAD_INT_CheckRow+0x84>)
 80006ba:	f000 fb21 	bl	8000d00 <GPIO_ReadFromInputPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d104      	bne.n	80006ce <TM_KEYPAD_INT_CheckRow+0x22>
		return KEYPAD_INT_Buttons[0][column - 1];
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	4a1a      	ldr	r2, [pc, #104]	; (8000734 <TM_KEYPAD_INT_CheckRow+0x88>)
 80006ca:	5cd3      	ldrb	r3, [r2, r3]
 80006cc:	e02b      	b.n	8000726 <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 2 */
	if (KEYPAD_ROW_2_CHECK) {
 80006ce:	2102      	movs	r1, #2
 80006d0:	4817      	ldr	r0, [pc, #92]	; (8000730 <TM_KEYPAD_INT_CheckRow+0x84>)
 80006d2:	f000 fb15 	bl	8000d00 <GPIO_ReadFromInputPin>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d105      	bne.n	80006e8 <TM_KEYPAD_INT_CheckRow+0x3c>
		return KEYPAD_INT_Buttons[1][column - 1];
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	3b01      	subs	r3, #1
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <TM_KEYPAD_INT_CheckRow+0x88>)
 80006e2:	4413      	add	r3, r2
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	e01e      	b.n	8000726 <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 3 */
	if (KEYPAD_ROW_3_CHECK) {
 80006e8:	2103      	movs	r1, #3
 80006ea:	4811      	ldr	r0, [pc, #68]	; (8000730 <TM_KEYPAD_INT_CheckRow+0x84>)
 80006ec:	f000 fb08 	bl	8000d00 <GPIO_ReadFromInputPin>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d105      	bne.n	8000702 <TM_KEYPAD_INT_CheckRow+0x56>
		return KEYPAD_INT_Buttons[2][column - 1];
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <TM_KEYPAD_INT_CheckRow+0x88>)
 80006fc:	4413      	add	r3, r2
 80006fe:	7a1b      	ldrb	r3, [r3, #8]
 8000700:	e011      	b.n	8000726 <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 4 */
	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large && KEYPAD_ROW_4_CHECK) {
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <TM_KEYPAD_INT_CheckRow+0x8c>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d10c      	bne.n	8000724 <TM_KEYPAD_INT_CheckRow+0x78>
 800070a:	2105      	movs	r1, #5
 800070c:	4808      	ldr	r0, [pc, #32]	; (8000730 <TM_KEYPAD_INT_CheckRow+0x84>)
 800070e:	f000 faf7 	bl	8000d00 <GPIO_ReadFromInputPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d105      	bne.n	8000724 <TM_KEYPAD_INT_CheckRow+0x78>
		return KEYPAD_INT_Buttons[3][column - 1];
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	3b01      	subs	r3, #1
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <TM_KEYPAD_INT_CheckRow+0x88>)
 800071e:	4413      	add	r3, r2
 8000720:	7b1b      	ldrb	r3, [r3, #12]
 8000722:	e000      	b.n	8000726 <TM_KEYPAD_INT_CheckRow+0x7a>
	}

	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 8000724:	23ff      	movs	r3, #255	; 0xff
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40020800 	.word	0x40020800
 8000734:	20000000 	.word	0x20000000
 8000738:	200000a4 	.word	0x200000a4

0800073c <TM_KEYPAD_INT_Read>:

uint8_t TM_KEYPAD_INT_Read(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	TM_KEYPAD_INT_SetColumn(1);
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff ff6c 	bl	8000620 <TM_KEYPAD_INT_SetColumn>
	/* Check rows */
	check = TM_KEYPAD_INT_CheckRow(1);
 8000748:	2001      	movs	r0, #1
 800074a:	f7ff ffaf 	bl	80006ac <TM_KEYPAD_INT_CheckRow>
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2bff      	cmp	r3, #255	; 0xff
 8000756:	d001      	beq.n	800075c <TM_KEYPAD_INT_Read+0x20>
		return check;
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	e02b      	b.n	80007b4 <TM_KEYPAD_INT_Read+0x78>
	}

	/* Set row 2 to LOW */
	TM_KEYPAD_INT_SetColumn(2);
 800075c:	2002      	movs	r0, #2
 800075e:	f7ff ff5f 	bl	8000620 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(2);
 8000762:	2002      	movs	r0, #2
 8000764:	f7ff ffa2 	bl	80006ac <TM_KEYPAD_INT_CheckRow>
 8000768:	4603      	mov	r3, r0
 800076a:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2bff      	cmp	r3, #255	; 0xff
 8000770:	d001      	beq.n	8000776 <TM_KEYPAD_INT_Read+0x3a>
		return check;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	e01e      	b.n	80007b4 <TM_KEYPAD_INT_Read+0x78>
	}

	/* Set row 3 to LOW */
	TM_KEYPAD_INT_SetColumn(3);
 8000776:	2003      	movs	r0, #3
 8000778:	f7ff ff52 	bl	8000620 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(3);
 800077c:	2003      	movs	r0, #3
 800077e:	f7ff ff95 	bl	80006ac <TM_KEYPAD_INT_CheckRow>
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2bff      	cmp	r3, #255	; 0xff
 800078a:	d001      	beq.n	8000790 <TM_KEYPAD_INT_Read+0x54>
		return check;
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	e011      	b.n	80007b4 <TM_KEYPAD_INT_Read+0x78>
	}

	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large) {
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <TM_KEYPAD_INT_Read+0x80>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d10c      	bne.n	80007b2 <TM_KEYPAD_INT_Read+0x76>
		/* Set column 4 to LOW */
		TM_KEYPAD_INT_SetColumn(4);
 8000798:	2004      	movs	r0, #4
 800079a:	f7ff ff41 	bl	8000620 <TM_KEYPAD_INT_SetColumn>
		/* Check rows */
		check = TM_KEYPAD_INT_CheckRow(4);
 800079e:	2004      	movs	r0, #4
 80007a0:	f7ff ff84 	bl	80006ac <TM_KEYPAD_INT_CheckRow>
 80007a4:	4603      	mov	r3, r0
 80007a6:	71fb      	strb	r3, [r7, #7]
		if (check != KEYPAD_NO_PRESSED) {
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2bff      	cmp	r3, #255	; 0xff
 80007ac:	d001      	beq.n	80007b2 <TM_KEYPAD_INT_Read+0x76>
			return check;
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	e000      	b.n	80007b4 <TM_KEYPAD_INT_Read+0x78>
		}
	}

	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 80007b2:	23ff      	movs	r3, #255	; 0xff
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000a4 	.word	0x200000a4

080007c0 <TM_KEYPAD_Update>:

void TM_KEYPAD_Update(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	static uint16_t millis = 0;

	/* Every X ms read */
	if (++millis >= KEYPAD_READ_INTERVAL && KeypadStatus == TM_KEYPAD_Button_NOPRESSED) {
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <TM_KEYPAD_Update+0x38>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <TM_KEYPAD_Update+0x38>)
 80007ce:	801a      	strh	r2, [r3, #0]
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <TM_KEYPAD_Update+0x38>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	2b63      	cmp	r3, #99	; 0x63
 80007d6:	d90c      	bls.n	80007f2 <TM_KEYPAD_Update+0x32>
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <TM_KEYPAD_Update+0x3c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2bff      	cmp	r3, #255	; 0xff
 80007de:	d108      	bne.n	80007f2 <TM_KEYPAD_Update+0x32>
		/* Reset */
		millis = 0;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <TM_KEYPAD_Update+0x38>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	801a      	strh	r2, [r3, #0]

		/* Read keyboard */
		KeypadStatus = (TM_KEYPAD_Button_t) TM_KEYPAD_INT_Read();
 80007e6:	f7ff ffa9 	bl	800073c <TM_KEYPAD_INT_Read>
 80007ea:	4603      	mov	r3, r0
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b03      	ldr	r3, [pc, #12]	; (80007fc <TM_KEYPAD_Update+0x3c>)
 80007f0:	701a      	strb	r2, [r3, #0]
	}
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000098 	.word	0x20000098
 80007fc:	20000010 	.word	0x20000010

08000800 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t*pGPIOx, uint8_t EnorDi)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d162      	bne.n	80008d8 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a64      	ldr	r2, [pc, #400]	; (80009a8 <GPIO_PeriClockControl+0x1a8>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d106      	bne.n	8000828 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800081a:	4b64      	ldr	r3, [pc, #400]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a63      	ldr	r2, [pc, #396]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000826:	e0b9      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a61      	ldr	r2, [pc, #388]	; (80009b0 <GPIO_PeriClockControl+0x1b0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d106      	bne.n	800083e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000830:	4b5e      	ldr	r3, [pc, #376]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	4a5d      	ldr	r2, [pc, #372]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000836:	f043 0302 	orr.w	r3, r3, #2
 800083a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800083c:	e0ae      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a5c      	ldr	r2, [pc, #368]	; (80009b4 <GPIO_PeriClockControl+0x1b4>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d106      	bne.n	8000854 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000846:	4b59      	ldr	r3, [pc, #356]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a58      	ldr	r2, [pc, #352]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000852:	e0a3      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a58      	ldr	r2, [pc, #352]	; (80009b8 <GPIO_PeriClockControl+0x1b8>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d106      	bne.n	800086a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800085c:	4b53      	ldr	r3, [pc, #332]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	4a52      	ldr	r2, [pc, #328]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000862:	f043 0308 	orr.w	r3, r3, #8
 8000866:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000868:	e098      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a53      	ldr	r2, [pc, #332]	; (80009bc <GPIO_PeriClockControl+0x1bc>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000872:	4b4e      	ldr	r3, [pc, #312]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a4d      	ldr	r2, [pc, #308]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000878:	f043 0310 	orr.w	r3, r3, #16
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800087e:	e08d      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a4f      	ldr	r2, [pc, #316]	; (80009c0 <GPIO_PeriClockControl+0x1c0>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d106      	bne.n	8000896 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000888:	4b48      	ldr	r3, [pc, #288]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a47      	ldr	r2, [pc, #284]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 800088e:	f043 0320 	orr.w	r3, r3, #32
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000894:	e082      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a4a      	ldr	r2, [pc, #296]	; (80009c4 <GPIO_PeriClockControl+0x1c4>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d106      	bne.n	80008ac <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800089e:	4b43      	ldr	r3, [pc, #268]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a42      	ldr	r2, [pc, #264]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008aa:	e077      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a46      	ldr	r2, [pc, #280]	; (80009c8 <GPIO_PeriClockControl+0x1c8>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d106      	bne.n	80008c2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80008b4:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	4a3c      	ldr	r2, [pc, #240]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 80008ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008c0:	e06c      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a41      	ldr	r2, [pc, #260]	; (80009cc <GPIO_PeriClockControl+0x1cc>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d168      	bne.n	800099c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80008ca:	4b38      	ldr	r3, [pc, #224]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a37      	ldr	r2, [pc, #220]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 80008d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008d6:	e061      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a33      	ldr	r2, [pc, #204]	; (80009a8 <GPIO_PeriClockControl+0x1a8>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d106      	bne.n	80008ee <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80008e0:	4b32      	ldr	r3, [pc, #200]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4a31      	ldr	r2, [pc, #196]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 80008e6:	f023 0301 	bic.w	r3, r3, #1
 80008ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008ec:	e056      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a2f      	ldr	r2, [pc, #188]	; (80009b0 <GPIO_PeriClockControl+0x1b0>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d106      	bne.n	8000904 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80008f6:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a2c      	ldr	r2, [pc, #176]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 80008fc:	f023 0302 	bic.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000902:	e04b      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a2b      	ldr	r2, [pc, #172]	; (80009b4 <GPIO_PeriClockControl+0x1b4>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d106      	bne.n	800091a <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 800090c:	4b27      	ldr	r3, [pc, #156]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	4a26      	ldr	r2, [pc, #152]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000912:	f023 0304 	bic.w	r3, r3, #4
 8000916:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000918:	e040      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a26      	ldr	r2, [pc, #152]	; (80009b8 <GPIO_PeriClockControl+0x1b8>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d106      	bne.n	8000930 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a21      	ldr	r2, [pc, #132]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000928:	f023 0308 	bic.w	r3, r3, #8
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800092e:	e035      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a22      	ldr	r2, [pc, #136]	; (80009bc <GPIO_PeriClockControl+0x1bc>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d106      	bne.n	8000946 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 800093e:	f023 0310 	bic.w	r3, r3, #16
 8000942:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000944:	e02a      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <GPIO_PeriClockControl+0x1c0>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d106      	bne.n	800095c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000954:	f023 0320 	bic.w	r3, r3, #32
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
}
 800095a:	e01f      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <GPIO_PeriClockControl+0x1c4>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d106      	bne.n	8000972 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a10      	ldr	r2, [pc, #64]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 800096a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000970:	e014      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <GPIO_PeriClockControl+0x1c8>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d106      	bne.n	8000988 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000986:	e009      	b.n	800099c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a10      	ldr	r2, [pc, #64]	; (80009cc <GPIO_PeriClockControl+0x1cc>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d105      	bne.n	800099c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	4a05      	ldr	r2, [pc, #20]	; (80009ac <GPIO_PeriClockControl+0x1ac>)
 8000996:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800099a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020400 	.word	0x40020400
 80009b4:	40020800 	.word	0x40020800
 80009b8:	40020c00 	.word	0x40020c00
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40021400 	.word	0x40021400
 80009c4:	40021800 	.word	0x40021800
 80009c8:	40021c00 	.word	0x40021c00
 80009cc:	40022000 	.word	0x40022000

080009d0 <GPIO_Init>:

/*
 * Init & De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2101      	movs	r1, #1
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff0c 	bl	8000800 <GPIO_PeriClockControl>

	//1. configure the mode of gpio
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	795b      	ldrb	r3, [r3, #5]
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d81f      	bhi.n	8000a30 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	795b      	ldrb	r3, [r3, #5]
 80009f4:	461a      	mov	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	617b      	str	r3, [r7, #20]

		pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	791b      	ldrb	r3, [r3, #4]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	2303      	movs	r3, #3
 8000a10:	408b      	lsls	r3, r1
 8000a12:	43db      	mvns	r3, r3
 8000a14:	4619      	mov	r1, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	400a      	ands	r2, r1
 8000a1c:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx ->MODER |= temp; //setting
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	6819      	ldr	r1, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	e0c2      	b.n	8000bb6 <GPIO_Init+0x1e6>


	}else
	{
		//code later
		if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	795b      	ldrb	r3, [r3, #5]
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	d817      	bhi.n	8000a68 <GPIO_Init+0x98>
		{
			//1. configure the FTSR
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000a38:	4b47      	ldr	r3, [pc, #284]	; (8000b58 <GPIO_Init+0x188>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	7912      	ldrb	r2, [r2, #4]
 8000a40:	4611      	mov	r1, r2
 8000a42:	2201      	movs	r2, #1
 8000a44:	408a      	lsls	r2, r1
 8000a46:	4611      	mov	r1, r2
 8000a48:	4a43      	ldr	r2, [pc, #268]	; (8000b58 <GPIO_Init+0x188>)
 8000a4a:	430b      	orrs	r3, r1
 8000a4c:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI ->RTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000a4e:	4b42      	ldr	r3, [pc, #264]	; (8000b58 <GPIO_Init+0x188>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	7912      	ldrb	r2, [r2, #4]
 8000a56:	4611      	mov	r1, r2
 8000a58:	2201      	movs	r2, #1
 8000a5a:	408a      	lsls	r2, r1
 8000a5c:	43d2      	mvns	r2, r2
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4a3d      	ldr	r2, [pc, #244]	; (8000b58 <GPIO_Init+0x188>)
 8000a62:	400b      	ands	r3, r1
 8000a64:	6093      	str	r3, [r2, #8]
 8000a66:	e035      	b.n	8000ad4 <GPIO_Init+0x104>
		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	795b      	ldrb	r3, [r3, #5]
 8000a6c:	2b05      	cmp	r3, #5
 8000a6e:	d817      	bhi.n	8000aa0 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000a70:	4b39      	ldr	r3, [pc, #228]	; (8000b58 <GPIO_Init+0x188>)
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	7912      	ldrb	r2, [r2, #4]
 8000a78:	4611      	mov	r1, r2
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	408a      	lsls	r2, r1
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4a35      	ldr	r2, [pc, #212]	; (8000b58 <GPIO_Init+0x188>)
 8000a82:	430b      	orrs	r3, r1
 8000a84:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000a86:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <GPIO_Init+0x188>)
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	7912      	ldrb	r2, [r2, #4]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	2201      	movs	r2, #1
 8000a92:	408a      	lsls	r2, r1
 8000a94:	43d2      	mvns	r2, r2
 8000a96:	4611      	mov	r1, r2
 8000a98:	4a2f      	ldr	r2, [pc, #188]	; (8000b58 <GPIO_Init+0x188>)
 8000a9a:	400b      	ands	r3, r1
 8000a9c:	60d3      	str	r3, [r2, #12]
 8000a9e:	e019      	b.n	8000ad4 <GPIO_Init+0x104>

		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	795b      	ldrb	r3, [r3, #5]
 8000aa4:	2b06      	cmp	r3, #6
 8000aa6:	d815      	bhi.n	8000ad4 <GPIO_Init+0x104>
		{
			//1. configure the both FTSR and RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <GPIO_Init+0x188>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	7912      	ldrb	r2, [r2, #4]
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	408a      	lsls	r2, r1
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4a27      	ldr	r2, [pc, #156]	; (8000b58 <GPIO_Init+0x188>)
 8000aba:	430b      	orrs	r3, r1
 8000abc:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <GPIO_Init+0x188>)
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	7912      	ldrb	r2, [r2, #4]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	2201      	movs	r2, #1
 8000aca:	408a      	lsls	r2, r1
 8000acc:	4611      	mov	r1, r2
 8000ace:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <GPIO_Init+0x188>)
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	60d3      	str	r3, [r2, #12]

		}

		//2. configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	791b      	ldrb	r3, [r3, #4]
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	791b      	ldrb	r3, [r3, #4]
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <GPIO_Init+0x18c>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d045      	beq.n	8000b7c <GPIO_Init+0x1ac>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a1a      	ldr	r2, [pc, #104]	; (8000b60 <GPIO_Init+0x190>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d02b      	beq.n	8000b52 <GPIO_Init+0x182>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <GPIO_Init+0x194>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d024      	beq.n	8000b4e <GPIO_Init+0x17e>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <GPIO_Init+0x198>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d01d      	beq.n	8000b4a <GPIO_Init+0x17a>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <GPIO_Init+0x19c>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d016      	beq.n	8000b46 <GPIO_Init+0x176>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <GPIO_Init+0x1a0>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d00f      	beq.n	8000b42 <GPIO_Init+0x172>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <GPIO_Init+0x1a4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d008      	beq.n	8000b3e <GPIO_Init+0x16e>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <GPIO_Init+0x1a8>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d101      	bne.n	8000b3a <GPIO_Init+0x16a>
 8000b36:	2307      	movs	r3, #7
 8000b38:	e021      	b.n	8000b7e <GPIO_Init+0x1ae>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e01f      	b.n	8000b7e <GPIO_Init+0x1ae>
 8000b3e:	2306      	movs	r3, #6
 8000b40:	e01d      	b.n	8000b7e <GPIO_Init+0x1ae>
 8000b42:	2305      	movs	r3, #5
 8000b44:	e01b      	b.n	8000b7e <GPIO_Init+0x1ae>
 8000b46:	2304      	movs	r3, #4
 8000b48:	e019      	b.n	8000b7e <GPIO_Init+0x1ae>
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e017      	b.n	8000b7e <GPIO_Init+0x1ae>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e015      	b.n	8000b7e <GPIO_Init+0x1ae>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e013      	b.n	8000b7e <GPIO_Init+0x1ae>
 8000b56:	bf00      	nop
 8000b58:	40013c00 	.word	0x40013c00
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020400 	.word	0x40020400
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40021400 	.word	0x40021400
 8000b74:	40021800 	.word	0x40021800
 8000b78:	40021c00 	.word	0x40021c00
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000b80:	4b5c      	ldr	r3, [pc, #368]	; (8000cf4 <GPIO_Init+0x324>)
 8000b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b84:	4a5b      	ldr	r2, [pc, #364]	; (8000cf4 <GPIO_Init+0x324>)
 8000b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]= portcode << (temp2*4);
 8000b8c:	7c7a      	ldrb	r2, [r7, #17]
 8000b8e:	7cbb      	ldrb	r3, [r7, #18]
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	fa02 f103 	lsl.w	r1, r2, r3
 8000b96:	4a58      	ldr	r2, [pc, #352]	; (8000cf8 <GPIO_Init+0x328>)
 8000b98:	7cfb      	ldrb	r3, [r7, #19]
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI ->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000ba0:	4b56      	ldr	r3, [pc, #344]	; (8000cfc <GPIO_Init+0x32c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	7912      	ldrb	r2, [r2, #4]
 8000ba8:	4611      	mov	r1, r2
 8000baa:	2201      	movs	r2, #1
 8000bac:	408a      	lsls	r2, r1
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4a52      	ldr	r2, [pc, #328]	; (8000cfc <GPIO_Init+0x32c>)
 8000bb2:	430b      	orrs	r3, r1
 8000bb4:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
	//2. configure the speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	799b      	ldrb	r3, [r3, #6]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	791b      	ldrb	r3, [r3, #4]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	791b      	ldrb	r3, [r3, #4]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	2303      	movs	r3, #3
 8000bda:	408b      	lsls	r3, r1
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	4619      	mov	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	400a      	ands	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OSPEEDR |= temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6899      	ldr	r1, [r3, #8]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	609a      	str	r2, [r3, #8]

	temp =0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
	//3. configure the pu pd settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	79db      	ldrb	r3, [r3, #7]
 8000c00:	461a      	mov	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	791b      	ldrb	r3, [r3, #4]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	791b      	ldrb	r3, [r3, #4]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	4619      	mov	r1, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	400a      	ands	r2, r1
 8000c28:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->PUPDR |= temp;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68d9      	ldr	r1, [r3, #12]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	430a      	orrs	r2, r1
 8000c38:	60da      	str	r2, [r3, #12]

	temp =0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]

	//4. configure
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinoType << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7a1b      	ldrb	r3, [r3, #8]
 8000c42:	461a      	mov	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	791b      	ldrb	r3, [r3, #4]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x01 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	791b      	ldrb	r3, [r3, #4]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	408b      	lsls	r3, r1
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	4619      	mov	r1, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	400a      	ands	r2, r1
 8000c68:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OTYPER |= temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6859      	ldr	r1, [r3, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	605a      	str	r2, [r3, #4]

	temp =0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]

	//5. configure
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	795b      	ldrb	r3, [r3, #5]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d132      	bne.n	8000cec <GPIO_Init+0x31c>
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	791b      	ldrb	r3, [r3, #4]
 8000c8a:	08db      	lsrs	r3, r3, #3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	791b      	ldrb	r3, [r3, #4]
 8000c94:	f003 0307 	and.w	r3, r3, #7
 8000c98:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	3208      	adds	r2, #8
 8000ca2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	210f      	movs	r1, #15
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4011      	ands	r1, r2
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	3208      	adds	r2, #8
 8000cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	3208      	adds	r2, #8
 8000cca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7a5b      	ldrb	r3, [r3, #9]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4311      	orrs	r1, r2
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	3208      	adds	r2, #8
 8000ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40013800 	.word	0x40013800
 8000cfc:	40013c00 	.word	0x40013c00

08000d00 <GPIO_ReadFromInputPin>:

/*
 * Data read & write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (pGPIOx->IDR >> PinNumber) & 0x00000001;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691a      	ldr	r2, [r3, #16]
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	fa22 f303 	lsr.w	r3, r2, r3
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
	return value;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <GPIO_WriteToOutputPin>:
	uint16_t value;
	value = (uint8_t)pGPIOx->IDR;
	return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	460b      	mov	r3, r1
 8000d34:	70fb      	strb	r3, [r7, #3]
 8000d36:	4613      	mov	r3, r2
 8000d38:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8000d3a:	78bb      	ldrb	r3, [r7, #2]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d109      	bne.n	8000d54 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx -> ODR |= (1<< PinNumber);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	78fa      	ldrb	r2, [r7, #3]
 8000d46:	2101      	movs	r1, #1
 8000d48:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx -> ODR &= ~(1 << PinNumber);
	}
}
 8000d52:	e009      	b.n	8000d68 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx -> ODR &= ~(1 << PinNumber);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	78fa      	ldrb	r2, [r7, #3]
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d60:	43d2      	mvns	r2, r2
 8000d62:	401a      	ands	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	615a      	str	r2, [r3, #20]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
	...

08000d74 <__errno>:
 8000d74:	4b01      	ldr	r3, [pc, #4]	; (8000d7c <__errno+0x8>)
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000014 	.word	0x20000014

08000d80 <__libc_init_array>:
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	4d0d      	ldr	r5, [pc, #52]	; (8000db8 <__libc_init_array+0x38>)
 8000d84:	4c0d      	ldr	r4, [pc, #52]	; (8000dbc <__libc_init_array+0x3c>)
 8000d86:	1b64      	subs	r4, r4, r5
 8000d88:	10a4      	asrs	r4, r4, #2
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	42a6      	cmp	r6, r4
 8000d8e:	d109      	bne.n	8000da4 <__libc_init_array+0x24>
 8000d90:	4d0b      	ldr	r5, [pc, #44]	; (8000dc0 <__libc_init_array+0x40>)
 8000d92:	4c0c      	ldr	r4, [pc, #48]	; (8000dc4 <__libc_init_array+0x44>)
 8000d94:	f000 ff72 	bl	8001c7c <_init>
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	10a4      	asrs	r4, r4, #2
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	42a6      	cmp	r6, r4
 8000da0:	d105      	bne.n	8000dae <__libc_init_array+0x2e>
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000da8:	4798      	blx	r3
 8000daa:	3601      	adds	r6, #1
 8000dac:	e7ee      	b.n	8000d8c <__libc_init_array+0xc>
 8000dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8000db2:	4798      	blx	r3
 8000db4:	3601      	adds	r6, #1
 8000db6:	e7f2      	b.n	8000d9e <__libc_init_array+0x1e>
 8000db8:	08001d3c 	.word	0x08001d3c
 8000dbc:	08001d3c 	.word	0x08001d3c
 8000dc0:	08001d3c 	.word	0x08001d3c
 8000dc4:	08001d40 	.word	0x08001d40

08000dc8 <memset>:
 8000dc8:	4402      	add	r2, r0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d100      	bne.n	8000dd2 <memset+0xa>
 8000dd0:	4770      	bx	lr
 8000dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8000dd6:	e7f9      	b.n	8000dcc <memset+0x4>

08000dd8 <iprintf>:
 8000dd8:	b40f      	push	{r0, r1, r2, r3}
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <iprintf+0x2c>)
 8000ddc:	b513      	push	{r0, r1, r4, lr}
 8000dde:	681c      	ldr	r4, [r3, #0]
 8000de0:	b124      	cbz	r4, 8000dec <iprintf+0x14>
 8000de2:	69a3      	ldr	r3, [r4, #24]
 8000de4:	b913      	cbnz	r3, 8000dec <iprintf+0x14>
 8000de6:	4620      	mov	r0, r4
 8000de8:	f000 f866 	bl	8000eb8 <__sinit>
 8000dec:	ab05      	add	r3, sp, #20
 8000dee:	9a04      	ldr	r2, [sp, #16]
 8000df0:	68a1      	ldr	r1, [r4, #8]
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	4620      	mov	r0, r4
 8000df6:	f000 f981 	bl	80010fc <_vfiprintf_r>
 8000dfa:	b002      	add	sp, #8
 8000dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e00:	b004      	add	sp, #16
 8000e02:	4770      	bx	lr
 8000e04:	20000014 	.word	0x20000014

08000e08 <std>:
 8000e08:	2300      	movs	r3, #0
 8000e0a:	b510      	push	{r4, lr}
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8000e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e16:	6083      	str	r3, [r0, #8]
 8000e18:	8181      	strh	r1, [r0, #12]
 8000e1a:	6643      	str	r3, [r0, #100]	; 0x64
 8000e1c:	81c2      	strh	r2, [r0, #14]
 8000e1e:	6183      	str	r3, [r0, #24]
 8000e20:	4619      	mov	r1, r3
 8000e22:	2208      	movs	r2, #8
 8000e24:	305c      	adds	r0, #92	; 0x5c
 8000e26:	f7ff ffcf 	bl	8000dc8 <memset>
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <std+0x38>)
 8000e2c:	6263      	str	r3, [r4, #36]	; 0x24
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <std+0x3c>)
 8000e30:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <std+0x40>)
 8000e34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <std+0x44>)
 8000e38:	6224      	str	r4, [r4, #32]
 8000e3a:	6323      	str	r3, [r4, #48]	; 0x30
 8000e3c:	bd10      	pop	{r4, pc}
 8000e3e:	bf00      	nop
 8000e40:	080016a5 	.word	0x080016a5
 8000e44:	080016c7 	.word	0x080016c7
 8000e48:	080016ff 	.word	0x080016ff
 8000e4c:	08001723 	.word	0x08001723

08000e50 <_cleanup_r>:
 8000e50:	4901      	ldr	r1, [pc, #4]	; (8000e58 <_cleanup_r+0x8>)
 8000e52:	f000 b8af 	b.w	8000fb4 <_fwalk_reent>
 8000e56:	bf00      	nop
 8000e58:	080019fd 	.word	0x080019fd

08000e5c <__sfmoreglue>:
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	1e4a      	subs	r2, r1, #1
 8000e60:	2568      	movs	r5, #104	; 0x68
 8000e62:	4355      	muls	r5, r2
 8000e64:	460e      	mov	r6, r1
 8000e66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e6a:	f000 f8c5 	bl	8000ff8 <_malloc_r>
 8000e6e:	4604      	mov	r4, r0
 8000e70:	b140      	cbz	r0, 8000e84 <__sfmoreglue+0x28>
 8000e72:	2100      	movs	r1, #0
 8000e74:	e9c0 1600 	strd	r1, r6, [r0]
 8000e78:	300c      	adds	r0, #12
 8000e7a:	60a0      	str	r0, [r4, #8]
 8000e7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e80:	f7ff ffa2 	bl	8000dc8 <memset>
 8000e84:	4620      	mov	r0, r4
 8000e86:	bd70      	pop	{r4, r5, r6, pc}

08000e88 <__sfp_lock_acquire>:
 8000e88:	4801      	ldr	r0, [pc, #4]	; (8000e90 <__sfp_lock_acquire+0x8>)
 8000e8a:	f000 b8b3 	b.w	8000ff4 <__retarget_lock_acquire_recursive>
 8000e8e:	bf00      	nop
 8000e90:	200000ad 	.word	0x200000ad

08000e94 <__sfp_lock_release>:
 8000e94:	4801      	ldr	r0, [pc, #4]	; (8000e9c <__sfp_lock_release+0x8>)
 8000e96:	f000 b8ae 	b.w	8000ff6 <__retarget_lock_release_recursive>
 8000e9a:	bf00      	nop
 8000e9c:	200000ad 	.word	0x200000ad

08000ea0 <__sinit_lock_acquire>:
 8000ea0:	4801      	ldr	r0, [pc, #4]	; (8000ea8 <__sinit_lock_acquire+0x8>)
 8000ea2:	f000 b8a7 	b.w	8000ff4 <__retarget_lock_acquire_recursive>
 8000ea6:	bf00      	nop
 8000ea8:	200000a8 	.word	0x200000a8

08000eac <__sinit_lock_release>:
 8000eac:	4801      	ldr	r0, [pc, #4]	; (8000eb4 <__sinit_lock_release+0x8>)
 8000eae:	f000 b8a2 	b.w	8000ff6 <__retarget_lock_release_recursive>
 8000eb2:	bf00      	nop
 8000eb4:	200000a8 	.word	0x200000a8

08000eb8 <__sinit>:
 8000eb8:	b510      	push	{r4, lr}
 8000eba:	4604      	mov	r4, r0
 8000ebc:	f7ff fff0 	bl	8000ea0 <__sinit_lock_acquire>
 8000ec0:	69a3      	ldr	r3, [r4, #24]
 8000ec2:	b11b      	cbz	r3, 8000ecc <__sinit+0x14>
 8000ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ec8:	f7ff bff0 	b.w	8000eac <__sinit_lock_release>
 8000ecc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ed0:	6523      	str	r3, [r4, #80]	; 0x50
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <__sinit+0x68>)
 8000ed4:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <__sinit+0x6c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	62a2      	str	r2, [r4, #40]	; 0x28
 8000eda:	42a3      	cmp	r3, r4
 8000edc:	bf04      	itt	eq
 8000ede:	2301      	moveq	r3, #1
 8000ee0:	61a3      	streq	r3, [r4, #24]
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f000 f820 	bl	8000f28 <__sfp>
 8000ee8:	6060      	str	r0, [r4, #4]
 8000eea:	4620      	mov	r0, r4
 8000eec:	f000 f81c 	bl	8000f28 <__sfp>
 8000ef0:	60a0      	str	r0, [r4, #8]
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f000 f818 	bl	8000f28 <__sfp>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60e0      	str	r0, [r4, #12]
 8000efc:	2104      	movs	r1, #4
 8000efe:	6860      	ldr	r0, [r4, #4]
 8000f00:	f7ff ff82 	bl	8000e08 <std>
 8000f04:	68a0      	ldr	r0, [r4, #8]
 8000f06:	2201      	movs	r2, #1
 8000f08:	2109      	movs	r1, #9
 8000f0a:	f7ff ff7d 	bl	8000e08 <std>
 8000f0e:	68e0      	ldr	r0, [r4, #12]
 8000f10:	2202      	movs	r2, #2
 8000f12:	2112      	movs	r1, #18
 8000f14:	f7ff ff78 	bl	8000e08 <std>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61a3      	str	r3, [r4, #24]
 8000f1c:	e7d2      	b.n	8000ec4 <__sinit+0xc>
 8000f1e:	bf00      	nop
 8000f20:	08001ca4 	.word	0x08001ca4
 8000f24:	08000e51 	.word	0x08000e51

08000f28 <__sfp>:
 8000f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2a:	4607      	mov	r7, r0
 8000f2c:	f7ff ffac 	bl	8000e88 <__sfp_lock_acquire>
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <__sfp+0x84>)
 8000f32:	681e      	ldr	r6, [r3, #0]
 8000f34:	69b3      	ldr	r3, [r6, #24]
 8000f36:	b913      	cbnz	r3, 8000f3e <__sfp+0x16>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	f7ff ffbd 	bl	8000eb8 <__sinit>
 8000f3e:	3648      	adds	r6, #72	; 0x48
 8000f40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	d503      	bpl.n	8000f50 <__sfp+0x28>
 8000f48:	6833      	ldr	r3, [r6, #0]
 8000f4a:	b30b      	cbz	r3, 8000f90 <__sfp+0x68>
 8000f4c:	6836      	ldr	r6, [r6, #0]
 8000f4e:	e7f7      	b.n	8000f40 <__sfp+0x18>
 8000f50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f54:	b9d5      	cbnz	r5, 8000f8c <__sfp+0x64>
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <__sfp+0x88>)
 8000f58:	60e3      	str	r3, [r4, #12]
 8000f5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f5e:	6665      	str	r5, [r4, #100]	; 0x64
 8000f60:	f000 f847 	bl	8000ff2 <__retarget_lock_init_recursive>
 8000f64:	f7ff ff96 	bl	8000e94 <__sfp_lock_release>
 8000f68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f70:	6025      	str	r5, [r4, #0]
 8000f72:	61a5      	str	r5, [r4, #24]
 8000f74:	2208      	movs	r2, #8
 8000f76:	4629      	mov	r1, r5
 8000f78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f7c:	f7ff ff24 	bl	8000dc8 <memset>
 8000f80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f88:	4620      	mov	r0, r4
 8000f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f8c:	3468      	adds	r4, #104	; 0x68
 8000f8e:	e7d9      	b.n	8000f44 <__sfp+0x1c>
 8000f90:	2104      	movs	r1, #4
 8000f92:	4638      	mov	r0, r7
 8000f94:	f7ff ff62 	bl	8000e5c <__sfmoreglue>
 8000f98:	4604      	mov	r4, r0
 8000f9a:	6030      	str	r0, [r6, #0]
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	d1d5      	bne.n	8000f4c <__sfp+0x24>
 8000fa0:	f7ff ff78 	bl	8000e94 <__sfp_lock_release>
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	e7ee      	b.n	8000f88 <__sfp+0x60>
 8000faa:	bf00      	nop
 8000fac:	08001ca4 	.word	0x08001ca4
 8000fb0:	ffff0001 	.word	0xffff0001

08000fb4 <_fwalk_reent>:
 8000fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fb8:	4606      	mov	r6, r0
 8000fba:	4688      	mov	r8, r1
 8000fbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000fc0:	2700      	movs	r7, #0
 8000fc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000fc6:	f1b9 0901 	subs.w	r9, r9, #1
 8000fca:	d505      	bpl.n	8000fd8 <_fwalk_reent+0x24>
 8000fcc:	6824      	ldr	r4, [r4, #0]
 8000fce:	2c00      	cmp	r4, #0
 8000fd0:	d1f7      	bne.n	8000fc2 <_fwalk_reent+0xe>
 8000fd2:	4638      	mov	r0, r7
 8000fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fd8:	89ab      	ldrh	r3, [r5, #12]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d907      	bls.n	8000fee <_fwalk_reent+0x3a>
 8000fde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	d003      	beq.n	8000fee <_fwalk_reent+0x3a>
 8000fe6:	4629      	mov	r1, r5
 8000fe8:	4630      	mov	r0, r6
 8000fea:	47c0      	blx	r8
 8000fec:	4307      	orrs	r7, r0
 8000fee:	3568      	adds	r5, #104	; 0x68
 8000ff0:	e7e9      	b.n	8000fc6 <_fwalk_reent+0x12>

08000ff2 <__retarget_lock_init_recursive>:
 8000ff2:	4770      	bx	lr

08000ff4 <__retarget_lock_acquire_recursive>:
 8000ff4:	4770      	bx	lr

08000ff6 <__retarget_lock_release_recursive>:
 8000ff6:	4770      	bx	lr

08000ff8 <_malloc_r>:
 8000ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffa:	1ccd      	adds	r5, r1, #3
 8000ffc:	f025 0503 	bic.w	r5, r5, #3
 8001000:	3508      	adds	r5, #8
 8001002:	2d0c      	cmp	r5, #12
 8001004:	bf38      	it	cc
 8001006:	250c      	movcc	r5, #12
 8001008:	2d00      	cmp	r5, #0
 800100a:	4606      	mov	r6, r0
 800100c:	db01      	blt.n	8001012 <_malloc_r+0x1a>
 800100e:	42a9      	cmp	r1, r5
 8001010:	d903      	bls.n	800101a <_malloc_r+0x22>
 8001012:	230c      	movs	r3, #12
 8001014:	6033      	str	r3, [r6, #0]
 8001016:	2000      	movs	r0, #0
 8001018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800101a:	f000 fda1 	bl	8001b60 <__malloc_lock>
 800101e:	4921      	ldr	r1, [pc, #132]	; (80010a4 <_malloc_r+0xac>)
 8001020:	680a      	ldr	r2, [r1, #0]
 8001022:	4614      	mov	r4, r2
 8001024:	b99c      	cbnz	r4, 800104e <_malloc_r+0x56>
 8001026:	4f20      	ldr	r7, [pc, #128]	; (80010a8 <_malloc_r+0xb0>)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b923      	cbnz	r3, 8001036 <_malloc_r+0x3e>
 800102c:	4621      	mov	r1, r4
 800102e:	4630      	mov	r0, r6
 8001030:	f000 fb28 	bl	8001684 <_sbrk_r>
 8001034:	6038      	str	r0, [r7, #0]
 8001036:	4629      	mov	r1, r5
 8001038:	4630      	mov	r0, r6
 800103a:	f000 fb23 	bl	8001684 <_sbrk_r>
 800103e:	1c43      	adds	r3, r0, #1
 8001040:	d123      	bne.n	800108a <_malloc_r+0x92>
 8001042:	230c      	movs	r3, #12
 8001044:	6033      	str	r3, [r6, #0]
 8001046:	4630      	mov	r0, r6
 8001048:	f000 fd90 	bl	8001b6c <__malloc_unlock>
 800104c:	e7e3      	b.n	8001016 <_malloc_r+0x1e>
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	1b5b      	subs	r3, r3, r5
 8001052:	d417      	bmi.n	8001084 <_malloc_r+0x8c>
 8001054:	2b0b      	cmp	r3, #11
 8001056:	d903      	bls.n	8001060 <_malloc_r+0x68>
 8001058:	6023      	str	r3, [r4, #0]
 800105a:	441c      	add	r4, r3
 800105c:	6025      	str	r5, [r4, #0]
 800105e:	e004      	b.n	800106a <_malloc_r+0x72>
 8001060:	6863      	ldr	r3, [r4, #4]
 8001062:	42a2      	cmp	r2, r4
 8001064:	bf0c      	ite	eq
 8001066:	600b      	streq	r3, [r1, #0]
 8001068:	6053      	strne	r3, [r2, #4]
 800106a:	4630      	mov	r0, r6
 800106c:	f000 fd7e 	bl	8001b6c <__malloc_unlock>
 8001070:	f104 000b 	add.w	r0, r4, #11
 8001074:	1d23      	adds	r3, r4, #4
 8001076:	f020 0007 	bic.w	r0, r0, #7
 800107a:	1ac2      	subs	r2, r0, r3
 800107c:	d0cc      	beq.n	8001018 <_malloc_r+0x20>
 800107e:	1a1b      	subs	r3, r3, r0
 8001080:	50a3      	str	r3, [r4, r2]
 8001082:	e7c9      	b.n	8001018 <_malloc_r+0x20>
 8001084:	4622      	mov	r2, r4
 8001086:	6864      	ldr	r4, [r4, #4]
 8001088:	e7cc      	b.n	8001024 <_malloc_r+0x2c>
 800108a:	1cc4      	adds	r4, r0, #3
 800108c:	f024 0403 	bic.w	r4, r4, #3
 8001090:	42a0      	cmp	r0, r4
 8001092:	d0e3      	beq.n	800105c <_malloc_r+0x64>
 8001094:	1a21      	subs	r1, r4, r0
 8001096:	4630      	mov	r0, r6
 8001098:	f000 faf4 	bl	8001684 <_sbrk_r>
 800109c:	3001      	adds	r0, #1
 800109e:	d1dd      	bne.n	800105c <_malloc_r+0x64>
 80010a0:	e7cf      	b.n	8001042 <_malloc_r+0x4a>
 80010a2:	bf00      	nop
 80010a4:	2000009c 	.word	0x2000009c
 80010a8:	200000a0 	.word	0x200000a0

080010ac <__sfputc_r>:
 80010ac:	6893      	ldr	r3, [r2, #8]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	b410      	push	{r4}
 80010b4:	6093      	str	r3, [r2, #8]
 80010b6:	da07      	bge.n	80010c8 <__sfputc_r+0x1c>
 80010b8:	6994      	ldr	r4, [r2, #24]
 80010ba:	42a3      	cmp	r3, r4
 80010bc:	db01      	blt.n	80010c2 <__sfputc_r+0x16>
 80010be:	290a      	cmp	r1, #10
 80010c0:	d102      	bne.n	80010c8 <__sfputc_r+0x1c>
 80010c2:	bc10      	pop	{r4}
 80010c4:	f000 bb32 	b.w	800172c <__swbuf_r>
 80010c8:	6813      	ldr	r3, [r2, #0]
 80010ca:	1c58      	adds	r0, r3, #1
 80010cc:	6010      	str	r0, [r2, #0]
 80010ce:	7019      	strb	r1, [r3, #0]
 80010d0:	4608      	mov	r0, r1
 80010d2:	bc10      	pop	{r4}
 80010d4:	4770      	bx	lr

080010d6 <__sfputs_r>:
 80010d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010d8:	4606      	mov	r6, r0
 80010da:	460f      	mov	r7, r1
 80010dc:	4614      	mov	r4, r2
 80010de:	18d5      	adds	r5, r2, r3
 80010e0:	42ac      	cmp	r4, r5
 80010e2:	d101      	bne.n	80010e8 <__sfputs_r+0x12>
 80010e4:	2000      	movs	r0, #0
 80010e6:	e007      	b.n	80010f8 <__sfputs_r+0x22>
 80010e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010ec:	463a      	mov	r2, r7
 80010ee:	4630      	mov	r0, r6
 80010f0:	f7ff ffdc 	bl	80010ac <__sfputc_r>
 80010f4:	1c43      	adds	r3, r0, #1
 80010f6:	d1f3      	bne.n	80010e0 <__sfputs_r+0xa>
 80010f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080010fc <_vfiprintf_r>:
 80010fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001100:	460d      	mov	r5, r1
 8001102:	b09d      	sub	sp, #116	; 0x74
 8001104:	4614      	mov	r4, r2
 8001106:	4698      	mov	r8, r3
 8001108:	4606      	mov	r6, r0
 800110a:	b118      	cbz	r0, 8001114 <_vfiprintf_r+0x18>
 800110c:	6983      	ldr	r3, [r0, #24]
 800110e:	b90b      	cbnz	r3, 8001114 <_vfiprintf_r+0x18>
 8001110:	f7ff fed2 	bl	8000eb8 <__sinit>
 8001114:	4b89      	ldr	r3, [pc, #548]	; (800133c <_vfiprintf_r+0x240>)
 8001116:	429d      	cmp	r5, r3
 8001118:	d11b      	bne.n	8001152 <_vfiprintf_r+0x56>
 800111a:	6875      	ldr	r5, [r6, #4]
 800111c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800111e:	07d9      	lsls	r1, r3, #31
 8001120:	d405      	bmi.n	800112e <_vfiprintf_r+0x32>
 8001122:	89ab      	ldrh	r3, [r5, #12]
 8001124:	059a      	lsls	r2, r3, #22
 8001126:	d402      	bmi.n	800112e <_vfiprintf_r+0x32>
 8001128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800112a:	f7ff ff63 	bl	8000ff4 <__retarget_lock_acquire_recursive>
 800112e:	89ab      	ldrh	r3, [r5, #12]
 8001130:	071b      	lsls	r3, r3, #28
 8001132:	d501      	bpl.n	8001138 <_vfiprintf_r+0x3c>
 8001134:	692b      	ldr	r3, [r5, #16]
 8001136:	b9eb      	cbnz	r3, 8001174 <_vfiprintf_r+0x78>
 8001138:	4629      	mov	r1, r5
 800113a:	4630      	mov	r0, r6
 800113c:	f000 fb5a 	bl	80017f4 <__swsetup_r>
 8001140:	b1c0      	cbz	r0, 8001174 <_vfiprintf_r+0x78>
 8001142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001144:	07dc      	lsls	r4, r3, #31
 8001146:	d50e      	bpl.n	8001166 <_vfiprintf_r+0x6a>
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	b01d      	add	sp, #116	; 0x74
 800114e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001152:	4b7b      	ldr	r3, [pc, #492]	; (8001340 <_vfiprintf_r+0x244>)
 8001154:	429d      	cmp	r5, r3
 8001156:	d101      	bne.n	800115c <_vfiprintf_r+0x60>
 8001158:	68b5      	ldr	r5, [r6, #8]
 800115a:	e7df      	b.n	800111c <_vfiprintf_r+0x20>
 800115c:	4b79      	ldr	r3, [pc, #484]	; (8001344 <_vfiprintf_r+0x248>)
 800115e:	429d      	cmp	r5, r3
 8001160:	bf08      	it	eq
 8001162:	68f5      	ldreq	r5, [r6, #12]
 8001164:	e7da      	b.n	800111c <_vfiprintf_r+0x20>
 8001166:	89ab      	ldrh	r3, [r5, #12]
 8001168:	0598      	lsls	r0, r3, #22
 800116a:	d4ed      	bmi.n	8001148 <_vfiprintf_r+0x4c>
 800116c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800116e:	f7ff ff42 	bl	8000ff6 <__retarget_lock_release_recursive>
 8001172:	e7e9      	b.n	8001148 <_vfiprintf_r+0x4c>
 8001174:	2300      	movs	r3, #0
 8001176:	9309      	str	r3, [sp, #36]	; 0x24
 8001178:	2320      	movs	r3, #32
 800117a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800117e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001182:	2330      	movs	r3, #48	; 0x30
 8001184:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001348 <_vfiprintf_r+0x24c>
 8001188:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800118c:	f04f 0901 	mov.w	r9, #1
 8001190:	4623      	mov	r3, r4
 8001192:	469a      	mov	sl, r3
 8001194:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001198:	b10a      	cbz	r2, 800119e <_vfiprintf_r+0xa2>
 800119a:	2a25      	cmp	r2, #37	; 0x25
 800119c:	d1f9      	bne.n	8001192 <_vfiprintf_r+0x96>
 800119e:	ebba 0b04 	subs.w	fp, sl, r4
 80011a2:	d00b      	beq.n	80011bc <_vfiprintf_r+0xc0>
 80011a4:	465b      	mov	r3, fp
 80011a6:	4622      	mov	r2, r4
 80011a8:	4629      	mov	r1, r5
 80011aa:	4630      	mov	r0, r6
 80011ac:	f7ff ff93 	bl	80010d6 <__sfputs_r>
 80011b0:	3001      	adds	r0, #1
 80011b2:	f000 80aa 	beq.w	800130a <_vfiprintf_r+0x20e>
 80011b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80011b8:	445a      	add	r2, fp
 80011ba:	9209      	str	r2, [sp, #36]	; 0x24
 80011bc:	f89a 3000 	ldrb.w	r3, [sl]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80a2 	beq.w	800130a <_vfiprintf_r+0x20e>
 80011c6:	2300      	movs	r3, #0
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80011d0:	f10a 0a01 	add.w	sl, sl, #1
 80011d4:	9304      	str	r3, [sp, #16]
 80011d6:	9307      	str	r3, [sp, #28]
 80011d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80011dc:	931a      	str	r3, [sp, #104]	; 0x68
 80011de:	4654      	mov	r4, sl
 80011e0:	2205      	movs	r2, #5
 80011e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011e6:	4858      	ldr	r0, [pc, #352]	; (8001348 <_vfiprintf_r+0x24c>)
 80011e8:	f7ff f802 	bl	80001f0 <memchr>
 80011ec:	9a04      	ldr	r2, [sp, #16]
 80011ee:	b9d8      	cbnz	r0, 8001228 <_vfiprintf_r+0x12c>
 80011f0:	06d1      	lsls	r1, r2, #27
 80011f2:	bf44      	itt	mi
 80011f4:	2320      	movmi	r3, #32
 80011f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80011fa:	0713      	lsls	r3, r2, #28
 80011fc:	bf44      	itt	mi
 80011fe:	232b      	movmi	r3, #43	; 0x2b
 8001200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001204:	f89a 3000 	ldrb.w	r3, [sl]
 8001208:	2b2a      	cmp	r3, #42	; 0x2a
 800120a:	d015      	beq.n	8001238 <_vfiprintf_r+0x13c>
 800120c:	9a07      	ldr	r2, [sp, #28]
 800120e:	4654      	mov	r4, sl
 8001210:	2000      	movs	r0, #0
 8001212:	f04f 0c0a 	mov.w	ip, #10
 8001216:	4621      	mov	r1, r4
 8001218:	f811 3b01 	ldrb.w	r3, [r1], #1
 800121c:	3b30      	subs	r3, #48	; 0x30
 800121e:	2b09      	cmp	r3, #9
 8001220:	d94e      	bls.n	80012c0 <_vfiprintf_r+0x1c4>
 8001222:	b1b0      	cbz	r0, 8001252 <_vfiprintf_r+0x156>
 8001224:	9207      	str	r2, [sp, #28]
 8001226:	e014      	b.n	8001252 <_vfiprintf_r+0x156>
 8001228:	eba0 0308 	sub.w	r3, r0, r8
 800122c:	fa09 f303 	lsl.w	r3, r9, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	9304      	str	r3, [sp, #16]
 8001234:	46a2      	mov	sl, r4
 8001236:	e7d2      	b.n	80011de <_vfiprintf_r+0xe2>
 8001238:	9b03      	ldr	r3, [sp, #12]
 800123a:	1d19      	adds	r1, r3, #4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	9103      	str	r1, [sp, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	bfbb      	ittet	lt
 8001244:	425b      	neglt	r3, r3
 8001246:	f042 0202 	orrlt.w	r2, r2, #2
 800124a:	9307      	strge	r3, [sp, #28]
 800124c:	9307      	strlt	r3, [sp, #28]
 800124e:	bfb8      	it	lt
 8001250:	9204      	strlt	r2, [sp, #16]
 8001252:	7823      	ldrb	r3, [r4, #0]
 8001254:	2b2e      	cmp	r3, #46	; 0x2e
 8001256:	d10c      	bne.n	8001272 <_vfiprintf_r+0x176>
 8001258:	7863      	ldrb	r3, [r4, #1]
 800125a:	2b2a      	cmp	r3, #42	; 0x2a
 800125c:	d135      	bne.n	80012ca <_vfiprintf_r+0x1ce>
 800125e:	9b03      	ldr	r3, [sp, #12]
 8001260:	1d1a      	adds	r2, r3, #4
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	9203      	str	r2, [sp, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	bfb8      	it	lt
 800126a:	f04f 33ff 	movlt.w	r3, #4294967295
 800126e:	3402      	adds	r4, #2
 8001270:	9305      	str	r3, [sp, #20]
 8001272:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001358 <_vfiprintf_r+0x25c>
 8001276:	7821      	ldrb	r1, [r4, #0]
 8001278:	2203      	movs	r2, #3
 800127a:	4650      	mov	r0, sl
 800127c:	f7fe ffb8 	bl	80001f0 <memchr>
 8001280:	b140      	cbz	r0, 8001294 <_vfiprintf_r+0x198>
 8001282:	2340      	movs	r3, #64	; 0x40
 8001284:	eba0 000a 	sub.w	r0, r0, sl
 8001288:	fa03 f000 	lsl.w	r0, r3, r0
 800128c:	9b04      	ldr	r3, [sp, #16]
 800128e:	4303      	orrs	r3, r0
 8001290:	3401      	adds	r4, #1
 8001292:	9304      	str	r3, [sp, #16]
 8001294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001298:	482c      	ldr	r0, [pc, #176]	; (800134c <_vfiprintf_r+0x250>)
 800129a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800129e:	2206      	movs	r2, #6
 80012a0:	f7fe ffa6 	bl	80001f0 <memchr>
 80012a4:	2800      	cmp	r0, #0
 80012a6:	d03f      	beq.n	8001328 <_vfiprintf_r+0x22c>
 80012a8:	4b29      	ldr	r3, [pc, #164]	; (8001350 <_vfiprintf_r+0x254>)
 80012aa:	bb1b      	cbnz	r3, 80012f4 <_vfiprintf_r+0x1f8>
 80012ac:	9b03      	ldr	r3, [sp, #12]
 80012ae:	3307      	adds	r3, #7
 80012b0:	f023 0307 	bic.w	r3, r3, #7
 80012b4:	3308      	adds	r3, #8
 80012b6:	9303      	str	r3, [sp, #12]
 80012b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012ba:	443b      	add	r3, r7
 80012bc:	9309      	str	r3, [sp, #36]	; 0x24
 80012be:	e767      	b.n	8001190 <_vfiprintf_r+0x94>
 80012c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80012c4:	460c      	mov	r4, r1
 80012c6:	2001      	movs	r0, #1
 80012c8:	e7a5      	b.n	8001216 <_vfiprintf_r+0x11a>
 80012ca:	2300      	movs	r3, #0
 80012cc:	3401      	adds	r4, #1
 80012ce:	9305      	str	r3, [sp, #20]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 0c0a 	mov.w	ip, #10
 80012d6:	4620      	mov	r0, r4
 80012d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80012dc:	3a30      	subs	r2, #48	; 0x30
 80012de:	2a09      	cmp	r2, #9
 80012e0:	d903      	bls.n	80012ea <_vfiprintf_r+0x1ee>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0c5      	beq.n	8001272 <_vfiprintf_r+0x176>
 80012e6:	9105      	str	r1, [sp, #20]
 80012e8:	e7c3      	b.n	8001272 <_vfiprintf_r+0x176>
 80012ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80012ee:	4604      	mov	r4, r0
 80012f0:	2301      	movs	r3, #1
 80012f2:	e7f0      	b.n	80012d6 <_vfiprintf_r+0x1da>
 80012f4:	ab03      	add	r3, sp, #12
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	462a      	mov	r2, r5
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <_vfiprintf_r+0x258>)
 80012fc:	a904      	add	r1, sp, #16
 80012fe:	4630      	mov	r0, r6
 8001300:	f3af 8000 	nop.w
 8001304:	4607      	mov	r7, r0
 8001306:	1c78      	adds	r0, r7, #1
 8001308:	d1d6      	bne.n	80012b8 <_vfiprintf_r+0x1bc>
 800130a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800130c:	07d9      	lsls	r1, r3, #31
 800130e:	d405      	bmi.n	800131c <_vfiprintf_r+0x220>
 8001310:	89ab      	ldrh	r3, [r5, #12]
 8001312:	059a      	lsls	r2, r3, #22
 8001314:	d402      	bmi.n	800131c <_vfiprintf_r+0x220>
 8001316:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001318:	f7ff fe6d 	bl	8000ff6 <__retarget_lock_release_recursive>
 800131c:	89ab      	ldrh	r3, [r5, #12]
 800131e:	065b      	lsls	r3, r3, #25
 8001320:	f53f af12 	bmi.w	8001148 <_vfiprintf_r+0x4c>
 8001324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001326:	e711      	b.n	800114c <_vfiprintf_r+0x50>
 8001328:	ab03      	add	r3, sp, #12
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	462a      	mov	r2, r5
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <_vfiprintf_r+0x258>)
 8001330:	a904      	add	r1, sp, #16
 8001332:	4630      	mov	r0, r6
 8001334:	f000 f880 	bl	8001438 <_printf_i>
 8001338:	e7e4      	b.n	8001304 <_vfiprintf_r+0x208>
 800133a:	bf00      	nop
 800133c:	08001cc8 	.word	0x08001cc8
 8001340:	08001ce8 	.word	0x08001ce8
 8001344:	08001ca8 	.word	0x08001ca8
 8001348:	08001d08 	.word	0x08001d08
 800134c:	08001d12 	.word	0x08001d12
 8001350:	00000000 	.word	0x00000000
 8001354:	080010d7 	.word	0x080010d7
 8001358:	08001d0e 	.word	0x08001d0e

0800135c <_printf_common>:
 800135c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001360:	4616      	mov	r6, r2
 8001362:	4699      	mov	r9, r3
 8001364:	688a      	ldr	r2, [r1, #8]
 8001366:	690b      	ldr	r3, [r1, #16]
 8001368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800136c:	4293      	cmp	r3, r2
 800136e:	bfb8      	it	lt
 8001370:	4613      	movlt	r3, r2
 8001372:	6033      	str	r3, [r6, #0]
 8001374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001378:	4607      	mov	r7, r0
 800137a:	460c      	mov	r4, r1
 800137c:	b10a      	cbz	r2, 8001382 <_printf_common+0x26>
 800137e:	3301      	adds	r3, #1
 8001380:	6033      	str	r3, [r6, #0]
 8001382:	6823      	ldr	r3, [r4, #0]
 8001384:	0699      	lsls	r1, r3, #26
 8001386:	bf42      	ittt	mi
 8001388:	6833      	ldrmi	r3, [r6, #0]
 800138a:	3302      	addmi	r3, #2
 800138c:	6033      	strmi	r3, [r6, #0]
 800138e:	6825      	ldr	r5, [r4, #0]
 8001390:	f015 0506 	ands.w	r5, r5, #6
 8001394:	d106      	bne.n	80013a4 <_printf_common+0x48>
 8001396:	f104 0a19 	add.w	sl, r4, #25
 800139a:	68e3      	ldr	r3, [r4, #12]
 800139c:	6832      	ldr	r2, [r6, #0]
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	42ab      	cmp	r3, r5
 80013a2:	dc26      	bgt.n	80013f2 <_printf_common+0x96>
 80013a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80013a8:	1e13      	subs	r3, r2, #0
 80013aa:	6822      	ldr	r2, [r4, #0]
 80013ac:	bf18      	it	ne
 80013ae:	2301      	movne	r3, #1
 80013b0:	0692      	lsls	r2, r2, #26
 80013b2:	d42b      	bmi.n	800140c <_printf_common+0xb0>
 80013b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80013b8:	4649      	mov	r1, r9
 80013ba:	4638      	mov	r0, r7
 80013bc:	47c0      	blx	r8
 80013be:	3001      	adds	r0, #1
 80013c0:	d01e      	beq.n	8001400 <_printf_common+0xa4>
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	68e5      	ldr	r5, [r4, #12]
 80013c6:	6832      	ldr	r2, [r6, #0]
 80013c8:	f003 0306 	and.w	r3, r3, #6
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	bf08      	it	eq
 80013d0:	1aad      	subeq	r5, r5, r2
 80013d2:	68a3      	ldr	r3, [r4, #8]
 80013d4:	6922      	ldr	r2, [r4, #16]
 80013d6:	bf0c      	ite	eq
 80013d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013dc:	2500      	movne	r5, #0
 80013de:	4293      	cmp	r3, r2
 80013e0:	bfc4      	itt	gt
 80013e2:	1a9b      	subgt	r3, r3, r2
 80013e4:	18ed      	addgt	r5, r5, r3
 80013e6:	2600      	movs	r6, #0
 80013e8:	341a      	adds	r4, #26
 80013ea:	42b5      	cmp	r5, r6
 80013ec:	d11a      	bne.n	8001424 <_printf_common+0xc8>
 80013ee:	2000      	movs	r0, #0
 80013f0:	e008      	b.n	8001404 <_printf_common+0xa8>
 80013f2:	2301      	movs	r3, #1
 80013f4:	4652      	mov	r2, sl
 80013f6:	4649      	mov	r1, r9
 80013f8:	4638      	mov	r0, r7
 80013fa:	47c0      	blx	r8
 80013fc:	3001      	adds	r0, #1
 80013fe:	d103      	bne.n	8001408 <_printf_common+0xac>
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001408:	3501      	adds	r5, #1
 800140a:	e7c6      	b.n	800139a <_printf_common+0x3e>
 800140c:	18e1      	adds	r1, r4, r3
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	2030      	movs	r0, #48	; 0x30
 8001412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001416:	4422      	add	r2, r4
 8001418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800141c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001420:	3302      	adds	r3, #2
 8001422:	e7c7      	b.n	80013b4 <_printf_common+0x58>
 8001424:	2301      	movs	r3, #1
 8001426:	4622      	mov	r2, r4
 8001428:	4649      	mov	r1, r9
 800142a:	4638      	mov	r0, r7
 800142c:	47c0      	blx	r8
 800142e:	3001      	adds	r0, #1
 8001430:	d0e6      	beq.n	8001400 <_printf_common+0xa4>
 8001432:	3601      	adds	r6, #1
 8001434:	e7d9      	b.n	80013ea <_printf_common+0x8e>
	...

08001438 <_printf_i>:
 8001438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800143c:	460c      	mov	r4, r1
 800143e:	4691      	mov	r9, r2
 8001440:	7e27      	ldrb	r7, [r4, #24]
 8001442:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001444:	2f78      	cmp	r7, #120	; 0x78
 8001446:	4680      	mov	r8, r0
 8001448:	469a      	mov	sl, r3
 800144a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800144e:	d807      	bhi.n	8001460 <_printf_i+0x28>
 8001450:	2f62      	cmp	r7, #98	; 0x62
 8001452:	d80a      	bhi.n	800146a <_printf_i+0x32>
 8001454:	2f00      	cmp	r7, #0
 8001456:	f000 80d8 	beq.w	800160a <_printf_i+0x1d2>
 800145a:	2f58      	cmp	r7, #88	; 0x58
 800145c:	f000 80a3 	beq.w	80015a6 <_printf_i+0x16e>
 8001460:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001468:	e03a      	b.n	80014e0 <_printf_i+0xa8>
 800146a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800146e:	2b15      	cmp	r3, #21
 8001470:	d8f6      	bhi.n	8001460 <_printf_i+0x28>
 8001472:	a001      	add	r0, pc, #4	; (adr r0, 8001478 <_printf_i+0x40>)
 8001474:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001478:	080014d1 	.word	0x080014d1
 800147c:	080014e5 	.word	0x080014e5
 8001480:	08001461 	.word	0x08001461
 8001484:	08001461 	.word	0x08001461
 8001488:	08001461 	.word	0x08001461
 800148c:	08001461 	.word	0x08001461
 8001490:	080014e5 	.word	0x080014e5
 8001494:	08001461 	.word	0x08001461
 8001498:	08001461 	.word	0x08001461
 800149c:	08001461 	.word	0x08001461
 80014a0:	08001461 	.word	0x08001461
 80014a4:	080015f1 	.word	0x080015f1
 80014a8:	08001515 	.word	0x08001515
 80014ac:	080015d3 	.word	0x080015d3
 80014b0:	08001461 	.word	0x08001461
 80014b4:	08001461 	.word	0x08001461
 80014b8:	08001613 	.word	0x08001613
 80014bc:	08001461 	.word	0x08001461
 80014c0:	08001515 	.word	0x08001515
 80014c4:	08001461 	.word	0x08001461
 80014c8:	08001461 	.word	0x08001461
 80014cc:	080015db 	.word	0x080015db
 80014d0:	680b      	ldr	r3, [r1, #0]
 80014d2:	1d1a      	adds	r2, r3, #4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	600a      	str	r2, [r1, #0]
 80014d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80014dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0a3      	b.n	800162c <_printf_i+0x1f4>
 80014e4:	6825      	ldr	r5, [r4, #0]
 80014e6:	6808      	ldr	r0, [r1, #0]
 80014e8:	062e      	lsls	r6, r5, #24
 80014ea:	f100 0304 	add.w	r3, r0, #4
 80014ee:	d50a      	bpl.n	8001506 <_printf_i+0xce>
 80014f0:	6805      	ldr	r5, [r0, #0]
 80014f2:	600b      	str	r3, [r1, #0]
 80014f4:	2d00      	cmp	r5, #0
 80014f6:	da03      	bge.n	8001500 <_printf_i+0xc8>
 80014f8:	232d      	movs	r3, #45	; 0x2d
 80014fa:	426d      	negs	r5, r5
 80014fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001500:	485e      	ldr	r0, [pc, #376]	; (800167c <_printf_i+0x244>)
 8001502:	230a      	movs	r3, #10
 8001504:	e019      	b.n	800153a <_printf_i+0x102>
 8001506:	f015 0f40 	tst.w	r5, #64	; 0x40
 800150a:	6805      	ldr	r5, [r0, #0]
 800150c:	600b      	str	r3, [r1, #0]
 800150e:	bf18      	it	ne
 8001510:	b22d      	sxthne	r5, r5
 8001512:	e7ef      	b.n	80014f4 <_printf_i+0xbc>
 8001514:	680b      	ldr	r3, [r1, #0]
 8001516:	6825      	ldr	r5, [r4, #0]
 8001518:	1d18      	adds	r0, r3, #4
 800151a:	6008      	str	r0, [r1, #0]
 800151c:	0628      	lsls	r0, r5, #24
 800151e:	d501      	bpl.n	8001524 <_printf_i+0xec>
 8001520:	681d      	ldr	r5, [r3, #0]
 8001522:	e002      	b.n	800152a <_printf_i+0xf2>
 8001524:	0669      	lsls	r1, r5, #25
 8001526:	d5fb      	bpl.n	8001520 <_printf_i+0xe8>
 8001528:	881d      	ldrh	r5, [r3, #0]
 800152a:	4854      	ldr	r0, [pc, #336]	; (800167c <_printf_i+0x244>)
 800152c:	2f6f      	cmp	r7, #111	; 0x6f
 800152e:	bf0c      	ite	eq
 8001530:	2308      	moveq	r3, #8
 8001532:	230a      	movne	r3, #10
 8001534:	2100      	movs	r1, #0
 8001536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800153a:	6866      	ldr	r6, [r4, #4]
 800153c:	60a6      	str	r6, [r4, #8]
 800153e:	2e00      	cmp	r6, #0
 8001540:	bfa2      	ittt	ge
 8001542:	6821      	ldrge	r1, [r4, #0]
 8001544:	f021 0104 	bicge.w	r1, r1, #4
 8001548:	6021      	strge	r1, [r4, #0]
 800154a:	b90d      	cbnz	r5, 8001550 <_printf_i+0x118>
 800154c:	2e00      	cmp	r6, #0
 800154e:	d04d      	beq.n	80015ec <_printf_i+0x1b4>
 8001550:	4616      	mov	r6, r2
 8001552:	fbb5 f1f3 	udiv	r1, r5, r3
 8001556:	fb03 5711 	mls	r7, r3, r1, r5
 800155a:	5dc7      	ldrb	r7, [r0, r7]
 800155c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001560:	462f      	mov	r7, r5
 8001562:	42bb      	cmp	r3, r7
 8001564:	460d      	mov	r5, r1
 8001566:	d9f4      	bls.n	8001552 <_printf_i+0x11a>
 8001568:	2b08      	cmp	r3, #8
 800156a:	d10b      	bne.n	8001584 <_printf_i+0x14c>
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	07df      	lsls	r7, r3, #31
 8001570:	d508      	bpl.n	8001584 <_printf_i+0x14c>
 8001572:	6923      	ldr	r3, [r4, #16]
 8001574:	6861      	ldr	r1, [r4, #4]
 8001576:	4299      	cmp	r1, r3
 8001578:	bfde      	ittt	le
 800157a:	2330      	movle	r3, #48	; 0x30
 800157c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001580:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001584:	1b92      	subs	r2, r2, r6
 8001586:	6122      	str	r2, [r4, #16]
 8001588:	f8cd a000 	str.w	sl, [sp]
 800158c:	464b      	mov	r3, r9
 800158e:	aa03      	add	r2, sp, #12
 8001590:	4621      	mov	r1, r4
 8001592:	4640      	mov	r0, r8
 8001594:	f7ff fee2 	bl	800135c <_printf_common>
 8001598:	3001      	adds	r0, #1
 800159a:	d14c      	bne.n	8001636 <_printf_i+0x1fe>
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	b004      	add	sp, #16
 80015a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015a6:	4835      	ldr	r0, [pc, #212]	; (800167c <_printf_i+0x244>)
 80015a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80015ac:	6823      	ldr	r3, [r4, #0]
 80015ae:	680e      	ldr	r6, [r1, #0]
 80015b0:	061f      	lsls	r7, r3, #24
 80015b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80015b6:	600e      	str	r6, [r1, #0]
 80015b8:	d514      	bpl.n	80015e4 <_printf_i+0x1ac>
 80015ba:	07d9      	lsls	r1, r3, #31
 80015bc:	bf44      	itt	mi
 80015be:	f043 0320 	orrmi.w	r3, r3, #32
 80015c2:	6023      	strmi	r3, [r4, #0]
 80015c4:	b91d      	cbnz	r5, 80015ce <_printf_i+0x196>
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	f023 0320 	bic.w	r3, r3, #32
 80015cc:	6023      	str	r3, [r4, #0]
 80015ce:	2310      	movs	r3, #16
 80015d0:	e7b0      	b.n	8001534 <_printf_i+0xfc>
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	f043 0320 	orr.w	r3, r3, #32
 80015d8:	6023      	str	r3, [r4, #0]
 80015da:	2378      	movs	r3, #120	; 0x78
 80015dc:	4828      	ldr	r0, [pc, #160]	; (8001680 <_printf_i+0x248>)
 80015de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80015e2:	e7e3      	b.n	80015ac <_printf_i+0x174>
 80015e4:	065e      	lsls	r6, r3, #25
 80015e6:	bf48      	it	mi
 80015e8:	b2ad      	uxthmi	r5, r5
 80015ea:	e7e6      	b.n	80015ba <_printf_i+0x182>
 80015ec:	4616      	mov	r6, r2
 80015ee:	e7bb      	b.n	8001568 <_printf_i+0x130>
 80015f0:	680b      	ldr	r3, [r1, #0]
 80015f2:	6826      	ldr	r6, [r4, #0]
 80015f4:	6960      	ldr	r0, [r4, #20]
 80015f6:	1d1d      	adds	r5, r3, #4
 80015f8:	600d      	str	r5, [r1, #0]
 80015fa:	0635      	lsls	r5, r6, #24
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	d501      	bpl.n	8001604 <_printf_i+0x1cc>
 8001600:	6018      	str	r0, [r3, #0]
 8001602:	e002      	b.n	800160a <_printf_i+0x1d2>
 8001604:	0671      	lsls	r1, r6, #25
 8001606:	d5fb      	bpl.n	8001600 <_printf_i+0x1c8>
 8001608:	8018      	strh	r0, [r3, #0]
 800160a:	2300      	movs	r3, #0
 800160c:	6123      	str	r3, [r4, #16]
 800160e:	4616      	mov	r6, r2
 8001610:	e7ba      	b.n	8001588 <_printf_i+0x150>
 8001612:	680b      	ldr	r3, [r1, #0]
 8001614:	1d1a      	adds	r2, r3, #4
 8001616:	600a      	str	r2, [r1, #0]
 8001618:	681e      	ldr	r6, [r3, #0]
 800161a:	6862      	ldr	r2, [r4, #4]
 800161c:	2100      	movs	r1, #0
 800161e:	4630      	mov	r0, r6
 8001620:	f7fe fde6 	bl	80001f0 <memchr>
 8001624:	b108      	cbz	r0, 800162a <_printf_i+0x1f2>
 8001626:	1b80      	subs	r0, r0, r6
 8001628:	6060      	str	r0, [r4, #4]
 800162a:	6863      	ldr	r3, [r4, #4]
 800162c:	6123      	str	r3, [r4, #16]
 800162e:	2300      	movs	r3, #0
 8001630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001634:	e7a8      	b.n	8001588 <_printf_i+0x150>
 8001636:	6923      	ldr	r3, [r4, #16]
 8001638:	4632      	mov	r2, r6
 800163a:	4649      	mov	r1, r9
 800163c:	4640      	mov	r0, r8
 800163e:	47d0      	blx	sl
 8001640:	3001      	adds	r0, #1
 8001642:	d0ab      	beq.n	800159c <_printf_i+0x164>
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	079b      	lsls	r3, r3, #30
 8001648:	d413      	bmi.n	8001672 <_printf_i+0x23a>
 800164a:	68e0      	ldr	r0, [r4, #12]
 800164c:	9b03      	ldr	r3, [sp, #12]
 800164e:	4298      	cmp	r0, r3
 8001650:	bfb8      	it	lt
 8001652:	4618      	movlt	r0, r3
 8001654:	e7a4      	b.n	80015a0 <_printf_i+0x168>
 8001656:	2301      	movs	r3, #1
 8001658:	4632      	mov	r2, r6
 800165a:	4649      	mov	r1, r9
 800165c:	4640      	mov	r0, r8
 800165e:	47d0      	blx	sl
 8001660:	3001      	adds	r0, #1
 8001662:	d09b      	beq.n	800159c <_printf_i+0x164>
 8001664:	3501      	adds	r5, #1
 8001666:	68e3      	ldr	r3, [r4, #12]
 8001668:	9903      	ldr	r1, [sp, #12]
 800166a:	1a5b      	subs	r3, r3, r1
 800166c:	42ab      	cmp	r3, r5
 800166e:	dcf2      	bgt.n	8001656 <_printf_i+0x21e>
 8001670:	e7eb      	b.n	800164a <_printf_i+0x212>
 8001672:	2500      	movs	r5, #0
 8001674:	f104 0619 	add.w	r6, r4, #25
 8001678:	e7f5      	b.n	8001666 <_printf_i+0x22e>
 800167a:	bf00      	nop
 800167c:	08001d19 	.word	0x08001d19
 8001680:	08001d2a 	.word	0x08001d2a

08001684 <_sbrk_r>:
 8001684:	b538      	push	{r3, r4, r5, lr}
 8001686:	4d06      	ldr	r5, [pc, #24]	; (80016a0 <_sbrk_r+0x1c>)
 8001688:	2300      	movs	r3, #0
 800168a:	4604      	mov	r4, r0
 800168c:	4608      	mov	r0, r1
 800168e:	602b      	str	r3, [r5, #0]
 8001690:	f7fe fee2 	bl	8000458 <_sbrk>
 8001694:	1c43      	adds	r3, r0, #1
 8001696:	d102      	bne.n	800169e <_sbrk_r+0x1a>
 8001698:	682b      	ldr	r3, [r5, #0]
 800169a:	b103      	cbz	r3, 800169e <_sbrk_r+0x1a>
 800169c:	6023      	str	r3, [r4, #0]
 800169e:	bd38      	pop	{r3, r4, r5, pc}
 80016a0:	200000b0 	.word	0x200000b0

080016a4 <__sread>:
 80016a4:	b510      	push	{r4, lr}
 80016a6:	460c      	mov	r4, r1
 80016a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016ac:	f000 fab2 	bl	8001c14 <_read_r>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	bfab      	itete	ge
 80016b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80016b6:	89a3      	ldrhlt	r3, [r4, #12]
 80016b8:	181b      	addge	r3, r3, r0
 80016ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80016be:	bfac      	ite	ge
 80016c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80016c2:	81a3      	strhlt	r3, [r4, #12]
 80016c4:	bd10      	pop	{r4, pc}

080016c6 <__swrite>:
 80016c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016ca:	461f      	mov	r7, r3
 80016cc:	898b      	ldrh	r3, [r1, #12]
 80016ce:	05db      	lsls	r3, r3, #23
 80016d0:	4605      	mov	r5, r0
 80016d2:	460c      	mov	r4, r1
 80016d4:	4616      	mov	r6, r2
 80016d6:	d505      	bpl.n	80016e4 <__swrite+0x1e>
 80016d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016dc:	2302      	movs	r3, #2
 80016de:	2200      	movs	r2, #0
 80016e0:	f000 f9c8 	bl	8001a74 <_lseek_r>
 80016e4:	89a3      	ldrh	r3, [r4, #12]
 80016e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016ee:	81a3      	strh	r3, [r4, #12]
 80016f0:	4632      	mov	r2, r6
 80016f2:	463b      	mov	r3, r7
 80016f4:	4628      	mov	r0, r5
 80016f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016fa:	f000 b869 	b.w	80017d0 <_write_r>

080016fe <__sseek>:
 80016fe:	b510      	push	{r4, lr}
 8001700:	460c      	mov	r4, r1
 8001702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001706:	f000 f9b5 	bl	8001a74 <_lseek_r>
 800170a:	1c43      	adds	r3, r0, #1
 800170c:	89a3      	ldrh	r3, [r4, #12]
 800170e:	bf15      	itete	ne
 8001710:	6560      	strne	r0, [r4, #84]	; 0x54
 8001712:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001716:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800171a:	81a3      	strheq	r3, [r4, #12]
 800171c:	bf18      	it	ne
 800171e:	81a3      	strhne	r3, [r4, #12]
 8001720:	bd10      	pop	{r4, pc}

08001722 <__sclose>:
 8001722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001726:	f000 b8d3 	b.w	80018d0 <_close_r>
	...

0800172c <__swbuf_r>:
 800172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172e:	460e      	mov	r6, r1
 8001730:	4614      	mov	r4, r2
 8001732:	4605      	mov	r5, r0
 8001734:	b118      	cbz	r0, 800173e <__swbuf_r+0x12>
 8001736:	6983      	ldr	r3, [r0, #24]
 8001738:	b90b      	cbnz	r3, 800173e <__swbuf_r+0x12>
 800173a:	f7ff fbbd 	bl	8000eb8 <__sinit>
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <__swbuf_r+0x98>)
 8001740:	429c      	cmp	r4, r3
 8001742:	d12b      	bne.n	800179c <__swbuf_r+0x70>
 8001744:	686c      	ldr	r4, [r5, #4]
 8001746:	69a3      	ldr	r3, [r4, #24]
 8001748:	60a3      	str	r3, [r4, #8]
 800174a:	89a3      	ldrh	r3, [r4, #12]
 800174c:	071a      	lsls	r2, r3, #28
 800174e:	d52f      	bpl.n	80017b0 <__swbuf_r+0x84>
 8001750:	6923      	ldr	r3, [r4, #16]
 8001752:	b36b      	cbz	r3, 80017b0 <__swbuf_r+0x84>
 8001754:	6923      	ldr	r3, [r4, #16]
 8001756:	6820      	ldr	r0, [r4, #0]
 8001758:	1ac0      	subs	r0, r0, r3
 800175a:	6963      	ldr	r3, [r4, #20]
 800175c:	b2f6      	uxtb	r6, r6
 800175e:	4283      	cmp	r3, r0
 8001760:	4637      	mov	r7, r6
 8001762:	dc04      	bgt.n	800176e <__swbuf_r+0x42>
 8001764:	4621      	mov	r1, r4
 8001766:	4628      	mov	r0, r5
 8001768:	f000 f948 	bl	80019fc <_fflush_r>
 800176c:	bb30      	cbnz	r0, 80017bc <__swbuf_r+0x90>
 800176e:	68a3      	ldr	r3, [r4, #8]
 8001770:	3b01      	subs	r3, #1
 8001772:	60a3      	str	r3, [r4, #8]
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	6022      	str	r2, [r4, #0]
 800177a:	701e      	strb	r6, [r3, #0]
 800177c:	6963      	ldr	r3, [r4, #20]
 800177e:	3001      	adds	r0, #1
 8001780:	4283      	cmp	r3, r0
 8001782:	d004      	beq.n	800178e <__swbuf_r+0x62>
 8001784:	89a3      	ldrh	r3, [r4, #12]
 8001786:	07db      	lsls	r3, r3, #31
 8001788:	d506      	bpl.n	8001798 <__swbuf_r+0x6c>
 800178a:	2e0a      	cmp	r6, #10
 800178c:	d104      	bne.n	8001798 <__swbuf_r+0x6c>
 800178e:	4621      	mov	r1, r4
 8001790:	4628      	mov	r0, r5
 8001792:	f000 f933 	bl	80019fc <_fflush_r>
 8001796:	b988      	cbnz	r0, 80017bc <__swbuf_r+0x90>
 8001798:	4638      	mov	r0, r7
 800179a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <__swbuf_r+0x9c>)
 800179e:	429c      	cmp	r4, r3
 80017a0:	d101      	bne.n	80017a6 <__swbuf_r+0x7a>
 80017a2:	68ac      	ldr	r4, [r5, #8]
 80017a4:	e7cf      	b.n	8001746 <__swbuf_r+0x1a>
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <__swbuf_r+0xa0>)
 80017a8:	429c      	cmp	r4, r3
 80017aa:	bf08      	it	eq
 80017ac:	68ec      	ldreq	r4, [r5, #12]
 80017ae:	e7ca      	b.n	8001746 <__swbuf_r+0x1a>
 80017b0:	4621      	mov	r1, r4
 80017b2:	4628      	mov	r0, r5
 80017b4:	f000 f81e 	bl	80017f4 <__swsetup_r>
 80017b8:	2800      	cmp	r0, #0
 80017ba:	d0cb      	beq.n	8001754 <__swbuf_r+0x28>
 80017bc:	f04f 37ff 	mov.w	r7, #4294967295
 80017c0:	e7ea      	b.n	8001798 <__swbuf_r+0x6c>
 80017c2:	bf00      	nop
 80017c4:	08001cc8 	.word	0x08001cc8
 80017c8:	08001ce8 	.word	0x08001ce8
 80017cc:	08001ca8 	.word	0x08001ca8

080017d0 <_write_r>:
 80017d0:	b538      	push	{r3, r4, r5, lr}
 80017d2:	4d07      	ldr	r5, [pc, #28]	; (80017f0 <_write_r+0x20>)
 80017d4:	4604      	mov	r4, r0
 80017d6:	4608      	mov	r0, r1
 80017d8:	4611      	mov	r1, r2
 80017da:	2200      	movs	r2, #0
 80017dc:	602a      	str	r2, [r5, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	f7fe fded 	bl	80003be <_write>
 80017e4:	1c43      	adds	r3, r0, #1
 80017e6:	d102      	bne.n	80017ee <_write_r+0x1e>
 80017e8:	682b      	ldr	r3, [r5, #0]
 80017ea:	b103      	cbz	r3, 80017ee <_write_r+0x1e>
 80017ec:	6023      	str	r3, [r4, #0]
 80017ee:	bd38      	pop	{r3, r4, r5, pc}
 80017f0:	200000b0 	.word	0x200000b0

080017f4 <__swsetup_r>:
 80017f4:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <__swsetup_r+0xcc>)
 80017f6:	b570      	push	{r4, r5, r6, lr}
 80017f8:	681d      	ldr	r5, [r3, #0]
 80017fa:	4606      	mov	r6, r0
 80017fc:	460c      	mov	r4, r1
 80017fe:	b125      	cbz	r5, 800180a <__swsetup_r+0x16>
 8001800:	69ab      	ldr	r3, [r5, #24]
 8001802:	b913      	cbnz	r3, 800180a <__swsetup_r+0x16>
 8001804:	4628      	mov	r0, r5
 8001806:	f7ff fb57 	bl	8000eb8 <__sinit>
 800180a:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <__swsetup_r+0xd0>)
 800180c:	429c      	cmp	r4, r3
 800180e:	d10f      	bne.n	8001830 <__swsetup_r+0x3c>
 8001810:	686c      	ldr	r4, [r5, #4]
 8001812:	89a3      	ldrh	r3, [r4, #12]
 8001814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001818:	0719      	lsls	r1, r3, #28
 800181a:	d42c      	bmi.n	8001876 <__swsetup_r+0x82>
 800181c:	06dd      	lsls	r5, r3, #27
 800181e:	d411      	bmi.n	8001844 <__swsetup_r+0x50>
 8001820:	2309      	movs	r3, #9
 8001822:	6033      	str	r3, [r6, #0]
 8001824:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001828:	81a3      	strh	r3, [r4, #12]
 800182a:	f04f 30ff 	mov.w	r0, #4294967295
 800182e:	e03e      	b.n	80018ae <__swsetup_r+0xba>
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <__swsetup_r+0xd4>)
 8001832:	429c      	cmp	r4, r3
 8001834:	d101      	bne.n	800183a <__swsetup_r+0x46>
 8001836:	68ac      	ldr	r4, [r5, #8]
 8001838:	e7eb      	b.n	8001812 <__swsetup_r+0x1e>
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <__swsetup_r+0xd8>)
 800183c:	429c      	cmp	r4, r3
 800183e:	bf08      	it	eq
 8001840:	68ec      	ldreq	r4, [r5, #12]
 8001842:	e7e6      	b.n	8001812 <__swsetup_r+0x1e>
 8001844:	0758      	lsls	r0, r3, #29
 8001846:	d512      	bpl.n	800186e <__swsetup_r+0x7a>
 8001848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800184a:	b141      	cbz	r1, 800185e <__swsetup_r+0x6a>
 800184c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001850:	4299      	cmp	r1, r3
 8001852:	d002      	beq.n	800185a <__swsetup_r+0x66>
 8001854:	4630      	mov	r0, r6
 8001856:	f000 f98f 	bl	8001b78 <_free_r>
 800185a:	2300      	movs	r3, #0
 800185c:	6363      	str	r3, [r4, #52]	; 0x34
 800185e:	89a3      	ldrh	r3, [r4, #12]
 8001860:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001864:	81a3      	strh	r3, [r4, #12]
 8001866:	2300      	movs	r3, #0
 8001868:	6063      	str	r3, [r4, #4]
 800186a:	6923      	ldr	r3, [r4, #16]
 800186c:	6023      	str	r3, [r4, #0]
 800186e:	89a3      	ldrh	r3, [r4, #12]
 8001870:	f043 0308 	orr.w	r3, r3, #8
 8001874:	81a3      	strh	r3, [r4, #12]
 8001876:	6923      	ldr	r3, [r4, #16]
 8001878:	b94b      	cbnz	r3, 800188e <__swsetup_r+0x9a>
 800187a:	89a3      	ldrh	r3, [r4, #12]
 800187c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001884:	d003      	beq.n	800188e <__swsetup_r+0x9a>
 8001886:	4621      	mov	r1, r4
 8001888:	4630      	mov	r0, r6
 800188a:	f000 f929 	bl	8001ae0 <__smakebuf_r>
 800188e:	89a0      	ldrh	r0, [r4, #12]
 8001890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001894:	f010 0301 	ands.w	r3, r0, #1
 8001898:	d00a      	beq.n	80018b0 <__swsetup_r+0xbc>
 800189a:	2300      	movs	r3, #0
 800189c:	60a3      	str	r3, [r4, #8]
 800189e:	6963      	ldr	r3, [r4, #20]
 80018a0:	425b      	negs	r3, r3
 80018a2:	61a3      	str	r3, [r4, #24]
 80018a4:	6923      	ldr	r3, [r4, #16]
 80018a6:	b943      	cbnz	r3, 80018ba <__swsetup_r+0xc6>
 80018a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80018ac:	d1ba      	bne.n	8001824 <__swsetup_r+0x30>
 80018ae:	bd70      	pop	{r4, r5, r6, pc}
 80018b0:	0781      	lsls	r1, r0, #30
 80018b2:	bf58      	it	pl
 80018b4:	6963      	ldrpl	r3, [r4, #20]
 80018b6:	60a3      	str	r3, [r4, #8]
 80018b8:	e7f4      	b.n	80018a4 <__swsetup_r+0xb0>
 80018ba:	2000      	movs	r0, #0
 80018bc:	e7f7      	b.n	80018ae <__swsetup_r+0xba>
 80018be:	bf00      	nop
 80018c0:	20000014 	.word	0x20000014
 80018c4:	08001cc8 	.word	0x08001cc8
 80018c8:	08001ce8 	.word	0x08001ce8
 80018cc:	08001ca8 	.word	0x08001ca8

080018d0 <_close_r>:
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	4d06      	ldr	r5, [pc, #24]	; (80018ec <_close_r+0x1c>)
 80018d4:	2300      	movs	r3, #0
 80018d6:	4604      	mov	r4, r0
 80018d8:	4608      	mov	r0, r1
 80018da:	602b      	str	r3, [r5, #0]
 80018dc:	f7fe fd8b 	bl	80003f6 <_close>
 80018e0:	1c43      	adds	r3, r0, #1
 80018e2:	d102      	bne.n	80018ea <_close_r+0x1a>
 80018e4:	682b      	ldr	r3, [r5, #0]
 80018e6:	b103      	cbz	r3, 80018ea <_close_r+0x1a>
 80018e8:	6023      	str	r3, [r4, #0]
 80018ea:	bd38      	pop	{r3, r4, r5, pc}
 80018ec:	200000b0 	.word	0x200000b0

080018f0 <__sflush_r>:
 80018f0:	898a      	ldrh	r2, [r1, #12]
 80018f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018f6:	4605      	mov	r5, r0
 80018f8:	0710      	lsls	r0, r2, #28
 80018fa:	460c      	mov	r4, r1
 80018fc:	d458      	bmi.n	80019b0 <__sflush_r+0xc0>
 80018fe:	684b      	ldr	r3, [r1, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	dc05      	bgt.n	8001910 <__sflush_r+0x20>
 8001904:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001906:	2b00      	cmp	r3, #0
 8001908:	dc02      	bgt.n	8001910 <__sflush_r+0x20>
 800190a:	2000      	movs	r0, #0
 800190c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001912:	2e00      	cmp	r6, #0
 8001914:	d0f9      	beq.n	800190a <__sflush_r+0x1a>
 8001916:	2300      	movs	r3, #0
 8001918:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800191c:	682f      	ldr	r7, [r5, #0]
 800191e:	602b      	str	r3, [r5, #0]
 8001920:	d032      	beq.n	8001988 <__sflush_r+0x98>
 8001922:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001924:	89a3      	ldrh	r3, [r4, #12]
 8001926:	075a      	lsls	r2, r3, #29
 8001928:	d505      	bpl.n	8001936 <__sflush_r+0x46>
 800192a:	6863      	ldr	r3, [r4, #4]
 800192c:	1ac0      	subs	r0, r0, r3
 800192e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001930:	b10b      	cbz	r3, 8001936 <__sflush_r+0x46>
 8001932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001934:	1ac0      	subs	r0, r0, r3
 8001936:	2300      	movs	r3, #0
 8001938:	4602      	mov	r2, r0
 800193a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800193c:	6a21      	ldr	r1, [r4, #32]
 800193e:	4628      	mov	r0, r5
 8001940:	47b0      	blx	r6
 8001942:	1c43      	adds	r3, r0, #1
 8001944:	89a3      	ldrh	r3, [r4, #12]
 8001946:	d106      	bne.n	8001956 <__sflush_r+0x66>
 8001948:	6829      	ldr	r1, [r5, #0]
 800194a:	291d      	cmp	r1, #29
 800194c:	d82c      	bhi.n	80019a8 <__sflush_r+0xb8>
 800194e:	4a2a      	ldr	r2, [pc, #168]	; (80019f8 <__sflush_r+0x108>)
 8001950:	40ca      	lsrs	r2, r1
 8001952:	07d6      	lsls	r6, r2, #31
 8001954:	d528      	bpl.n	80019a8 <__sflush_r+0xb8>
 8001956:	2200      	movs	r2, #0
 8001958:	6062      	str	r2, [r4, #4]
 800195a:	04d9      	lsls	r1, r3, #19
 800195c:	6922      	ldr	r2, [r4, #16]
 800195e:	6022      	str	r2, [r4, #0]
 8001960:	d504      	bpl.n	800196c <__sflush_r+0x7c>
 8001962:	1c42      	adds	r2, r0, #1
 8001964:	d101      	bne.n	800196a <__sflush_r+0x7a>
 8001966:	682b      	ldr	r3, [r5, #0]
 8001968:	b903      	cbnz	r3, 800196c <__sflush_r+0x7c>
 800196a:	6560      	str	r0, [r4, #84]	; 0x54
 800196c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800196e:	602f      	str	r7, [r5, #0]
 8001970:	2900      	cmp	r1, #0
 8001972:	d0ca      	beq.n	800190a <__sflush_r+0x1a>
 8001974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001978:	4299      	cmp	r1, r3
 800197a:	d002      	beq.n	8001982 <__sflush_r+0x92>
 800197c:	4628      	mov	r0, r5
 800197e:	f000 f8fb 	bl	8001b78 <_free_r>
 8001982:	2000      	movs	r0, #0
 8001984:	6360      	str	r0, [r4, #52]	; 0x34
 8001986:	e7c1      	b.n	800190c <__sflush_r+0x1c>
 8001988:	6a21      	ldr	r1, [r4, #32]
 800198a:	2301      	movs	r3, #1
 800198c:	4628      	mov	r0, r5
 800198e:	47b0      	blx	r6
 8001990:	1c41      	adds	r1, r0, #1
 8001992:	d1c7      	bne.n	8001924 <__sflush_r+0x34>
 8001994:	682b      	ldr	r3, [r5, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0c4      	beq.n	8001924 <__sflush_r+0x34>
 800199a:	2b1d      	cmp	r3, #29
 800199c:	d001      	beq.n	80019a2 <__sflush_r+0xb2>
 800199e:	2b16      	cmp	r3, #22
 80019a0:	d101      	bne.n	80019a6 <__sflush_r+0xb6>
 80019a2:	602f      	str	r7, [r5, #0]
 80019a4:	e7b1      	b.n	800190a <__sflush_r+0x1a>
 80019a6:	89a3      	ldrh	r3, [r4, #12]
 80019a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ac:	81a3      	strh	r3, [r4, #12]
 80019ae:	e7ad      	b.n	800190c <__sflush_r+0x1c>
 80019b0:	690f      	ldr	r7, [r1, #16]
 80019b2:	2f00      	cmp	r7, #0
 80019b4:	d0a9      	beq.n	800190a <__sflush_r+0x1a>
 80019b6:	0793      	lsls	r3, r2, #30
 80019b8:	680e      	ldr	r6, [r1, #0]
 80019ba:	bf08      	it	eq
 80019bc:	694b      	ldreq	r3, [r1, #20]
 80019be:	600f      	str	r7, [r1, #0]
 80019c0:	bf18      	it	ne
 80019c2:	2300      	movne	r3, #0
 80019c4:	eba6 0807 	sub.w	r8, r6, r7
 80019c8:	608b      	str	r3, [r1, #8]
 80019ca:	f1b8 0f00 	cmp.w	r8, #0
 80019ce:	dd9c      	ble.n	800190a <__sflush_r+0x1a>
 80019d0:	6a21      	ldr	r1, [r4, #32]
 80019d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80019d4:	4643      	mov	r3, r8
 80019d6:	463a      	mov	r2, r7
 80019d8:	4628      	mov	r0, r5
 80019da:	47b0      	blx	r6
 80019dc:	2800      	cmp	r0, #0
 80019de:	dc06      	bgt.n	80019ee <__sflush_r+0xfe>
 80019e0:	89a3      	ldrh	r3, [r4, #12]
 80019e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e6:	81a3      	strh	r3, [r4, #12]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	e78e      	b.n	800190c <__sflush_r+0x1c>
 80019ee:	4407      	add	r7, r0
 80019f0:	eba8 0800 	sub.w	r8, r8, r0
 80019f4:	e7e9      	b.n	80019ca <__sflush_r+0xda>
 80019f6:	bf00      	nop
 80019f8:	20400001 	.word	0x20400001

080019fc <_fflush_r>:
 80019fc:	b538      	push	{r3, r4, r5, lr}
 80019fe:	690b      	ldr	r3, [r1, #16]
 8001a00:	4605      	mov	r5, r0
 8001a02:	460c      	mov	r4, r1
 8001a04:	b913      	cbnz	r3, 8001a0c <_fflush_r+0x10>
 8001a06:	2500      	movs	r5, #0
 8001a08:	4628      	mov	r0, r5
 8001a0a:	bd38      	pop	{r3, r4, r5, pc}
 8001a0c:	b118      	cbz	r0, 8001a16 <_fflush_r+0x1a>
 8001a0e:	6983      	ldr	r3, [r0, #24]
 8001a10:	b90b      	cbnz	r3, 8001a16 <_fflush_r+0x1a>
 8001a12:	f7ff fa51 	bl	8000eb8 <__sinit>
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <_fflush_r+0x6c>)
 8001a18:	429c      	cmp	r4, r3
 8001a1a:	d11b      	bne.n	8001a54 <_fflush_r+0x58>
 8001a1c:	686c      	ldr	r4, [r5, #4]
 8001a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0ef      	beq.n	8001a06 <_fflush_r+0xa>
 8001a26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001a28:	07d0      	lsls	r0, r2, #31
 8001a2a:	d404      	bmi.n	8001a36 <_fflush_r+0x3a>
 8001a2c:	0599      	lsls	r1, r3, #22
 8001a2e:	d402      	bmi.n	8001a36 <_fflush_r+0x3a>
 8001a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a32:	f7ff fadf 	bl	8000ff4 <__retarget_lock_acquire_recursive>
 8001a36:	4628      	mov	r0, r5
 8001a38:	4621      	mov	r1, r4
 8001a3a:	f7ff ff59 	bl	80018f0 <__sflush_r>
 8001a3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a40:	07da      	lsls	r2, r3, #31
 8001a42:	4605      	mov	r5, r0
 8001a44:	d4e0      	bmi.n	8001a08 <_fflush_r+0xc>
 8001a46:	89a3      	ldrh	r3, [r4, #12]
 8001a48:	059b      	lsls	r3, r3, #22
 8001a4a:	d4dd      	bmi.n	8001a08 <_fflush_r+0xc>
 8001a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a4e:	f7ff fad2 	bl	8000ff6 <__retarget_lock_release_recursive>
 8001a52:	e7d9      	b.n	8001a08 <_fflush_r+0xc>
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <_fflush_r+0x70>)
 8001a56:	429c      	cmp	r4, r3
 8001a58:	d101      	bne.n	8001a5e <_fflush_r+0x62>
 8001a5a:	68ac      	ldr	r4, [r5, #8]
 8001a5c:	e7df      	b.n	8001a1e <_fflush_r+0x22>
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <_fflush_r+0x74>)
 8001a60:	429c      	cmp	r4, r3
 8001a62:	bf08      	it	eq
 8001a64:	68ec      	ldreq	r4, [r5, #12]
 8001a66:	e7da      	b.n	8001a1e <_fflush_r+0x22>
 8001a68:	08001cc8 	.word	0x08001cc8
 8001a6c:	08001ce8 	.word	0x08001ce8
 8001a70:	08001ca8 	.word	0x08001ca8

08001a74 <_lseek_r>:
 8001a74:	b538      	push	{r3, r4, r5, lr}
 8001a76:	4d07      	ldr	r5, [pc, #28]	; (8001a94 <_lseek_r+0x20>)
 8001a78:	4604      	mov	r4, r0
 8001a7a:	4608      	mov	r0, r1
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	2200      	movs	r2, #0
 8001a80:	602a      	str	r2, [r5, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	f7fe fcdb 	bl	800043e <_lseek>
 8001a88:	1c43      	adds	r3, r0, #1
 8001a8a:	d102      	bne.n	8001a92 <_lseek_r+0x1e>
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	b103      	cbz	r3, 8001a92 <_lseek_r+0x1e>
 8001a90:	6023      	str	r3, [r4, #0]
 8001a92:	bd38      	pop	{r3, r4, r5, pc}
 8001a94:	200000b0 	.word	0x200000b0

08001a98 <__swhatbuf_r>:
 8001a98:	b570      	push	{r4, r5, r6, lr}
 8001a9a:	460e      	mov	r6, r1
 8001a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aa0:	2900      	cmp	r1, #0
 8001aa2:	b096      	sub	sp, #88	; 0x58
 8001aa4:	4614      	mov	r4, r2
 8001aa6:	461d      	mov	r5, r3
 8001aa8:	da07      	bge.n	8001aba <__swhatbuf_r+0x22>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	602b      	str	r3, [r5, #0]
 8001aae:	89b3      	ldrh	r3, [r6, #12]
 8001ab0:	061a      	lsls	r2, r3, #24
 8001ab2:	d410      	bmi.n	8001ad6 <__swhatbuf_r+0x3e>
 8001ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab8:	e00e      	b.n	8001ad8 <__swhatbuf_r+0x40>
 8001aba:	466a      	mov	r2, sp
 8001abc:	f000 f8bc 	bl	8001c38 <_fstat_r>
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	dbf2      	blt.n	8001aaa <__swhatbuf_r+0x12>
 8001ac4:	9a01      	ldr	r2, [sp, #4]
 8001ac6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001aca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001ace:	425a      	negs	r2, r3
 8001ad0:	415a      	adcs	r2, r3
 8001ad2:	602a      	str	r2, [r5, #0]
 8001ad4:	e7ee      	b.n	8001ab4 <__swhatbuf_r+0x1c>
 8001ad6:	2340      	movs	r3, #64	; 0x40
 8001ad8:	2000      	movs	r0, #0
 8001ada:	6023      	str	r3, [r4, #0]
 8001adc:	b016      	add	sp, #88	; 0x58
 8001ade:	bd70      	pop	{r4, r5, r6, pc}

08001ae0 <__smakebuf_r>:
 8001ae0:	898b      	ldrh	r3, [r1, #12]
 8001ae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ae4:	079d      	lsls	r5, r3, #30
 8001ae6:	4606      	mov	r6, r0
 8001ae8:	460c      	mov	r4, r1
 8001aea:	d507      	bpl.n	8001afc <__smakebuf_r+0x1c>
 8001aec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001af0:	6023      	str	r3, [r4, #0]
 8001af2:	6123      	str	r3, [r4, #16]
 8001af4:	2301      	movs	r3, #1
 8001af6:	6163      	str	r3, [r4, #20]
 8001af8:	b002      	add	sp, #8
 8001afa:	bd70      	pop	{r4, r5, r6, pc}
 8001afc:	ab01      	add	r3, sp, #4
 8001afe:	466a      	mov	r2, sp
 8001b00:	f7ff ffca 	bl	8001a98 <__swhatbuf_r>
 8001b04:	9900      	ldr	r1, [sp, #0]
 8001b06:	4605      	mov	r5, r0
 8001b08:	4630      	mov	r0, r6
 8001b0a:	f7ff fa75 	bl	8000ff8 <_malloc_r>
 8001b0e:	b948      	cbnz	r0, 8001b24 <__smakebuf_r+0x44>
 8001b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b14:	059a      	lsls	r2, r3, #22
 8001b16:	d4ef      	bmi.n	8001af8 <__smakebuf_r+0x18>
 8001b18:	f023 0303 	bic.w	r3, r3, #3
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	81a3      	strh	r3, [r4, #12]
 8001b22:	e7e3      	b.n	8001aec <__smakebuf_r+0xc>
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <__smakebuf_r+0x7c>)
 8001b26:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b28:	89a3      	ldrh	r3, [r4, #12]
 8001b2a:	6020      	str	r0, [r4, #0]
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b30:	81a3      	strh	r3, [r4, #12]
 8001b32:	9b00      	ldr	r3, [sp, #0]
 8001b34:	6163      	str	r3, [r4, #20]
 8001b36:	9b01      	ldr	r3, [sp, #4]
 8001b38:	6120      	str	r0, [r4, #16]
 8001b3a:	b15b      	cbz	r3, 8001b54 <__smakebuf_r+0x74>
 8001b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b40:	4630      	mov	r0, r6
 8001b42:	f000 f88b 	bl	8001c5c <_isatty_r>
 8001b46:	b128      	cbz	r0, 8001b54 <__smakebuf_r+0x74>
 8001b48:	89a3      	ldrh	r3, [r4, #12]
 8001b4a:	f023 0303 	bic.w	r3, r3, #3
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	81a3      	strh	r3, [r4, #12]
 8001b54:	89a0      	ldrh	r0, [r4, #12]
 8001b56:	4305      	orrs	r5, r0
 8001b58:	81a5      	strh	r5, [r4, #12]
 8001b5a:	e7cd      	b.n	8001af8 <__smakebuf_r+0x18>
 8001b5c:	08000e51 	.word	0x08000e51

08001b60 <__malloc_lock>:
 8001b60:	4801      	ldr	r0, [pc, #4]	; (8001b68 <__malloc_lock+0x8>)
 8001b62:	f7ff ba47 	b.w	8000ff4 <__retarget_lock_acquire_recursive>
 8001b66:	bf00      	nop
 8001b68:	200000a9 	.word	0x200000a9

08001b6c <__malloc_unlock>:
 8001b6c:	4801      	ldr	r0, [pc, #4]	; (8001b74 <__malloc_unlock+0x8>)
 8001b6e:	f7ff ba42 	b.w	8000ff6 <__retarget_lock_release_recursive>
 8001b72:	bf00      	nop
 8001b74:	200000a9 	.word	0x200000a9

08001b78 <_free_r>:
 8001b78:	b538      	push	{r3, r4, r5, lr}
 8001b7a:	4605      	mov	r5, r0
 8001b7c:	2900      	cmp	r1, #0
 8001b7e:	d045      	beq.n	8001c0c <_free_r+0x94>
 8001b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b84:	1f0c      	subs	r4, r1, #4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bfb8      	it	lt
 8001b8a:	18e4      	addlt	r4, r4, r3
 8001b8c:	f7ff ffe8 	bl	8001b60 <__malloc_lock>
 8001b90:	4a1f      	ldr	r2, [pc, #124]	; (8001c10 <_free_r+0x98>)
 8001b92:	6813      	ldr	r3, [r2, #0]
 8001b94:	4610      	mov	r0, r2
 8001b96:	b933      	cbnz	r3, 8001ba6 <_free_r+0x2e>
 8001b98:	6063      	str	r3, [r4, #4]
 8001b9a:	6014      	str	r4, [r2, #0]
 8001b9c:	4628      	mov	r0, r5
 8001b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ba2:	f7ff bfe3 	b.w	8001b6c <__malloc_unlock>
 8001ba6:	42a3      	cmp	r3, r4
 8001ba8:	d90b      	bls.n	8001bc2 <_free_r+0x4a>
 8001baa:	6821      	ldr	r1, [r4, #0]
 8001bac:	1862      	adds	r2, r4, r1
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	bf04      	itt	eq
 8001bb2:	681a      	ldreq	r2, [r3, #0]
 8001bb4:	685b      	ldreq	r3, [r3, #4]
 8001bb6:	6063      	str	r3, [r4, #4]
 8001bb8:	bf04      	itt	eq
 8001bba:	1852      	addeq	r2, r2, r1
 8001bbc:	6022      	streq	r2, [r4, #0]
 8001bbe:	6004      	str	r4, [r0, #0]
 8001bc0:	e7ec      	b.n	8001b9c <_free_r+0x24>
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	b10b      	cbz	r3, 8001bcc <_free_r+0x54>
 8001bc8:	42a3      	cmp	r3, r4
 8001bca:	d9fa      	bls.n	8001bc2 <_free_r+0x4a>
 8001bcc:	6811      	ldr	r1, [r2, #0]
 8001bce:	1850      	adds	r0, r2, r1
 8001bd0:	42a0      	cmp	r0, r4
 8001bd2:	d10b      	bne.n	8001bec <_free_r+0x74>
 8001bd4:	6820      	ldr	r0, [r4, #0]
 8001bd6:	4401      	add	r1, r0
 8001bd8:	1850      	adds	r0, r2, r1
 8001bda:	4283      	cmp	r3, r0
 8001bdc:	6011      	str	r1, [r2, #0]
 8001bde:	d1dd      	bne.n	8001b9c <_free_r+0x24>
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	6053      	str	r3, [r2, #4]
 8001be6:	4401      	add	r1, r0
 8001be8:	6011      	str	r1, [r2, #0]
 8001bea:	e7d7      	b.n	8001b9c <_free_r+0x24>
 8001bec:	d902      	bls.n	8001bf4 <_free_r+0x7c>
 8001bee:	230c      	movs	r3, #12
 8001bf0:	602b      	str	r3, [r5, #0]
 8001bf2:	e7d3      	b.n	8001b9c <_free_r+0x24>
 8001bf4:	6820      	ldr	r0, [r4, #0]
 8001bf6:	1821      	adds	r1, r4, r0
 8001bf8:	428b      	cmp	r3, r1
 8001bfa:	bf04      	itt	eq
 8001bfc:	6819      	ldreq	r1, [r3, #0]
 8001bfe:	685b      	ldreq	r3, [r3, #4]
 8001c00:	6063      	str	r3, [r4, #4]
 8001c02:	bf04      	itt	eq
 8001c04:	1809      	addeq	r1, r1, r0
 8001c06:	6021      	streq	r1, [r4, #0]
 8001c08:	6054      	str	r4, [r2, #4]
 8001c0a:	e7c7      	b.n	8001b9c <_free_r+0x24>
 8001c0c:	bd38      	pop	{r3, r4, r5, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000009c 	.word	0x2000009c

08001c14 <_read_r>:
 8001c14:	b538      	push	{r3, r4, r5, lr}
 8001c16:	4d07      	ldr	r5, [pc, #28]	; (8001c34 <_read_r+0x20>)
 8001c18:	4604      	mov	r4, r0
 8001c1a:	4608      	mov	r0, r1
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	2200      	movs	r2, #0
 8001c20:	602a      	str	r2, [r5, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	f7fe fbae 	bl	8000384 <_read>
 8001c28:	1c43      	adds	r3, r0, #1
 8001c2a:	d102      	bne.n	8001c32 <_read_r+0x1e>
 8001c2c:	682b      	ldr	r3, [r5, #0]
 8001c2e:	b103      	cbz	r3, 8001c32 <_read_r+0x1e>
 8001c30:	6023      	str	r3, [r4, #0]
 8001c32:	bd38      	pop	{r3, r4, r5, pc}
 8001c34:	200000b0 	.word	0x200000b0

08001c38 <_fstat_r>:
 8001c38:	b538      	push	{r3, r4, r5, lr}
 8001c3a:	4d07      	ldr	r5, [pc, #28]	; (8001c58 <_fstat_r+0x20>)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	4604      	mov	r4, r0
 8001c40:	4608      	mov	r0, r1
 8001c42:	4611      	mov	r1, r2
 8001c44:	602b      	str	r3, [r5, #0]
 8001c46:	f7fe fbe1 	bl	800040c <_fstat>
 8001c4a:	1c43      	adds	r3, r0, #1
 8001c4c:	d102      	bne.n	8001c54 <_fstat_r+0x1c>
 8001c4e:	682b      	ldr	r3, [r5, #0]
 8001c50:	b103      	cbz	r3, 8001c54 <_fstat_r+0x1c>
 8001c52:	6023      	str	r3, [r4, #0]
 8001c54:	bd38      	pop	{r3, r4, r5, pc}
 8001c56:	bf00      	nop
 8001c58:	200000b0 	.word	0x200000b0

08001c5c <_isatty_r>:
 8001c5c:	b538      	push	{r3, r4, r5, lr}
 8001c5e:	4d06      	ldr	r5, [pc, #24]	; (8001c78 <_isatty_r+0x1c>)
 8001c60:	2300      	movs	r3, #0
 8001c62:	4604      	mov	r4, r0
 8001c64:	4608      	mov	r0, r1
 8001c66:	602b      	str	r3, [r5, #0]
 8001c68:	f7fe fbdf 	bl	800042a <_isatty>
 8001c6c:	1c43      	adds	r3, r0, #1
 8001c6e:	d102      	bne.n	8001c76 <_isatty_r+0x1a>
 8001c70:	682b      	ldr	r3, [r5, #0]
 8001c72:	b103      	cbz	r3, 8001c76 <_isatty_r+0x1a>
 8001c74:	6023      	str	r3, [r4, #0]
 8001c76:	bd38      	pop	{r3, r4, r5, pc}
 8001c78:	200000b0 	.word	0x200000b0

08001c7c <_init>:
 8001c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c7e:	bf00      	nop
 8001c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c82:	bc08      	pop	{r3}
 8001c84:	469e      	mov	lr, r3
 8001c86:	4770      	bx	lr

08001c88 <_fini>:
 8001c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8a:	bf00      	nop
 8001c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c8e:	bc08      	pop	{r3}
 8001c90:	469e      	mov	lr, r3
 8001c92:	4770      	bx	lr
