
000Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800239c  0800239c  0001239c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027fc  080027fc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080027fc  080027fc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027fc  080027fc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027fc  080027fc  000127fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002800  08002800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000064  08002868  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08002868  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004468  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cf5  00000000  00000000  000244f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000340  00000000  00000000  000251f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002c8  00000000  00000000  00025530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003938  00000000  00000000  000257f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000034ab  00000000  00000000  00029130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c40a  00000000  00000000  0002c5db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000389e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000140c  00000000  00000000  00038a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002384 	.word	0x08002384

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08002384 	.word	0x08002384

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:




int main (void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	//ADE_Inits();



	//Initialize LCD with 0x38 software contrast
	LCD5110_Init(0x38);
 8000294:	2038      	movs	r0, #56	; 0x38
 8000296:	f000 fa3d 	bl	8000714 <LCD5110_Init>
	printf("init \n");
 800029a:	4816      	ldr	r0, [pc, #88]	; (80002f4 <main+0x64>)
 800029c:	f001 f930 	bl	8001500 <puts>

	//Go to x=14, y=3 position
	LCD5110_GotoXY(14, 3);
 80002a0:	2103      	movs	r1, #3
 80002a2:	200e      	movs	r0, #14
 80002a4:	f000 fbca 	bl	8000a3c <LCD5110_GotoXY>

	//Print data with Pixel Set mode and Fontsize of 5x7px
	LCD5110_Puts("STM32F429", LCD5110_Pixel_Set, LCD5110_FontSize_5x7);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2101      	movs	r1, #1
 80002ac:	4812      	ldr	r0, [pc, #72]	; (80002f8 <main+0x68>)
 80002ae:	f000 fc87 	bl	8000bc0 <LCD5110_Puts>
	LCD5110_GotoXY(15, 13);
 80002b2:	210d      	movs	r1, #13
 80002b4:	200f      	movs	r0, #15
 80002b6:	f000 fbc1 	bl	8000a3c <LCD5110_GotoXY>
	LCD5110_Puts("Discovery", LCD5110_Pixel_Set, LCD5110_FontSize_5x7);
 80002ba:	2200      	movs	r2, #0
 80002bc:	2101      	movs	r1, #1
 80002be:	480f      	ldr	r0, [pc, #60]	; (80002fc <main+0x6c>)
 80002c0:	f000 fc7e 	bl	8000bc0 <LCD5110_Puts>
	LCD5110_GotoXY(30, 26);
 80002c4:	211a      	movs	r1, #26
 80002c6:	201e      	movs	r0, #30
 80002c8:	f000 fbb8 	bl	8000a3c <LCD5110_GotoXY>
	LCD5110_Puts("2014", LCD5110_Pixel_Set, LCD5110_FontSize_5x7);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2101      	movs	r1, #1
 80002d0:	480b      	ldr	r0, [pc, #44]	; (8000300 <main+0x70>)
 80002d2:	f000 fc75 	bl	8000bc0 <LCD5110_Puts>

	LCD5110_GotoXY(45, 42);
 80002d6:	212a      	movs	r1, #42	; 0x2a
 80002d8:	202d      	movs	r0, #45	; 0x2d
 80002da:	f000 fbaf 	bl	8000a3c <LCD5110_GotoXY>
	//Put string with Pixel set mode and Fontsize of 3x5
	LCD5110_Puts("majerle.eu", LCD5110_Pixel_Set, LCD5110_FontSize_3x5);
 80002de:	2201      	movs	r2, #1
 80002e0:	2101      	movs	r1, #1
 80002e2:	4808      	ldr	r0, [pc, #32]	; (8000304 <main+0x74>)
 80002e4:	f000 fc6c 	bl	8000bc0 <LCD5110_Puts>

	//Display data on LCD
	LCD5110_Refresh();
 80002e8:	f000 fb0a 	bl	8000900 <LCD5110_Refresh>
 80002ec:	2300      	movs	r3, #0
//		printf("DATA1 : %d \n", data1);
//		data2 = ADE_ReadData(SPI2, MODE, 2);
//		printf("DATA2 : %d \n", data2);
//
//	}
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	0800239c 	.word	0x0800239c
 80002f8:	080023a4 	.word	0x080023a4
 80002fc:	080023b0 	.word	0x080023b0
 8000300:	080023bc 	.word	0x080023bc
 8000304:	080023c4 	.word	0x080023c4

08000308 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_5);// clear the pending event
 800030c:	2005      	movs	r0, #5
 800030e:	f000 ff17 	bl	8001140 <GPIO_IRQHandling>

	printf("VRMS : %x \n", ADE_ReadData(SPI2, VRMS, 3));
 8000312:	2203      	movs	r2, #3
 8000314:	2117      	movs	r1, #23
 8000316:	480a      	ldr	r0, [pc, #40]	; (8000340 <EXTI9_5_IRQHandler+0x38>)
 8000318:	f000 f905 	bl	8000526 <ADE_ReadData>
 800031c:	4603      	mov	r3, r0
 800031e:	4619      	mov	r1, r3
 8000320:	4808      	ldr	r0, [pc, #32]	; (8000344 <EXTI9_5_IRQHandler+0x3c>)
 8000322:	f001 f867 	bl	80013f4 <iprintf>
	printf("VRMS : %x \n", ADE_ReadData(SPI2, MODE, 2));
 8000326:	2202      	movs	r2, #2
 8000328:	2109      	movs	r1, #9
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <EXTI9_5_IRQHandler+0x38>)
 800032c:	f000 f8fb 	bl	8000526 <ADE_ReadData>
 8000330:	4603      	mov	r3, r0
 8000332:	4619      	mov	r1, r3
 8000334:	4803      	ldr	r0, [pc, #12]	; (8000344 <EXTI9_5_IRQHandler+0x3c>)
 8000336:	f001 f85d 	bl	80013f4 <iprintf>

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40003800 	.word	0x40003800
 8000344:	080023d0 	.word	0x080023d0

08000348 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <ITM_SendChar+0x44>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a0d      	ldr	r2, [pc, #52]	; (800038c <ITM_SendChar+0x44>)
 8000358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800035c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800035e:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <ITM_SendChar+0x48>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <ITM_SendChar+0x48>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800036a:	bf00      	nop
 800036c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	2b00      	cmp	r3, #0
 8000378:	d0f8      	beq.n	800036c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800037a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	6013      	str	r3, [r2, #0]
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	e000edfc 	.word	0xe000edfc
 8000390:	e0000e00 	.word	0xe0000e00

08000394 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a0:	2300      	movs	r3, #0
 80003a2:	617b      	str	r3, [r7, #20]
 80003a4:	e00a      	b.n	80003bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003a6:	f3af 8000 	nop.w
 80003aa:	4601      	mov	r1, r0
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	1c5a      	adds	r2, r3, #1
 80003b0:	60ba      	str	r2, [r7, #8]
 80003b2:	b2ca      	uxtb	r2, r1
 80003b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	3301      	adds	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	697a      	ldr	r2, [r7, #20]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	429a      	cmp	r2, r3
 80003c2:	dbf0      	blt.n	80003a6 <_read+0x12>
	}

return len;
 80003c4:	687b      	ldr	r3, [r7, #4]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b086      	sub	sp, #24
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	60f8      	str	r0, [r7, #12]
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	e009      	b.n	80003f4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	1c5a      	adds	r2, r3, #1
 80003e4:	60ba      	str	r2, [r7, #8]
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ffad 	bl	8000348 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	3301      	adds	r3, #1
 80003f2:	617b      	str	r3, [r7, #20]
 80003f4:	697a      	ldr	r2, [r7, #20]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	dbf1      	blt.n	80003e0 <_write+0x12>
	}
	return len;
 80003fc:	687b      	ldr	r3, [r7, #4]
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <_close>:

int _close(int file)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
	return -1;
 800040e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000412:	4618      	mov	r0, r3
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800042c:	605a      	str	r2, [r3, #4]
	return 0;
 800042e:	2300      	movs	r3, #0
}
 8000430:	4618      	mov	r0, r3
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr

0800043a <_isatty>:

int _isatty(int file)
{
 800043a:	b480      	push	{r7}
 800043c:	b083      	sub	sp, #12
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
	return 1;
 8000442:	2301      	movs	r3, #1
}
 8000444:	4618      	mov	r0, r3
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr

0800044e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800044e:	b480      	push	{r7}
 8000450:	b085      	sub	sp, #20
 8000452:	af00      	add	r7, sp, #0
 8000454:	60f8      	str	r0, [r7, #12]
 8000456:	60b9      	str	r1, [r7, #8]
 8000458:	607a      	str	r2, [r7, #4]
	return 0;
 800045a:	2300      	movs	r3, #0
}
 800045c:	4618      	mov	r0, r3
 800045e:	3714      	adds	r7, #20
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
	...

08000468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000470:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <_sbrk+0x5c>)
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <_sbrk+0x60>)
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800047c:	4b13      	ldr	r3, [pc, #76]	; (80004cc <_sbrk+0x64>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d102      	bne.n	800048a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <_sbrk+0x64>)
 8000486:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <_sbrk+0x68>)
 8000488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <_sbrk+0x64>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	693a      	ldr	r2, [r7, #16]
 8000494:	429a      	cmp	r2, r3
 8000496:	d207      	bcs.n	80004a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000498:	f000 ff7a 	bl	8001390 <__errno>
 800049c:	4603      	mov	r3, r0
 800049e:	220c      	movs	r2, #12
 80004a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004a2:	f04f 33ff 	mov.w	r3, #4294967295
 80004a6:	e009      	b.n	80004bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <_sbrk+0x64>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <_sbrk+0x64>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4413      	add	r3, r2
 80004b6:	4a05      	ldr	r2, [pc, #20]	; (80004cc <_sbrk+0x64>)
 80004b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ba:	68fb      	ldr	r3, [r7, #12]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3718      	adds	r7, #24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20020000 	.word	0x20020000
 80004c8:	00000400 	.word	0x00000400
 80004cc:	20000080 	.word	0x20000080
 80004d0:	200002e0 	.word	0x200002e0

080004d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
    ldr   r0, =_estack
 80004d4:	480d      	ldr	r0, [pc, #52]	; (800050c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004d6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004dc:	480c      	ldr	r0, [pc, #48]	; (8000510 <LoopForever+0x6>)
  ldr r1, =_edata
 80004de:	490d      	ldr	r1, [pc, #52]	; (8000514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <LoopForever+0xe>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e4:	e002      	b.n	80004ec <LoopCopyDataInit>

080004e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ea:	3304      	adds	r3, #4

080004ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f0:	d3f9      	bcc.n	80004e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f2:	4a0a      	ldr	r2, [pc, #40]	; (800051c <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f4:	4c0a      	ldr	r4, [pc, #40]	; (8000520 <LoopForever+0x16>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f8:	e001      	b.n	80004fe <LoopFillZerobss>

080004fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004fc:	3204      	adds	r2, #4

080004fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000500:	d3fb      	bcc.n	80004fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000502:	f000 ff4b 	bl	800139c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000506:	f7ff fec3 	bl	8000290 <main>

0800050a <LoopForever>:

LoopForever:
    b LoopForever
 800050a:	e7fe      	b.n	800050a <LoopForever>
    ldr   r0, =_estack
 800050c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000514:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000518:	08002804 	.word	0x08002804
  ldr r2, =_sbss
 800051c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000520:	200002dc 	.word	0x200002dc

08000524 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000524:	e7fe      	b.n	8000524 <ADC_IRQHandler>

08000526 <ADE_ReadData>:
	ZeroX_Inits();
}


uint32_t ADE_ReadData( SPI_RegDef_t *pSPIx, uint8_t addr, uint32_t bytes_to_read)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b088      	sub	sp, #32
 800052a:	af00      	add	r7, sp, #0
 800052c:	60f8      	str	r0, [r7, #12]
 800052e:	460b      	mov	r3, r1
 8000530:	607a      	str	r2, [r7, #4]
 8000532:	72fb      	strb	r3, [r7, #11]
	uint32_t data = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	61fb      	str	r3, [r7, #28]
	uint8_t dummy_write = 0xff;
 8000538:	23ff      	movs	r3, #255	; 0xff
 800053a:	75fb      	strb	r3, [r7, #23]
	uint8_t dummy_write2 = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	75bb      	strb	r3, [r7, #22]
	SPI_PeripheralControl(pSPIx, ENABLE); //SS pin pull to low
 8000540:	2101      	movs	r1, #1
 8000542:	68f8      	ldr	r0, [r7, #12]
 8000544:	f000 ff08 	bl	8001358 <SPI_PeripheralControl>
//	while( ( (pSPIx->SR & 0x0003) == 0) || (pSPIx->SR & 0x0080) );

	SPI_Transfer(pSPIx, addr);
 8000548:	7afb      	ldrb	r3, [r7, #11]
 800054a:	4619      	mov	r1, r3
 800054c:	68f8      	ldr	r0, [r7, #12]
 800054e:	f000 fee5 	bl	800131c <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_read; i++)
 8000552:	2300      	movs	r3, #0
 8000554:	61bb      	str	r3, [r7, #24]
 8000556:	e00f      	b.n	8000578 <ADE_ReadData+0x52>
	{
		data <<= 8;
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	021b      	lsls	r3, r3, #8
 800055c:	61fb      	str	r3, [r7, #28]
		data |= SPI_Transfer(pSPIx, dummy_write);
 800055e:	7dfb      	ldrb	r3, [r7, #23]
 8000560:	4619      	mov	r1, r3
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	f000 feda 	bl	800131c <SPI_Transfer>
 8000568:	4603      	mov	r3, r0
 800056a:	461a      	mov	r2, r3
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	4313      	orrs	r3, r2
 8000570:	61fb      	str	r3, [r7, #28]
	for(uint32_t i = 0; i < bytes_to_read; i++)
 8000572:	69bb      	ldr	r3, [r7, #24]
 8000574:	3301      	adds	r3, #1
 8000576:	61bb      	str	r3, [r7, #24]
 8000578:	69ba      	ldr	r2, [r7, #24]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	429a      	cmp	r2, r3
 800057e:	d3eb      	bcc.n	8000558 <ADE_ReadData+0x32>
		//printf("%x\n", data);
	}

	SPI_Transfer(pSPIx, dummy_write2);
 8000580:	7dbb      	ldrb	r3, [r7, #22]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	f000 fec9 	bl	800131c <SPI_Transfer>

	SPI_PeripheralControl(pSPIx, DISABLE); //SS pin pull to high
 800058a:	2100      	movs	r1, #0
 800058c:	68f8      	ldr	r0, [r7, #12]
 800058e:	f000 fee3 	bl	8001358 <SPI_PeripheralControl>
	return data;
 8000592:	69fb      	ldr	r3, [r7, #28]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <SPI1_GPIOInits>:
 *
 * PA6 -> GPIO_OUTPUT_PIN
 * ALT function mode : 0
 */
void SPI1_GPIOInits(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 80005a2:	4b1a      	ldr	r3, [pc, #104]	; (800060c <SPI1_GPIOInits+0x70>)
 80005a4:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 80005a6:	2302      	movs	r3, #2
 80005a8:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80005aa:	2305      	movs	r3, #5
 80005ac:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 80005ae:	2300      	movs	r3, #0
 80005b0:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80005b2:	2300      	movs	r3, #0
 80005b4:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80005b6:	2302      	movs	r3, #2
 80005b8:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80005ba:	2305      	movs	r3, #5
 80005bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fc01 	bl	8000dc8 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80005c6:	2307      	movs	r3, #7
 80005c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fbfb 	bl	8000dc8 <GPIO_Init>

	//NSS
 	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 80005d2:	2304      	movs	r3, #4
 80005d4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fbf5 	bl	8000dc8 <GPIO_Init>

	//DC Pin GPIO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80005de:	2306      	movs	r3, #6
 80005e0:	723b      	strb	r3, [r7, #8]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80005e2:	2301      	movs	r3, #1
 80005e4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 80005ea:	2300      	movs	r3, #0
 80005ec:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&SPIPins);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fbe9 	bl	8000dc8 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80005f6:	2303      	movs	r3, #3
 80005f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fbe3 	bl	8000dc8 <GPIO_Init>
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40020000 	.word	0x40020000

08000610 <SPI1_Inits>:



void SPI1_Inits(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	SPI1handle.pSPIx = SPI1;
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <SPI1_Inits+0x40>)
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <SPI1_Inits+0x44>)
 8000618:	601a      	str	r2, [r3, #0]
	SPI1handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <SPI1_Inits+0x40>)
 800061c:	2201      	movs	r2, #1
 800061e:	715a      	strb	r2, [r3, #5]
	SPI1handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <SPI1_Inits+0x40>)
 8000622:	2201      	movs	r2, #1
 8000624:	711a      	strb	r2, [r3, #4]
	SPI1handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <SPI1_Inits+0x40>)
 8000628:	2202      	movs	r2, #2
 800062a:	719a      	strb	r2, [r3, #6]
	SPI1handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <SPI1_Inits+0x40>)
 800062e:	2200      	movs	r2, #0
 8000630:	71da      	strb	r2, [r3, #7]
	SPI1handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <SPI1_Inits+0x40>)
 8000634:	2200      	movs	r2, #0
 8000636:	721a      	strb	r2, [r3, #8]
	SPI1handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <SPI1_Inits+0x40>)
 800063a:	2200      	movs	r2, #0
 800063c:	725a      	strb	r2, [r3, #9]
	SPI1handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <SPI1_Inits+0x40>)
 8000640:	2200      	movs	r2, #0
 8000642:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI1handle);
 8000644:	4802      	ldr	r0, [pc, #8]	; (8000650 <SPI1_Inits+0x40>)
 8000646:	f000 fe0e 	bl	8001266 <SPI_Init>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000090 	.word	0x20000090
 8000654:	40013000 	.word	0x40013000

08000658 <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	SPI_PeripheralControl(SPI1, ENABLE); //SS pin pull to LOW
 8000662:	2101      	movs	r1, #1
 8000664:	4807      	ldr	r0, [pc, #28]	; (8000684 <LCD5110_send+0x2c>)
 8000666:	f000 fe77 	bl	8001358 <SPI_PeripheralControl>
	SPI_Transfer(SPI1, data);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4619      	mov	r1, r3
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <LCD5110_send+0x2c>)
 8000670:	f000 fe54 	bl	800131c <SPI_Transfer>
	SPI_PeripheralControl(SPI1, DISABLE); //SS pin pull to HIGH
 8000674:	2100      	movs	r1, #0
 8000676:	4803      	ldr	r0, [pc, #12]	; (8000684 <LCD5110_send+0x2c>)
 8000678:	f000 fe6e 	bl	8001358 <SPI_PeripheralControl>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40013000 	.word	0x40013000

08000688 <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	460a      	mov	r2, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d002      	beq.n	80006a4 <LCD5110_Pin+0x1c>
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d00f      	beq.n	80006c2 <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 80006a2:	e01d      	b.n	80006e0 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d005      	beq.n	80006b6 <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2106      	movs	r1, #6
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <LCD5110_Pin+0x60>)
 80006b0:	f000 fd22 	bl	80010f8 <GPIO_WriteToOutputPin>
			break;
 80006b4:	e014      	b.n	80006e0 <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2106      	movs	r1, #6
 80006ba:	480b      	ldr	r0, [pc, #44]	; (80006e8 <LCD5110_Pin+0x60>)
 80006bc:	f000 fd1c 	bl	80010f8 <GPIO_WriteToOutputPin>
			break;
 80006c0:	e00e      	b.n	80006e0 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 80006c2:	79bb      	ldrb	r3, [r7, #6]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d005      	beq.n	80006d4 <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2103      	movs	r1, #3
 80006cc:	4806      	ldr	r0, [pc, #24]	; (80006e8 <LCD5110_Pin+0x60>)
 80006ce:	f000 fd13 	bl	80010f8 <GPIO_WriteToOutputPin>
			break;
 80006d2:	e004      	b.n	80006de <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2103      	movs	r1, #3
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <LCD5110_Pin+0x60>)
 80006da:	f000 fd0d 	bl	80010f8 <GPIO_WriteToOutputPin>
			break;
 80006de:	bf00      	nop
	}
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40020000 	.word	0x40020000

080006ec <LCD5110_Delay>:

void LCD5110_Delay(unsigned long micros) {
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++) {
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	e002      	b.n	8000700 <LCD5110_Delay+0x14>
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	429a      	cmp	r2, r3
 8000706:	d8f8      	bhi.n	80006fa <LCD5110_Delay+0xe>
	}
}
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	SPI1_GPIOInits();
 800071e:	f7ff ff3d 	bl	800059c <SPI1_GPIOInits>
	SPI1_Inits();
 8000722:	f7ff ff75 	bl	8000610 <SPI1_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI1, ENABLE);
 8000726:	2101      	movs	r1, #1
 8000728:	481c      	ldr	r0, [pc, #112]	; (800079c <LCD5110_Init+0x88>)
 800072a:	f000 fd81 	bl	8001230 <SPI_SSOEConfig>

	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 800072e:	2100      	movs	r1, #0
 8000730:	2002      	movs	r0, #2
 8000732:	f7ff ffa9 	bl	8000688 <LCD5110_Pin>
	LCD5110_Delay(10000);
 8000736:	f242 7010 	movw	r0, #10000	; 0x2710
 800073a:	f7ff ffd7 	bl	80006ec <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 800073e:	2101      	movs	r1, #1
 8000740:	2002      	movs	r0, #2
 8000742:	f7ff ffa1 	bl	8000688 <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 8000746:	2121      	movs	r1, #33	; 0x21
 8000748:	2000      	movs	r0, #0
 800074a:	f000 f829 	bl	80007a0 <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 800074e:	2114      	movs	r1, #20
 8000750:	2000      	movs	r0, #0
 8000752:	f000 f825 	bl	80007a0 <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	2b00      	cmp	r3, #0
 800075c:	da01      	bge.n	8000762 <LCD5110_Init+0x4e>
		contrast = 0x7F;
 800075e:	237f      	movs	r3, #127	; 0x7f
 8000760:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000768:	b2db      	uxtb	r3, r3
 800076a:	4619      	mov	r1, r3
 800076c:	2000      	movs	r0, #0
 800076e:	f000 f817 	bl	80007a0 <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 8000772:	2120      	movs	r1, #32
 8000774:	2000      	movs	r0, #0
 8000776:	f000 f813 	bl	80007a0 <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 800077a:	210c      	movs	r1, #12
 800077c:	2000      	movs	r0, #0
 800077e:	f000 f80f 	bl	80007a0 <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 8000782:	f000 f8b1 	bl	80008e8 <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8000786:	210c      	movs	r1, #12
 8000788:	2000      	movs	r0, #0
 800078a:	f000 f809 	bl	80007a0 <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 800078e:	f000 f885 	bl	800089c <LCD5110_Clear>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40013000 	.word	0x40013000

080007a0 <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	460a      	mov	r2, r1
 80007aa:	71fb      	strb	r3, [r7, #7]
 80007ac:	4613      	mov	r3, r2
 80007ae:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d006      	beq.n	80007c4 <LCD5110_Write+0x24>
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d109      	bne.n	80007ce <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 80007ba:	2101      	movs	r1, #1
 80007bc:	2001      	movs	r0, #1
 80007be:	f7ff ff63 	bl	8000688 <LCD5110_Pin>
			break;
 80007c2:	e005      	b.n	80007d0 <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 80007c4:	2100      	movs	r1, #0
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff ff5e 	bl	8000688 <LCD5110_Pin>
			break;
 80007cc:	e000      	b.n	80007d0 <LCD5110_Write+0x30>
		default: break;
 80007ce:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 80007d0:	79bb      	ldrb	r3, [r7, #6]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff40 	bl	8000658 <LCD5110_send>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <LCD5110_DrawPixel>:

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
}

void LCD5110_DrawPixel(unsigned char x, unsigned char y, LCD5110_Pixel_t pixel) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
 80007ea:	460b      	mov	r3, r1
 80007ec:	71bb      	strb	r3, [r7, #6]
 80007ee:	4613      	mov	r3, r2
 80007f0:	717b      	strb	r3, [r7, #5]
	if (x >= LCD5110_WIDTH) {
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b53      	cmp	r3, #83	; 0x53
 80007f6:	d849      	bhi.n	800088c <LCD5110_DrawPixel+0xac>
		return;
	}
	if (y >= LCD5110_HEIGHT) {
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	2b2f      	cmp	r3, #47	; 0x2f
 80007fc:	d848      	bhi.n	8000890 <LCD5110_DrawPixel+0xb0>
		return;
	}

	if (pixel != LCD5110_Pixel_Clear) {
 80007fe:	797b      	ldrb	r3, [r7, #5]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d01d      	beq.n	8000840 <LCD5110_DrawPixel+0x60>
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] |= 1 << (y % 8);
 8000804:	79fa      	ldrb	r2, [r7, #7]
 8000806:	79bb      	ldrb	r3, [r7, #6]
 8000808:	08db      	lsrs	r3, r3, #3
 800080a:	b2d8      	uxtb	r0, r3
 800080c:	4601      	mov	r1, r0
 800080e:	2354      	movs	r3, #84	; 0x54
 8000810:	fb03 f301 	mul.w	r3, r3, r1
 8000814:	4413      	add	r3, r2
 8000816:	4a20      	ldr	r2, [pc, #128]	; (8000898 <LCD5110_DrawPixel+0xb8>)
 8000818:	5cd3      	ldrb	r3, [r2, r3]
 800081a:	b25a      	sxtb	r2, r3
 800081c:	79bb      	ldrb	r3, [r7, #6]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	2101      	movs	r1, #1
 8000824:	fa01 f303 	lsl.w	r3, r1, r3
 8000828:	b25b      	sxtb	r3, r3
 800082a:	4313      	orrs	r3, r2
 800082c:	b259      	sxtb	r1, r3
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	2354      	movs	r3, #84	; 0x54
 8000832:	fb03 f300 	mul.w	r3, r3, r0
 8000836:	4413      	add	r3, r2
 8000838:	b2c9      	uxtb	r1, r1
 800083a:	4a17      	ldr	r2, [pc, #92]	; (8000898 <LCD5110_DrawPixel+0xb8>)
 800083c:	54d1      	strb	r1, [r2, r3]
 800083e:	e01e      	b.n	800087e <LCD5110_DrawPixel+0x9e>
	} else {
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] &= ~(1 << (y % 8));
 8000840:	79fa      	ldrb	r2, [r7, #7]
 8000842:	79bb      	ldrb	r3, [r7, #6]
 8000844:	08db      	lsrs	r3, r3, #3
 8000846:	b2d8      	uxtb	r0, r3
 8000848:	4601      	mov	r1, r0
 800084a:	2354      	movs	r3, #84	; 0x54
 800084c:	fb03 f301 	mul.w	r3, r3, r1
 8000850:	4413      	add	r3, r2
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <LCD5110_DrawPixel+0xb8>)
 8000854:	5cd3      	ldrb	r3, [r2, r3]
 8000856:	b25a      	sxtb	r2, r3
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	2101      	movs	r1, #1
 8000860:	fa01 f303 	lsl.w	r3, r1, r3
 8000864:	b25b      	sxtb	r3, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	b25b      	sxtb	r3, r3
 800086a:	4013      	ands	r3, r2
 800086c:	b259      	sxtb	r1, r3
 800086e:	79fa      	ldrb	r2, [r7, #7]
 8000870:	2354      	movs	r3, #84	; 0x54
 8000872:	fb03 f300 	mul.w	r3, r3, r0
 8000876:	4413      	add	r3, r2
 8000878:	b2c9      	uxtb	r1, r1
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <LCD5110_DrawPixel+0xb8>)
 800087c:	54d1      	strb	r1, [r2, r3]
	}
	LCD5110_UpdateArea(x, y, x, y);
 800087e:	79bb      	ldrb	r3, [r7, #6]
 8000880:	79fa      	ldrb	r2, [r7, #7]
 8000882:	79b9      	ldrb	r1, [r7, #6]
 8000884:	79f8      	ldrb	r0, [r7, #7]
 8000886:	f000 f89d 	bl	80009c4 <LCD5110_UpdateArea>
 800088a:	e002      	b.n	8000892 <LCD5110_DrawPixel+0xb2>
		return;
 800088c:	bf00      	nop
 800088e:	e000      	b.n	8000892 <LCD5110_DrawPixel+0xb2>
		return;
 8000890:	bf00      	nop
}
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000d4 	.word	0x200000d4

0800089c <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 80008a2:	f000 f821 	bl	80008e8 <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	e007      	b.n	80008bc <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <LCD5110_Clear+0x48>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3301      	adds	r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80008c2:	d3f3      	bcc.n	80008ac <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 f8b8 	bl	8000a3c <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 80008cc:	232f      	movs	r3, #47	; 0x2f
 80008ce:	2253      	movs	r2, #83	; 0x53
 80008d0:	2100      	movs	r1, #0
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 f876 	bl	80009c4 <LCD5110_UpdateArea>
	LCD5110_Refresh();
 80008d8:	f000 f812 	bl	8000900 <LCD5110_Refresh>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000d4 	.word	0x200000d4

080008e8 <LCD5110_Home>:

void LCD5110_Home(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff ff56 	bl	80007a0 <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 80008f4:	2140      	movs	r1, #64	; 0x40
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff ff52 	bl	80007a0 <LCD5110_Write>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 8000906:	2300      	movs	r3, #0
 8000908:	71fb      	strb	r3, [r7, #7]
 800090a:	e03b      	b.n	8000984 <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 800090c:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <LCD5110_Refresh+0xb0>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	3301      	adds	r3, #1
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	429a      	cmp	r2, r3
 800091a:	dc2f      	bgt.n	800097c <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	4a24      	ldr	r2, [pc, #144]	; (80009b4 <LCD5110_Refresh+0xb4>)
 8000922:	7812      	ldrb	r2, [r2, #0]
 8000924:	4293      	cmp	r3, r2
 8000926:	dc31      	bgt.n	800098c <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4619      	mov	r1, r3
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff ff34 	bl	80007a0 <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <LCD5110_Refresh+0xb8>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000940:	b2db      	uxtb	r3, r3
 8000942:	4619      	mov	r1, r3
 8000944:	2000      	movs	r0, #0
 8000946:	f7ff ff2b 	bl	80007a0 <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <LCD5110_Refresh+0xb8>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	71bb      	strb	r3, [r7, #6]
 8000950:	e00e      	b.n	8000970 <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2254      	movs	r2, #84	; 0x54
 8000956:	fb02 f203 	mul.w	r2, r2, r3
 800095a:	79bb      	ldrb	r3, [r7, #6]
 800095c:	4413      	add	r3, r2
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <LCD5110_Refresh+0xbc>)
 8000960:	5cd3      	ldrb	r3, [r2, r3]
 8000962:	4619      	mov	r1, r3
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff ff1b 	bl	80007a0 <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	3301      	adds	r3, #1
 800096e:	71bb      	strb	r3, [r7, #6]
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <LCD5110_Refresh+0xc0>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	79ba      	ldrb	r2, [r7, #6]
 8000976:	429a      	cmp	r2, r3
 8000978:	d9eb      	bls.n	8000952 <LCD5110_Refresh+0x52>
 800097a:	e000      	b.n	800097e <LCD5110_Refresh+0x7e>
			continue;
 800097c:	bf00      	nop
	for (i = 0; i < 6; i++) {
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	3301      	adds	r3, #1
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	2b05      	cmp	r3, #5
 8000988:	d9c0      	bls.n	800090c <LCD5110_Refresh+0xc>
 800098a:	e000      	b.n	800098e <LCD5110_Refresh+0x8e>
			break;
 800098c:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <LCD5110_Refresh+0xb8>)
 8000990:	2253      	movs	r2, #83	; 0x53
 8000992:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <LCD5110_Refresh+0xc0>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <LCD5110_Refresh+0xb0>)
 800099c:	222f      	movs	r2, #47	; 0x2f
 800099e:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <LCD5110_Refresh+0xb4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000086 	.word	0x20000086
 80009b4:	20000087 	.word	0x20000087
 80009b8:	20000084 	.word	0x20000084
 80009bc:	200000d4 	.word	0x200000d4
 80009c0:	20000085 	.word	0x20000085

080009c4 <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 80009c4:	b490      	push	{r4, r7}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4604      	mov	r4, r0
 80009cc:	4608      	mov	r0, r1
 80009ce:	4611      	mov	r1, r2
 80009d0:	461a      	mov	r2, r3
 80009d2:	4623      	mov	r3, r4
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	4603      	mov	r3, r0
 80009d8:	71bb      	strb	r3, [r7, #6]
 80009da:	460b      	mov	r3, r1
 80009dc:	717b      	strb	r3, [r7, #5]
 80009de:	4613      	mov	r3, r2
 80009e0:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <LCD5110_UpdateArea+0x68>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	79fa      	ldrb	r2, [r7, #7]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d202      	bcs.n	80009f2 <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 80009ec:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <LCD5110_UpdateArea+0x68>)
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <LCD5110_UpdateArea+0x6c>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	797a      	ldrb	r2, [r7, #5]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d902      	bls.n	8000a02 <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 80009fc:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <LCD5110_UpdateArea+0x6c>)
 80009fe:	797b      	ldrb	r3, [r7, #5]
 8000a00:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <LCD5110_UpdateArea+0x70>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	79ba      	ldrb	r2, [r7, #6]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d202      	bcs.n	8000a12 <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 8000a0c:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <LCD5110_UpdateArea+0x70>)
 8000a0e:	79bb      	ldrb	r3, [r7, #6]
 8000a10:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <LCD5110_UpdateArea+0x74>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	793a      	ldrb	r2, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d902      	bls.n	8000a22 <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 8000a1c:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <LCD5110_UpdateArea+0x74>)
 8000a1e:	793b      	ldrb	r3, [r7, #4]
 8000a20:	7013      	strb	r3, [r2, #0]
	}
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc90      	pop	{r4, r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	20000084 	.word	0x20000084
 8000a30:	20000085 	.word	0x20000085
 8000a34:	20000086 	.word	0x20000086
 8000a38:	20000087 	.word	0x20000087

08000a3c <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	460a      	mov	r2, r1
 8000a46:	71fb      	strb	r3, [r7, #7]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 8000a4c:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <LCD5110_GotoXY+0x28>)
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <LCD5110_GotoXY+0x2c>)
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	7013      	strb	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	200000d0 	.word	0x200000d0
 8000a68:	200000d1 	.word	0x200000d1

08000a6c <LCD5110_Putc>:

void LCD5110_Putc(char c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	460b      	mov	r3, r1
 8000a78:	71bb      	strb	r3, [r7, #6]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == LCD5110_FontSize_3x5) {
 8000a7e:	797b      	ldrb	r3, [r7, #5]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d104      	bne.n	8000a8e <LCD5110_Putc+0x22>
		c_width = LCD5110_CHAR3x5_WIDTH;
 8000a84:	2304      	movs	r3, #4
 8000a86:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR3x5_HEIGHT;
 8000a88:	2306      	movs	r3, #6
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	e003      	b.n	8000a96 <LCD5110_Putc+0x2a>
	} else {
		c_width = LCD5110_CHAR5x7_WIDTH;
 8000a8e:	2306      	movs	r3, #6
 8000a90:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR5x7_HEIGHT;
 8000a92:	2308      	movs	r3, #8
 8000a94:	73fb      	strb	r3, [r7, #15]
	}
	if ((LCD5110_x + c_width) > LCD5110_WIDTH) {
 8000a96:	4b46      	ldr	r3, [pc, #280]	; (8000bb0 <LCD5110_Putc+0x144>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	7bbb      	ldrb	r3, [r7, #14]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2b54      	cmp	r3, #84	; 0x54
 8000aa2:	dd09      	ble.n	8000ab8 <LCD5110_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		LCD5110_y += c_height;
 8000aa4:	4b43      	ldr	r3, [pc, #268]	; (8000bb4 <LCD5110_Putc+0x148>)
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	4413      	add	r3, r2
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b41      	ldr	r3, [pc, #260]	; (8000bb4 <LCD5110_Putc+0x148>)
 8000ab0:	701a      	strb	r2, [r3, #0]
		LCD5110_x = 0;
 8000ab2:	4b3f      	ldr	r3, [pc, #252]	; (8000bb0 <LCD5110_Putc+0x144>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8000ab8:	2300      	movs	r3, #0
 8000aba:	737b      	strb	r3, [r7, #13]
 8000abc:	e068      	b.n	8000b90 <LCD5110_Putc+0x124>
		if (c < 32) {
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b1f      	cmp	r3, #31
 8000ac2:	d91c      	bls.n	8000afe <LCD5110_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == LCD5110_FontSize_3x5) {
 8000ac4:	797b      	ldrb	r3, [r7, #5]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d10c      	bne.n	8000ae4 <LCD5110_Putc+0x78>
			b = LCD5110_Font3x5[c - 32][i];
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f1a3 0220 	sub.w	r2, r3, #32
 8000ad0:	7b79      	ldrb	r1, [r7, #13]
 8000ad2:	4839      	ldr	r0, [pc, #228]	; (8000bb8 <LCD5110_Putc+0x14c>)
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	4403      	add	r3, r0
 8000adc:	440b      	add	r3, r1
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	733b      	strb	r3, [r7, #12]
 8000ae2:	e00c      	b.n	8000afe <LCD5110_Putc+0x92>
		} else {
			b = LCD5110_Font5x7[c - 32][i];
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	f1a3 0220 	sub.w	r2, r3, #32
 8000aea:	7b79      	ldrb	r1, [r7, #13]
 8000aec:	4833      	ldr	r0, [pc, #204]	; (8000bbc <LCD5110_Putc+0x150>)
 8000aee:	4613      	mov	r3, r2
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	4413      	add	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4403      	add	r3, r0
 8000af8:	440b      	add	r3, r1
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8000afe:	7b3b      	ldrb	r3, [r7, #12]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d105      	bne.n	8000b10 <LCD5110_Putc+0xa4>
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <LCD5110_Putc+0xa4>
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b20      	cmp	r3, #32
 8000b0e:	d13b      	bne.n	8000b88 <LCD5110_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8000b10:	2300      	movs	r3, #0
 8000b12:	72fb      	strb	r3, [r7, #11]
 8000b14:	e02d      	b.n	8000b72 <LCD5110_Putc+0x106>
			if (color == LCD5110_Pixel_Set) {
 8000b16:	79bb      	ldrb	r3, [r7, #6]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d112      	bne.n	8000b42 <LCD5110_Putc+0xd6>
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Set : LCD5110_Pixel_Clear);
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <LCD5110_Putc+0x144>)
 8000b1e:	7818      	ldrb	r0, [r3, #0]
 8000b20:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <LCD5110_Putc+0x148>)
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	7afb      	ldrb	r3, [r7, #11]
 8000b26:	4413      	add	r3, r2
 8000b28:	b2d9      	uxtb	r1, r3
 8000b2a:	7b3a      	ldrb	r2, [r7, #12]
 8000b2c:	7afb      	ldrb	r3, [r7, #11]
 8000b2e:	fa42 f303 	asr.w	r3, r2, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	f7ff fe50 	bl	80007e0 <LCD5110_DrawPixel>
 8000b40:	e014      	b.n	8000b6c <LCD5110_Putc+0x100>
			} else {
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Clear : LCD5110_Pixel_Set);
 8000b42:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <LCD5110_Putc+0x144>)
 8000b44:	7818      	ldrb	r0, [r3, #0]
 8000b46:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <LCD5110_Putc+0x148>)
 8000b48:	781a      	ldrb	r2, [r3, #0]
 8000b4a:	7afb      	ldrb	r3, [r7, #11]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	b2d9      	uxtb	r1, r3
 8000b50:	7b3a      	ldrb	r2, [r7, #12]
 8000b52:	7afb      	ldrb	r3, [r7, #11]
 8000b54:	fa42 f303 	asr.w	r3, r2, r3
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	bf0c      	ite	eq
 8000b60:	2301      	moveq	r3, #1
 8000b62:	2300      	movne	r3, #0
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	461a      	mov	r2, r3
 8000b68:	f7ff fe3a 	bl	80007e0 <LCD5110_DrawPixel>
		for (j = 0; j < c_height; j++) {
 8000b6c:	7afb      	ldrb	r3, [r7, #11]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	72fb      	strb	r3, [r7, #11]
 8000b72:	7afa      	ldrb	r2, [r7, #11]
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d3cd      	bcc.n	8000b16 <LCD5110_Putc+0xaa>
			}
		}
		LCD5110_x++;
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <LCD5110_Putc+0x144>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <LCD5110_Putc+0x144>)
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e000      	b.n	8000b8a <LCD5110_Putc+0x11e>
			continue;
 8000b88:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 8000b8a:	7b7b      	ldrb	r3, [r7, #13]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	737b      	strb	r3, [r7, #13]
 8000b90:	7b7a      	ldrb	r2, [r7, #13]
 8000b92:	7bbb      	ldrb	r3, [r7, #14]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	429a      	cmp	r2, r3
 8000b98:	db91      	blt.n	8000abe <LCD5110_Putc+0x52>
	}
	LCD5110_x++;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <LCD5110_Putc+0x144>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <LCD5110_Putc+0x144>)
 8000ba4:	701a      	strb	r2, [r3, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000d0 	.word	0x200000d0
 8000bb4:	200000d1 	.word	0x200000d1
 8000bb8:	08002624 	.word	0x08002624
 8000bbc:	080023dc 	.word	0x080023dc

08000bc0 <LCD5110_Puts>:

void LCD5110_Puts(char *c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 8000bd0:	e008      	b.n	8000be4 <LCD5110_Puts+0x24>
		LCD5110_Putc(*c++, color, size);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	1c5a      	adds	r2, r3, #1
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	78ba      	ldrb	r2, [r7, #2]
 8000bdc:	78f9      	ldrb	r1, [r7, #3]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff44 	bl	8000a6c <LCD5110_Putc>
	while (*c) {
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1f2      	bne.n	8000bd2 <LCD5110_Puts+0x12>
	}
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t*pGPIOx, uint8_t EnorDi)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d162      	bne.n	8000cd0 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a64      	ldr	r2, [pc, #400]	; (8000da0 <GPIO_PeriClockControl+0x1a8>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d106      	bne.n	8000c20 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000c12:	4b64      	ldr	r3, [pc, #400]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a63      	ldr	r2, [pc, #396]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000c1e:	e0b9      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a61      	ldr	r2, [pc, #388]	; (8000da8 <GPIO_PeriClockControl+0x1b0>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d106      	bne.n	8000c36 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000c28:	4b5e      	ldr	r3, [pc, #376]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	4a5d      	ldr	r2, [pc, #372]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c34:	e0ae      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a5c      	ldr	r2, [pc, #368]	; (8000dac <GPIO_PeriClockControl+0x1b4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d106      	bne.n	8000c4c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000c3e:	4b59      	ldr	r3, [pc, #356]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a58      	ldr	r2, [pc, #352]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c4a:	e0a3      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a58      	ldr	r2, [pc, #352]	; (8000db0 <GPIO_PeriClockControl+0x1b8>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d106      	bne.n	8000c62 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000c54:	4b53      	ldr	r3, [pc, #332]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	4a52      	ldr	r2, [pc, #328]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000c5a:	f043 0308 	orr.w	r3, r3, #8
 8000c5e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c60:	e098      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a53      	ldr	r2, [pc, #332]	; (8000db4 <GPIO_PeriClockControl+0x1bc>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d106      	bne.n	8000c78 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000c6a:	4b4e      	ldr	r3, [pc, #312]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a4d      	ldr	r2, [pc, #308]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000c70:	f043 0310 	orr.w	r3, r3, #16
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c76:	e08d      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a4f      	ldr	r2, [pc, #316]	; (8000db8 <GPIO_PeriClockControl+0x1c0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d106      	bne.n	8000c8e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000c80:	4b48      	ldr	r3, [pc, #288]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	4a47      	ldr	r2, [pc, #284]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000c86:	f043 0320 	orr.w	r3, r3, #32
 8000c8a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c8c:	e082      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a4a      	ldr	r2, [pc, #296]	; (8000dbc <GPIO_PeriClockControl+0x1c4>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d106      	bne.n	8000ca4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000c96:	4b43      	ldr	r3, [pc, #268]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a42      	ldr	r2, [pc, #264]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ca2:	e077      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a46      	ldr	r2, [pc, #280]	; (8000dc0 <GPIO_PeriClockControl+0x1c8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d106      	bne.n	8000cba <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000cac:	4b3d      	ldr	r3, [pc, #244]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4a3c      	ldr	r2, [pc, #240]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cb8:	e06c      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a41      	ldr	r2, [pc, #260]	; (8000dc4 <GPIO_PeriClockControl+0x1cc>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d168      	bne.n	8000d94 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000cc2:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a37      	ldr	r2, [pc, #220]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cce:	e061      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a33      	ldr	r2, [pc, #204]	; (8000da0 <GPIO_PeriClockControl+0x1a8>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d106      	bne.n	8000ce6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	4a31      	ldr	r2, [pc, #196]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000cde:	f023 0301 	bic.w	r3, r3, #1
 8000ce2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ce4:	e056      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a2f      	ldr	r2, [pc, #188]	; (8000da8 <GPIO_PeriClockControl+0x1b0>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d106      	bne.n	8000cfc <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a2c      	ldr	r2, [pc, #176]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000cf4:	f023 0302 	bic.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cfa:	e04b      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a2b      	ldr	r2, [pc, #172]	; (8000dac <GPIO_PeriClockControl+0x1b4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d106      	bne.n	8000d12 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000d04:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	4a26      	ldr	r2, [pc, #152]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000d0a:	f023 0304 	bic.w	r3, r3, #4
 8000d0e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d10:	e040      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a26      	ldr	r2, [pc, #152]	; (8000db0 <GPIO_PeriClockControl+0x1b8>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d106      	bne.n	8000d28 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000d1a:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000d20:	f023 0308 	bic.w	r3, r3, #8
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d26:	e035      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <GPIO_PeriClockControl+0x1bc>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d106      	bne.n	8000d3e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	4a1b      	ldr	r2, [pc, #108]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000d36:	f023 0310 	bic.w	r3, r3, #16
 8000d3a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d3c:	e02a      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a1d      	ldr	r2, [pc, #116]	; (8000db8 <GPIO_PeriClockControl+0x1c0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d106      	bne.n	8000d54 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a16      	ldr	r2, [pc, #88]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000d4c:	f023 0320 	bic.w	r3, r3, #32
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d52:	e01f      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <GPIO_PeriClockControl+0x1c4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d106      	bne.n	8000d6a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d68:	e014      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <GPIO_PeriClockControl+0x1c8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d106      	bne.n	8000d80 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d7e:	e009      	b.n	8000d94 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <GPIO_PeriClockControl+0x1cc>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d105      	bne.n	8000d94 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <GPIO_PeriClockControl+0x1ac>)
 8000d8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d92:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40020800 	.word	0x40020800
 8000db0:	40020c00 	.word	0x40020c00
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40021400 	.word	0x40021400
 8000dbc:	40021800 	.word	0x40021800
 8000dc0:	40021c00 	.word	0x40021c00
 8000dc4:	40022000 	.word	0x40022000

08000dc8 <GPIO_Init>:

/*
 * Init & De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff0c 	bl	8000bf8 <GPIO_PeriClockControl>

	//1. configure the mode of gpio
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	795b      	ldrb	r3, [r3, #5]
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d81f      	bhi.n	8000e28 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	795b      	ldrb	r3, [r3, #5]
 8000dec:	461a      	mov	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	791b      	ldrb	r3, [r3, #4]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	617b      	str	r3, [r7, #20]

		pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	791b      	ldrb	r3, [r3, #4]
 8000e04:	4619      	mov	r1, r3
 8000e06:	2303      	movs	r3, #3
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	400a      	ands	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx ->MODER |= temp; //setting
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6819      	ldr	r1, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	430a      	orrs	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	e0c2      	b.n	8000fae <GPIO_Init+0x1e6>


	}else
	{
		//code later
		if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	795b      	ldrb	r3, [r3, #5]
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d817      	bhi.n	8000e60 <GPIO_Init+0x98>
		{
			//1. configure the FTSR
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000e30:	4b47      	ldr	r3, [pc, #284]	; (8000f50 <GPIO_Init+0x188>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	7912      	ldrb	r2, [r2, #4]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	408a      	lsls	r2, r1
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4a43      	ldr	r2, [pc, #268]	; (8000f50 <GPIO_Init+0x188>)
 8000e42:	430b      	orrs	r3, r1
 8000e44:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI ->RTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000e46:	4b42      	ldr	r3, [pc, #264]	; (8000f50 <GPIO_Init+0x188>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	7912      	ldrb	r2, [r2, #4]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	2201      	movs	r2, #1
 8000e52:	408a      	lsls	r2, r1
 8000e54:	43d2      	mvns	r2, r2
 8000e56:	4611      	mov	r1, r2
 8000e58:	4a3d      	ldr	r2, [pc, #244]	; (8000f50 <GPIO_Init+0x188>)
 8000e5a:	400b      	ands	r3, r1
 8000e5c:	6093      	str	r3, [r2, #8]
 8000e5e:	e035      	b.n	8000ecc <GPIO_Init+0x104>
		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	795b      	ldrb	r3, [r3, #5]
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d817      	bhi.n	8000e98 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000e68:	4b39      	ldr	r3, [pc, #228]	; (8000f50 <GPIO_Init+0x188>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	7912      	ldrb	r2, [r2, #4]
 8000e70:	4611      	mov	r1, r2
 8000e72:	2201      	movs	r2, #1
 8000e74:	408a      	lsls	r2, r1
 8000e76:	4611      	mov	r1, r2
 8000e78:	4a35      	ldr	r2, [pc, #212]	; (8000f50 <GPIO_Init+0x188>)
 8000e7a:	430b      	orrs	r3, r1
 8000e7c:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000e7e:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <GPIO_Init+0x188>)
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	7912      	ldrb	r2, [r2, #4]
 8000e86:	4611      	mov	r1, r2
 8000e88:	2201      	movs	r2, #1
 8000e8a:	408a      	lsls	r2, r1
 8000e8c:	43d2      	mvns	r2, r2
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4a2f      	ldr	r2, [pc, #188]	; (8000f50 <GPIO_Init+0x188>)
 8000e92:	400b      	ands	r3, r1
 8000e94:	60d3      	str	r3, [r2, #12]
 8000e96:	e019      	b.n	8000ecc <GPIO_Init+0x104>

		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	795b      	ldrb	r3, [r3, #5]
 8000e9c:	2b06      	cmp	r3, #6
 8000e9e:	d815      	bhi.n	8000ecc <GPIO_Init+0x104>
		{
			//1. configure the both FTSR and RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <GPIO_Init+0x188>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	7912      	ldrb	r2, [r2, #4]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	2201      	movs	r2, #1
 8000eac:	408a      	lsls	r2, r1
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4a27      	ldr	r2, [pc, #156]	; (8000f50 <GPIO_Init+0x188>)
 8000eb2:	430b      	orrs	r3, r1
 8000eb4:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000eb6:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <GPIO_Init+0x188>)
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	7912      	ldrb	r2, [r2, #4]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	408a      	lsls	r2, r1
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4a22      	ldr	r2, [pc, #136]	; (8000f50 <GPIO_Init+0x188>)
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	60d3      	str	r3, [r2, #12]

		}

		//2. configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	791b      	ldrb	r3, [r3, #4]
 8000ed0:	089b      	lsrs	r3, r3, #2
 8000ed2:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	791b      	ldrb	r3, [r3, #4]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <GPIO_Init+0x18c>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d045      	beq.n	8000f74 <GPIO_Init+0x1ac>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1a      	ldr	r2, [pc, #104]	; (8000f58 <GPIO_Init+0x190>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d02b      	beq.n	8000f4a <GPIO_Init+0x182>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <GPIO_Init+0x194>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d024      	beq.n	8000f46 <GPIO_Init+0x17e>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <GPIO_Init+0x198>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d01d      	beq.n	8000f42 <GPIO_Init+0x17a>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <GPIO_Init+0x19c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d016      	beq.n	8000f3e <GPIO_Init+0x176>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <GPIO_Init+0x1a0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00f      	beq.n	8000f3a <GPIO_Init+0x172>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <GPIO_Init+0x1a4>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d008      	beq.n	8000f36 <GPIO_Init+0x16e>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a11      	ldr	r2, [pc, #68]	; (8000f70 <GPIO_Init+0x1a8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d101      	bne.n	8000f32 <GPIO_Init+0x16a>
 8000f2e:	2307      	movs	r3, #7
 8000f30:	e021      	b.n	8000f76 <GPIO_Init+0x1ae>
 8000f32:	2300      	movs	r3, #0
 8000f34:	e01f      	b.n	8000f76 <GPIO_Init+0x1ae>
 8000f36:	2306      	movs	r3, #6
 8000f38:	e01d      	b.n	8000f76 <GPIO_Init+0x1ae>
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	e01b      	b.n	8000f76 <GPIO_Init+0x1ae>
 8000f3e:	2304      	movs	r3, #4
 8000f40:	e019      	b.n	8000f76 <GPIO_Init+0x1ae>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e017      	b.n	8000f76 <GPIO_Init+0x1ae>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e015      	b.n	8000f76 <GPIO_Init+0x1ae>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e013      	b.n	8000f76 <GPIO_Init+0x1ae>
 8000f4e:	bf00      	nop
 8000f50:	40013c00 	.word	0x40013c00
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020c00 	.word	0x40020c00
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40021400 	.word	0x40021400
 8000f6c:	40021800 	.word	0x40021800
 8000f70:	40021c00 	.word	0x40021c00
 8000f74:	2300      	movs	r3, #0
 8000f76:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000f78:	4b5c      	ldr	r3, [pc, #368]	; (80010ec <GPIO_Init+0x324>)
 8000f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7c:	4a5b      	ldr	r2, [pc, #364]	; (80010ec <GPIO_Init+0x324>)
 8000f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f82:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]= portcode << (temp2*4);
 8000f84:	7c7a      	ldrb	r2, [r7, #17]
 8000f86:	7cbb      	ldrb	r3, [r7, #18]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	fa02 f103 	lsl.w	r1, r2, r3
 8000f8e:	4a58      	ldr	r2, [pc, #352]	; (80010f0 <GPIO_Init+0x328>)
 8000f90:	7cfb      	ldrb	r3, [r7, #19]
 8000f92:	3302      	adds	r3, #2
 8000f94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI ->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000f98:	4b56      	ldr	r3, [pc, #344]	; (80010f4 <GPIO_Init+0x32c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	7912      	ldrb	r2, [r2, #4]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	408a      	lsls	r2, r1
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4a52      	ldr	r2, [pc, #328]	; (80010f4 <GPIO_Init+0x32c>)
 8000faa:	430b      	orrs	r3, r1
 8000fac:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
	//2. configure the speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	799b      	ldrb	r3, [r3, #6]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	791b      	ldrb	r3, [r3, #4]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	791b      	ldrb	r3, [r3, #4]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	408b      	lsls	r3, r1
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	400a      	ands	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OSPEEDR |= temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6899      	ldr	r1, [r3, #8]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	430a      	orrs	r2, r1
 8000fee:	609a      	str	r2, [r3, #8]

	temp =0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
	//3. configure the pu pd settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	79db      	ldrb	r3, [r3, #7]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	791b      	ldrb	r3, [r3, #4]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	791b      	ldrb	r3, [r3, #4]
 8001010:	4619      	mov	r1, r3
 8001012:	2303      	movs	r3, #3
 8001014:	408b      	lsls	r3, r1
 8001016:	43db      	mvns	r3, r3
 8001018:	4619      	mov	r1, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	400a      	ands	r2, r1
 8001020:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->PUPDR |= temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68d9      	ldr	r1, [r3, #12]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	430a      	orrs	r2, r1
 8001030:	60da      	str	r2, [r3, #12]

	temp =0;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]

	//4. configure
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinoType << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7a1b      	ldrb	r3, [r3, #8]
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	791b      	ldrb	r3, [r3, #4]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x01 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	791b      	ldrb	r3, [r3, #4]
 8001050:	4619      	mov	r1, r3
 8001052:	2301      	movs	r3, #1
 8001054:	408b      	lsls	r3, r1
 8001056:	43db      	mvns	r3, r3
 8001058:	4619      	mov	r1, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	400a      	ands	r2, r1
 8001060:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OTYPER |= temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6859      	ldr	r1, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	430a      	orrs	r2, r1
 8001070:	605a      	str	r2, [r3, #4]

	temp =0;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]

	//5. configure
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	795b      	ldrb	r3, [r3, #5]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d132      	bne.n	80010e4 <GPIO_Init+0x31c>
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	791b      	ldrb	r3, [r3, #4]
 8001082:	08db      	lsrs	r3, r3, #3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	791b      	ldrb	r3, [r3, #4]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	3208      	adds	r2, #8
 800109a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	210f      	movs	r1, #15
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	4619      	mov	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4011      	ands	r1, r2
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	3208      	adds	r2, #8
 80010b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	3208      	adds	r2, #8
 80010c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7a5b      	ldrb	r3, [r3, #9]
 80010ca:	4619      	mov	r1, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	4619      	mov	r1, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4311      	orrs	r1, r2
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	3208      	adds	r2, #8
 80010e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80010e4:	bf00      	nop
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40013800 	.word	0x40013800
 80010f4:	40013c00 	.word	0x40013c00

080010f8 <GPIO_WriteToOutputPin>:
	uint16_t value;
	value = (uint8_t)pGPIOx->IDR;
	return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	70fb      	strb	r3, [r7, #3]
 8001104:	4613      	mov	r3, r2
 8001106:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8001108:	78bb      	ldrb	r3, [r7, #2]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d109      	bne.n	8001122 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx -> ODR |= (1<< PinNumber);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	78fa      	ldrb	r2, [r7, #3]
 8001114:	2101      	movs	r1, #1
 8001116:	fa01 f202 	lsl.w	r2, r1, r2
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx -> ODR &= ~(1 << PinNumber);
	}
}
 8001120:	e009      	b.n	8001136 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx -> ODR &= ~(1 << PinNumber);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	78fa      	ldrb	r2, [r7, #3]
 8001128:	2101      	movs	r1, #1
 800112a:	fa01 f202 	lsl.w	r2, r1, r2
 800112e:	43d2      	mvns	r2, r2
 8001130:	401a      	ands	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	615a      	str	r2, [r3, #20]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <GPIO_IRQHandling>:

}


void GPIO_IRQHandling(uint8_t PinNumber) //interrupt happen, do the action in here
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if(EXTI ->PR & (1<< PinNumber))
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <GPIO_IRQHandling+0x3c>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	79fa      	ldrb	r2, [r7, #7]
 8001150:	2101      	movs	r1, #1
 8001152:	fa01 f202 	lsl.w	r2, r1, r2
 8001156:	4013      	ands	r3, r2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d009      	beq.n	8001170 <GPIO_IRQHandling+0x30>
	{
	//clear
		EXTI -> PR |= (1<< PinNumber);
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <GPIO_IRQHandling+0x3c>)
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	79fa      	ldrb	r2, [r7, #7]
 8001162:	2101      	movs	r1, #1
 8001164:	fa01 f202 	lsl.w	r2, r1, r2
 8001168:	4611      	mov	r1, r2
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <GPIO_IRQHandling+0x3c>)
 800116c:	430b      	orrs	r3, r1
 800116e:	6153      	str	r3, [r2, #20]
	}

}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40013c00 	.word	0x40013c00

08001180 <SPI_PeriClockControl>:
static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_RegDef_t*pSPIx, uint8_t EnorDi)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d120      	bne.n	80011d4 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a22      	ldr	r2, [pc, #136]	; (8001220 <SPI_PeriClockControl+0xa0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d106      	bne.n	80011a8 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <SPI_PeriClockControl+0xa4>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a21      	ldr	r2, [pc, #132]	; (8001224 <SPI_PeriClockControl+0xa4>)
 80011a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI3_PCLK_DI();
		}
	}

}
 80011a6:	e035      	b.n	8001214 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a1f      	ldr	r2, [pc, #124]	; (8001228 <SPI_PeriClockControl+0xa8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d106      	bne.n	80011be <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <SPI_PeriClockControl+0xa4>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <SPI_PeriClockControl+0xa4>)
 80011b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011bc:	e02a      	b.n	8001214 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a1a      	ldr	r2, [pc, #104]	; (800122c <SPI_PeriClockControl+0xac>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d126      	bne.n	8001214 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <SPI_PeriClockControl+0xa4>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a16      	ldr	r2, [pc, #88]	; (8001224 <SPI_PeriClockControl+0xa4>)
 80011cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011d2:	e01f      	b.n	8001214 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <SPI_PeriClockControl+0xa0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d106      	bne.n	80011ea <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <SPI_PeriClockControl+0xa4>)
 80011de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e0:	4a10      	ldr	r2, [pc, #64]	; (8001224 <SPI_PeriClockControl+0xa4>)
 80011e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011e6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80011e8:	e014      	b.n	8001214 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <SPI_PeriClockControl+0xa8>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d106      	bne.n	8001200 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <SPI_PeriClockControl+0xa4>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <SPI_PeriClockControl+0xa4>)
 80011f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
}
 80011fe:	e009      	b.n	8001214 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <SPI_PeriClockControl+0xac>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d105      	bne.n	8001214 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <SPI_PeriClockControl+0xa4>)
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	4a05      	ldr	r2, [pc, #20]	; (8001224 <SPI_PeriClockControl+0xa4>)
 800120e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001212:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40013000 	.word	0x40013000
 8001224:	40023800 	.word	0x40023800
 8001228:	40003800 	.word	0x40003800
 800122c:	40003c00 	.word	0x40003c00

08001230 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d106      	bne.n	8001250 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f043 0204 	orr.w	r2, r3, #4
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 800124e:	e005      	b.n	800125c <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f023 0204 	bic.w	r2, r3, #4
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	605a      	str	r2, [r3, #4]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <SPI_Init>:
/************************
 *
 */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2101      	movs	r1, #1
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff83 	bl	8001180 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	791b      	ldrb	r3, [r3, #4]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	461a      	mov	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	795b      	ldrb	r3, [r3, #5]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d104      	bne.n	800129e <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	e014      	b.n	80012c8 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	795b      	ldrb	r3, [r3, #5]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d104      	bne.n	80012b0 <SPI_Init+0x4a>
	{
		//BIDI mode should be set
		tempreg |= ~(1<<SPI_CR1_BIDIMODE);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e00b      	b.n	80012c8 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	795b      	ldrb	r3, [r3, #5]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d107      	bne.n	80012c8 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80012be:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1<<SPI_CR1_RXONLY);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c6:	60fb      	str	r3, [r7, #12]
	}
	//3. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	799b      	ldrb	r3, [r3, #6]
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	461a      	mov	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	79db      	ldrb	r3, [r3, #7]
 80012da:	02db      	lsls	r3, r3, #11
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7a1b      	ldrb	r3, [r3, #8]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7a5b      	ldrb	r3, [r3, #9]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7a9b      	ldrb	r3, [r3, #10]
 8001302:	025b      	lsls	r3, r3, #9
 8001304:	461a      	mov	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4313      	orrs	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <SPI_Transfer>:
		}

}

uint8_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
	pSPIx->DR = data;
 8001328:	78fa      	ldrb	r2, [r7, #3]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60da      	str	r2, [r3, #12]
	while( ( (pSPIx->SR & 0x0003) == 0) || (pSPIx->SR & 0x0080) );
 800132e:	bf00      	nop
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f9      	beq.n	8001330 <SPI_Transfer+0x14>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f3      	bne.n	8001330 <SPI_Transfer+0x14>
	//while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );

	//printf("%x \n", pSPIx->DR);
	return pSPIx->DR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	b2db      	uxtb	r3, r3
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <SPI_PeripheralControl>:
/**************************
 *
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d106      	bne.n	8001378 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	601a      	str	r2, [r3, #0]
	} else
	{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 8001376:	e005      	b.n	8001384 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
	...

08001390 <__errno>:
 8001390:	4b01      	ldr	r3, [pc, #4]	; (8001398 <__errno+0x8>)
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000000 	.word	0x20000000

0800139c <__libc_init_array>:
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	4d0d      	ldr	r5, [pc, #52]	; (80013d4 <__libc_init_array+0x38>)
 80013a0:	4c0d      	ldr	r4, [pc, #52]	; (80013d8 <__libc_init_array+0x3c>)
 80013a2:	1b64      	subs	r4, r4, r5
 80013a4:	10a4      	asrs	r4, r4, #2
 80013a6:	2600      	movs	r6, #0
 80013a8:	42a6      	cmp	r6, r4
 80013aa:	d109      	bne.n	80013c0 <__libc_init_array+0x24>
 80013ac:	4d0b      	ldr	r5, [pc, #44]	; (80013dc <__libc_init_array+0x40>)
 80013ae:	4c0c      	ldr	r4, [pc, #48]	; (80013e0 <__libc_init_array+0x44>)
 80013b0:	f000 ffe8 	bl	8002384 <_init>
 80013b4:	1b64      	subs	r4, r4, r5
 80013b6:	10a4      	asrs	r4, r4, #2
 80013b8:	2600      	movs	r6, #0
 80013ba:	42a6      	cmp	r6, r4
 80013bc:	d105      	bne.n	80013ca <__libc_init_array+0x2e>
 80013be:	bd70      	pop	{r4, r5, r6, pc}
 80013c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80013c4:	4798      	blx	r3
 80013c6:	3601      	adds	r6, #1
 80013c8:	e7ee      	b.n	80013a8 <__libc_init_array+0xc>
 80013ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80013ce:	4798      	blx	r3
 80013d0:	3601      	adds	r6, #1
 80013d2:	e7f2      	b.n	80013ba <__libc_init_array+0x1e>
 80013d4:	080027fc 	.word	0x080027fc
 80013d8:	080027fc 	.word	0x080027fc
 80013dc:	080027fc 	.word	0x080027fc
 80013e0:	08002800 	.word	0x08002800

080013e4 <memset>:
 80013e4:	4402      	add	r2, r0
 80013e6:	4603      	mov	r3, r0
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d100      	bne.n	80013ee <memset+0xa>
 80013ec:	4770      	bx	lr
 80013ee:	f803 1b01 	strb.w	r1, [r3], #1
 80013f2:	e7f9      	b.n	80013e8 <memset+0x4>

080013f4 <iprintf>:
 80013f4:	b40f      	push	{r0, r1, r2, r3}
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <iprintf+0x2c>)
 80013f8:	b513      	push	{r0, r1, r4, lr}
 80013fa:	681c      	ldr	r4, [r3, #0]
 80013fc:	b124      	cbz	r4, 8001408 <iprintf+0x14>
 80013fe:	69a3      	ldr	r3, [r4, #24]
 8001400:	b913      	cbnz	r3, 8001408 <iprintf+0x14>
 8001402:	4620      	mov	r0, r4
 8001404:	f000 fa5e 	bl	80018c4 <__sinit>
 8001408:	ab05      	add	r3, sp, #20
 800140a:	9a04      	ldr	r2, [sp, #16]
 800140c:	68a1      	ldr	r1, [r4, #8]
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	4620      	mov	r0, r4
 8001412:	f000 fc2b 	bl	8001c6c <_vfiprintf_r>
 8001416:	b002      	add	sp, #8
 8001418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800141c:	b004      	add	sp, #16
 800141e:	4770      	bx	lr
 8001420:	20000000 	.word	0x20000000

08001424 <_puts_r>:
 8001424:	b570      	push	{r4, r5, r6, lr}
 8001426:	460e      	mov	r6, r1
 8001428:	4605      	mov	r5, r0
 800142a:	b118      	cbz	r0, 8001434 <_puts_r+0x10>
 800142c:	6983      	ldr	r3, [r0, #24]
 800142e:	b90b      	cbnz	r3, 8001434 <_puts_r+0x10>
 8001430:	f000 fa48 	bl	80018c4 <__sinit>
 8001434:	69ab      	ldr	r3, [r5, #24]
 8001436:	68ac      	ldr	r4, [r5, #8]
 8001438:	b913      	cbnz	r3, 8001440 <_puts_r+0x1c>
 800143a:	4628      	mov	r0, r5
 800143c:	f000 fa42 	bl	80018c4 <__sinit>
 8001440:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <_puts_r+0xd0>)
 8001442:	429c      	cmp	r4, r3
 8001444:	d120      	bne.n	8001488 <_puts_r+0x64>
 8001446:	686c      	ldr	r4, [r5, #4]
 8001448:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800144a:	07db      	lsls	r3, r3, #31
 800144c:	d405      	bmi.n	800145a <_puts_r+0x36>
 800144e:	89a3      	ldrh	r3, [r4, #12]
 8001450:	0598      	lsls	r0, r3, #22
 8001452:	d402      	bmi.n	800145a <_puts_r+0x36>
 8001454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001456:	f000 fad3 	bl	8001a00 <__retarget_lock_acquire_recursive>
 800145a:	89a3      	ldrh	r3, [r4, #12]
 800145c:	0719      	lsls	r1, r3, #28
 800145e:	d51d      	bpl.n	800149c <_puts_r+0x78>
 8001460:	6923      	ldr	r3, [r4, #16]
 8001462:	b1db      	cbz	r3, 800149c <_puts_r+0x78>
 8001464:	3e01      	subs	r6, #1
 8001466:	68a3      	ldr	r3, [r4, #8]
 8001468:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800146c:	3b01      	subs	r3, #1
 800146e:	60a3      	str	r3, [r4, #8]
 8001470:	bb39      	cbnz	r1, 80014c2 <_puts_r+0x9e>
 8001472:	2b00      	cmp	r3, #0
 8001474:	da38      	bge.n	80014e8 <_puts_r+0xc4>
 8001476:	4622      	mov	r2, r4
 8001478:	210a      	movs	r1, #10
 800147a:	4628      	mov	r0, r5
 800147c:	f000 f848 	bl	8001510 <__swbuf_r>
 8001480:	3001      	adds	r0, #1
 8001482:	d011      	beq.n	80014a8 <_puts_r+0x84>
 8001484:	250a      	movs	r5, #10
 8001486:	e011      	b.n	80014ac <_puts_r+0x88>
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <_puts_r+0xd4>)
 800148a:	429c      	cmp	r4, r3
 800148c:	d101      	bne.n	8001492 <_puts_r+0x6e>
 800148e:	68ac      	ldr	r4, [r5, #8]
 8001490:	e7da      	b.n	8001448 <_puts_r+0x24>
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <_puts_r+0xd8>)
 8001494:	429c      	cmp	r4, r3
 8001496:	bf08      	it	eq
 8001498:	68ec      	ldreq	r4, [r5, #12]
 800149a:	e7d5      	b.n	8001448 <_puts_r+0x24>
 800149c:	4621      	mov	r1, r4
 800149e:	4628      	mov	r0, r5
 80014a0:	f000 f888 	bl	80015b4 <__swsetup_r>
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d0dd      	beq.n	8001464 <_puts_r+0x40>
 80014a8:	f04f 35ff 	mov.w	r5, #4294967295
 80014ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014ae:	07da      	lsls	r2, r3, #31
 80014b0:	d405      	bmi.n	80014be <_puts_r+0x9a>
 80014b2:	89a3      	ldrh	r3, [r4, #12]
 80014b4:	059b      	lsls	r3, r3, #22
 80014b6:	d402      	bmi.n	80014be <_puts_r+0x9a>
 80014b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014ba:	f000 faa2 	bl	8001a02 <__retarget_lock_release_recursive>
 80014be:	4628      	mov	r0, r5
 80014c0:	bd70      	pop	{r4, r5, r6, pc}
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	da04      	bge.n	80014d0 <_puts_r+0xac>
 80014c6:	69a2      	ldr	r2, [r4, #24]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dc06      	bgt.n	80014da <_puts_r+0xb6>
 80014cc:	290a      	cmp	r1, #10
 80014ce:	d004      	beq.n	80014da <_puts_r+0xb6>
 80014d0:	6823      	ldr	r3, [r4, #0]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	6022      	str	r2, [r4, #0]
 80014d6:	7019      	strb	r1, [r3, #0]
 80014d8:	e7c5      	b.n	8001466 <_puts_r+0x42>
 80014da:	4622      	mov	r2, r4
 80014dc:	4628      	mov	r0, r5
 80014de:	f000 f817 	bl	8001510 <__swbuf_r>
 80014e2:	3001      	adds	r0, #1
 80014e4:	d1bf      	bne.n	8001466 <_puts_r+0x42>
 80014e6:	e7df      	b.n	80014a8 <_puts_r+0x84>
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	250a      	movs	r5, #10
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	6022      	str	r2, [r4, #0]
 80014f0:	701d      	strb	r5, [r3, #0]
 80014f2:	e7db      	b.n	80014ac <_puts_r+0x88>
 80014f4:	08002788 	.word	0x08002788
 80014f8:	080027a8 	.word	0x080027a8
 80014fc:	08002768 	.word	0x08002768

08001500 <puts>:
 8001500:	4b02      	ldr	r3, [pc, #8]	; (800150c <puts+0xc>)
 8001502:	4601      	mov	r1, r0
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	f7ff bf8d 	b.w	8001424 <_puts_r>
 800150a:	bf00      	nop
 800150c:	20000000 	.word	0x20000000

08001510 <__swbuf_r>:
 8001510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001512:	460e      	mov	r6, r1
 8001514:	4614      	mov	r4, r2
 8001516:	4605      	mov	r5, r0
 8001518:	b118      	cbz	r0, 8001522 <__swbuf_r+0x12>
 800151a:	6983      	ldr	r3, [r0, #24]
 800151c:	b90b      	cbnz	r3, 8001522 <__swbuf_r+0x12>
 800151e:	f000 f9d1 	bl	80018c4 <__sinit>
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <__swbuf_r+0x98>)
 8001524:	429c      	cmp	r4, r3
 8001526:	d12b      	bne.n	8001580 <__swbuf_r+0x70>
 8001528:	686c      	ldr	r4, [r5, #4]
 800152a:	69a3      	ldr	r3, [r4, #24]
 800152c:	60a3      	str	r3, [r4, #8]
 800152e:	89a3      	ldrh	r3, [r4, #12]
 8001530:	071a      	lsls	r2, r3, #28
 8001532:	d52f      	bpl.n	8001594 <__swbuf_r+0x84>
 8001534:	6923      	ldr	r3, [r4, #16]
 8001536:	b36b      	cbz	r3, 8001594 <__swbuf_r+0x84>
 8001538:	6923      	ldr	r3, [r4, #16]
 800153a:	6820      	ldr	r0, [r4, #0]
 800153c:	1ac0      	subs	r0, r0, r3
 800153e:	6963      	ldr	r3, [r4, #20]
 8001540:	b2f6      	uxtb	r6, r6
 8001542:	4283      	cmp	r3, r0
 8001544:	4637      	mov	r7, r6
 8001546:	dc04      	bgt.n	8001552 <__swbuf_r+0x42>
 8001548:	4621      	mov	r1, r4
 800154a:	4628      	mov	r0, r5
 800154c:	f000 f926 	bl	800179c <_fflush_r>
 8001550:	bb30      	cbnz	r0, 80015a0 <__swbuf_r+0x90>
 8001552:	68a3      	ldr	r3, [r4, #8]
 8001554:	3b01      	subs	r3, #1
 8001556:	60a3      	str	r3, [r4, #8]
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	6022      	str	r2, [r4, #0]
 800155e:	701e      	strb	r6, [r3, #0]
 8001560:	6963      	ldr	r3, [r4, #20]
 8001562:	3001      	adds	r0, #1
 8001564:	4283      	cmp	r3, r0
 8001566:	d004      	beq.n	8001572 <__swbuf_r+0x62>
 8001568:	89a3      	ldrh	r3, [r4, #12]
 800156a:	07db      	lsls	r3, r3, #31
 800156c:	d506      	bpl.n	800157c <__swbuf_r+0x6c>
 800156e:	2e0a      	cmp	r6, #10
 8001570:	d104      	bne.n	800157c <__swbuf_r+0x6c>
 8001572:	4621      	mov	r1, r4
 8001574:	4628      	mov	r0, r5
 8001576:	f000 f911 	bl	800179c <_fflush_r>
 800157a:	b988      	cbnz	r0, 80015a0 <__swbuf_r+0x90>
 800157c:	4638      	mov	r0, r7
 800157e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <__swbuf_r+0x9c>)
 8001582:	429c      	cmp	r4, r3
 8001584:	d101      	bne.n	800158a <__swbuf_r+0x7a>
 8001586:	68ac      	ldr	r4, [r5, #8]
 8001588:	e7cf      	b.n	800152a <__swbuf_r+0x1a>
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <__swbuf_r+0xa0>)
 800158c:	429c      	cmp	r4, r3
 800158e:	bf08      	it	eq
 8001590:	68ec      	ldreq	r4, [r5, #12]
 8001592:	e7ca      	b.n	800152a <__swbuf_r+0x1a>
 8001594:	4621      	mov	r1, r4
 8001596:	4628      	mov	r0, r5
 8001598:	f000 f80c 	bl	80015b4 <__swsetup_r>
 800159c:	2800      	cmp	r0, #0
 800159e:	d0cb      	beq.n	8001538 <__swbuf_r+0x28>
 80015a0:	f04f 37ff 	mov.w	r7, #4294967295
 80015a4:	e7ea      	b.n	800157c <__swbuf_r+0x6c>
 80015a6:	bf00      	nop
 80015a8:	08002788 	.word	0x08002788
 80015ac:	080027a8 	.word	0x080027a8
 80015b0:	08002768 	.word	0x08002768

080015b4 <__swsetup_r>:
 80015b4:	4b32      	ldr	r3, [pc, #200]	; (8001680 <__swsetup_r+0xcc>)
 80015b6:	b570      	push	{r4, r5, r6, lr}
 80015b8:	681d      	ldr	r5, [r3, #0]
 80015ba:	4606      	mov	r6, r0
 80015bc:	460c      	mov	r4, r1
 80015be:	b125      	cbz	r5, 80015ca <__swsetup_r+0x16>
 80015c0:	69ab      	ldr	r3, [r5, #24]
 80015c2:	b913      	cbnz	r3, 80015ca <__swsetup_r+0x16>
 80015c4:	4628      	mov	r0, r5
 80015c6:	f000 f97d 	bl	80018c4 <__sinit>
 80015ca:	4b2e      	ldr	r3, [pc, #184]	; (8001684 <__swsetup_r+0xd0>)
 80015cc:	429c      	cmp	r4, r3
 80015ce:	d10f      	bne.n	80015f0 <__swsetup_r+0x3c>
 80015d0:	686c      	ldr	r4, [r5, #4]
 80015d2:	89a3      	ldrh	r3, [r4, #12]
 80015d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80015d8:	0719      	lsls	r1, r3, #28
 80015da:	d42c      	bmi.n	8001636 <__swsetup_r+0x82>
 80015dc:	06dd      	lsls	r5, r3, #27
 80015de:	d411      	bmi.n	8001604 <__swsetup_r+0x50>
 80015e0:	2309      	movs	r3, #9
 80015e2:	6033      	str	r3, [r6, #0]
 80015e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80015e8:	81a3      	strh	r3, [r4, #12]
 80015ea:	f04f 30ff 	mov.w	r0, #4294967295
 80015ee:	e03e      	b.n	800166e <__swsetup_r+0xba>
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <__swsetup_r+0xd4>)
 80015f2:	429c      	cmp	r4, r3
 80015f4:	d101      	bne.n	80015fa <__swsetup_r+0x46>
 80015f6:	68ac      	ldr	r4, [r5, #8]
 80015f8:	e7eb      	b.n	80015d2 <__swsetup_r+0x1e>
 80015fa:	4b24      	ldr	r3, [pc, #144]	; (800168c <__swsetup_r+0xd8>)
 80015fc:	429c      	cmp	r4, r3
 80015fe:	bf08      	it	eq
 8001600:	68ec      	ldreq	r4, [r5, #12]
 8001602:	e7e6      	b.n	80015d2 <__swsetup_r+0x1e>
 8001604:	0758      	lsls	r0, r3, #29
 8001606:	d512      	bpl.n	800162e <__swsetup_r+0x7a>
 8001608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800160a:	b141      	cbz	r1, 800161e <__swsetup_r+0x6a>
 800160c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001610:	4299      	cmp	r1, r3
 8001612:	d002      	beq.n	800161a <__swsetup_r+0x66>
 8001614:	4630      	mov	r0, r6
 8001616:	f000 fa59 	bl	8001acc <_free_r>
 800161a:	2300      	movs	r3, #0
 800161c:	6363      	str	r3, [r4, #52]	; 0x34
 800161e:	89a3      	ldrh	r3, [r4, #12]
 8001620:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001624:	81a3      	strh	r3, [r4, #12]
 8001626:	2300      	movs	r3, #0
 8001628:	6063      	str	r3, [r4, #4]
 800162a:	6923      	ldr	r3, [r4, #16]
 800162c:	6023      	str	r3, [r4, #0]
 800162e:	89a3      	ldrh	r3, [r4, #12]
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	81a3      	strh	r3, [r4, #12]
 8001636:	6923      	ldr	r3, [r4, #16]
 8001638:	b94b      	cbnz	r3, 800164e <__swsetup_r+0x9a>
 800163a:	89a3      	ldrh	r3, [r4, #12]
 800163c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001644:	d003      	beq.n	800164e <__swsetup_r+0x9a>
 8001646:	4621      	mov	r1, r4
 8001648:	4630      	mov	r0, r6
 800164a:	f000 f9ff 	bl	8001a4c <__smakebuf_r>
 800164e:	89a0      	ldrh	r0, [r4, #12]
 8001650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001654:	f010 0301 	ands.w	r3, r0, #1
 8001658:	d00a      	beq.n	8001670 <__swsetup_r+0xbc>
 800165a:	2300      	movs	r3, #0
 800165c:	60a3      	str	r3, [r4, #8]
 800165e:	6963      	ldr	r3, [r4, #20]
 8001660:	425b      	negs	r3, r3
 8001662:	61a3      	str	r3, [r4, #24]
 8001664:	6923      	ldr	r3, [r4, #16]
 8001666:	b943      	cbnz	r3, 800167a <__swsetup_r+0xc6>
 8001668:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800166c:	d1ba      	bne.n	80015e4 <__swsetup_r+0x30>
 800166e:	bd70      	pop	{r4, r5, r6, pc}
 8001670:	0781      	lsls	r1, r0, #30
 8001672:	bf58      	it	pl
 8001674:	6963      	ldrpl	r3, [r4, #20]
 8001676:	60a3      	str	r3, [r4, #8]
 8001678:	e7f4      	b.n	8001664 <__swsetup_r+0xb0>
 800167a:	2000      	movs	r0, #0
 800167c:	e7f7      	b.n	800166e <__swsetup_r+0xba>
 800167e:	bf00      	nop
 8001680:	20000000 	.word	0x20000000
 8001684:	08002788 	.word	0x08002788
 8001688:	080027a8 	.word	0x080027a8
 800168c:	08002768 	.word	0x08002768

08001690 <__sflush_r>:
 8001690:	898a      	ldrh	r2, [r1, #12]
 8001692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001696:	4605      	mov	r5, r0
 8001698:	0710      	lsls	r0, r2, #28
 800169a:	460c      	mov	r4, r1
 800169c:	d458      	bmi.n	8001750 <__sflush_r+0xc0>
 800169e:	684b      	ldr	r3, [r1, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	dc05      	bgt.n	80016b0 <__sflush_r+0x20>
 80016a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	dc02      	bgt.n	80016b0 <__sflush_r+0x20>
 80016aa:	2000      	movs	r0, #0
 80016ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016b2:	2e00      	cmp	r6, #0
 80016b4:	d0f9      	beq.n	80016aa <__sflush_r+0x1a>
 80016b6:	2300      	movs	r3, #0
 80016b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80016bc:	682f      	ldr	r7, [r5, #0]
 80016be:	602b      	str	r3, [r5, #0]
 80016c0:	d032      	beq.n	8001728 <__sflush_r+0x98>
 80016c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80016c4:	89a3      	ldrh	r3, [r4, #12]
 80016c6:	075a      	lsls	r2, r3, #29
 80016c8:	d505      	bpl.n	80016d6 <__sflush_r+0x46>
 80016ca:	6863      	ldr	r3, [r4, #4]
 80016cc:	1ac0      	subs	r0, r0, r3
 80016ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016d0:	b10b      	cbz	r3, 80016d6 <__sflush_r+0x46>
 80016d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016d4:	1ac0      	subs	r0, r0, r3
 80016d6:	2300      	movs	r3, #0
 80016d8:	4602      	mov	r2, r0
 80016da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016dc:	6a21      	ldr	r1, [r4, #32]
 80016de:	4628      	mov	r0, r5
 80016e0:	47b0      	blx	r6
 80016e2:	1c43      	adds	r3, r0, #1
 80016e4:	89a3      	ldrh	r3, [r4, #12]
 80016e6:	d106      	bne.n	80016f6 <__sflush_r+0x66>
 80016e8:	6829      	ldr	r1, [r5, #0]
 80016ea:	291d      	cmp	r1, #29
 80016ec:	d82c      	bhi.n	8001748 <__sflush_r+0xb8>
 80016ee:	4a2a      	ldr	r2, [pc, #168]	; (8001798 <__sflush_r+0x108>)
 80016f0:	40ca      	lsrs	r2, r1
 80016f2:	07d6      	lsls	r6, r2, #31
 80016f4:	d528      	bpl.n	8001748 <__sflush_r+0xb8>
 80016f6:	2200      	movs	r2, #0
 80016f8:	6062      	str	r2, [r4, #4]
 80016fa:	04d9      	lsls	r1, r3, #19
 80016fc:	6922      	ldr	r2, [r4, #16]
 80016fe:	6022      	str	r2, [r4, #0]
 8001700:	d504      	bpl.n	800170c <__sflush_r+0x7c>
 8001702:	1c42      	adds	r2, r0, #1
 8001704:	d101      	bne.n	800170a <__sflush_r+0x7a>
 8001706:	682b      	ldr	r3, [r5, #0]
 8001708:	b903      	cbnz	r3, 800170c <__sflush_r+0x7c>
 800170a:	6560      	str	r0, [r4, #84]	; 0x54
 800170c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800170e:	602f      	str	r7, [r5, #0]
 8001710:	2900      	cmp	r1, #0
 8001712:	d0ca      	beq.n	80016aa <__sflush_r+0x1a>
 8001714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001718:	4299      	cmp	r1, r3
 800171a:	d002      	beq.n	8001722 <__sflush_r+0x92>
 800171c:	4628      	mov	r0, r5
 800171e:	f000 f9d5 	bl	8001acc <_free_r>
 8001722:	2000      	movs	r0, #0
 8001724:	6360      	str	r0, [r4, #52]	; 0x34
 8001726:	e7c1      	b.n	80016ac <__sflush_r+0x1c>
 8001728:	6a21      	ldr	r1, [r4, #32]
 800172a:	2301      	movs	r3, #1
 800172c:	4628      	mov	r0, r5
 800172e:	47b0      	blx	r6
 8001730:	1c41      	adds	r1, r0, #1
 8001732:	d1c7      	bne.n	80016c4 <__sflush_r+0x34>
 8001734:	682b      	ldr	r3, [r5, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0c4      	beq.n	80016c4 <__sflush_r+0x34>
 800173a:	2b1d      	cmp	r3, #29
 800173c:	d001      	beq.n	8001742 <__sflush_r+0xb2>
 800173e:	2b16      	cmp	r3, #22
 8001740:	d101      	bne.n	8001746 <__sflush_r+0xb6>
 8001742:	602f      	str	r7, [r5, #0]
 8001744:	e7b1      	b.n	80016aa <__sflush_r+0x1a>
 8001746:	89a3      	ldrh	r3, [r4, #12]
 8001748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800174c:	81a3      	strh	r3, [r4, #12]
 800174e:	e7ad      	b.n	80016ac <__sflush_r+0x1c>
 8001750:	690f      	ldr	r7, [r1, #16]
 8001752:	2f00      	cmp	r7, #0
 8001754:	d0a9      	beq.n	80016aa <__sflush_r+0x1a>
 8001756:	0793      	lsls	r3, r2, #30
 8001758:	680e      	ldr	r6, [r1, #0]
 800175a:	bf08      	it	eq
 800175c:	694b      	ldreq	r3, [r1, #20]
 800175e:	600f      	str	r7, [r1, #0]
 8001760:	bf18      	it	ne
 8001762:	2300      	movne	r3, #0
 8001764:	eba6 0807 	sub.w	r8, r6, r7
 8001768:	608b      	str	r3, [r1, #8]
 800176a:	f1b8 0f00 	cmp.w	r8, #0
 800176e:	dd9c      	ble.n	80016aa <__sflush_r+0x1a>
 8001770:	6a21      	ldr	r1, [r4, #32]
 8001772:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001774:	4643      	mov	r3, r8
 8001776:	463a      	mov	r2, r7
 8001778:	4628      	mov	r0, r5
 800177a:	47b0      	blx	r6
 800177c:	2800      	cmp	r0, #0
 800177e:	dc06      	bgt.n	800178e <__sflush_r+0xfe>
 8001780:	89a3      	ldrh	r3, [r4, #12]
 8001782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001786:	81a3      	strh	r3, [r4, #12]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	e78e      	b.n	80016ac <__sflush_r+0x1c>
 800178e:	4407      	add	r7, r0
 8001790:	eba8 0800 	sub.w	r8, r8, r0
 8001794:	e7e9      	b.n	800176a <__sflush_r+0xda>
 8001796:	bf00      	nop
 8001798:	20400001 	.word	0x20400001

0800179c <_fflush_r>:
 800179c:	b538      	push	{r3, r4, r5, lr}
 800179e:	690b      	ldr	r3, [r1, #16]
 80017a0:	4605      	mov	r5, r0
 80017a2:	460c      	mov	r4, r1
 80017a4:	b913      	cbnz	r3, 80017ac <_fflush_r+0x10>
 80017a6:	2500      	movs	r5, #0
 80017a8:	4628      	mov	r0, r5
 80017aa:	bd38      	pop	{r3, r4, r5, pc}
 80017ac:	b118      	cbz	r0, 80017b6 <_fflush_r+0x1a>
 80017ae:	6983      	ldr	r3, [r0, #24]
 80017b0:	b90b      	cbnz	r3, 80017b6 <_fflush_r+0x1a>
 80017b2:	f000 f887 	bl	80018c4 <__sinit>
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <_fflush_r+0x6c>)
 80017b8:	429c      	cmp	r4, r3
 80017ba:	d11b      	bne.n	80017f4 <_fflush_r+0x58>
 80017bc:	686c      	ldr	r4, [r5, #4]
 80017be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0ef      	beq.n	80017a6 <_fflush_r+0xa>
 80017c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80017c8:	07d0      	lsls	r0, r2, #31
 80017ca:	d404      	bmi.n	80017d6 <_fflush_r+0x3a>
 80017cc:	0599      	lsls	r1, r3, #22
 80017ce:	d402      	bmi.n	80017d6 <_fflush_r+0x3a>
 80017d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017d2:	f000 f915 	bl	8001a00 <__retarget_lock_acquire_recursive>
 80017d6:	4628      	mov	r0, r5
 80017d8:	4621      	mov	r1, r4
 80017da:	f7ff ff59 	bl	8001690 <__sflush_r>
 80017de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017e0:	07da      	lsls	r2, r3, #31
 80017e2:	4605      	mov	r5, r0
 80017e4:	d4e0      	bmi.n	80017a8 <_fflush_r+0xc>
 80017e6:	89a3      	ldrh	r3, [r4, #12]
 80017e8:	059b      	lsls	r3, r3, #22
 80017ea:	d4dd      	bmi.n	80017a8 <_fflush_r+0xc>
 80017ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017ee:	f000 f908 	bl	8001a02 <__retarget_lock_release_recursive>
 80017f2:	e7d9      	b.n	80017a8 <_fflush_r+0xc>
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <_fflush_r+0x70>)
 80017f6:	429c      	cmp	r4, r3
 80017f8:	d101      	bne.n	80017fe <_fflush_r+0x62>
 80017fa:	68ac      	ldr	r4, [r5, #8]
 80017fc:	e7df      	b.n	80017be <_fflush_r+0x22>
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <_fflush_r+0x74>)
 8001800:	429c      	cmp	r4, r3
 8001802:	bf08      	it	eq
 8001804:	68ec      	ldreq	r4, [r5, #12]
 8001806:	e7da      	b.n	80017be <_fflush_r+0x22>
 8001808:	08002788 	.word	0x08002788
 800180c:	080027a8 	.word	0x080027a8
 8001810:	08002768 	.word	0x08002768

08001814 <std>:
 8001814:	2300      	movs	r3, #0
 8001816:	b510      	push	{r4, lr}
 8001818:	4604      	mov	r4, r0
 800181a:	e9c0 3300 	strd	r3, r3, [r0]
 800181e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001822:	6083      	str	r3, [r0, #8]
 8001824:	8181      	strh	r1, [r0, #12]
 8001826:	6643      	str	r3, [r0, #100]	; 0x64
 8001828:	81c2      	strh	r2, [r0, #14]
 800182a:	6183      	str	r3, [r0, #24]
 800182c:	4619      	mov	r1, r3
 800182e:	2208      	movs	r2, #8
 8001830:	305c      	adds	r0, #92	; 0x5c
 8001832:	f7ff fdd7 	bl	80013e4 <memset>
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <std+0x38>)
 8001838:	6263      	str	r3, [r4, #36]	; 0x24
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <std+0x3c>)
 800183c:	62a3      	str	r3, [r4, #40]	; 0x28
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <std+0x40>)
 8001840:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <std+0x44>)
 8001844:	6224      	str	r4, [r4, #32]
 8001846:	6323      	str	r3, [r4, #48]	; 0x30
 8001848:	bd10      	pop	{r4, pc}
 800184a:	bf00      	nop
 800184c:	08002215 	.word	0x08002215
 8001850:	08002237 	.word	0x08002237
 8001854:	0800226f 	.word	0x0800226f
 8001858:	08002293 	.word	0x08002293

0800185c <_cleanup_r>:
 800185c:	4901      	ldr	r1, [pc, #4]	; (8001864 <_cleanup_r+0x8>)
 800185e:	f000 b8af 	b.w	80019c0 <_fwalk_reent>
 8001862:	bf00      	nop
 8001864:	0800179d 	.word	0x0800179d

08001868 <__sfmoreglue>:
 8001868:	b570      	push	{r4, r5, r6, lr}
 800186a:	1e4a      	subs	r2, r1, #1
 800186c:	2568      	movs	r5, #104	; 0x68
 800186e:	4355      	muls	r5, r2
 8001870:	460e      	mov	r6, r1
 8001872:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001876:	f000 f977 	bl	8001b68 <_malloc_r>
 800187a:	4604      	mov	r4, r0
 800187c:	b140      	cbz	r0, 8001890 <__sfmoreglue+0x28>
 800187e:	2100      	movs	r1, #0
 8001880:	e9c0 1600 	strd	r1, r6, [r0]
 8001884:	300c      	adds	r0, #12
 8001886:	60a0      	str	r0, [r4, #8]
 8001888:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800188c:	f7ff fdaa 	bl	80013e4 <memset>
 8001890:	4620      	mov	r0, r4
 8001892:	bd70      	pop	{r4, r5, r6, pc}

08001894 <__sfp_lock_acquire>:
 8001894:	4801      	ldr	r0, [pc, #4]	; (800189c <__sfp_lock_acquire+0x8>)
 8001896:	f000 b8b3 	b.w	8001a00 <__retarget_lock_acquire_recursive>
 800189a:	bf00      	nop
 800189c:	200002d4 	.word	0x200002d4

080018a0 <__sfp_lock_release>:
 80018a0:	4801      	ldr	r0, [pc, #4]	; (80018a8 <__sfp_lock_release+0x8>)
 80018a2:	f000 b8ae 	b.w	8001a02 <__retarget_lock_release_recursive>
 80018a6:	bf00      	nop
 80018a8:	200002d4 	.word	0x200002d4

080018ac <__sinit_lock_acquire>:
 80018ac:	4801      	ldr	r0, [pc, #4]	; (80018b4 <__sinit_lock_acquire+0x8>)
 80018ae:	f000 b8a7 	b.w	8001a00 <__retarget_lock_acquire_recursive>
 80018b2:	bf00      	nop
 80018b4:	200002cf 	.word	0x200002cf

080018b8 <__sinit_lock_release>:
 80018b8:	4801      	ldr	r0, [pc, #4]	; (80018c0 <__sinit_lock_release+0x8>)
 80018ba:	f000 b8a2 	b.w	8001a02 <__retarget_lock_release_recursive>
 80018be:	bf00      	nop
 80018c0:	200002cf 	.word	0x200002cf

080018c4 <__sinit>:
 80018c4:	b510      	push	{r4, lr}
 80018c6:	4604      	mov	r4, r0
 80018c8:	f7ff fff0 	bl	80018ac <__sinit_lock_acquire>
 80018cc:	69a3      	ldr	r3, [r4, #24]
 80018ce:	b11b      	cbz	r3, 80018d8 <__sinit+0x14>
 80018d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018d4:	f7ff bff0 	b.w	80018b8 <__sinit_lock_release>
 80018d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80018dc:	6523      	str	r3, [r4, #80]	; 0x50
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <__sinit+0x68>)
 80018e0:	4a13      	ldr	r2, [pc, #76]	; (8001930 <__sinit+0x6c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80018e6:	42a3      	cmp	r3, r4
 80018e8:	bf04      	itt	eq
 80018ea:	2301      	moveq	r3, #1
 80018ec:	61a3      	streq	r3, [r4, #24]
 80018ee:	4620      	mov	r0, r4
 80018f0:	f000 f820 	bl	8001934 <__sfp>
 80018f4:	6060      	str	r0, [r4, #4]
 80018f6:	4620      	mov	r0, r4
 80018f8:	f000 f81c 	bl	8001934 <__sfp>
 80018fc:	60a0      	str	r0, [r4, #8]
 80018fe:	4620      	mov	r0, r4
 8001900:	f000 f818 	bl	8001934 <__sfp>
 8001904:	2200      	movs	r2, #0
 8001906:	60e0      	str	r0, [r4, #12]
 8001908:	2104      	movs	r1, #4
 800190a:	6860      	ldr	r0, [r4, #4]
 800190c:	f7ff ff82 	bl	8001814 <std>
 8001910:	68a0      	ldr	r0, [r4, #8]
 8001912:	2201      	movs	r2, #1
 8001914:	2109      	movs	r1, #9
 8001916:	f7ff ff7d 	bl	8001814 <std>
 800191a:	68e0      	ldr	r0, [r4, #12]
 800191c:	2202      	movs	r2, #2
 800191e:	2112      	movs	r1, #18
 8001920:	f7ff ff78 	bl	8001814 <std>
 8001924:	2301      	movs	r3, #1
 8001926:	61a3      	str	r3, [r4, #24]
 8001928:	e7d2      	b.n	80018d0 <__sinit+0xc>
 800192a:	bf00      	nop
 800192c:	08002764 	.word	0x08002764
 8001930:	0800185d 	.word	0x0800185d

08001934 <__sfp>:
 8001934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001936:	4607      	mov	r7, r0
 8001938:	f7ff ffac 	bl	8001894 <__sfp_lock_acquire>
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <__sfp+0x84>)
 800193e:	681e      	ldr	r6, [r3, #0]
 8001940:	69b3      	ldr	r3, [r6, #24]
 8001942:	b913      	cbnz	r3, 800194a <__sfp+0x16>
 8001944:	4630      	mov	r0, r6
 8001946:	f7ff ffbd 	bl	80018c4 <__sinit>
 800194a:	3648      	adds	r6, #72	; 0x48
 800194c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001950:	3b01      	subs	r3, #1
 8001952:	d503      	bpl.n	800195c <__sfp+0x28>
 8001954:	6833      	ldr	r3, [r6, #0]
 8001956:	b30b      	cbz	r3, 800199c <__sfp+0x68>
 8001958:	6836      	ldr	r6, [r6, #0]
 800195a:	e7f7      	b.n	800194c <__sfp+0x18>
 800195c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001960:	b9d5      	cbnz	r5, 8001998 <__sfp+0x64>
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <__sfp+0x88>)
 8001964:	60e3      	str	r3, [r4, #12]
 8001966:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800196a:	6665      	str	r5, [r4, #100]	; 0x64
 800196c:	f000 f847 	bl	80019fe <__retarget_lock_init_recursive>
 8001970:	f7ff ff96 	bl	80018a0 <__sfp_lock_release>
 8001974:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001978:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800197c:	6025      	str	r5, [r4, #0]
 800197e:	61a5      	str	r5, [r4, #24]
 8001980:	2208      	movs	r2, #8
 8001982:	4629      	mov	r1, r5
 8001984:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001988:	f7ff fd2c 	bl	80013e4 <memset>
 800198c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001990:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001994:	4620      	mov	r0, r4
 8001996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001998:	3468      	adds	r4, #104	; 0x68
 800199a:	e7d9      	b.n	8001950 <__sfp+0x1c>
 800199c:	2104      	movs	r1, #4
 800199e:	4638      	mov	r0, r7
 80019a0:	f7ff ff62 	bl	8001868 <__sfmoreglue>
 80019a4:	4604      	mov	r4, r0
 80019a6:	6030      	str	r0, [r6, #0]
 80019a8:	2800      	cmp	r0, #0
 80019aa:	d1d5      	bne.n	8001958 <__sfp+0x24>
 80019ac:	f7ff ff78 	bl	80018a0 <__sfp_lock_release>
 80019b0:	230c      	movs	r3, #12
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	e7ee      	b.n	8001994 <__sfp+0x60>
 80019b6:	bf00      	nop
 80019b8:	08002764 	.word	0x08002764
 80019bc:	ffff0001 	.word	0xffff0001

080019c0 <_fwalk_reent>:
 80019c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019c4:	4606      	mov	r6, r0
 80019c6:	4688      	mov	r8, r1
 80019c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80019cc:	2700      	movs	r7, #0
 80019ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80019d2:	f1b9 0901 	subs.w	r9, r9, #1
 80019d6:	d505      	bpl.n	80019e4 <_fwalk_reent+0x24>
 80019d8:	6824      	ldr	r4, [r4, #0]
 80019da:	2c00      	cmp	r4, #0
 80019dc:	d1f7      	bne.n	80019ce <_fwalk_reent+0xe>
 80019de:	4638      	mov	r0, r7
 80019e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019e4:	89ab      	ldrh	r3, [r5, #12]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d907      	bls.n	80019fa <_fwalk_reent+0x3a>
 80019ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019ee:	3301      	adds	r3, #1
 80019f0:	d003      	beq.n	80019fa <_fwalk_reent+0x3a>
 80019f2:	4629      	mov	r1, r5
 80019f4:	4630      	mov	r0, r6
 80019f6:	47c0      	blx	r8
 80019f8:	4307      	orrs	r7, r0
 80019fa:	3568      	adds	r5, #104	; 0x68
 80019fc:	e7e9      	b.n	80019d2 <_fwalk_reent+0x12>

080019fe <__retarget_lock_init_recursive>:
 80019fe:	4770      	bx	lr

08001a00 <__retarget_lock_acquire_recursive>:
 8001a00:	4770      	bx	lr

08001a02 <__retarget_lock_release_recursive>:
 8001a02:	4770      	bx	lr

08001a04 <__swhatbuf_r>:
 8001a04:	b570      	push	{r4, r5, r6, lr}
 8001a06:	460e      	mov	r6, r1
 8001a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a0c:	2900      	cmp	r1, #0
 8001a0e:	b096      	sub	sp, #88	; 0x58
 8001a10:	4614      	mov	r4, r2
 8001a12:	461d      	mov	r5, r3
 8001a14:	da07      	bge.n	8001a26 <__swhatbuf_r+0x22>
 8001a16:	2300      	movs	r3, #0
 8001a18:	602b      	str	r3, [r5, #0]
 8001a1a:	89b3      	ldrh	r3, [r6, #12]
 8001a1c:	061a      	lsls	r2, r3, #24
 8001a1e:	d410      	bmi.n	8001a42 <__swhatbuf_r+0x3e>
 8001a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a24:	e00e      	b.n	8001a44 <__swhatbuf_r+0x40>
 8001a26:	466a      	mov	r2, sp
 8001a28:	f000 fc5a 	bl	80022e0 <_fstat_r>
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	dbf2      	blt.n	8001a16 <__swhatbuf_r+0x12>
 8001a30:	9a01      	ldr	r2, [sp, #4]
 8001a32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a3a:	425a      	negs	r2, r3
 8001a3c:	415a      	adcs	r2, r3
 8001a3e:	602a      	str	r2, [r5, #0]
 8001a40:	e7ee      	b.n	8001a20 <__swhatbuf_r+0x1c>
 8001a42:	2340      	movs	r3, #64	; 0x40
 8001a44:	2000      	movs	r0, #0
 8001a46:	6023      	str	r3, [r4, #0]
 8001a48:	b016      	add	sp, #88	; 0x58
 8001a4a:	bd70      	pop	{r4, r5, r6, pc}

08001a4c <__smakebuf_r>:
 8001a4c:	898b      	ldrh	r3, [r1, #12]
 8001a4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a50:	079d      	lsls	r5, r3, #30
 8001a52:	4606      	mov	r6, r0
 8001a54:	460c      	mov	r4, r1
 8001a56:	d507      	bpl.n	8001a68 <__smakebuf_r+0x1c>
 8001a58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a5c:	6023      	str	r3, [r4, #0]
 8001a5e:	6123      	str	r3, [r4, #16]
 8001a60:	2301      	movs	r3, #1
 8001a62:	6163      	str	r3, [r4, #20]
 8001a64:	b002      	add	sp, #8
 8001a66:	bd70      	pop	{r4, r5, r6, pc}
 8001a68:	ab01      	add	r3, sp, #4
 8001a6a:	466a      	mov	r2, sp
 8001a6c:	f7ff ffca 	bl	8001a04 <__swhatbuf_r>
 8001a70:	9900      	ldr	r1, [sp, #0]
 8001a72:	4605      	mov	r5, r0
 8001a74:	4630      	mov	r0, r6
 8001a76:	f000 f877 	bl	8001b68 <_malloc_r>
 8001a7a:	b948      	cbnz	r0, 8001a90 <__smakebuf_r+0x44>
 8001a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a80:	059a      	lsls	r2, r3, #22
 8001a82:	d4ef      	bmi.n	8001a64 <__smakebuf_r+0x18>
 8001a84:	f023 0303 	bic.w	r3, r3, #3
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	81a3      	strh	r3, [r4, #12]
 8001a8e:	e7e3      	b.n	8001a58 <__smakebuf_r+0xc>
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <__smakebuf_r+0x7c>)
 8001a92:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a94:	89a3      	ldrh	r3, [r4, #12]
 8001a96:	6020      	str	r0, [r4, #0]
 8001a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9c:	81a3      	strh	r3, [r4, #12]
 8001a9e:	9b00      	ldr	r3, [sp, #0]
 8001aa0:	6163      	str	r3, [r4, #20]
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	6120      	str	r0, [r4, #16]
 8001aa6:	b15b      	cbz	r3, 8001ac0 <__smakebuf_r+0x74>
 8001aa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001aac:	4630      	mov	r0, r6
 8001aae:	f000 fc29 	bl	8002304 <_isatty_r>
 8001ab2:	b128      	cbz	r0, 8001ac0 <__smakebuf_r+0x74>
 8001ab4:	89a3      	ldrh	r3, [r4, #12]
 8001ab6:	f023 0303 	bic.w	r3, r3, #3
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	81a3      	strh	r3, [r4, #12]
 8001ac0:	89a0      	ldrh	r0, [r4, #12]
 8001ac2:	4305      	orrs	r5, r0
 8001ac4:	81a5      	strh	r5, [r4, #12]
 8001ac6:	e7cd      	b.n	8001a64 <__smakebuf_r+0x18>
 8001ac8:	0800185d 	.word	0x0800185d

08001acc <_free_r>:
 8001acc:	b538      	push	{r3, r4, r5, lr}
 8001ace:	4605      	mov	r5, r0
 8001ad0:	2900      	cmp	r1, #0
 8001ad2:	d045      	beq.n	8001b60 <_free_r+0x94>
 8001ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ad8:	1f0c      	subs	r4, r1, #4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bfb8      	it	lt
 8001ade:	18e4      	addlt	r4, r4, r3
 8001ae0:	f000 fc32 	bl	8002348 <__malloc_lock>
 8001ae4:	4a1f      	ldr	r2, [pc, #124]	; (8001b64 <_free_r+0x98>)
 8001ae6:	6813      	ldr	r3, [r2, #0]
 8001ae8:	4610      	mov	r0, r2
 8001aea:	b933      	cbnz	r3, 8001afa <_free_r+0x2e>
 8001aec:	6063      	str	r3, [r4, #4]
 8001aee:	6014      	str	r4, [r2, #0]
 8001af0:	4628      	mov	r0, r5
 8001af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001af6:	f000 bc2d 	b.w	8002354 <__malloc_unlock>
 8001afa:	42a3      	cmp	r3, r4
 8001afc:	d90b      	bls.n	8001b16 <_free_r+0x4a>
 8001afe:	6821      	ldr	r1, [r4, #0]
 8001b00:	1862      	adds	r2, r4, r1
 8001b02:	4293      	cmp	r3, r2
 8001b04:	bf04      	itt	eq
 8001b06:	681a      	ldreq	r2, [r3, #0]
 8001b08:	685b      	ldreq	r3, [r3, #4]
 8001b0a:	6063      	str	r3, [r4, #4]
 8001b0c:	bf04      	itt	eq
 8001b0e:	1852      	addeq	r2, r2, r1
 8001b10:	6022      	streq	r2, [r4, #0]
 8001b12:	6004      	str	r4, [r0, #0]
 8001b14:	e7ec      	b.n	8001af0 <_free_r+0x24>
 8001b16:	461a      	mov	r2, r3
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	b10b      	cbz	r3, 8001b20 <_free_r+0x54>
 8001b1c:	42a3      	cmp	r3, r4
 8001b1e:	d9fa      	bls.n	8001b16 <_free_r+0x4a>
 8001b20:	6811      	ldr	r1, [r2, #0]
 8001b22:	1850      	adds	r0, r2, r1
 8001b24:	42a0      	cmp	r0, r4
 8001b26:	d10b      	bne.n	8001b40 <_free_r+0x74>
 8001b28:	6820      	ldr	r0, [r4, #0]
 8001b2a:	4401      	add	r1, r0
 8001b2c:	1850      	adds	r0, r2, r1
 8001b2e:	4283      	cmp	r3, r0
 8001b30:	6011      	str	r1, [r2, #0]
 8001b32:	d1dd      	bne.n	8001af0 <_free_r+0x24>
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	6053      	str	r3, [r2, #4]
 8001b3a:	4401      	add	r1, r0
 8001b3c:	6011      	str	r1, [r2, #0]
 8001b3e:	e7d7      	b.n	8001af0 <_free_r+0x24>
 8001b40:	d902      	bls.n	8001b48 <_free_r+0x7c>
 8001b42:	230c      	movs	r3, #12
 8001b44:	602b      	str	r3, [r5, #0]
 8001b46:	e7d3      	b.n	8001af0 <_free_r+0x24>
 8001b48:	6820      	ldr	r0, [r4, #0]
 8001b4a:	1821      	adds	r1, r4, r0
 8001b4c:	428b      	cmp	r3, r1
 8001b4e:	bf04      	itt	eq
 8001b50:	6819      	ldreq	r1, [r3, #0]
 8001b52:	685b      	ldreq	r3, [r3, #4]
 8001b54:	6063      	str	r3, [r4, #4]
 8001b56:	bf04      	itt	eq
 8001b58:	1809      	addeq	r1, r1, r0
 8001b5a:	6021      	streq	r1, [r4, #0]
 8001b5c:	6054      	str	r4, [r2, #4]
 8001b5e:	e7c7      	b.n	8001af0 <_free_r+0x24>
 8001b60:	bd38      	pop	{r3, r4, r5, pc}
 8001b62:	bf00      	nop
 8001b64:	20000088 	.word	0x20000088

08001b68 <_malloc_r>:
 8001b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6a:	1ccd      	adds	r5, r1, #3
 8001b6c:	f025 0503 	bic.w	r5, r5, #3
 8001b70:	3508      	adds	r5, #8
 8001b72:	2d0c      	cmp	r5, #12
 8001b74:	bf38      	it	cc
 8001b76:	250c      	movcc	r5, #12
 8001b78:	2d00      	cmp	r5, #0
 8001b7a:	4606      	mov	r6, r0
 8001b7c:	db01      	blt.n	8001b82 <_malloc_r+0x1a>
 8001b7e:	42a9      	cmp	r1, r5
 8001b80:	d903      	bls.n	8001b8a <_malloc_r+0x22>
 8001b82:	230c      	movs	r3, #12
 8001b84:	6033      	str	r3, [r6, #0]
 8001b86:	2000      	movs	r0, #0
 8001b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b8a:	f000 fbdd 	bl	8002348 <__malloc_lock>
 8001b8e:	4921      	ldr	r1, [pc, #132]	; (8001c14 <_malloc_r+0xac>)
 8001b90:	680a      	ldr	r2, [r1, #0]
 8001b92:	4614      	mov	r4, r2
 8001b94:	b99c      	cbnz	r4, 8001bbe <_malloc_r+0x56>
 8001b96:	4f20      	ldr	r7, [pc, #128]	; (8001c18 <_malloc_r+0xb0>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b923      	cbnz	r3, 8001ba6 <_malloc_r+0x3e>
 8001b9c:	4621      	mov	r1, r4
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	f000 fb28 	bl	80021f4 <_sbrk_r>
 8001ba4:	6038      	str	r0, [r7, #0]
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	4630      	mov	r0, r6
 8001baa:	f000 fb23 	bl	80021f4 <_sbrk_r>
 8001bae:	1c43      	adds	r3, r0, #1
 8001bb0:	d123      	bne.n	8001bfa <_malloc_r+0x92>
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	6033      	str	r3, [r6, #0]
 8001bb6:	4630      	mov	r0, r6
 8001bb8:	f000 fbcc 	bl	8002354 <__malloc_unlock>
 8001bbc:	e7e3      	b.n	8001b86 <_malloc_r+0x1e>
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	1b5b      	subs	r3, r3, r5
 8001bc2:	d417      	bmi.n	8001bf4 <_malloc_r+0x8c>
 8001bc4:	2b0b      	cmp	r3, #11
 8001bc6:	d903      	bls.n	8001bd0 <_malloc_r+0x68>
 8001bc8:	6023      	str	r3, [r4, #0]
 8001bca:	441c      	add	r4, r3
 8001bcc:	6025      	str	r5, [r4, #0]
 8001bce:	e004      	b.n	8001bda <_malloc_r+0x72>
 8001bd0:	6863      	ldr	r3, [r4, #4]
 8001bd2:	42a2      	cmp	r2, r4
 8001bd4:	bf0c      	ite	eq
 8001bd6:	600b      	streq	r3, [r1, #0]
 8001bd8:	6053      	strne	r3, [r2, #4]
 8001bda:	4630      	mov	r0, r6
 8001bdc:	f000 fbba 	bl	8002354 <__malloc_unlock>
 8001be0:	f104 000b 	add.w	r0, r4, #11
 8001be4:	1d23      	adds	r3, r4, #4
 8001be6:	f020 0007 	bic.w	r0, r0, #7
 8001bea:	1ac2      	subs	r2, r0, r3
 8001bec:	d0cc      	beq.n	8001b88 <_malloc_r+0x20>
 8001bee:	1a1b      	subs	r3, r3, r0
 8001bf0:	50a3      	str	r3, [r4, r2]
 8001bf2:	e7c9      	b.n	8001b88 <_malloc_r+0x20>
 8001bf4:	4622      	mov	r2, r4
 8001bf6:	6864      	ldr	r4, [r4, #4]
 8001bf8:	e7cc      	b.n	8001b94 <_malloc_r+0x2c>
 8001bfa:	1cc4      	adds	r4, r0, #3
 8001bfc:	f024 0403 	bic.w	r4, r4, #3
 8001c00:	42a0      	cmp	r0, r4
 8001c02:	d0e3      	beq.n	8001bcc <_malloc_r+0x64>
 8001c04:	1a21      	subs	r1, r4, r0
 8001c06:	4630      	mov	r0, r6
 8001c08:	f000 faf4 	bl	80021f4 <_sbrk_r>
 8001c0c:	3001      	adds	r0, #1
 8001c0e:	d1dd      	bne.n	8001bcc <_malloc_r+0x64>
 8001c10:	e7cf      	b.n	8001bb2 <_malloc_r+0x4a>
 8001c12:	bf00      	nop
 8001c14:	20000088 	.word	0x20000088
 8001c18:	2000008c 	.word	0x2000008c

08001c1c <__sfputc_r>:
 8001c1c:	6893      	ldr	r3, [r2, #8]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	b410      	push	{r4}
 8001c24:	6093      	str	r3, [r2, #8]
 8001c26:	da07      	bge.n	8001c38 <__sfputc_r+0x1c>
 8001c28:	6994      	ldr	r4, [r2, #24]
 8001c2a:	42a3      	cmp	r3, r4
 8001c2c:	db01      	blt.n	8001c32 <__sfputc_r+0x16>
 8001c2e:	290a      	cmp	r1, #10
 8001c30:	d102      	bne.n	8001c38 <__sfputc_r+0x1c>
 8001c32:	bc10      	pop	{r4}
 8001c34:	f7ff bc6c 	b.w	8001510 <__swbuf_r>
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	1c58      	adds	r0, r3, #1
 8001c3c:	6010      	str	r0, [r2, #0]
 8001c3e:	7019      	strb	r1, [r3, #0]
 8001c40:	4608      	mov	r0, r1
 8001c42:	bc10      	pop	{r4}
 8001c44:	4770      	bx	lr

08001c46 <__sfputs_r>:
 8001c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c48:	4606      	mov	r6, r0
 8001c4a:	460f      	mov	r7, r1
 8001c4c:	4614      	mov	r4, r2
 8001c4e:	18d5      	adds	r5, r2, r3
 8001c50:	42ac      	cmp	r4, r5
 8001c52:	d101      	bne.n	8001c58 <__sfputs_r+0x12>
 8001c54:	2000      	movs	r0, #0
 8001c56:	e007      	b.n	8001c68 <__sfputs_r+0x22>
 8001c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c5c:	463a      	mov	r2, r7
 8001c5e:	4630      	mov	r0, r6
 8001c60:	f7ff ffdc 	bl	8001c1c <__sfputc_r>
 8001c64:	1c43      	adds	r3, r0, #1
 8001c66:	d1f3      	bne.n	8001c50 <__sfputs_r+0xa>
 8001c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c6c <_vfiprintf_r>:
 8001c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c70:	460d      	mov	r5, r1
 8001c72:	b09d      	sub	sp, #116	; 0x74
 8001c74:	4614      	mov	r4, r2
 8001c76:	4698      	mov	r8, r3
 8001c78:	4606      	mov	r6, r0
 8001c7a:	b118      	cbz	r0, 8001c84 <_vfiprintf_r+0x18>
 8001c7c:	6983      	ldr	r3, [r0, #24]
 8001c7e:	b90b      	cbnz	r3, 8001c84 <_vfiprintf_r+0x18>
 8001c80:	f7ff fe20 	bl	80018c4 <__sinit>
 8001c84:	4b89      	ldr	r3, [pc, #548]	; (8001eac <_vfiprintf_r+0x240>)
 8001c86:	429d      	cmp	r5, r3
 8001c88:	d11b      	bne.n	8001cc2 <_vfiprintf_r+0x56>
 8001c8a:	6875      	ldr	r5, [r6, #4]
 8001c8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c8e:	07d9      	lsls	r1, r3, #31
 8001c90:	d405      	bmi.n	8001c9e <_vfiprintf_r+0x32>
 8001c92:	89ab      	ldrh	r3, [r5, #12]
 8001c94:	059a      	lsls	r2, r3, #22
 8001c96:	d402      	bmi.n	8001c9e <_vfiprintf_r+0x32>
 8001c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c9a:	f7ff feb1 	bl	8001a00 <__retarget_lock_acquire_recursive>
 8001c9e:	89ab      	ldrh	r3, [r5, #12]
 8001ca0:	071b      	lsls	r3, r3, #28
 8001ca2:	d501      	bpl.n	8001ca8 <_vfiprintf_r+0x3c>
 8001ca4:	692b      	ldr	r3, [r5, #16]
 8001ca6:	b9eb      	cbnz	r3, 8001ce4 <_vfiprintf_r+0x78>
 8001ca8:	4629      	mov	r1, r5
 8001caa:	4630      	mov	r0, r6
 8001cac:	f7ff fc82 	bl	80015b4 <__swsetup_r>
 8001cb0:	b1c0      	cbz	r0, 8001ce4 <_vfiprintf_r+0x78>
 8001cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001cb4:	07dc      	lsls	r4, r3, #31
 8001cb6:	d50e      	bpl.n	8001cd6 <_vfiprintf_r+0x6a>
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	b01d      	add	sp, #116	; 0x74
 8001cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cc2:	4b7b      	ldr	r3, [pc, #492]	; (8001eb0 <_vfiprintf_r+0x244>)
 8001cc4:	429d      	cmp	r5, r3
 8001cc6:	d101      	bne.n	8001ccc <_vfiprintf_r+0x60>
 8001cc8:	68b5      	ldr	r5, [r6, #8]
 8001cca:	e7df      	b.n	8001c8c <_vfiprintf_r+0x20>
 8001ccc:	4b79      	ldr	r3, [pc, #484]	; (8001eb4 <_vfiprintf_r+0x248>)
 8001cce:	429d      	cmp	r5, r3
 8001cd0:	bf08      	it	eq
 8001cd2:	68f5      	ldreq	r5, [r6, #12]
 8001cd4:	e7da      	b.n	8001c8c <_vfiprintf_r+0x20>
 8001cd6:	89ab      	ldrh	r3, [r5, #12]
 8001cd8:	0598      	lsls	r0, r3, #22
 8001cda:	d4ed      	bmi.n	8001cb8 <_vfiprintf_r+0x4c>
 8001cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001cde:	f7ff fe90 	bl	8001a02 <__retarget_lock_release_recursive>
 8001ce2:	e7e9      	b.n	8001cb8 <_vfiprintf_r+0x4c>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8001ce8:	2320      	movs	r3, #32
 8001cea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cee:	f8cd 800c 	str.w	r8, [sp, #12]
 8001cf2:	2330      	movs	r3, #48	; 0x30
 8001cf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001eb8 <_vfiprintf_r+0x24c>
 8001cf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cfc:	f04f 0901 	mov.w	r9, #1
 8001d00:	4623      	mov	r3, r4
 8001d02:	469a      	mov	sl, r3
 8001d04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d08:	b10a      	cbz	r2, 8001d0e <_vfiprintf_r+0xa2>
 8001d0a:	2a25      	cmp	r2, #37	; 0x25
 8001d0c:	d1f9      	bne.n	8001d02 <_vfiprintf_r+0x96>
 8001d0e:	ebba 0b04 	subs.w	fp, sl, r4
 8001d12:	d00b      	beq.n	8001d2c <_vfiprintf_r+0xc0>
 8001d14:	465b      	mov	r3, fp
 8001d16:	4622      	mov	r2, r4
 8001d18:	4629      	mov	r1, r5
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	f7ff ff93 	bl	8001c46 <__sfputs_r>
 8001d20:	3001      	adds	r0, #1
 8001d22:	f000 80aa 	beq.w	8001e7a <_vfiprintf_r+0x20e>
 8001d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d28:	445a      	add	r2, fp
 8001d2a:	9209      	str	r2, [sp, #36]	; 0x24
 8001d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80a2 	beq.w	8001e7a <_vfiprintf_r+0x20e>
 8001d36:	2300      	movs	r3, #0
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d40:	f10a 0a01 	add.w	sl, sl, #1
 8001d44:	9304      	str	r3, [sp, #16]
 8001d46:	9307      	str	r3, [sp, #28]
 8001d48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d4c:	931a      	str	r3, [sp, #104]	; 0x68
 8001d4e:	4654      	mov	r4, sl
 8001d50:	2205      	movs	r2, #5
 8001d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d56:	4858      	ldr	r0, [pc, #352]	; (8001eb8 <_vfiprintf_r+0x24c>)
 8001d58:	f7fe fa4a 	bl	80001f0 <memchr>
 8001d5c:	9a04      	ldr	r2, [sp, #16]
 8001d5e:	b9d8      	cbnz	r0, 8001d98 <_vfiprintf_r+0x12c>
 8001d60:	06d1      	lsls	r1, r2, #27
 8001d62:	bf44      	itt	mi
 8001d64:	2320      	movmi	r3, #32
 8001d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d6a:	0713      	lsls	r3, r2, #28
 8001d6c:	bf44      	itt	mi
 8001d6e:	232b      	movmi	r3, #43	; 0x2b
 8001d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d74:	f89a 3000 	ldrb.w	r3, [sl]
 8001d78:	2b2a      	cmp	r3, #42	; 0x2a
 8001d7a:	d015      	beq.n	8001da8 <_vfiprintf_r+0x13c>
 8001d7c:	9a07      	ldr	r2, [sp, #28]
 8001d7e:	4654      	mov	r4, sl
 8001d80:	2000      	movs	r0, #0
 8001d82:	f04f 0c0a 	mov.w	ip, #10
 8001d86:	4621      	mov	r1, r4
 8001d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d8c:	3b30      	subs	r3, #48	; 0x30
 8001d8e:	2b09      	cmp	r3, #9
 8001d90:	d94e      	bls.n	8001e30 <_vfiprintf_r+0x1c4>
 8001d92:	b1b0      	cbz	r0, 8001dc2 <_vfiprintf_r+0x156>
 8001d94:	9207      	str	r2, [sp, #28]
 8001d96:	e014      	b.n	8001dc2 <_vfiprintf_r+0x156>
 8001d98:	eba0 0308 	sub.w	r3, r0, r8
 8001d9c:	fa09 f303 	lsl.w	r3, r9, r3
 8001da0:	4313      	orrs	r3, r2
 8001da2:	9304      	str	r3, [sp, #16]
 8001da4:	46a2      	mov	sl, r4
 8001da6:	e7d2      	b.n	8001d4e <_vfiprintf_r+0xe2>
 8001da8:	9b03      	ldr	r3, [sp, #12]
 8001daa:	1d19      	adds	r1, r3, #4
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	9103      	str	r1, [sp, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bfbb      	ittet	lt
 8001db4:	425b      	neglt	r3, r3
 8001db6:	f042 0202 	orrlt.w	r2, r2, #2
 8001dba:	9307      	strge	r3, [sp, #28]
 8001dbc:	9307      	strlt	r3, [sp, #28]
 8001dbe:	bfb8      	it	lt
 8001dc0:	9204      	strlt	r2, [sp, #16]
 8001dc2:	7823      	ldrb	r3, [r4, #0]
 8001dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8001dc6:	d10c      	bne.n	8001de2 <_vfiprintf_r+0x176>
 8001dc8:	7863      	ldrb	r3, [r4, #1]
 8001dca:	2b2a      	cmp	r3, #42	; 0x2a
 8001dcc:	d135      	bne.n	8001e3a <_vfiprintf_r+0x1ce>
 8001dce:	9b03      	ldr	r3, [sp, #12]
 8001dd0:	1d1a      	adds	r2, r3, #4
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	9203      	str	r2, [sp, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bfb8      	it	lt
 8001dda:	f04f 33ff 	movlt.w	r3, #4294967295
 8001dde:	3402      	adds	r4, #2
 8001de0:	9305      	str	r3, [sp, #20]
 8001de2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001ec8 <_vfiprintf_r+0x25c>
 8001de6:	7821      	ldrb	r1, [r4, #0]
 8001de8:	2203      	movs	r2, #3
 8001dea:	4650      	mov	r0, sl
 8001dec:	f7fe fa00 	bl	80001f0 <memchr>
 8001df0:	b140      	cbz	r0, 8001e04 <_vfiprintf_r+0x198>
 8001df2:	2340      	movs	r3, #64	; 0x40
 8001df4:	eba0 000a 	sub.w	r0, r0, sl
 8001df8:	fa03 f000 	lsl.w	r0, r3, r0
 8001dfc:	9b04      	ldr	r3, [sp, #16]
 8001dfe:	4303      	orrs	r3, r0
 8001e00:	3401      	adds	r4, #1
 8001e02:	9304      	str	r3, [sp, #16]
 8001e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e08:	482c      	ldr	r0, [pc, #176]	; (8001ebc <_vfiprintf_r+0x250>)
 8001e0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e0e:	2206      	movs	r2, #6
 8001e10:	f7fe f9ee 	bl	80001f0 <memchr>
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d03f      	beq.n	8001e98 <_vfiprintf_r+0x22c>
 8001e18:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <_vfiprintf_r+0x254>)
 8001e1a:	bb1b      	cbnz	r3, 8001e64 <_vfiprintf_r+0x1f8>
 8001e1c:	9b03      	ldr	r3, [sp, #12]
 8001e1e:	3307      	adds	r3, #7
 8001e20:	f023 0307 	bic.w	r3, r3, #7
 8001e24:	3308      	adds	r3, #8
 8001e26:	9303      	str	r3, [sp, #12]
 8001e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e2a:	443b      	add	r3, r7
 8001e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8001e2e:	e767      	b.n	8001d00 <_vfiprintf_r+0x94>
 8001e30:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e34:	460c      	mov	r4, r1
 8001e36:	2001      	movs	r0, #1
 8001e38:	e7a5      	b.n	8001d86 <_vfiprintf_r+0x11a>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	3401      	adds	r4, #1
 8001e3e:	9305      	str	r3, [sp, #20]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f04f 0c0a 	mov.w	ip, #10
 8001e46:	4620      	mov	r0, r4
 8001e48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e4c:	3a30      	subs	r2, #48	; 0x30
 8001e4e:	2a09      	cmp	r2, #9
 8001e50:	d903      	bls.n	8001e5a <_vfiprintf_r+0x1ee>
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0c5      	beq.n	8001de2 <_vfiprintf_r+0x176>
 8001e56:	9105      	str	r1, [sp, #20]
 8001e58:	e7c3      	b.n	8001de2 <_vfiprintf_r+0x176>
 8001e5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e5e:	4604      	mov	r4, r0
 8001e60:	2301      	movs	r3, #1
 8001e62:	e7f0      	b.n	8001e46 <_vfiprintf_r+0x1da>
 8001e64:	ab03      	add	r3, sp, #12
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	462a      	mov	r2, r5
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <_vfiprintf_r+0x258>)
 8001e6c:	a904      	add	r1, sp, #16
 8001e6e:	4630      	mov	r0, r6
 8001e70:	f3af 8000 	nop.w
 8001e74:	4607      	mov	r7, r0
 8001e76:	1c78      	adds	r0, r7, #1
 8001e78:	d1d6      	bne.n	8001e28 <_vfiprintf_r+0x1bc>
 8001e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e7c:	07d9      	lsls	r1, r3, #31
 8001e7e:	d405      	bmi.n	8001e8c <_vfiprintf_r+0x220>
 8001e80:	89ab      	ldrh	r3, [r5, #12]
 8001e82:	059a      	lsls	r2, r3, #22
 8001e84:	d402      	bmi.n	8001e8c <_vfiprintf_r+0x220>
 8001e86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e88:	f7ff fdbb 	bl	8001a02 <__retarget_lock_release_recursive>
 8001e8c:	89ab      	ldrh	r3, [r5, #12]
 8001e8e:	065b      	lsls	r3, r3, #25
 8001e90:	f53f af12 	bmi.w	8001cb8 <_vfiprintf_r+0x4c>
 8001e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e96:	e711      	b.n	8001cbc <_vfiprintf_r+0x50>
 8001e98:	ab03      	add	r3, sp, #12
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	462a      	mov	r2, r5
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <_vfiprintf_r+0x258>)
 8001ea0:	a904      	add	r1, sp, #16
 8001ea2:	4630      	mov	r0, r6
 8001ea4:	f000 f880 	bl	8001fa8 <_printf_i>
 8001ea8:	e7e4      	b.n	8001e74 <_vfiprintf_r+0x208>
 8001eaa:	bf00      	nop
 8001eac:	08002788 	.word	0x08002788
 8001eb0:	080027a8 	.word	0x080027a8
 8001eb4:	08002768 	.word	0x08002768
 8001eb8:	080027c8 	.word	0x080027c8
 8001ebc:	080027d2 	.word	0x080027d2
 8001ec0:	00000000 	.word	0x00000000
 8001ec4:	08001c47 	.word	0x08001c47
 8001ec8:	080027ce 	.word	0x080027ce

08001ecc <_printf_common>:
 8001ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed0:	4616      	mov	r6, r2
 8001ed2:	4699      	mov	r9, r3
 8001ed4:	688a      	ldr	r2, [r1, #8]
 8001ed6:	690b      	ldr	r3, [r1, #16]
 8001ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001edc:	4293      	cmp	r3, r2
 8001ede:	bfb8      	it	lt
 8001ee0:	4613      	movlt	r3, r2
 8001ee2:	6033      	str	r3, [r6, #0]
 8001ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ee8:	4607      	mov	r7, r0
 8001eea:	460c      	mov	r4, r1
 8001eec:	b10a      	cbz	r2, 8001ef2 <_printf_common+0x26>
 8001eee:	3301      	adds	r3, #1
 8001ef0:	6033      	str	r3, [r6, #0]
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	0699      	lsls	r1, r3, #26
 8001ef6:	bf42      	ittt	mi
 8001ef8:	6833      	ldrmi	r3, [r6, #0]
 8001efa:	3302      	addmi	r3, #2
 8001efc:	6033      	strmi	r3, [r6, #0]
 8001efe:	6825      	ldr	r5, [r4, #0]
 8001f00:	f015 0506 	ands.w	r5, r5, #6
 8001f04:	d106      	bne.n	8001f14 <_printf_common+0x48>
 8001f06:	f104 0a19 	add.w	sl, r4, #25
 8001f0a:	68e3      	ldr	r3, [r4, #12]
 8001f0c:	6832      	ldr	r2, [r6, #0]
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	42ab      	cmp	r3, r5
 8001f12:	dc26      	bgt.n	8001f62 <_printf_common+0x96>
 8001f14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f18:	1e13      	subs	r3, r2, #0
 8001f1a:	6822      	ldr	r2, [r4, #0]
 8001f1c:	bf18      	it	ne
 8001f1e:	2301      	movne	r3, #1
 8001f20:	0692      	lsls	r2, r2, #26
 8001f22:	d42b      	bmi.n	8001f7c <_printf_common+0xb0>
 8001f24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f28:	4649      	mov	r1, r9
 8001f2a:	4638      	mov	r0, r7
 8001f2c:	47c0      	blx	r8
 8001f2e:	3001      	adds	r0, #1
 8001f30:	d01e      	beq.n	8001f70 <_printf_common+0xa4>
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	68e5      	ldr	r5, [r4, #12]
 8001f36:	6832      	ldr	r2, [r6, #0]
 8001f38:	f003 0306 	and.w	r3, r3, #6
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	bf08      	it	eq
 8001f40:	1aad      	subeq	r5, r5, r2
 8001f42:	68a3      	ldr	r3, [r4, #8]
 8001f44:	6922      	ldr	r2, [r4, #16]
 8001f46:	bf0c      	ite	eq
 8001f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f4c:	2500      	movne	r5, #0
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	bfc4      	itt	gt
 8001f52:	1a9b      	subgt	r3, r3, r2
 8001f54:	18ed      	addgt	r5, r5, r3
 8001f56:	2600      	movs	r6, #0
 8001f58:	341a      	adds	r4, #26
 8001f5a:	42b5      	cmp	r5, r6
 8001f5c:	d11a      	bne.n	8001f94 <_printf_common+0xc8>
 8001f5e:	2000      	movs	r0, #0
 8001f60:	e008      	b.n	8001f74 <_printf_common+0xa8>
 8001f62:	2301      	movs	r3, #1
 8001f64:	4652      	mov	r2, sl
 8001f66:	4649      	mov	r1, r9
 8001f68:	4638      	mov	r0, r7
 8001f6a:	47c0      	blx	r8
 8001f6c:	3001      	adds	r0, #1
 8001f6e:	d103      	bne.n	8001f78 <_printf_common+0xac>
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f78:	3501      	adds	r5, #1
 8001f7a:	e7c6      	b.n	8001f0a <_printf_common+0x3e>
 8001f7c:	18e1      	adds	r1, r4, r3
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	2030      	movs	r0, #48	; 0x30
 8001f82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f86:	4422      	add	r2, r4
 8001f88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f90:	3302      	adds	r3, #2
 8001f92:	e7c7      	b.n	8001f24 <_printf_common+0x58>
 8001f94:	2301      	movs	r3, #1
 8001f96:	4622      	mov	r2, r4
 8001f98:	4649      	mov	r1, r9
 8001f9a:	4638      	mov	r0, r7
 8001f9c:	47c0      	blx	r8
 8001f9e:	3001      	adds	r0, #1
 8001fa0:	d0e6      	beq.n	8001f70 <_printf_common+0xa4>
 8001fa2:	3601      	adds	r6, #1
 8001fa4:	e7d9      	b.n	8001f5a <_printf_common+0x8e>
	...

08001fa8 <_printf_i>:
 8001fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fac:	460c      	mov	r4, r1
 8001fae:	4691      	mov	r9, r2
 8001fb0:	7e27      	ldrb	r7, [r4, #24]
 8001fb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001fb4:	2f78      	cmp	r7, #120	; 0x78
 8001fb6:	4680      	mov	r8, r0
 8001fb8:	469a      	mov	sl, r3
 8001fba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001fbe:	d807      	bhi.n	8001fd0 <_printf_i+0x28>
 8001fc0:	2f62      	cmp	r7, #98	; 0x62
 8001fc2:	d80a      	bhi.n	8001fda <_printf_i+0x32>
 8001fc4:	2f00      	cmp	r7, #0
 8001fc6:	f000 80d8 	beq.w	800217a <_printf_i+0x1d2>
 8001fca:	2f58      	cmp	r7, #88	; 0x58
 8001fcc:	f000 80a3 	beq.w	8002116 <_printf_i+0x16e>
 8001fd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001fd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001fd8:	e03a      	b.n	8002050 <_printf_i+0xa8>
 8001fda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001fde:	2b15      	cmp	r3, #21
 8001fe0:	d8f6      	bhi.n	8001fd0 <_printf_i+0x28>
 8001fe2:	a001      	add	r0, pc, #4	; (adr r0, 8001fe8 <_printf_i+0x40>)
 8001fe4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001fe8:	08002041 	.word	0x08002041
 8001fec:	08002055 	.word	0x08002055
 8001ff0:	08001fd1 	.word	0x08001fd1
 8001ff4:	08001fd1 	.word	0x08001fd1
 8001ff8:	08001fd1 	.word	0x08001fd1
 8001ffc:	08001fd1 	.word	0x08001fd1
 8002000:	08002055 	.word	0x08002055
 8002004:	08001fd1 	.word	0x08001fd1
 8002008:	08001fd1 	.word	0x08001fd1
 800200c:	08001fd1 	.word	0x08001fd1
 8002010:	08001fd1 	.word	0x08001fd1
 8002014:	08002161 	.word	0x08002161
 8002018:	08002085 	.word	0x08002085
 800201c:	08002143 	.word	0x08002143
 8002020:	08001fd1 	.word	0x08001fd1
 8002024:	08001fd1 	.word	0x08001fd1
 8002028:	08002183 	.word	0x08002183
 800202c:	08001fd1 	.word	0x08001fd1
 8002030:	08002085 	.word	0x08002085
 8002034:	08001fd1 	.word	0x08001fd1
 8002038:	08001fd1 	.word	0x08001fd1
 800203c:	0800214b 	.word	0x0800214b
 8002040:	680b      	ldr	r3, [r1, #0]
 8002042:	1d1a      	adds	r2, r3, #4
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	600a      	str	r2, [r1, #0]
 8002048:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800204c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002050:	2301      	movs	r3, #1
 8002052:	e0a3      	b.n	800219c <_printf_i+0x1f4>
 8002054:	6825      	ldr	r5, [r4, #0]
 8002056:	6808      	ldr	r0, [r1, #0]
 8002058:	062e      	lsls	r6, r5, #24
 800205a:	f100 0304 	add.w	r3, r0, #4
 800205e:	d50a      	bpl.n	8002076 <_printf_i+0xce>
 8002060:	6805      	ldr	r5, [r0, #0]
 8002062:	600b      	str	r3, [r1, #0]
 8002064:	2d00      	cmp	r5, #0
 8002066:	da03      	bge.n	8002070 <_printf_i+0xc8>
 8002068:	232d      	movs	r3, #45	; 0x2d
 800206a:	426d      	negs	r5, r5
 800206c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002070:	485e      	ldr	r0, [pc, #376]	; (80021ec <_printf_i+0x244>)
 8002072:	230a      	movs	r3, #10
 8002074:	e019      	b.n	80020aa <_printf_i+0x102>
 8002076:	f015 0f40 	tst.w	r5, #64	; 0x40
 800207a:	6805      	ldr	r5, [r0, #0]
 800207c:	600b      	str	r3, [r1, #0]
 800207e:	bf18      	it	ne
 8002080:	b22d      	sxthne	r5, r5
 8002082:	e7ef      	b.n	8002064 <_printf_i+0xbc>
 8002084:	680b      	ldr	r3, [r1, #0]
 8002086:	6825      	ldr	r5, [r4, #0]
 8002088:	1d18      	adds	r0, r3, #4
 800208a:	6008      	str	r0, [r1, #0]
 800208c:	0628      	lsls	r0, r5, #24
 800208e:	d501      	bpl.n	8002094 <_printf_i+0xec>
 8002090:	681d      	ldr	r5, [r3, #0]
 8002092:	e002      	b.n	800209a <_printf_i+0xf2>
 8002094:	0669      	lsls	r1, r5, #25
 8002096:	d5fb      	bpl.n	8002090 <_printf_i+0xe8>
 8002098:	881d      	ldrh	r5, [r3, #0]
 800209a:	4854      	ldr	r0, [pc, #336]	; (80021ec <_printf_i+0x244>)
 800209c:	2f6f      	cmp	r7, #111	; 0x6f
 800209e:	bf0c      	ite	eq
 80020a0:	2308      	moveq	r3, #8
 80020a2:	230a      	movne	r3, #10
 80020a4:	2100      	movs	r1, #0
 80020a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80020aa:	6866      	ldr	r6, [r4, #4]
 80020ac:	60a6      	str	r6, [r4, #8]
 80020ae:	2e00      	cmp	r6, #0
 80020b0:	bfa2      	ittt	ge
 80020b2:	6821      	ldrge	r1, [r4, #0]
 80020b4:	f021 0104 	bicge.w	r1, r1, #4
 80020b8:	6021      	strge	r1, [r4, #0]
 80020ba:	b90d      	cbnz	r5, 80020c0 <_printf_i+0x118>
 80020bc:	2e00      	cmp	r6, #0
 80020be:	d04d      	beq.n	800215c <_printf_i+0x1b4>
 80020c0:	4616      	mov	r6, r2
 80020c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80020c6:	fb03 5711 	mls	r7, r3, r1, r5
 80020ca:	5dc7      	ldrb	r7, [r0, r7]
 80020cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80020d0:	462f      	mov	r7, r5
 80020d2:	42bb      	cmp	r3, r7
 80020d4:	460d      	mov	r5, r1
 80020d6:	d9f4      	bls.n	80020c2 <_printf_i+0x11a>
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d10b      	bne.n	80020f4 <_printf_i+0x14c>
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	07df      	lsls	r7, r3, #31
 80020e0:	d508      	bpl.n	80020f4 <_printf_i+0x14c>
 80020e2:	6923      	ldr	r3, [r4, #16]
 80020e4:	6861      	ldr	r1, [r4, #4]
 80020e6:	4299      	cmp	r1, r3
 80020e8:	bfde      	ittt	le
 80020ea:	2330      	movle	r3, #48	; 0x30
 80020ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80020f4:	1b92      	subs	r2, r2, r6
 80020f6:	6122      	str	r2, [r4, #16]
 80020f8:	f8cd a000 	str.w	sl, [sp]
 80020fc:	464b      	mov	r3, r9
 80020fe:	aa03      	add	r2, sp, #12
 8002100:	4621      	mov	r1, r4
 8002102:	4640      	mov	r0, r8
 8002104:	f7ff fee2 	bl	8001ecc <_printf_common>
 8002108:	3001      	adds	r0, #1
 800210a:	d14c      	bne.n	80021a6 <_printf_i+0x1fe>
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	b004      	add	sp, #16
 8002112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002116:	4835      	ldr	r0, [pc, #212]	; (80021ec <_printf_i+0x244>)
 8002118:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	680e      	ldr	r6, [r1, #0]
 8002120:	061f      	lsls	r7, r3, #24
 8002122:	f856 5b04 	ldr.w	r5, [r6], #4
 8002126:	600e      	str	r6, [r1, #0]
 8002128:	d514      	bpl.n	8002154 <_printf_i+0x1ac>
 800212a:	07d9      	lsls	r1, r3, #31
 800212c:	bf44      	itt	mi
 800212e:	f043 0320 	orrmi.w	r3, r3, #32
 8002132:	6023      	strmi	r3, [r4, #0]
 8002134:	b91d      	cbnz	r5, 800213e <_printf_i+0x196>
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	f023 0320 	bic.w	r3, r3, #32
 800213c:	6023      	str	r3, [r4, #0]
 800213e:	2310      	movs	r3, #16
 8002140:	e7b0      	b.n	80020a4 <_printf_i+0xfc>
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	f043 0320 	orr.w	r3, r3, #32
 8002148:	6023      	str	r3, [r4, #0]
 800214a:	2378      	movs	r3, #120	; 0x78
 800214c:	4828      	ldr	r0, [pc, #160]	; (80021f0 <_printf_i+0x248>)
 800214e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002152:	e7e3      	b.n	800211c <_printf_i+0x174>
 8002154:	065e      	lsls	r6, r3, #25
 8002156:	bf48      	it	mi
 8002158:	b2ad      	uxthmi	r5, r5
 800215a:	e7e6      	b.n	800212a <_printf_i+0x182>
 800215c:	4616      	mov	r6, r2
 800215e:	e7bb      	b.n	80020d8 <_printf_i+0x130>
 8002160:	680b      	ldr	r3, [r1, #0]
 8002162:	6826      	ldr	r6, [r4, #0]
 8002164:	6960      	ldr	r0, [r4, #20]
 8002166:	1d1d      	adds	r5, r3, #4
 8002168:	600d      	str	r5, [r1, #0]
 800216a:	0635      	lsls	r5, r6, #24
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	d501      	bpl.n	8002174 <_printf_i+0x1cc>
 8002170:	6018      	str	r0, [r3, #0]
 8002172:	e002      	b.n	800217a <_printf_i+0x1d2>
 8002174:	0671      	lsls	r1, r6, #25
 8002176:	d5fb      	bpl.n	8002170 <_printf_i+0x1c8>
 8002178:	8018      	strh	r0, [r3, #0]
 800217a:	2300      	movs	r3, #0
 800217c:	6123      	str	r3, [r4, #16]
 800217e:	4616      	mov	r6, r2
 8002180:	e7ba      	b.n	80020f8 <_printf_i+0x150>
 8002182:	680b      	ldr	r3, [r1, #0]
 8002184:	1d1a      	adds	r2, r3, #4
 8002186:	600a      	str	r2, [r1, #0]
 8002188:	681e      	ldr	r6, [r3, #0]
 800218a:	6862      	ldr	r2, [r4, #4]
 800218c:	2100      	movs	r1, #0
 800218e:	4630      	mov	r0, r6
 8002190:	f7fe f82e 	bl	80001f0 <memchr>
 8002194:	b108      	cbz	r0, 800219a <_printf_i+0x1f2>
 8002196:	1b80      	subs	r0, r0, r6
 8002198:	6060      	str	r0, [r4, #4]
 800219a:	6863      	ldr	r3, [r4, #4]
 800219c:	6123      	str	r3, [r4, #16]
 800219e:	2300      	movs	r3, #0
 80021a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021a4:	e7a8      	b.n	80020f8 <_printf_i+0x150>
 80021a6:	6923      	ldr	r3, [r4, #16]
 80021a8:	4632      	mov	r2, r6
 80021aa:	4649      	mov	r1, r9
 80021ac:	4640      	mov	r0, r8
 80021ae:	47d0      	blx	sl
 80021b0:	3001      	adds	r0, #1
 80021b2:	d0ab      	beq.n	800210c <_printf_i+0x164>
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	079b      	lsls	r3, r3, #30
 80021b8:	d413      	bmi.n	80021e2 <_printf_i+0x23a>
 80021ba:	68e0      	ldr	r0, [r4, #12]
 80021bc:	9b03      	ldr	r3, [sp, #12]
 80021be:	4298      	cmp	r0, r3
 80021c0:	bfb8      	it	lt
 80021c2:	4618      	movlt	r0, r3
 80021c4:	e7a4      	b.n	8002110 <_printf_i+0x168>
 80021c6:	2301      	movs	r3, #1
 80021c8:	4632      	mov	r2, r6
 80021ca:	4649      	mov	r1, r9
 80021cc:	4640      	mov	r0, r8
 80021ce:	47d0      	blx	sl
 80021d0:	3001      	adds	r0, #1
 80021d2:	d09b      	beq.n	800210c <_printf_i+0x164>
 80021d4:	3501      	adds	r5, #1
 80021d6:	68e3      	ldr	r3, [r4, #12]
 80021d8:	9903      	ldr	r1, [sp, #12]
 80021da:	1a5b      	subs	r3, r3, r1
 80021dc:	42ab      	cmp	r3, r5
 80021de:	dcf2      	bgt.n	80021c6 <_printf_i+0x21e>
 80021e0:	e7eb      	b.n	80021ba <_printf_i+0x212>
 80021e2:	2500      	movs	r5, #0
 80021e4:	f104 0619 	add.w	r6, r4, #25
 80021e8:	e7f5      	b.n	80021d6 <_printf_i+0x22e>
 80021ea:	bf00      	nop
 80021ec:	080027d9 	.word	0x080027d9
 80021f0:	080027ea 	.word	0x080027ea

080021f4 <_sbrk_r>:
 80021f4:	b538      	push	{r3, r4, r5, lr}
 80021f6:	4d06      	ldr	r5, [pc, #24]	; (8002210 <_sbrk_r+0x1c>)
 80021f8:	2300      	movs	r3, #0
 80021fa:	4604      	mov	r4, r0
 80021fc:	4608      	mov	r0, r1
 80021fe:	602b      	str	r3, [r5, #0]
 8002200:	f7fe f932 	bl	8000468 <_sbrk>
 8002204:	1c43      	adds	r3, r0, #1
 8002206:	d102      	bne.n	800220e <_sbrk_r+0x1a>
 8002208:	682b      	ldr	r3, [r5, #0]
 800220a:	b103      	cbz	r3, 800220e <_sbrk_r+0x1a>
 800220c:	6023      	str	r3, [r4, #0]
 800220e:	bd38      	pop	{r3, r4, r5, pc}
 8002210:	200002d8 	.word	0x200002d8

08002214 <__sread>:
 8002214:	b510      	push	{r4, lr}
 8002216:	460c      	mov	r4, r1
 8002218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800221c:	f000 f8a0 	bl	8002360 <_read_r>
 8002220:	2800      	cmp	r0, #0
 8002222:	bfab      	itete	ge
 8002224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002226:	89a3      	ldrhlt	r3, [r4, #12]
 8002228:	181b      	addge	r3, r3, r0
 800222a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800222e:	bfac      	ite	ge
 8002230:	6563      	strge	r3, [r4, #84]	; 0x54
 8002232:	81a3      	strhlt	r3, [r4, #12]
 8002234:	bd10      	pop	{r4, pc}

08002236 <__swrite>:
 8002236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800223a:	461f      	mov	r7, r3
 800223c:	898b      	ldrh	r3, [r1, #12]
 800223e:	05db      	lsls	r3, r3, #23
 8002240:	4605      	mov	r5, r0
 8002242:	460c      	mov	r4, r1
 8002244:	4616      	mov	r6, r2
 8002246:	d505      	bpl.n	8002254 <__swrite+0x1e>
 8002248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800224c:	2302      	movs	r3, #2
 800224e:	2200      	movs	r2, #0
 8002250:	f000 f868 	bl	8002324 <_lseek_r>
 8002254:	89a3      	ldrh	r3, [r4, #12]
 8002256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800225a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800225e:	81a3      	strh	r3, [r4, #12]
 8002260:	4632      	mov	r2, r6
 8002262:	463b      	mov	r3, r7
 8002264:	4628      	mov	r0, r5
 8002266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800226a:	f000 b817 	b.w	800229c <_write_r>

0800226e <__sseek>:
 800226e:	b510      	push	{r4, lr}
 8002270:	460c      	mov	r4, r1
 8002272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002276:	f000 f855 	bl	8002324 <_lseek_r>
 800227a:	1c43      	adds	r3, r0, #1
 800227c:	89a3      	ldrh	r3, [r4, #12]
 800227e:	bf15      	itete	ne
 8002280:	6560      	strne	r0, [r4, #84]	; 0x54
 8002282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800228a:	81a3      	strheq	r3, [r4, #12]
 800228c:	bf18      	it	ne
 800228e:	81a3      	strhne	r3, [r4, #12]
 8002290:	bd10      	pop	{r4, pc}

08002292 <__sclose>:
 8002292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002296:	f000 b813 	b.w	80022c0 <_close_r>
	...

0800229c <_write_r>:
 800229c:	b538      	push	{r3, r4, r5, lr}
 800229e:	4d07      	ldr	r5, [pc, #28]	; (80022bc <_write_r+0x20>)
 80022a0:	4604      	mov	r4, r0
 80022a2:	4608      	mov	r0, r1
 80022a4:	4611      	mov	r1, r2
 80022a6:	2200      	movs	r2, #0
 80022a8:	602a      	str	r2, [r5, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	f7fe f88f 	bl	80003ce <_write>
 80022b0:	1c43      	adds	r3, r0, #1
 80022b2:	d102      	bne.n	80022ba <_write_r+0x1e>
 80022b4:	682b      	ldr	r3, [r5, #0]
 80022b6:	b103      	cbz	r3, 80022ba <_write_r+0x1e>
 80022b8:	6023      	str	r3, [r4, #0]
 80022ba:	bd38      	pop	{r3, r4, r5, pc}
 80022bc:	200002d8 	.word	0x200002d8

080022c0 <_close_r>:
 80022c0:	b538      	push	{r3, r4, r5, lr}
 80022c2:	4d06      	ldr	r5, [pc, #24]	; (80022dc <_close_r+0x1c>)
 80022c4:	2300      	movs	r3, #0
 80022c6:	4604      	mov	r4, r0
 80022c8:	4608      	mov	r0, r1
 80022ca:	602b      	str	r3, [r5, #0]
 80022cc:	f7fe f89b 	bl	8000406 <_close>
 80022d0:	1c43      	adds	r3, r0, #1
 80022d2:	d102      	bne.n	80022da <_close_r+0x1a>
 80022d4:	682b      	ldr	r3, [r5, #0]
 80022d6:	b103      	cbz	r3, 80022da <_close_r+0x1a>
 80022d8:	6023      	str	r3, [r4, #0]
 80022da:	bd38      	pop	{r3, r4, r5, pc}
 80022dc:	200002d8 	.word	0x200002d8

080022e0 <_fstat_r>:
 80022e0:	b538      	push	{r3, r4, r5, lr}
 80022e2:	4d07      	ldr	r5, [pc, #28]	; (8002300 <_fstat_r+0x20>)
 80022e4:	2300      	movs	r3, #0
 80022e6:	4604      	mov	r4, r0
 80022e8:	4608      	mov	r0, r1
 80022ea:	4611      	mov	r1, r2
 80022ec:	602b      	str	r3, [r5, #0]
 80022ee:	f7fe f895 	bl	800041c <_fstat>
 80022f2:	1c43      	adds	r3, r0, #1
 80022f4:	d102      	bne.n	80022fc <_fstat_r+0x1c>
 80022f6:	682b      	ldr	r3, [r5, #0]
 80022f8:	b103      	cbz	r3, 80022fc <_fstat_r+0x1c>
 80022fa:	6023      	str	r3, [r4, #0]
 80022fc:	bd38      	pop	{r3, r4, r5, pc}
 80022fe:	bf00      	nop
 8002300:	200002d8 	.word	0x200002d8

08002304 <_isatty_r>:
 8002304:	b538      	push	{r3, r4, r5, lr}
 8002306:	4d06      	ldr	r5, [pc, #24]	; (8002320 <_isatty_r+0x1c>)
 8002308:	2300      	movs	r3, #0
 800230a:	4604      	mov	r4, r0
 800230c:	4608      	mov	r0, r1
 800230e:	602b      	str	r3, [r5, #0]
 8002310:	f7fe f893 	bl	800043a <_isatty>
 8002314:	1c43      	adds	r3, r0, #1
 8002316:	d102      	bne.n	800231e <_isatty_r+0x1a>
 8002318:	682b      	ldr	r3, [r5, #0]
 800231a:	b103      	cbz	r3, 800231e <_isatty_r+0x1a>
 800231c:	6023      	str	r3, [r4, #0]
 800231e:	bd38      	pop	{r3, r4, r5, pc}
 8002320:	200002d8 	.word	0x200002d8

08002324 <_lseek_r>:
 8002324:	b538      	push	{r3, r4, r5, lr}
 8002326:	4d07      	ldr	r5, [pc, #28]	; (8002344 <_lseek_r+0x20>)
 8002328:	4604      	mov	r4, r0
 800232a:	4608      	mov	r0, r1
 800232c:	4611      	mov	r1, r2
 800232e:	2200      	movs	r2, #0
 8002330:	602a      	str	r2, [r5, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	f7fe f88b 	bl	800044e <_lseek>
 8002338:	1c43      	adds	r3, r0, #1
 800233a:	d102      	bne.n	8002342 <_lseek_r+0x1e>
 800233c:	682b      	ldr	r3, [r5, #0]
 800233e:	b103      	cbz	r3, 8002342 <_lseek_r+0x1e>
 8002340:	6023      	str	r3, [r4, #0]
 8002342:	bd38      	pop	{r3, r4, r5, pc}
 8002344:	200002d8 	.word	0x200002d8

08002348 <__malloc_lock>:
 8002348:	4801      	ldr	r0, [pc, #4]	; (8002350 <__malloc_lock+0x8>)
 800234a:	f7ff bb59 	b.w	8001a00 <__retarget_lock_acquire_recursive>
 800234e:	bf00      	nop
 8002350:	200002d0 	.word	0x200002d0

08002354 <__malloc_unlock>:
 8002354:	4801      	ldr	r0, [pc, #4]	; (800235c <__malloc_unlock+0x8>)
 8002356:	f7ff bb54 	b.w	8001a02 <__retarget_lock_release_recursive>
 800235a:	bf00      	nop
 800235c:	200002d0 	.word	0x200002d0

08002360 <_read_r>:
 8002360:	b538      	push	{r3, r4, r5, lr}
 8002362:	4d07      	ldr	r5, [pc, #28]	; (8002380 <_read_r+0x20>)
 8002364:	4604      	mov	r4, r0
 8002366:	4608      	mov	r0, r1
 8002368:	4611      	mov	r1, r2
 800236a:	2200      	movs	r2, #0
 800236c:	602a      	str	r2, [r5, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	f7fe f810 	bl	8000394 <_read>
 8002374:	1c43      	adds	r3, r0, #1
 8002376:	d102      	bne.n	800237e <_read_r+0x1e>
 8002378:	682b      	ldr	r3, [r5, #0]
 800237a:	b103      	cbz	r3, 800237e <_read_r+0x1e>
 800237c:	6023      	str	r3, [r4, #0]
 800237e:	bd38      	pop	{r3, r4, r5, pc}
 8002380:	200002d8 	.word	0x200002d8

08002384 <_init>:
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002386:	bf00      	nop
 8002388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238a:	bc08      	pop	{r3}
 800238c:	469e      	mov	lr, r3
 800238e:	4770      	bx	lr

08002390 <_fini>:
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002392:	bf00      	nop
 8002394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002396:	bc08      	pop	{r3}
 8002398:	469e      	mov	lr, r3
 800239a:	4770      	bx	lr
