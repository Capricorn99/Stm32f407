
000Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001db8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08001f68  08001f68  00011f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002040  08002040  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002040  08002040  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002040  08002040  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002040  08002040  00012040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002044  08002044  00012044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000078  080020c0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080020c0  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000038c3  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c28  00000000  00000000  00023965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000318  00000000  00000000  00024590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002a0  00000000  00000000  000248a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c40  00000000  00000000  00024b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000339b  00000000  00000000  00028788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000d9b3  00000000  00000000  0002bb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000394d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001324  00000000  00000000  0003952c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001f50 	.word	0x08001f50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08001f50 	.word	0x08001f50

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:

#include "lcd5110.h"
#include "keypad4x4.h"
#include "ade7753.h"

void delay(void) {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	0007a11f 	.word	0x0007a11f

080002bc <main>:
		}
	}
	buf[buf_len] = '\0';
}

int main(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
//	char* buf;

	ADE_Inits();
 80002c0:	f000 f962 	bl	8000588 <ADE_Inits>

	delay();
 80002c4:	f7ff ffe4 	bl	8000290 <delay>
//	ADE_WriteData(SPI2, MODE, 0x000c, 2);
	ADE_ReadData(SPI2, MODE, 2);
 80002c8:	2202      	movs	r2, #2
 80002ca:	2109      	movs	r1, #9
 80002cc:	4802      	ldr	r0, [pc, #8]	; (80002d8 <main+0x1c>)
 80002ce:	f000 f981 	bl	80005d4 <ADE_ReadData>
 80002d2:	2300      	movs	r3, #0
//        	LCD5110_Puts(buf, LCD5110_Pixel_Set, LCD5110_FontSize_5x7);
//        	LCD5110_Refresh();
//		}
//        last_key = Keypad_Button;
//    }
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40003800 	.word	0x40003800

080002dc <SysTick_Handler>:



void SysTick_Handler(void) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
    TM_KEYPAD_Update();
 80002e0:	f000 fad0 	bl	8000884 <TM_KEYPAD_Update>
}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <ITM_SendChar+0x44>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a0d      	ldr	r2, [pc, #52]	; (800032c <ITM_SendChar+0x44>)
 80002f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002fc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80002fe:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <ITM_SendChar+0x48>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <ITM_SendChar+0x48>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800030a:	bf00      	nop
 800030c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	2b00      	cmp	r3, #0
 8000318:	d0f8      	beq.n	800030c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800031a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	e000edfc 	.word	0xe000edfc
 8000330:	e0000e00 	.word	0xe0000e00

08000334 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	e00a      	b.n	800035c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000346:	f3af 8000 	nop.w
 800034a:	4601      	mov	r1, r0
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	1c5a      	adds	r2, r3, #1
 8000350:	60ba      	str	r2, [r7, #8]
 8000352:	b2ca      	uxtb	r2, r1
 8000354:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	3301      	adds	r3, #1
 800035a:	617b      	str	r3, [r7, #20]
 800035c:	697a      	ldr	r2, [r7, #20]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	429a      	cmp	r2, r3
 8000362:	dbf0      	blt.n	8000346 <_read+0x12>
	}

return len;
 8000364:	687b      	ldr	r3, [r7, #4]
}
 8000366:	4618      	mov	r0, r3
 8000368:	3718      	adds	r7, #24
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800036e:	b580      	push	{r7, lr}
 8000370:	b086      	sub	sp, #24
 8000372:	af00      	add	r7, sp, #0
 8000374:	60f8      	str	r0, [r7, #12]
 8000376:	60b9      	str	r1, [r7, #8]
 8000378:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
 800037e:	e009      	b.n	8000394 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	1c5a      	adds	r2, r3, #1
 8000384:	60ba      	str	r2, [r7, #8]
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ffad 	bl	80002e8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	3301      	adds	r3, #1
 8000392:	617b      	str	r3, [r7, #20]
 8000394:	697a      	ldr	r2, [r7, #20]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	429a      	cmp	r2, r3
 800039a:	dbf1      	blt.n	8000380 <_write+0x12>
	}
	return len;
 800039c:	687b      	ldr	r3, [r7, #4]
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3718      	adds	r7, #24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <_close>:

int _close(int file)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
	return -1;
 80003ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003cc:	605a      	str	r2, [r3, #4]
	return 0;
 80003ce:	2300      	movs	r3, #0
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr

080003da <_isatty>:

int _isatty(int file)
{
 80003da:	b480      	push	{r7}
 80003dc:	b083      	sub	sp, #12
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
	return 1;
 80003e2:	2301      	movs	r3, #1
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr

080003ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003ee:	b480      	push	{r7}
 80003f0:	b085      	sub	sp, #20
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	60f8      	str	r0, [r7, #12]
 80003f6:	60b9      	str	r1, [r7, #8]
 80003f8:	607a      	str	r2, [r7, #4]
	return 0;
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3714      	adds	r7, #20
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
	...

08000408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000410:	4a14      	ldr	r2, [pc, #80]	; (8000464 <_sbrk+0x5c>)
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <_sbrk+0x60>)
 8000414:	1ad3      	subs	r3, r2, r3
 8000416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <_sbrk+0x64>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d102      	bne.n	800042a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <_sbrk+0x64>)
 8000426:	4a12      	ldr	r2, [pc, #72]	; (8000470 <_sbrk+0x68>)
 8000428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <_sbrk+0x64>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4413      	add	r3, r2
 8000432:	693a      	ldr	r2, [r7, #16]
 8000434:	429a      	cmp	r2, r3
 8000436:	d207      	bcs.n	8000448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000438:	f000 fe06 	bl	8001048 <__errno>
 800043c:	4603      	mov	r3, r0
 800043e:	220c      	movs	r2, #12
 8000440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000442:	f04f 33ff 	mov.w	r3, #4294967295
 8000446:	e009      	b.n	800045c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <_sbrk+0x64>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800044e:	4b07      	ldr	r3, [pc, #28]	; (800046c <_sbrk+0x64>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	4a05      	ldr	r2, [pc, #20]	; (800046c <_sbrk+0x64>)
 8000458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800045a:	68fb      	ldr	r3, [r7, #12]
}
 800045c:	4618      	mov	r0, r3
 800045e:	3718      	adds	r7, #24
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20020000 	.word	0x20020000
 8000468:	00000400 	.word	0x00000400
 800046c:	20000094 	.word	0x20000094
 8000470:	200000f8 	.word	0x200000f8

08000474 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
    ldr   r0, =_estack
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000476:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000478:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800047e:	490d      	ldr	r1, [pc, #52]	; (80004b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000480:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <LoopForever+0xe>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000484:	e002      	b.n	800048c <LoopCopyDataInit>

08000486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048a:	3304      	adds	r3, #4

0800048c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800048c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000490:	d3f9      	bcc.n	8000486 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000494:	4c0a      	ldr	r4, [pc, #40]	; (80004c0 <LoopForever+0x16>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000498:	e001      	b.n	800049e <LoopFillZerobss>

0800049a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800049c:	3204      	adds	r2, #4

0800049e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a0:	d3fb      	bcc.n	800049a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004a2:	f000 fdd7 	bl	8001054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a6:	f7ff ff09 	bl	80002bc <main>

080004aa <LoopForever>:

LoopForever:
    b LoopForever
 80004aa:	e7fe      	b.n	80004aa <LoopForever>
    ldr   r0, =_estack
 80004ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80004b8:	08002048 	.word	0x08002048
  ldr r2, =_sbss
 80004bc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80004c0:	200000f4 	.word	0x200000f4

080004c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c4:	e7fe      	b.n	80004c4 <ADC_IRQHandler>
	...

080004c8 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = SPI_PORT;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <SPI2_GPIOInits+0x70>)
 80004d0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 80004d2:	2302      	movs	r3, #2
 80004d4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80004d6:	2305      	movs	r3, #5
 80004d8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 80004da:	2300      	movs	r3, #0
 80004dc:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80004de:	2300      	movs	r3, #0
 80004e0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80004e2:	2302      	movs	r3, #2
 80004e4:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = SPI_PIN_SCLK;
 80004e6:	230d      	movs	r3, #13
 80004e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 facd 	bl	8000a8c <GPIO_Init>

	//MOSI
//	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_OD;
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = SPI_PIN_MOSI;
 80004f2:	230f      	movs	r3, #15
 80004f4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fac7 	bl	8000a8c <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = SPI_PIN_MISO;
 80004fe:	230e      	movs	r3, #14
 8000500:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fac1 	bl	8000a8c <GPIO_Init>

	//NSS
//	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 	SPIPins.GPIO_PinConfig.GPIO_PinNumber = SPI_PIN_NSS;
 800050a:	230c      	movs	r3, #12
 800050c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fabb 	bl	8000a8c <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = PORT_RST;
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <SPI2_GPIOInits+0x74>)
 8000518:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = PIN_RST;
 800051a:	230f      	movs	r3, #15
 800051c:	723b      	strb	r3, [r7, #8]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800051e:	2301      	movs	r3, #1
 8000520:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	737b      	strb	r3, [r7, #13]
	GPIO_Init(&SPIPins);
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	4618      	mov	r0, r3
 800052a:	f000 faaf 	bl	8000a8c <GPIO_Init>

}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40020400 	.word	0x40020400
 800053c:	40020c00 	.word	0x40020c00

08000540 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <SPI2_Inits+0x40>)
 8000546:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <SPI2_Inits+0x44>)
 8000548:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <SPI2_Inits+0x40>)
 800054c:	2201      	movs	r2, #1
 800054e:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <SPI2_Inits+0x40>)
 8000552:	2201      	movs	r2, #1
 8000554:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;		// clock 1MHz
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <SPI2_Inits+0x40>)
 8000558:	2203      	movs	r2, #3
 800055a:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <SPI2_Inits+0x40>)
 800055e:	2200      	movs	r2, #0
 8000560:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <SPI2_Inits+0x40>)
 8000564:	2200      	movs	r2, #0
 8000566:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;					//CPHA 1
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <SPI2_Inits+0x40>)
 800056a:	2201      	movs	r2, #1
 800056c:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 800056e:	4b04      	ldr	r3, [pc, #16]	; (8000580 <SPI2_Inits+0x40>)
 8000570:	2200      	movs	r2, #0
 8000572:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <SPI2_Inits+0x40>)
 8000576:	f000 fcd2 	bl	8000f1e <SPI_Init>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	200000c4 	.word	0x200000c4
 8000584:	40003800 	.word	0x40003800

08000588 <ADE_Inits>:
	ADE_WriteData(SPI2, IPKLVL, 0x2D, 1);

}

void ADE_Inits(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	SPI2_GPIOInits();
 800058c:	f7ff ff9c 	bl	80004c8 <SPI2_GPIOInits>
	SPI2_Inits();
 8000590:	f7ff ffd6 	bl	8000540 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2, ENABLE);
 8000594:	2101      	movs	r1, #1
 8000596:	480d      	ldr	r0, [pc, #52]	; (80005cc <ADE_Inits+0x44>)
 8000598:	f000 fca6 	bl	8000ee8 <SPI_SSOEConfig>

	//Reset
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	210f      	movs	r1, #15
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <ADE_Inits+0x48>)
 80005a2:	f000 fc24 	bl	8000dee <GPIO_WriteToOutputPin>
	delay();
 80005a6:	f7ff fe73 	bl	8000290 <delay>
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	210f      	movs	r1, #15
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <ADE_Inits+0x48>)
 80005b0:	f000 fc1d 	bl	8000dee <GPIO_WriteToOutputPin>
	delay();
 80005b4:	f7ff fe6c 	bl	8000290 <delay>
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	210f      	movs	r1, #15
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <ADE_Inits+0x48>)
 80005be:	f000 fc16 	bl	8000dee <GPIO_WriteToOutputPin>
	delay();
 80005c2:	f7ff fe65 	bl	8000290 <delay>

//	IRQ_Inits();
//	printf("IRQEN : %x \n", ADE_ReadData(SPI2, IRQEN, 2));


}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40003800 	.word	0x40003800
 80005d0:	40020c00 	.word	0x40020c00

080005d4 <ADE_ReadData>:


uint32_t ADE_ReadData( SPI_RegDef_t *pSPIx, uint8_t addr, uint32_t bytes_to_read)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	460b      	mov	r3, r1
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	72fb      	strb	r3, [r7, #11]
	uint32_t data = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
	uint8_t dummy_write = 0xff;
 80005e6:	23ff      	movs	r3, #255	; 0xff
 80005e8:	75fb      	strb	r3, [r7, #23]
	uint8_t dummy_write2 = 0x00;
 80005ea:	2300      	movs	r3, #0
 80005ec:	75bb      	strb	r3, [r7, #22]
	SPI_PeripheralControl(pSPIx, ENABLE); //SS pin pull to low
 80005ee:	2101      	movs	r1, #1
 80005f0:	68f8      	ldr	r0, [r7, #12]
 80005f2:	f000 fd0d 	bl	8001010 <SPI_PeripheralControl>
	SPI_Transfer(pSPIx, addr);
 80005f6:	7afb      	ldrb	r3, [r7, #11]
 80005f8:	4619      	mov	r1, r3
 80005fa:	68f8      	ldr	r0, [r7, #12]
 80005fc:	f000 fcea 	bl	8000fd4 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_read; i++)
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
 8000604:	e00f      	b.n	8000626 <ADE_ReadData+0x52>
	{
		data <<= 8;
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	61fb      	str	r3, [r7, #28]
		data |= SPI_Transfer(pSPIx, dummy_write);
 800060c:	7dfb      	ldrb	r3, [r7, #23]
 800060e:	4619      	mov	r1, r3
 8000610:	68f8      	ldr	r0, [r7, #12]
 8000612:	f000 fcdf 	bl	8000fd4 <SPI_Transfer>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	4313      	orrs	r3, r2
 800061e:	61fb      	str	r3, [r7, #28]
	for(uint32_t i = 0; i < bytes_to_read; i++)
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	3301      	adds	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
 8000626:	69ba      	ldr	r2, [r7, #24]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	429a      	cmp	r2, r3
 800062c:	d3eb      	bcc.n	8000606 <ADE_ReadData+0x32>
		//printf("%x\n", data);
	}

	SPI_Transfer(pSPIx, dummy_write2);
 800062e:	7dbb      	ldrb	r3, [r7, #22]
 8000630:	4619      	mov	r1, r3
 8000632:	68f8      	ldr	r0, [r7, #12]
 8000634:	f000 fcce 	bl	8000fd4 <SPI_Transfer>

	SPI_PeripheralControl(pSPIx, DISABLE); //SS pin pull to high
 8000638:	2100      	movs	r1, #0
 800063a:	68f8      	ldr	r0, [r7, #12]
 800063c:	f000 fce8 	bl	8001010 <SPI_PeripheralControl>
	return data;
 8000640:	69fb      	ldr	r3, [r7, #28]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3720      	adds	r7, #32
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <EXTI15_10_IRQHandler>:

	SPI_PeripheralControl(pSPIx, DISABLE);; //SS pin pull to high
}

void EXTI15_10_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0

    uint32_t pending = EXTI->PR;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <EXTI15_10_IRQHandler+0x40>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	607b      	str	r3, [r7, #4]
//		if(GPIO_ReadFromInputPin(PORT_SAG, PIN_SAG) ==  0)
//		{
//			GPIO_WriteToOutputPin(PORT_SAG_LED, PIN_SAG_LED, 1);
//		}
//    }
    if(pending & (1 << PIN_ZX_IT))
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800065e:	2b00      	cmp	r3, #0
 8000660:	d00f      	beq.n	8000682 <EXTI15_10_IRQHandler+0x36>
    {
        EXTI->PR |= 1 << PIN_ZX_IT; // clear pending flag, otherwise we'd get endless interrupts
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <EXTI15_10_IRQHandler+0x40>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a09      	ldr	r2, [pc, #36]	; (800068c <EXTI15_10_IRQHandler+0x40>)
 8000668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800066c:	6153      	str	r3, [r2, #20]
        // handle pin ZX here
    	printf("VRMS : %x \n", ADE_ReadData(SPI2, VRMS, 3));
 800066e:	2203      	movs	r2, #3
 8000670:	2117      	movs	r1, #23
 8000672:	4807      	ldr	r0, [pc, #28]	; (8000690 <EXTI15_10_IRQHandler+0x44>)
 8000674:	f7ff ffae 	bl	80005d4 <ADE_ReadData>
 8000678:	4603      	mov	r3, r0
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <EXTI15_10_IRQHandler+0x48>)
 800067e:	f000 fd15 	bl	80010ac <iprintf>
    }

}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40013c00 	.word	0x40013c00
 8000690:	40003800 	.word	0x40003800
 8000694:	08001f88 	.word	0x08001f88

08000698 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

    uint32_t pending = EXTI->PR;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <EXTI9_5_IRQHandler+0x40>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	607b      	str	r3, [r7, #4]
    if(pending & (1 << PIN_IRQ_IT))
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d00f      	beq.n	80006ce <EXTI9_5_IRQHandler+0x36>
    {
        EXTI->PR |= 1 << PIN_IRQ_IT; // clear pending flag, otherwise we'd get endless interrupts
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <EXTI9_5_IRQHandler+0x40>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a09      	ldr	r2, [pc, #36]	; (80006d8 <EXTI9_5_IRQHandler+0x40>)
 80006b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006b8:	6153      	str	r3, [r2, #20]
        // handle pin ZX here
    	printf("RSTSTATUS : %x \n", ADE_ReadData(SPI2, RSTSTATUS, 2));
 80006ba:	2202      	movs	r2, #2
 80006bc:	210c      	movs	r1, #12
 80006be:	4807      	ldr	r0, [pc, #28]	; (80006dc <EXTI9_5_IRQHandler+0x44>)
 80006c0:	f7ff ff88 	bl	80005d4 <ADE_ReadData>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <EXTI9_5_IRQHandler+0x48>)
 80006ca:	f000 fcef 	bl	80010ac <iprintf>


    }

}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40013c00 	.word	0x40013c00
 80006dc:	40003800 	.word	0x40003800
 80006e0:	08001f94 	.word	0x08001f94

080006e4 <TM_KEYPAD_INT_SetColumn>:

	return temp;
}

/* Private */
void TM_KEYPAD_INT_SetColumn(uint8_t column) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_COLUMN_1_HIGH;
 80006ee:	2201      	movs	r2, #1
 80006f0:	2100      	movs	r1, #0
 80006f2:	481d      	ldr	r0, [pc, #116]	; (8000768 <TM_KEYPAD_INT_SetColumn+0x84>)
 80006f4:	f000 fb7b 	bl	8000dee <GPIO_WriteToOutputPin>
	KEYPAD_COLUMN_2_HIGH;
 80006f8:	2201      	movs	r2, #1
 80006fa:	2101      	movs	r1, #1
 80006fc:	481a      	ldr	r0, [pc, #104]	; (8000768 <TM_KEYPAD_INT_SetColumn+0x84>)
 80006fe:	f000 fb76 	bl	8000dee <GPIO_WriteToOutputPin>
	KEYPAD_COLUMN_3_HIGH;
 8000702:	2201      	movs	r2, #1
 8000704:	2102      	movs	r1, #2
 8000706:	4818      	ldr	r0, [pc, #96]	; (8000768 <TM_KEYPAD_INT_SetColumn+0x84>)
 8000708:	f000 fb71 	bl	8000dee <GPIO_WriteToOutputPin>
	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large) {
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <TM_KEYPAD_INT_SetColumn+0x88>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d104      	bne.n	800071e <TM_KEYPAD_INT_SetColumn+0x3a>
		KEYPAD_COLUMN_4_HIGH;
 8000714:	2201      	movs	r2, #1
 8000716:	2103      	movs	r1, #3
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <TM_KEYPAD_INT_SetColumn+0x84>)
 800071a:	f000 fb68 	bl	8000dee <GPIO_WriteToOutputPin>
	}

	/* Set column low */
	if (column == 1) {
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d104      	bne.n	800072e <TM_KEYPAD_INT_SetColumn+0x4a>
		KEYPAD_COLUMN_1_LOW;
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	480f      	ldr	r0, [pc, #60]	; (8000768 <TM_KEYPAD_INT_SetColumn+0x84>)
 800072a:	f000 fb60 	bl	8000dee <GPIO_WriteToOutputPin>
	}
	if (column == 2) {
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b02      	cmp	r3, #2
 8000732:	d104      	bne.n	800073e <TM_KEYPAD_INT_SetColumn+0x5a>
		KEYPAD_COLUMN_2_LOW;
 8000734:	2200      	movs	r2, #0
 8000736:	2101      	movs	r1, #1
 8000738:	480b      	ldr	r0, [pc, #44]	; (8000768 <TM_KEYPAD_INT_SetColumn+0x84>)
 800073a:	f000 fb58 	bl	8000dee <GPIO_WriteToOutputPin>
	}
	if (column == 3) {
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b03      	cmp	r3, #3
 8000742:	d104      	bne.n	800074e <TM_KEYPAD_INT_SetColumn+0x6a>
		KEYPAD_COLUMN_3_LOW;
 8000744:	2200      	movs	r2, #0
 8000746:	2102      	movs	r1, #2
 8000748:	4807      	ldr	r0, [pc, #28]	; (8000768 <TM_KEYPAD_INT_SetColumn+0x84>)
 800074a:	f000 fb50 	bl	8000dee <GPIO_WriteToOutputPin>
	}
	if (column == 4) {
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b04      	cmp	r3, #4
 8000752:	d104      	bne.n	800075e <TM_KEYPAD_INT_SetColumn+0x7a>
		KEYPAD_COLUMN_4_LOW;
 8000754:	2200      	movs	r2, #0
 8000756:	2103      	movs	r1, #3
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <TM_KEYPAD_INT_SetColumn+0x84>)
 800075a:	f000 fb48 	bl	8000dee <GPIO_WriteToOutputPin>
	}
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40020c00 	.word	0x40020c00
 800076c:	200000e4 	.word	0x200000e4

08000770 <TM_KEYPAD_INT_CheckRow>:

uint8_t TM_KEYPAD_INT_CheckRow(uint8_t column) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	/* Read rows */

	/* Scan row 1 */
	if (KEYPAD_ROW_1_CHECK) {
 800077a:	2100      	movs	r1, #0
 800077c:	481d      	ldr	r0, [pc, #116]	; (80007f4 <TM_KEYPAD_INT_CheckRow+0x84>)
 800077e:	f000 fb21 	bl	8000dc4 <GPIO_ReadFromInputPin>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d104      	bne.n	8000792 <TM_KEYPAD_INT_CheckRow+0x22>
		return KEYPAD_INT_Buttons[0][column - 1];
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	3b01      	subs	r3, #1
 800078c:	4a1a      	ldr	r2, [pc, #104]	; (80007f8 <TM_KEYPAD_INT_CheckRow+0x88>)
 800078e:	5cd3      	ldrb	r3, [r2, r3]
 8000790:	e02b      	b.n	80007ea <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 2 */
	if (KEYPAD_ROW_2_CHECK) {
 8000792:	2101      	movs	r1, #1
 8000794:	4817      	ldr	r0, [pc, #92]	; (80007f4 <TM_KEYPAD_INT_CheckRow+0x84>)
 8000796:	f000 fb15 	bl	8000dc4 <GPIO_ReadFromInputPin>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d105      	bne.n	80007ac <TM_KEYPAD_INT_CheckRow+0x3c>
		return KEYPAD_INT_Buttons[1][column - 1];
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <TM_KEYPAD_INT_CheckRow+0x88>)
 80007a6:	4413      	add	r3, r2
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	e01e      	b.n	80007ea <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 3 */
	if (KEYPAD_ROW_3_CHECK) {
 80007ac:	2102      	movs	r1, #2
 80007ae:	4811      	ldr	r0, [pc, #68]	; (80007f4 <TM_KEYPAD_INT_CheckRow+0x84>)
 80007b0:	f000 fb08 	bl	8000dc4 <GPIO_ReadFromInputPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d105      	bne.n	80007c6 <TM_KEYPAD_INT_CheckRow+0x56>
		return KEYPAD_INT_Buttons[2][column - 1];
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	3b01      	subs	r3, #1
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <TM_KEYPAD_INT_CheckRow+0x88>)
 80007c0:	4413      	add	r3, r2
 80007c2:	7a1b      	ldrb	r3, [r3, #8]
 80007c4:	e011      	b.n	80007ea <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 4 */
	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large && KEYPAD_ROW_4_CHECK) {
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <TM_KEYPAD_INT_CheckRow+0x8c>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d10c      	bne.n	80007e8 <TM_KEYPAD_INT_CheckRow+0x78>
 80007ce:	2103      	movs	r1, #3
 80007d0:	4808      	ldr	r0, [pc, #32]	; (80007f4 <TM_KEYPAD_INT_CheckRow+0x84>)
 80007d2:	f000 faf7 	bl	8000dc4 <GPIO_ReadFromInputPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d105      	bne.n	80007e8 <TM_KEYPAD_INT_CheckRow+0x78>
		return KEYPAD_INT_Buttons[3][column - 1];
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	3b01      	subs	r3, #1
 80007e0:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <TM_KEYPAD_INT_CheckRow+0x88>)
 80007e2:	4413      	add	r3, r2
 80007e4:	7b1b      	ldrb	r3, [r3, #12]
 80007e6:	e000      	b.n	80007ea <TM_KEYPAD_INT_CheckRow+0x7a>
	}

	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 80007e8:	23ff      	movs	r3, #255	; 0xff
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40020800 	.word	0x40020800
 80007f8:	20000000 	.word	0x20000000
 80007fc:	200000e4 	.word	0x200000e4

08000800 <TM_KEYPAD_INT_Read>:

uint8_t TM_KEYPAD_INT_Read(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	TM_KEYPAD_INT_SetColumn(1);
 8000806:	2001      	movs	r0, #1
 8000808:	f7ff ff6c 	bl	80006e4 <TM_KEYPAD_INT_SetColumn>
	/* Check rows */
	check = TM_KEYPAD_INT_CheckRow(1);
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff ffaf 	bl	8000770 <TM_KEYPAD_INT_CheckRow>
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2bff      	cmp	r3, #255	; 0xff
 800081a:	d001      	beq.n	8000820 <TM_KEYPAD_INT_Read+0x20>
		return check;
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	e02b      	b.n	8000878 <TM_KEYPAD_INT_Read+0x78>
	}

	/* Set row 2 to LOW */
	TM_KEYPAD_INT_SetColumn(2);
 8000820:	2002      	movs	r0, #2
 8000822:	f7ff ff5f 	bl	80006e4 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(2);
 8000826:	2002      	movs	r0, #2
 8000828:	f7ff ffa2 	bl	8000770 <TM_KEYPAD_INT_CheckRow>
 800082c:	4603      	mov	r3, r0
 800082e:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2bff      	cmp	r3, #255	; 0xff
 8000834:	d001      	beq.n	800083a <TM_KEYPAD_INT_Read+0x3a>
		return check;
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	e01e      	b.n	8000878 <TM_KEYPAD_INT_Read+0x78>
	}

	/* Set row 3 to LOW */
	TM_KEYPAD_INT_SetColumn(3);
 800083a:	2003      	movs	r0, #3
 800083c:	f7ff ff52 	bl	80006e4 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(3);
 8000840:	2003      	movs	r0, #3
 8000842:	f7ff ff95 	bl	8000770 <TM_KEYPAD_INT_CheckRow>
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2bff      	cmp	r3, #255	; 0xff
 800084e:	d001      	beq.n	8000854 <TM_KEYPAD_INT_Read+0x54>
		return check;
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	e011      	b.n	8000878 <TM_KEYPAD_INT_Read+0x78>
	}

	if (TM_KEYPAD_INT_KeypadType == TM_KEYPAD_Type_Large) {
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <TM_KEYPAD_INT_Read+0x80>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d10c      	bne.n	8000876 <TM_KEYPAD_INT_Read+0x76>
		/* Set column 4 to LOW */
		TM_KEYPAD_INT_SetColumn(4);
 800085c:	2004      	movs	r0, #4
 800085e:	f7ff ff41 	bl	80006e4 <TM_KEYPAD_INT_SetColumn>
		/* Check rows */
		check = TM_KEYPAD_INT_CheckRow(4);
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff ff84 	bl	8000770 <TM_KEYPAD_INT_CheckRow>
 8000868:	4603      	mov	r3, r0
 800086a:	71fb      	strb	r3, [r7, #7]
		if (check != KEYPAD_NO_PRESSED) {
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2bff      	cmp	r3, #255	; 0xff
 8000870:	d001      	beq.n	8000876 <TM_KEYPAD_INT_Read+0x76>
			return check;
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	e000      	b.n	8000878 <TM_KEYPAD_INT_Read+0x78>
		}
	}

	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 8000876:	23ff      	movs	r3, #255	; 0xff
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000e4 	.word	0x200000e4

08000884 <TM_KEYPAD_Update>:

void TM_KEYPAD_Update(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	static uint16_t millis = 0;

	/* Every X ms read */
	if (++millis >= KEYPAD_READ_INTERVAL) {// && KeypadStatus == TM_KEYPAD_Button_NOPRESSED) {
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <TM_KEYPAD_Update+0x30>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	3301      	adds	r3, #1
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <TM_KEYPAD_Update+0x30>)
 8000892:	801a      	strh	r2, [r3, #0]
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <TM_KEYPAD_Update+0x30>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	2b31      	cmp	r3, #49	; 0x31
 800089a:	d908      	bls.n	80008ae <TM_KEYPAD_Update+0x2a>
		/* Reset */
		millis = 0;
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <TM_KEYPAD_Update+0x30>)
 800089e:	2200      	movs	r2, #0
 80008a0:	801a      	strh	r2, [r3, #0]

		/* Read keyboard */
		KeypadStatus = (TM_KEYPAD_Button_t) TM_KEYPAD_INT_Read();
 80008a2:	f7ff ffad 	bl	8000800 <TM_KEYPAD_INT_Read>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <TM_KEYPAD_Update+0x34>)
 80008ac:	701a      	strb	r2, [r3, #0]
	}
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000098 	.word	0x20000098
 80008b8:	20000010 	.word	0x20000010

080008bc <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t*pGPIOx, uint8_t EnorDi)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d162      	bne.n	8000994 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a64      	ldr	r2, [pc, #400]	; (8000a64 <GPIO_PeriClockControl+0x1a8>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d106      	bne.n	80008e4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80008d6:	4b64      	ldr	r3, [pc, #400]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a63      	ldr	r2, [pc, #396]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80008e2:	e0b9      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <GPIO_PeriClockControl+0x1b0>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d106      	bne.n	80008fa <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80008ec:	4b5e      	ldr	r3, [pc, #376]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	4a5d      	ldr	r2, [pc, #372]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 80008f2:	f043 0302 	orr.w	r3, r3, #2
 80008f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008f8:	e0ae      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a5c      	ldr	r2, [pc, #368]	; (8000a70 <GPIO_PeriClockControl+0x1b4>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d106      	bne.n	8000910 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000902:	4b59      	ldr	r3, [pc, #356]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a58      	ldr	r2, [pc, #352]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800090e:	e0a3      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a58      	ldr	r2, [pc, #352]	; (8000a74 <GPIO_PeriClockControl+0x1b8>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d106      	bne.n	8000926 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000918:	4b53      	ldr	r3, [pc, #332]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	4a52      	ldr	r2, [pc, #328]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000924:	e098      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a53      	ldr	r2, [pc, #332]	; (8000a78 <GPIO_PeriClockControl+0x1bc>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d106      	bne.n	800093c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800092e:	4b4e      	ldr	r3, [pc, #312]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a4d      	ldr	r2, [pc, #308]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000934:	f043 0310 	orr.w	r3, r3, #16
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
}
 800093a:	e08d      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a4f      	ldr	r2, [pc, #316]	; (8000a7c <GPIO_PeriClockControl+0x1c0>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d106      	bne.n	8000952 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000944:	4b48      	ldr	r3, [pc, #288]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000948:	4a47      	ldr	r2, [pc, #284]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 800094a:	f043 0320 	orr.w	r3, r3, #32
 800094e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000950:	e082      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a4a      	ldr	r2, [pc, #296]	; (8000a80 <GPIO_PeriClockControl+0x1c4>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d106      	bne.n	8000968 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800095a:	4b43      	ldr	r3, [pc, #268]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a42      	ldr	r2, [pc, #264]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000966:	e077      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a46      	ldr	r2, [pc, #280]	; (8000a84 <GPIO_PeriClockControl+0x1c8>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d106      	bne.n	800097e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000970:	4b3d      	ldr	r3, [pc, #244]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4a3c      	ldr	r2, [pc, #240]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800097c:	e06c      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a41      	ldr	r2, [pc, #260]	; (8000a88 <GPIO_PeriClockControl+0x1cc>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d168      	bne.n	8000a58 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000986:	4b38      	ldr	r3, [pc, #224]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a37      	ldr	r2, [pc, #220]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 800098c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000992:	e061      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a33      	ldr	r2, [pc, #204]	; (8000a64 <GPIO_PeriClockControl+0x1a8>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d106      	bne.n	80009aa <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 800099c:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	4a31      	ldr	r2, [pc, #196]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 80009a2:	f023 0301 	bic.w	r3, r3, #1
 80009a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009a8:	e056      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a2f      	ldr	r2, [pc, #188]	; (8000a6c <GPIO_PeriClockControl+0x1b0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d106      	bne.n	80009c0 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80009b2:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a2c      	ldr	r2, [pc, #176]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 80009b8:	f023 0302 	bic.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009be:	e04b      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a2b      	ldr	r2, [pc, #172]	; (8000a70 <GPIO_PeriClockControl+0x1b4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d106      	bne.n	80009d6 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80009c8:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	4a26      	ldr	r2, [pc, #152]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 80009ce:	f023 0304 	bic.w	r3, r3, #4
 80009d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009d4:	e040      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <GPIO_PeriClockControl+0x1b8>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d106      	bne.n	80009ec <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80009de:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a21      	ldr	r2, [pc, #132]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 80009e4:	f023 0308 	bic.w	r3, r3, #8
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ea:	e035      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a22      	ldr	r2, [pc, #136]	; (8000a78 <GPIO_PeriClockControl+0x1bc>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d106      	bne.n	8000a02 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 80009fa:	f023 0310 	bic.w	r3, r3, #16
 80009fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a00:	e02a      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <GPIO_PeriClockControl+0x1c0>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d106      	bne.n	8000a18 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000a10:	f023 0320 	bic.w	r3, r3, #32
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a16:	e01f      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <GPIO_PeriClockControl+0x1c4>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d106      	bne.n	8000a2e <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a2a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a2c:	e014      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <GPIO_PeriClockControl+0x1c8>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d106      	bne.n	8000a44 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a42:	e009      	b.n	8000a58 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <GPIO_PeriClockControl+0x1cc>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d105      	bne.n	8000a58 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <GPIO_PeriClockControl+0x1ac>)
 8000a52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a56:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40020000 	.word	0x40020000
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020400 	.word	0x40020400
 8000a70:	40020800 	.word	0x40020800
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40021400 	.word	0x40021400
 8000a80:	40021800 	.word	0x40021800
 8000a84:	40021c00 	.word	0x40021c00
 8000a88:	40022000 	.word	0x40022000

08000a8c <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ff0c 	bl	80008bc <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	795b      	ldrb	r3, [r3, #5]
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d820      	bhi.n	8000aee <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	795b      	ldrb	r3, [r3, #5]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	791b      	ldrb	r3, [r3, #4]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	2103      	movs	r1, #3
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	400a      	ands	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6819      	ldr	r1, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	e0cb      	b.n	8000c86 <GPIO_Init+0x1fa>

	}else
	{
		// interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	795b      	ldrb	r3, [r3, #5]
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	d117      	bne.n	8000b26 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000af6:	4b4b      	ldr	r3, [pc, #300]	; (8000c24 <GPIO_Init+0x198>)
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	7912      	ldrb	r2, [r2, #4]
 8000afe:	4611      	mov	r1, r2
 8000b00:	2201      	movs	r2, #1
 8000b02:	408a      	lsls	r2, r1
 8000b04:	4611      	mov	r1, r2
 8000b06:	4a47      	ldr	r2, [pc, #284]	; (8000c24 <GPIO_Init+0x198>)
 8000b08:	430b      	orrs	r3, r1
 8000b0a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b0c:	4b45      	ldr	r3, [pc, #276]	; (8000c24 <GPIO_Init+0x198>)
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	7912      	ldrb	r2, [r2, #4]
 8000b14:	4611      	mov	r1, r2
 8000b16:	2201      	movs	r2, #1
 8000b18:	408a      	lsls	r2, r1
 8000b1a:	43d2      	mvns	r2, r2
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4a41      	ldr	r2, [pc, #260]	; (8000c24 <GPIO_Init+0x198>)
 8000b20:	400b      	ands	r3, r1
 8000b22:	6093      	str	r3, [r2, #8]
 8000b24:	e035      	b.n	8000b92 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	795b      	ldrb	r3, [r3, #5]
 8000b2a:	2b05      	cmp	r3, #5
 8000b2c:	d117      	bne.n	8000b5e <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b2e:	4b3d      	ldr	r3, [pc, #244]	; (8000c24 <GPIO_Init+0x198>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	7912      	ldrb	r2, [r2, #4]
 8000b36:	4611      	mov	r1, r2
 8000b38:	2201      	movs	r2, #1
 8000b3a:	408a      	lsls	r2, r1
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4a39      	ldr	r2, [pc, #228]	; (8000c24 <GPIO_Init+0x198>)
 8000b40:	430b      	orrs	r3, r1
 8000b42:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b44:	4b37      	ldr	r3, [pc, #220]	; (8000c24 <GPIO_Init+0x198>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	7912      	ldrb	r2, [r2, #4]
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	2201      	movs	r2, #1
 8000b50:	408a      	lsls	r2, r1
 8000b52:	43d2      	mvns	r2, r2
 8000b54:	4611      	mov	r1, r2
 8000b56:	4a33      	ldr	r2, [pc, #204]	; (8000c24 <GPIO_Init+0x198>)
 8000b58:	400b      	ands	r3, r1
 8000b5a:	60d3      	str	r3, [r2, #12]
 8000b5c:	e019      	b.n	8000b92 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	795b      	ldrb	r3, [r3, #5]
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d115      	bne.n	8000b92 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b66:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <GPIO_Init+0x198>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	7912      	ldrb	r2, [r2, #4]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	2201      	movs	r2, #1
 8000b72:	408a      	lsls	r2, r1
 8000b74:	4611      	mov	r1, r2
 8000b76:	4a2b      	ldr	r2, [pc, #172]	; (8000c24 <GPIO_Init+0x198>)
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <GPIO_Init+0x198>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	7912      	ldrb	r2, [r2, #4]
 8000b84:	4611      	mov	r1, r2
 8000b86:	2201      	movs	r2, #1
 8000b88:	408a      	lsls	r2, r1
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4a25      	ldr	r2, [pc, #148]	; (8000c24 <GPIO_Init+0x198>)
 8000b8e:	430b      	orrs	r3, r1
 8000b90:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	791b      	ldrb	r3, [r3, #4]
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	791b      	ldrb	r3, [r3, #4]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a1f      	ldr	r2, [pc, #124]	; (8000c28 <GPIO_Init+0x19c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d04e      	beq.n	8000c4c <GPIO_Init+0x1c0>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <GPIO_Init+0x1a0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d032      	beq.n	8000c1e <GPIO_Init+0x192>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a1c      	ldr	r2, [pc, #112]	; (8000c30 <GPIO_Init+0x1a4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d02b      	beq.n	8000c1a <GPIO_Init+0x18e>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a1b      	ldr	r2, [pc, #108]	; (8000c34 <GPIO_Init+0x1a8>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d024      	beq.n	8000c16 <GPIO_Init+0x18a>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <GPIO_Init+0x1ac>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d01d      	beq.n	8000c12 <GPIO_Init+0x186>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a18      	ldr	r2, [pc, #96]	; (8000c3c <GPIO_Init+0x1b0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d016      	beq.n	8000c0e <GPIO_Init+0x182>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a16      	ldr	r2, [pc, #88]	; (8000c40 <GPIO_Init+0x1b4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d00f      	beq.n	8000c0a <GPIO_Init+0x17e>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <GPIO_Init+0x1b8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d008      	beq.n	8000c06 <GPIO_Init+0x17a>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <GPIO_Init+0x1bc>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d101      	bne.n	8000c02 <GPIO_Init+0x176>
 8000bfe:	2308      	movs	r3, #8
 8000c00:	e025      	b.n	8000c4e <GPIO_Init+0x1c2>
 8000c02:	2300      	movs	r3, #0
 8000c04:	e023      	b.n	8000c4e <GPIO_Init+0x1c2>
 8000c06:	2307      	movs	r3, #7
 8000c08:	e021      	b.n	8000c4e <GPIO_Init+0x1c2>
 8000c0a:	2306      	movs	r3, #6
 8000c0c:	e01f      	b.n	8000c4e <GPIO_Init+0x1c2>
 8000c0e:	2305      	movs	r3, #5
 8000c10:	e01d      	b.n	8000c4e <GPIO_Init+0x1c2>
 8000c12:	2304      	movs	r3, #4
 8000c14:	e01b      	b.n	8000c4e <GPIO_Init+0x1c2>
 8000c16:	2303      	movs	r3, #3
 8000c18:	e019      	b.n	8000c4e <GPIO_Init+0x1c2>
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	e017      	b.n	8000c4e <GPIO_Init+0x1c2>
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e015      	b.n	8000c4e <GPIO_Init+0x1c2>
 8000c22:	bf00      	nop
 8000c24:	40013c00 	.word	0x40013c00
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40020c00 	.word	0x40020c00
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40021400 	.word	0x40021400
 8000c40:	40021800 	.word	0x40021800
 8000c44:	40021c00 	.word	0x40021c00
 8000c48:	40022000 	.word	0x40022000
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000c50:	4b59      	ldr	r3, [pc, #356]	; (8000db8 <GPIO_Init+0x32c>)
 8000c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c54:	4a58      	ldr	r2, [pc, #352]	; (8000db8 <GPIO_Init+0x32c>)
 8000c56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000c5c:	7c7a      	ldrb	r2, [r7, #17]
 8000c5e:	7cbb      	ldrb	r3, [r7, #18]
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	fa02 f103 	lsl.w	r1, r2, r3
 8000c66:	4a55      	ldr	r2, [pc, #340]	; (8000dbc <GPIO_Init+0x330>)
 8000c68:	7cfb      	ldrb	r3, [r7, #19]
 8000c6a:	3302      	adds	r3, #2
 8000c6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000c70:	4b53      	ldr	r3, [pc, #332]	; (8000dc0 <GPIO_Init+0x334>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	7912      	ldrb	r2, [r2, #4]
 8000c78:	4611      	mov	r1, r2
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	408a      	lsls	r2, r1
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4a4f      	ldr	r2, [pc, #316]	; (8000dc0 <GPIO_Init+0x334>)
 8000c82:	430b      	orrs	r3, r1
 8000c84:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	799b      	ldrb	r3, [r3, #6]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	791b      	ldrb	r3, [r3, #4]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2103      	movs	r1, #3
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	4619      	mov	r1, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	400a      	ands	r2, r1
 8000cb4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	6899      	ldr	r1, [r3, #8]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	79db      	ldrb	r3, [r3, #7]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	791b      	ldrb	r3, [r3, #4]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	791b      	ldrb	r3, [r3, #4]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2103      	movs	r1, #3
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	4619      	mov	r1, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68d9      	ldr	r1, [r3, #12]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	430a      	orrs	r2, r1
 8000d04:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinoType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	7a1b      	ldrb	r3, [r3, #8]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	791b      	ldrb	r3, [r3, #4]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	791b      	ldrb	r3, [r3, #4]
 8000d20:	4619      	mov	r1, r3
 8000d22:	2301      	movs	r3, #1
 8000d24:	408b      	lsls	r3, r1
 8000d26:	43db      	mvns	r3, r3
 8000d28:	4619      	mov	r1, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	400a      	ands	r2, r1
 8000d30:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6859      	ldr	r1, [r3, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	795b      	ldrb	r3, [r3, #5]
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d131      	bne.n	8000dae <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	08db      	lsrs	r3, r3, #3
 8000d50:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	791b      	ldrb	r3, [r3, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	7c3a      	ldrb	r2, [r7, #16]
 8000d62:	3208      	adds	r2, #8
 8000d64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	220f      	movs	r2, #15
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	4618      	mov	r0, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	7c3a      	ldrb	r2, [r7, #16]
 8000d7c:	4001      	ands	r1, r0
 8000d7e:	3208      	adds	r2, #8
 8000d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	7c3a      	ldrb	r2, [r7, #16]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7a5b      	ldrb	r3, [r3, #9]
 8000d94:	461a      	mov	r2, r3
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	7c3a      	ldrb	r2, [r7, #16]
 8000da6:	4301      	orrs	r1, r0
 8000da8:	3208      	adds	r2, #8
 8000daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40013800 	.word	0x40013800
 8000dc0:	40013c00 	.word	0x40013c00

08000dc4 <GPIO_ReadFromInputPin>:

/*
 * Data read & write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (pGPIOx->IDR >> PinNumber) & 0x00000001;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	78fb      	ldrb	r3, [r7, #3]
 8000dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	73fb      	strb	r3, [r7, #15]
	return value;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <GPIO_WriteToOutputPin>:
	uint16_t value;
	value = (uint8_t)pGPIOx->IDR;
	return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	460b      	mov	r3, r1
 8000df8:	70fb      	strb	r3, [r7, #3]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8000dfe:	78bb      	ldrb	r3, [r7, #2]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d109      	bne.n	8000e18 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx -> ODR |= (1 << PinNumber);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	78fa      	ldrb	r2, [r7, #3]
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e10:	431a      	orrs	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	615a      	str	r2, [r3, #20]
	} else
	{
		//write 0
		pGPIOx -> ODR &= ~(1 << PinNumber);
	}
}
 8000e16:	e009      	b.n	8000e2c <GPIO_WriteToOutputPin+0x3e>
		pGPIOx -> ODR &= ~(1 << PinNumber);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	78fa      	ldrb	r2, [r7, #3]
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	43d2      	mvns	r2, r2
 8000e26:	401a      	ands	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	615a      	str	r2, [r3, #20]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
	...

08000e38 <SPI_PeriClockControl>:
static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_RegDef_t*pSPIx, uint8_t EnorDi)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d120      	bne.n	8000e8c <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <SPI_PeriClockControl+0xa0>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d106      	bne.n	8000e60 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <SPI_PeriClockControl+0xa4>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a21      	ldr	r2, [pc, #132]	; (8000edc <SPI_PeriClockControl+0xa4>)
 8000e58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI3_PCLK_DI();
		}
	}

}
 8000e5e:	e035      	b.n	8000ecc <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <SPI_PeriClockControl+0xa8>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d106      	bne.n	8000e76 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000e68:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <SPI_PeriClockControl+0xa4>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	4a1b      	ldr	r2, [pc, #108]	; (8000edc <SPI_PeriClockControl+0xa4>)
 8000e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e72:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e74:	e02a      	b.n	8000ecc <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a1a      	ldr	r2, [pc, #104]	; (8000ee4 <SPI_PeriClockControl+0xac>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d126      	bne.n	8000ecc <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <SPI_PeriClockControl+0xa4>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a16      	ldr	r2, [pc, #88]	; (8000edc <SPI_PeriClockControl+0xa4>)
 8000e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e8a:	e01f      	b.n	8000ecc <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <SPI_PeriClockControl+0xa0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d106      	bne.n	8000ea2 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <SPI_PeriClockControl+0xa4>)
 8000e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e98:	4a10      	ldr	r2, [pc, #64]	; (8000edc <SPI_PeriClockControl+0xa4>)
 8000e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e9e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ea0:	e014      	b.n	8000ecc <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <SPI_PeriClockControl+0xa8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d106      	bne.n	8000eb8 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <SPI_PeriClockControl+0xa4>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <SPI_PeriClockControl+0xa4>)
 8000eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000eb6:	e009      	b.n	8000ecc <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <SPI_PeriClockControl+0xac>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d105      	bne.n	8000ecc <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <SPI_PeriClockControl+0xa4>)
 8000ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <SPI_PeriClockControl+0xa4>)
 8000ec6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000eca:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40013000 	.word	0x40013000
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40003800 	.word	0x40003800
 8000ee4:	40003c00 	.word	0x40003c00

08000ee8 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d106      	bne.n	8000f08 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f043 0204 	orr.w	r2, r3, #4
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000f06:	e005      	b.n	8000f14 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f023 0204 	bic.w	r2, r3, #4
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	605a      	str	r2, [r3, #4]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr

08000f1e <SPI_Init>:
/************************
 *
 */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff83 	bl	8000e38 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	791b      	ldrb	r3, [r3, #4]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	795b      	ldrb	r3, [r3, #5]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d104      	bne.n	8000f56 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e014      	b.n	8000f80 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	795b      	ldrb	r3, [r3, #5]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d104      	bne.n	8000f68 <SPI_Init+0x4a>
	{
		//BIDI mode should be set
		tempreg |= ~(1<<SPI_CR1_BIDIMODE);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	e00b      	b.n	8000f80 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	795b      	ldrb	r3, [r3, #5]
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d107      	bne.n	8000f80 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f76:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1<<SPI_CR1_RXONLY);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7e:	60fb      	str	r3, [r7, #12]
	}
	//3. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	799b      	ldrb	r3, [r3, #6]
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	79db      	ldrb	r3, [r3, #7]
 8000f92:	02db      	lsls	r3, r3, #11
 8000f94:	461a      	mov	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]
	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7a1b      	ldrb	r3, [r3, #8]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7a5b      	ldrb	r3, [r3, #9]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7a9b      	ldrb	r3, [r3, #10]
 8000fba:	025b      	lsls	r3, r3, #9
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	601a      	str	r2, [r3, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <SPI_Transfer>:
		}

}

uint8_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	70fb      	strb	r3, [r7, #3]
	pSPIx->DR = data;
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60da      	str	r2, [r3, #12]
	while( ( (pSPIx->SR & 0x0003) == 0) || (pSPIx->SR & 0x0080) );
 8000fe6:	bf00      	nop
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f9      	beq.n	8000fe8 <SPI_Transfer+0x14>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f3      	bne.n	8000fe8 <SPI_Transfer+0x14>
	//while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );

	//printf("%x \n", pSPIx->DR);
	return pSPIx->DR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	b2db      	uxtb	r3, r3
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <SPI_PeripheralControl>:
/**************************
 *
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d106      	bne.n	8001030 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	601a      	str	r2, [r3, #0]
	} else
	{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 800102e:	e005      	b.n	800103c <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	601a      	str	r2, [r3, #0]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
	...

08001048 <__errno>:
 8001048:	4b01      	ldr	r3, [pc, #4]	; (8001050 <__errno+0x8>)
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000014 	.word	0x20000014

08001054 <__libc_init_array>:
 8001054:	b570      	push	{r4, r5, r6, lr}
 8001056:	4d0d      	ldr	r5, [pc, #52]	; (800108c <__libc_init_array+0x38>)
 8001058:	4c0d      	ldr	r4, [pc, #52]	; (8001090 <__libc_init_array+0x3c>)
 800105a:	1b64      	subs	r4, r4, r5
 800105c:	10a4      	asrs	r4, r4, #2
 800105e:	2600      	movs	r6, #0
 8001060:	42a6      	cmp	r6, r4
 8001062:	d109      	bne.n	8001078 <__libc_init_array+0x24>
 8001064:	4d0b      	ldr	r5, [pc, #44]	; (8001094 <__libc_init_array+0x40>)
 8001066:	4c0c      	ldr	r4, [pc, #48]	; (8001098 <__libc_init_array+0x44>)
 8001068:	f000 ff72 	bl	8001f50 <_init>
 800106c:	1b64      	subs	r4, r4, r5
 800106e:	10a4      	asrs	r4, r4, #2
 8001070:	2600      	movs	r6, #0
 8001072:	42a6      	cmp	r6, r4
 8001074:	d105      	bne.n	8001082 <__libc_init_array+0x2e>
 8001076:	bd70      	pop	{r4, r5, r6, pc}
 8001078:	f855 3b04 	ldr.w	r3, [r5], #4
 800107c:	4798      	blx	r3
 800107e:	3601      	adds	r6, #1
 8001080:	e7ee      	b.n	8001060 <__libc_init_array+0xc>
 8001082:	f855 3b04 	ldr.w	r3, [r5], #4
 8001086:	4798      	blx	r3
 8001088:	3601      	adds	r6, #1
 800108a:	e7f2      	b.n	8001072 <__libc_init_array+0x1e>
 800108c:	08002040 	.word	0x08002040
 8001090:	08002040 	.word	0x08002040
 8001094:	08002040 	.word	0x08002040
 8001098:	08002044 	.word	0x08002044

0800109c <memset>:
 800109c:	4402      	add	r2, r0
 800109e:	4603      	mov	r3, r0
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d100      	bne.n	80010a6 <memset+0xa>
 80010a4:	4770      	bx	lr
 80010a6:	f803 1b01 	strb.w	r1, [r3], #1
 80010aa:	e7f9      	b.n	80010a0 <memset+0x4>

080010ac <iprintf>:
 80010ac:	b40f      	push	{r0, r1, r2, r3}
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <iprintf+0x2c>)
 80010b0:	b513      	push	{r0, r1, r4, lr}
 80010b2:	681c      	ldr	r4, [r3, #0]
 80010b4:	b124      	cbz	r4, 80010c0 <iprintf+0x14>
 80010b6:	69a3      	ldr	r3, [r4, #24]
 80010b8:	b913      	cbnz	r3, 80010c0 <iprintf+0x14>
 80010ba:	4620      	mov	r0, r4
 80010bc:	f000 f866 	bl	800118c <__sinit>
 80010c0:	ab05      	add	r3, sp, #20
 80010c2:	9a04      	ldr	r2, [sp, #16]
 80010c4:	68a1      	ldr	r1, [r4, #8]
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	4620      	mov	r0, r4
 80010ca:	f000 f981 	bl	80013d0 <_vfiprintf_r>
 80010ce:	b002      	add	sp, #8
 80010d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010d4:	b004      	add	sp, #16
 80010d6:	4770      	bx	lr
 80010d8:	20000014 	.word	0x20000014

080010dc <std>:
 80010dc:	2300      	movs	r3, #0
 80010de:	b510      	push	{r4, lr}
 80010e0:	4604      	mov	r4, r0
 80010e2:	e9c0 3300 	strd	r3, r3, [r0]
 80010e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80010ea:	6083      	str	r3, [r0, #8]
 80010ec:	8181      	strh	r1, [r0, #12]
 80010ee:	6643      	str	r3, [r0, #100]	; 0x64
 80010f0:	81c2      	strh	r2, [r0, #14]
 80010f2:	6183      	str	r3, [r0, #24]
 80010f4:	4619      	mov	r1, r3
 80010f6:	2208      	movs	r2, #8
 80010f8:	305c      	adds	r0, #92	; 0x5c
 80010fa:	f7ff ffcf 	bl	800109c <memset>
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <std+0x38>)
 8001100:	6263      	str	r3, [r4, #36]	; 0x24
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <std+0x3c>)
 8001104:	62a3      	str	r3, [r4, #40]	; 0x28
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <std+0x40>)
 8001108:	62e3      	str	r3, [r4, #44]	; 0x2c
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <std+0x44>)
 800110c:	6224      	str	r4, [r4, #32]
 800110e:	6323      	str	r3, [r4, #48]	; 0x30
 8001110:	bd10      	pop	{r4, pc}
 8001112:	bf00      	nop
 8001114:	08001979 	.word	0x08001979
 8001118:	0800199b 	.word	0x0800199b
 800111c:	080019d3 	.word	0x080019d3
 8001120:	080019f7 	.word	0x080019f7

08001124 <_cleanup_r>:
 8001124:	4901      	ldr	r1, [pc, #4]	; (800112c <_cleanup_r+0x8>)
 8001126:	f000 b8af 	b.w	8001288 <_fwalk_reent>
 800112a:	bf00      	nop
 800112c:	08001cd1 	.word	0x08001cd1

08001130 <__sfmoreglue>:
 8001130:	b570      	push	{r4, r5, r6, lr}
 8001132:	1e4a      	subs	r2, r1, #1
 8001134:	2568      	movs	r5, #104	; 0x68
 8001136:	4355      	muls	r5, r2
 8001138:	460e      	mov	r6, r1
 800113a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800113e:	f000 f8c5 	bl	80012cc <_malloc_r>
 8001142:	4604      	mov	r4, r0
 8001144:	b140      	cbz	r0, 8001158 <__sfmoreglue+0x28>
 8001146:	2100      	movs	r1, #0
 8001148:	e9c0 1600 	strd	r1, r6, [r0]
 800114c:	300c      	adds	r0, #12
 800114e:	60a0      	str	r0, [r4, #8]
 8001150:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001154:	f7ff ffa2 	bl	800109c <memset>
 8001158:	4620      	mov	r0, r4
 800115a:	bd70      	pop	{r4, r5, r6, pc}

0800115c <__sfp_lock_acquire>:
 800115c:	4801      	ldr	r0, [pc, #4]	; (8001164 <__sfp_lock_acquire+0x8>)
 800115e:	f000 b8b3 	b.w	80012c8 <__retarget_lock_acquire_recursive>
 8001162:	bf00      	nop
 8001164:	200000ed 	.word	0x200000ed

08001168 <__sfp_lock_release>:
 8001168:	4801      	ldr	r0, [pc, #4]	; (8001170 <__sfp_lock_release+0x8>)
 800116a:	f000 b8ae 	b.w	80012ca <__retarget_lock_release_recursive>
 800116e:	bf00      	nop
 8001170:	200000ed 	.word	0x200000ed

08001174 <__sinit_lock_acquire>:
 8001174:	4801      	ldr	r0, [pc, #4]	; (800117c <__sinit_lock_acquire+0x8>)
 8001176:	f000 b8a7 	b.w	80012c8 <__retarget_lock_acquire_recursive>
 800117a:	bf00      	nop
 800117c:	200000e8 	.word	0x200000e8

08001180 <__sinit_lock_release>:
 8001180:	4801      	ldr	r0, [pc, #4]	; (8001188 <__sinit_lock_release+0x8>)
 8001182:	f000 b8a2 	b.w	80012ca <__retarget_lock_release_recursive>
 8001186:	bf00      	nop
 8001188:	200000e8 	.word	0x200000e8

0800118c <__sinit>:
 800118c:	b510      	push	{r4, lr}
 800118e:	4604      	mov	r4, r0
 8001190:	f7ff fff0 	bl	8001174 <__sinit_lock_acquire>
 8001194:	69a3      	ldr	r3, [r4, #24]
 8001196:	b11b      	cbz	r3, 80011a0 <__sinit+0x14>
 8001198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800119c:	f7ff bff0 	b.w	8001180 <__sinit_lock_release>
 80011a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80011a4:	6523      	str	r3, [r4, #80]	; 0x50
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <__sinit+0x68>)
 80011a8:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <__sinit+0x6c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80011ae:	42a3      	cmp	r3, r4
 80011b0:	bf04      	itt	eq
 80011b2:	2301      	moveq	r3, #1
 80011b4:	61a3      	streq	r3, [r4, #24]
 80011b6:	4620      	mov	r0, r4
 80011b8:	f000 f820 	bl	80011fc <__sfp>
 80011bc:	6060      	str	r0, [r4, #4]
 80011be:	4620      	mov	r0, r4
 80011c0:	f000 f81c 	bl	80011fc <__sfp>
 80011c4:	60a0      	str	r0, [r4, #8]
 80011c6:	4620      	mov	r0, r4
 80011c8:	f000 f818 	bl	80011fc <__sfp>
 80011cc:	2200      	movs	r2, #0
 80011ce:	60e0      	str	r0, [r4, #12]
 80011d0:	2104      	movs	r1, #4
 80011d2:	6860      	ldr	r0, [r4, #4]
 80011d4:	f7ff ff82 	bl	80010dc <std>
 80011d8:	68a0      	ldr	r0, [r4, #8]
 80011da:	2201      	movs	r2, #1
 80011dc:	2109      	movs	r1, #9
 80011de:	f7ff ff7d 	bl	80010dc <std>
 80011e2:	68e0      	ldr	r0, [r4, #12]
 80011e4:	2202      	movs	r2, #2
 80011e6:	2112      	movs	r1, #18
 80011e8:	f7ff ff78 	bl	80010dc <std>
 80011ec:	2301      	movs	r3, #1
 80011ee:	61a3      	str	r3, [r4, #24]
 80011f0:	e7d2      	b.n	8001198 <__sinit+0xc>
 80011f2:	bf00      	nop
 80011f4:	08001fa8 	.word	0x08001fa8
 80011f8:	08001125 	.word	0x08001125

080011fc <__sfp>:
 80011fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fe:	4607      	mov	r7, r0
 8001200:	f7ff ffac 	bl	800115c <__sfp_lock_acquire>
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <__sfp+0x84>)
 8001206:	681e      	ldr	r6, [r3, #0]
 8001208:	69b3      	ldr	r3, [r6, #24]
 800120a:	b913      	cbnz	r3, 8001212 <__sfp+0x16>
 800120c:	4630      	mov	r0, r6
 800120e:	f7ff ffbd 	bl	800118c <__sinit>
 8001212:	3648      	adds	r6, #72	; 0x48
 8001214:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001218:	3b01      	subs	r3, #1
 800121a:	d503      	bpl.n	8001224 <__sfp+0x28>
 800121c:	6833      	ldr	r3, [r6, #0]
 800121e:	b30b      	cbz	r3, 8001264 <__sfp+0x68>
 8001220:	6836      	ldr	r6, [r6, #0]
 8001222:	e7f7      	b.n	8001214 <__sfp+0x18>
 8001224:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001228:	b9d5      	cbnz	r5, 8001260 <__sfp+0x64>
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <__sfp+0x88>)
 800122c:	60e3      	str	r3, [r4, #12]
 800122e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001232:	6665      	str	r5, [r4, #100]	; 0x64
 8001234:	f000 f847 	bl	80012c6 <__retarget_lock_init_recursive>
 8001238:	f7ff ff96 	bl	8001168 <__sfp_lock_release>
 800123c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001240:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001244:	6025      	str	r5, [r4, #0]
 8001246:	61a5      	str	r5, [r4, #24]
 8001248:	2208      	movs	r2, #8
 800124a:	4629      	mov	r1, r5
 800124c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001250:	f7ff ff24 	bl	800109c <memset>
 8001254:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001258:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800125c:	4620      	mov	r0, r4
 800125e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001260:	3468      	adds	r4, #104	; 0x68
 8001262:	e7d9      	b.n	8001218 <__sfp+0x1c>
 8001264:	2104      	movs	r1, #4
 8001266:	4638      	mov	r0, r7
 8001268:	f7ff ff62 	bl	8001130 <__sfmoreglue>
 800126c:	4604      	mov	r4, r0
 800126e:	6030      	str	r0, [r6, #0]
 8001270:	2800      	cmp	r0, #0
 8001272:	d1d5      	bne.n	8001220 <__sfp+0x24>
 8001274:	f7ff ff78 	bl	8001168 <__sfp_lock_release>
 8001278:	230c      	movs	r3, #12
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	e7ee      	b.n	800125c <__sfp+0x60>
 800127e:	bf00      	nop
 8001280:	08001fa8 	.word	0x08001fa8
 8001284:	ffff0001 	.word	0xffff0001

08001288 <_fwalk_reent>:
 8001288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800128c:	4606      	mov	r6, r0
 800128e:	4688      	mov	r8, r1
 8001290:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001294:	2700      	movs	r7, #0
 8001296:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800129a:	f1b9 0901 	subs.w	r9, r9, #1
 800129e:	d505      	bpl.n	80012ac <_fwalk_reent+0x24>
 80012a0:	6824      	ldr	r4, [r4, #0]
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	d1f7      	bne.n	8001296 <_fwalk_reent+0xe>
 80012a6:	4638      	mov	r0, r7
 80012a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012ac:	89ab      	ldrh	r3, [r5, #12]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d907      	bls.n	80012c2 <_fwalk_reent+0x3a>
 80012b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80012b6:	3301      	adds	r3, #1
 80012b8:	d003      	beq.n	80012c2 <_fwalk_reent+0x3a>
 80012ba:	4629      	mov	r1, r5
 80012bc:	4630      	mov	r0, r6
 80012be:	47c0      	blx	r8
 80012c0:	4307      	orrs	r7, r0
 80012c2:	3568      	adds	r5, #104	; 0x68
 80012c4:	e7e9      	b.n	800129a <_fwalk_reent+0x12>

080012c6 <__retarget_lock_init_recursive>:
 80012c6:	4770      	bx	lr

080012c8 <__retarget_lock_acquire_recursive>:
 80012c8:	4770      	bx	lr

080012ca <__retarget_lock_release_recursive>:
 80012ca:	4770      	bx	lr

080012cc <_malloc_r>:
 80012cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ce:	1ccd      	adds	r5, r1, #3
 80012d0:	f025 0503 	bic.w	r5, r5, #3
 80012d4:	3508      	adds	r5, #8
 80012d6:	2d0c      	cmp	r5, #12
 80012d8:	bf38      	it	cc
 80012da:	250c      	movcc	r5, #12
 80012dc:	2d00      	cmp	r5, #0
 80012de:	4606      	mov	r6, r0
 80012e0:	db01      	blt.n	80012e6 <_malloc_r+0x1a>
 80012e2:	42a9      	cmp	r1, r5
 80012e4:	d903      	bls.n	80012ee <_malloc_r+0x22>
 80012e6:	230c      	movs	r3, #12
 80012e8:	6033      	str	r3, [r6, #0]
 80012ea:	2000      	movs	r0, #0
 80012ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012ee:	f000 fda1 	bl	8001e34 <__malloc_lock>
 80012f2:	4921      	ldr	r1, [pc, #132]	; (8001378 <_malloc_r+0xac>)
 80012f4:	680a      	ldr	r2, [r1, #0]
 80012f6:	4614      	mov	r4, r2
 80012f8:	b99c      	cbnz	r4, 8001322 <_malloc_r+0x56>
 80012fa:	4f20      	ldr	r7, [pc, #128]	; (800137c <_malloc_r+0xb0>)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b923      	cbnz	r3, 800130a <_malloc_r+0x3e>
 8001300:	4621      	mov	r1, r4
 8001302:	4630      	mov	r0, r6
 8001304:	f000 fb28 	bl	8001958 <_sbrk_r>
 8001308:	6038      	str	r0, [r7, #0]
 800130a:	4629      	mov	r1, r5
 800130c:	4630      	mov	r0, r6
 800130e:	f000 fb23 	bl	8001958 <_sbrk_r>
 8001312:	1c43      	adds	r3, r0, #1
 8001314:	d123      	bne.n	800135e <_malloc_r+0x92>
 8001316:	230c      	movs	r3, #12
 8001318:	6033      	str	r3, [r6, #0]
 800131a:	4630      	mov	r0, r6
 800131c:	f000 fd90 	bl	8001e40 <__malloc_unlock>
 8001320:	e7e3      	b.n	80012ea <_malloc_r+0x1e>
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	1b5b      	subs	r3, r3, r5
 8001326:	d417      	bmi.n	8001358 <_malloc_r+0x8c>
 8001328:	2b0b      	cmp	r3, #11
 800132a:	d903      	bls.n	8001334 <_malloc_r+0x68>
 800132c:	6023      	str	r3, [r4, #0]
 800132e:	441c      	add	r4, r3
 8001330:	6025      	str	r5, [r4, #0]
 8001332:	e004      	b.n	800133e <_malloc_r+0x72>
 8001334:	6863      	ldr	r3, [r4, #4]
 8001336:	42a2      	cmp	r2, r4
 8001338:	bf0c      	ite	eq
 800133a:	600b      	streq	r3, [r1, #0]
 800133c:	6053      	strne	r3, [r2, #4]
 800133e:	4630      	mov	r0, r6
 8001340:	f000 fd7e 	bl	8001e40 <__malloc_unlock>
 8001344:	f104 000b 	add.w	r0, r4, #11
 8001348:	1d23      	adds	r3, r4, #4
 800134a:	f020 0007 	bic.w	r0, r0, #7
 800134e:	1ac2      	subs	r2, r0, r3
 8001350:	d0cc      	beq.n	80012ec <_malloc_r+0x20>
 8001352:	1a1b      	subs	r3, r3, r0
 8001354:	50a3      	str	r3, [r4, r2]
 8001356:	e7c9      	b.n	80012ec <_malloc_r+0x20>
 8001358:	4622      	mov	r2, r4
 800135a:	6864      	ldr	r4, [r4, #4]
 800135c:	e7cc      	b.n	80012f8 <_malloc_r+0x2c>
 800135e:	1cc4      	adds	r4, r0, #3
 8001360:	f024 0403 	bic.w	r4, r4, #3
 8001364:	42a0      	cmp	r0, r4
 8001366:	d0e3      	beq.n	8001330 <_malloc_r+0x64>
 8001368:	1a21      	subs	r1, r4, r0
 800136a:	4630      	mov	r0, r6
 800136c:	f000 faf4 	bl	8001958 <_sbrk_r>
 8001370:	3001      	adds	r0, #1
 8001372:	d1dd      	bne.n	8001330 <_malloc_r+0x64>
 8001374:	e7cf      	b.n	8001316 <_malloc_r+0x4a>
 8001376:	bf00      	nop
 8001378:	2000009c 	.word	0x2000009c
 800137c:	200000a0 	.word	0x200000a0

08001380 <__sfputc_r>:
 8001380:	6893      	ldr	r3, [r2, #8]
 8001382:	3b01      	subs	r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	b410      	push	{r4}
 8001388:	6093      	str	r3, [r2, #8]
 800138a:	da07      	bge.n	800139c <__sfputc_r+0x1c>
 800138c:	6994      	ldr	r4, [r2, #24]
 800138e:	42a3      	cmp	r3, r4
 8001390:	db01      	blt.n	8001396 <__sfputc_r+0x16>
 8001392:	290a      	cmp	r1, #10
 8001394:	d102      	bne.n	800139c <__sfputc_r+0x1c>
 8001396:	bc10      	pop	{r4}
 8001398:	f000 bb32 	b.w	8001a00 <__swbuf_r>
 800139c:	6813      	ldr	r3, [r2, #0]
 800139e:	1c58      	adds	r0, r3, #1
 80013a0:	6010      	str	r0, [r2, #0]
 80013a2:	7019      	strb	r1, [r3, #0]
 80013a4:	4608      	mov	r0, r1
 80013a6:	bc10      	pop	{r4}
 80013a8:	4770      	bx	lr

080013aa <__sfputs_r>:
 80013aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ac:	4606      	mov	r6, r0
 80013ae:	460f      	mov	r7, r1
 80013b0:	4614      	mov	r4, r2
 80013b2:	18d5      	adds	r5, r2, r3
 80013b4:	42ac      	cmp	r4, r5
 80013b6:	d101      	bne.n	80013bc <__sfputs_r+0x12>
 80013b8:	2000      	movs	r0, #0
 80013ba:	e007      	b.n	80013cc <__sfputs_r+0x22>
 80013bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013c0:	463a      	mov	r2, r7
 80013c2:	4630      	mov	r0, r6
 80013c4:	f7ff ffdc 	bl	8001380 <__sfputc_r>
 80013c8:	1c43      	adds	r3, r0, #1
 80013ca:	d1f3      	bne.n	80013b4 <__sfputs_r+0xa>
 80013cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080013d0 <_vfiprintf_r>:
 80013d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013d4:	460d      	mov	r5, r1
 80013d6:	b09d      	sub	sp, #116	; 0x74
 80013d8:	4614      	mov	r4, r2
 80013da:	4698      	mov	r8, r3
 80013dc:	4606      	mov	r6, r0
 80013de:	b118      	cbz	r0, 80013e8 <_vfiprintf_r+0x18>
 80013e0:	6983      	ldr	r3, [r0, #24]
 80013e2:	b90b      	cbnz	r3, 80013e8 <_vfiprintf_r+0x18>
 80013e4:	f7ff fed2 	bl	800118c <__sinit>
 80013e8:	4b89      	ldr	r3, [pc, #548]	; (8001610 <_vfiprintf_r+0x240>)
 80013ea:	429d      	cmp	r5, r3
 80013ec:	d11b      	bne.n	8001426 <_vfiprintf_r+0x56>
 80013ee:	6875      	ldr	r5, [r6, #4]
 80013f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80013f2:	07d9      	lsls	r1, r3, #31
 80013f4:	d405      	bmi.n	8001402 <_vfiprintf_r+0x32>
 80013f6:	89ab      	ldrh	r3, [r5, #12]
 80013f8:	059a      	lsls	r2, r3, #22
 80013fa:	d402      	bmi.n	8001402 <_vfiprintf_r+0x32>
 80013fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80013fe:	f7ff ff63 	bl	80012c8 <__retarget_lock_acquire_recursive>
 8001402:	89ab      	ldrh	r3, [r5, #12]
 8001404:	071b      	lsls	r3, r3, #28
 8001406:	d501      	bpl.n	800140c <_vfiprintf_r+0x3c>
 8001408:	692b      	ldr	r3, [r5, #16]
 800140a:	b9eb      	cbnz	r3, 8001448 <_vfiprintf_r+0x78>
 800140c:	4629      	mov	r1, r5
 800140e:	4630      	mov	r0, r6
 8001410:	f000 fb5a 	bl	8001ac8 <__swsetup_r>
 8001414:	b1c0      	cbz	r0, 8001448 <_vfiprintf_r+0x78>
 8001416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001418:	07dc      	lsls	r4, r3, #31
 800141a:	d50e      	bpl.n	800143a <_vfiprintf_r+0x6a>
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	b01d      	add	sp, #116	; 0x74
 8001422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001426:	4b7b      	ldr	r3, [pc, #492]	; (8001614 <_vfiprintf_r+0x244>)
 8001428:	429d      	cmp	r5, r3
 800142a:	d101      	bne.n	8001430 <_vfiprintf_r+0x60>
 800142c:	68b5      	ldr	r5, [r6, #8]
 800142e:	e7df      	b.n	80013f0 <_vfiprintf_r+0x20>
 8001430:	4b79      	ldr	r3, [pc, #484]	; (8001618 <_vfiprintf_r+0x248>)
 8001432:	429d      	cmp	r5, r3
 8001434:	bf08      	it	eq
 8001436:	68f5      	ldreq	r5, [r6, #12]
 8001438:	e7da      	b.n	80013f0 <_vfiprintf_r+0x20>
 800143a:	89ab      	ldrh	r3, [r5, #12]
 800143c:	0598      	lsls	r0, r3, #22
 800143e:	d4ed      	bmi.n	800141c <_vfiprintf_r+0x4c>
 8001440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001442:	f7ff ff42 	bl	80012ca <__retarget_lock_release_recursive>
 8001446:	e7e9      	b.n	800141c <_vfiprintf_r+0x4c>
 8001448:	2300      	movs	r3, #0
 800144a:	9309      	str	r3, [sp, #36]	; 0x24
 800144c:	2320      	movs	r3, #32
 800144e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001452:	f8cd 800c 	str.w	r8, [sp, #12]
 8001456:	2330      	movs	r3, #48	; 0x30
 8001458:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800161c <_vfiprintf_r+0x24c>
 800145c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001460:	f04f 0901 	mov.w	r9, #1
 8001464:	4623      	mov	r3, r4
 8001466:	469a      	mov	sl, r3
 8001468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800146c:	b10a      	cbz	r2, 8001472 <_vfiprintf_r+0xa2>
 800146e:	2a25      	cmp	r2, #37	; 0x25
 8001470:	d1f9      	bne.n	8001466 <_vfiprintf_r+0x96>
 8001472:	ebba 0b04 	subs.w	fp, sl, r4
 8001476:	d00b      	beq.n	8001490 <_vfiprintf_r+0xc0>
 8001478:	465b      	mov	r3, fp
 800147a:	4622      	mov	r2, r4
 800147c:	4629      	mov	r1, r5
 800147e:	4630      	mov	r0, r6
 8001480:	f7ff ff93 	bl	80013aa <__sfputs_r>
 8001484:	3001      	adds	r0, #1
 8001486:	f000 80aa 	beq.w	80015de <_vfiprintf_r+0x20e>
 800148a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800148c:	445a      	add	r2, fp
 800148e:	9209      	str	r2, [sp, #36]	; 0x24
 8001490:	f89a 3000 	ldrb.w	r3, [sl]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a2 	beq.w	80015de <_vfiprintf_r+0x20e>
 800149a:	2300      	movs	r3, #0
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80014a4:	f10a 0a01 	add.w	sl, sl, #1
 80014a8:	9304      	str	r3, [sp, #16]
 80014aa:	9307      	str	r3, [sp, #28]
 80014ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80014b0:	931a      	str	r3, [sp, #104]	; 0x68
 80014b2:	4654      	mov	r4, sl
 80014b4:	2205      	movs	r2, #5
 80014b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014ba:	4858      	ldr	r0, [pc, #352]	; (800161c <_vfiprintf_r+0x24c>)
 80014bc:	f7fe fe98 	bl	80001f0 <memchr>
 80014c0:	9a04      	ldr	r2, [sp, #16]
 80014c2:	b9d8      	cbnz	r0, 80014fc <_vfiprintf_r+0x12c>
 80014c4:	06d1      	lsls	r1, r2, #27
 80014c6:	bf44      	itt	mi
 80014c8:	2320      	movmi	r3, #32
 80014ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80014ce:	0713      	lsls	r3, r2, #28
 80014d0:	bf44      	itt	mi
 80014d2:	232b      	movmi	r3, #43	; 0x2b
 80014d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80014d8:	f89a 3000 	ldrb.w	r3, [sl]
 80014dc:	2b2a      	cmp	r3, #42	; 0x2a
 80014de:	d015      	beq.n	800150c <_vfiprintf_r+0x13c>
 80014e0:	9a07      	ldr	r2, [sp, #28]
 80014e2:	4654      	mov	r4, sl
 80014e4:	2000      	movs	r0, #0
 80014e6:	f04f 0c0a 	mov.w	ip, #10
 80014ea:	4621      	mov	r1, r4
 80014ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014f0:	3b30      	subs	r3, #48	; 0x30
 80014f2:	2b09      	cmp	r3, #9
 80014f4:	d94e      	bls.n	8001594 <_vfiprintf_r+0x1c4>
 80014f6:	b1b0      	cbz	r0, 8001526 <_vfiprintf_r+0x156>
 80014f8:	9207      	str	r2, [sp, #28]
 80014fa:	e014      	b.n	8001526 <_vfiprintf_r+0x156>
 80014fc:	eba0 0308 	sub.w	r3, r0, r8
 8001500:	fa09 f303 	lsl.w	r3, r9, r3
 8001504:	4313      	orrs	r3, r2
 8001506:	9304      	str	r3, [sp, #16]
 8001508:	46a2      	mov	sl, r4
 800150a:	e7d2      	b.n	80014b2 <_vfiprintf_r+0xe2>
 800150c:	9b03      	ldr	r3, [sp, #12]
 800150e:	1d19      	adds	r1, r3, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	9103      	str	r1, [sp, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	bfbb      	ittet	lt
 8001518:	425b      	neglt	r3, r3
 800151a:	f042 0202 	orrlt.w	r2, r2, #2
 800151e:	9307      	strge	r3, [sp, #28]
 8001520:	9307      	strlt	r3, [sp, #28]
 8001522:	bfb8      	it	lt
 8001524:	9204      	strlt	r2, [sp, #16]
 8001526:	7823      	ldrb	r3, [r4, #0]
 8001528:	2b2e      	cmp	r3, #46	; 0x2e
 800152a:	d10c      	bne.n	8001546 <_vfiprintf_r+0x176>
 800152c:	7863      	ldrb	r3, [r4, #1]
 800152e:	2b2a      	cmp	r3, #42	; 0x2a
 8001530:	d135      	bne.n	800159e <_vfiprintf_r+0x1ce>
 8001532:	9b03      	ldr	r3, [sp, #12]
 8001534:	1d1a      	adds	r2, r3, #4
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	9203      	str	r2, [sp, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	bfb8      	it	lt
 800153e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001542:	3402      	adds	r4, #2
 8001544:	9305      	str	r3, [sp, #20]
 8001546:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800162c <_vfiprintf_r+0x25c>
 800154a:	7821      	ldrb	r1, [r4, #0]
 800154c:	2203      	movs	r2, #3
 800154e:	4650      	mov	r0, sl
 8001550:	f7fe fe4e 	bl	80001f0 <memchr>
 8001554:	b140      	cbz	r0, 8001568 <_vfiprintf_r+0x198>
 8001556:	2340      	movs	r3, #64	; 0x40
 8001558:	eba0 000a 	sub.w	r0, r0, sl
 800155c:	fa03 f000 	lsl.w	r0, r3, r0
 8001560:	9b04      	ldr	r3, [sp, #16]
 8001562:	4303      	orrs	r3, r0
 8001564:	3401      	adds	r4, #1
 8001566:	9304      	str	r3, [sp, #16]
 8001568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800156c:	482c      	ldr	r0, [pc, #176]	; (8001620 <_vfiprintf_r+0x250>)
 800156e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001572:	2206      	movs	r2, #6
 8001574:	f7fe fe3c 	bl	80001f0 <memchr>
 8001578:	2800      	cmp	r0, #0
 800157a:	d03f      	beq.n	80015fc <_vfiprintf_r+0x22c>
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <_vfiprintf_r+0x254>)
 800157e:	bb1b      	cbnz	r3, 80015c8 <_vfiprintf_r+0x1f8>
 8001580:	9b03      	ldr	r3, [sp, #12]
 8001582:	3307      	adds	r3, #7
 8001584:	f023 0307 	bic.w	r3, r3, #7
 8001588:	3308      	adds	r3, #8
 800158a:	9303      	str	r3, [sp, #12]
 800158c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800158e:	443b      	add	r3, r7
 8001590:	9309      	str	r3, [sp, #36]	; 0x24
 8001592:	e767      	b.n	8001464 <_vfiprintf_r+0x94>
 8001594:	fb0c 3202 	mla	r2, ip, r2, r3
 8001598:	460c      	mov	r4, r1
 800159a:	2001      	movs	r0, #1
 800159c:	e7a5      	b.n	80014ea <_vfiprintf_r+0x11a>
 800159e:	2300      	movs	r3, #0
 80015a0:	3401      	adds	r4, #1
 80015a2:	9305      	str	r3, [sp, #20]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 0c0a 	mov.w	ip, #10
 80015aa:	4620      	mov	r0, r4
 80015ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80015b0:	3a30      	subs	r2, #48	; 0x30
 80015b2:	2a09      	cmp	r2, #9
 80015b4:	d903      	bls.n	80015be <_vfiprintf_r+0x1ee>
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0c5      	beq.n	8001546 <_vfiprintf_r+0x176>
 80015ba:	9105      	str	r1, [sp, #20]
 80015bc:	e7c3      	b.n	8001546 <_vfiprintf_r+0x176>
 80015be:	fb0c 2101 	mla	r1, ip, r1, r2
 80015c2:	4604      	mov	r4, r0
 80015c4:	2301      	movs	r3, #1
 80015c6:	e7f0      	b.n	80015aa <_vfiprintf_r+0x1da>
 80015c8:	ab03      	add	r3, sp, #12
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	462a      	mov	r2, r5
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <_vfiprintf_r+0x258>)
 80015d0:	a904      	add	r1, sp, #16
 80015d2:	4630      	mov	r0, r6
 80015d4:	f3af 8000 	nop.w
 80015d8:	4607      	mov	r7, r0
 80015da:	1c78      	adds	r0, r7, #1
 80015dc:	d1d6      	bne.n	800158c <_vfiprintf_r+0x1bc>
 80015de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80015e0:	07d9      	lsls	r1, r3, #31
 80015e2:	d405      	bmi.n	80015f0 <_vfiprintf_r+0x220>
 80015e4:	89ab      	ldrh	r3, [r5, #12]
 80015e6:	059a      	lsls	r2, r3, #22
 80015e8:	d402      	bmi.n	80015f0 <_vfiprintf_r+0x220>
 80015ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80015ec:	f7ff fe6d 	bl	80012ca <__retarget_lock_release_recursive>
 80015f0:	89ab      	ldrh	r3, [r5, #12]
 80015f2:	065b      	lsls	r3, r3, #25
 80015f4:	f53f af12 	bmi.w	800141c <_vfiprintf_r+0x4c>
 80015f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80015fa:	e711      	b.n	8001420 <_vfiprintf_r+0x50>
 80015fc:	ab03      	add	r3, sp, #12
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	462a      	mov	r2, r5
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <_vfiprintf_r+0x258>)
 8001604:	a904      	add	r1, sp, #16
 8001606:	4630      	mov	r0, r6
 8001608:	f000 f880 	bl	800170c <_printf_i>
 800160c:	e7e4      	b.n	80015d8 <_vfiprintf_r+0x208>
 800160e:	bf00      	nop
 8001610:	08001fcc 	.word	0x08001fcc
 8001614:	08001fec 	.word	0x08001fec
 8001618:	08001fac 	.word	0x08001fac
 800161c:	0800200c 	.word	0x0800200c
 8001620:	08002016 	.word	0x08002016
 8001624:	00000000 	.word	0x00000000
 8001628:	080013ab 	.word	0x080013ab
 800162c:	08002012 	.word	0x08002012

08001630 <_printf_common>:
 8001630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001634:	4616      	mov	r6, r2
 8001636:	4699      	mov	r9, r3
 8001638:	688a      	ldr	r2, [r1, #8]
 800163a:	690b      	ldr	r3, [r1, #16]
 800163c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001640:	4293      	cmp	r3, r2
 8001642:	bfb8      	it	lt
 8001644:	4613      	movlt	r3, r2
 8001646:	6033      	str	r3, [r6, #0]
 8001648:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800164c:	4607      	mov	r7, r0
 800164e:	460c      	mov	r4, r1
 8001650:	b10a      	cbz	r2, 8001656 <_printf_common+0x26>
 8001652:	3301      	adds	r3, #1
 8001654:	6033      	str	r3, [r6, #0]
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	0699      	lsls	r1, r3, #26
 800165a:	bf42      	ittt	mi
 800165c:	6833      	ldrmi	r3, [r6, #0]
 800165e:	3302      	addmi	r3, #2
 8001660:	6033      	strmi	r3, [r6, #0]
 8001662:	6825      	ldr	r5, [r4, #0]
 8001664:	f015 0506 	ands.w	r5, r5, #6
 8001668:	d106      	bne.n	8001678 <_printf_common+0x48>
 800166a:	f104 0a19 	add.w	sl, r4, #25
 800166e:	68e3      	ldr	r3, [r4, #12]
 8001670:	6832      	ldr	r2, [r6, #0]
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	42ab      	cmp	r3, r5
 8001676:	dc26      	bgt.n	80016c6 <_printf_common+0x96>
 8001678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800167c:	1e13      	subs	r3, r2, #0
 800167e:	6822      	ldr	r2, [r4, #0]
 8001680:	bf18      	it	ne
 8001682:	2301      	movne	r3, #1
 8001684:	0692      	lsls	r2, r2, #26
 8001686:	d42b      	bmi.n	80016e0 <_printf_common+0xb0>
 8001688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800168c:	4649      	mov	r1, r9
 800168e:	4638      	mov	r0, r7
 8001690:	47c0      	blx	r8
 8001692:	3001      	adds	r0, #1
 8001694:	d01e      	beq.n	80016d4 <_printf_common+0xa4>
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	68e5      	ldr	r5, [r4, #12]
 800169a:	6832      	ldr	r2, [r6, #0]
 800169c:	f003 0306 	and.w	r3, r3, #6
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	bf08      	it	eq
 80016a4:	1aad      	subeq	r5, r5, r2
 80016a6:	68a3      	ldr	r3, [r4, #8]
 80016a8:	6922      	ldr	r2, [r4, #16]
 80016aa:	bf0c      	ite	eq
 80016ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80016b0:	2500      	movne	r5, #0
 80016b2:	4293      	cmp	r3, r2
 80016b4:	bfc4      	itt	gt
 80016b6:	1a9b      	subgt	r3, r3, r2
 80016b8:	18ed      	addgt	r5, r5, r3
 80016ba:	2600      	movs	r6, #0
 80016bc:	341a      	adds	r4, #26
 80016be:	42b5      	cmp	r5, r6
 80016c0:	d11a      	bne.n	80016f8 <_printf_common+0xc8>
 80016c2:	2000      	movs	r0, #0
 80016c4:	e008      	b.n	80016d8 <_printf_common+0xa8>
 80016c6:	2301      	movs	r3, #1
 80016c8:	4652      	mov	r2, sl
 80016ca:	4649      	mov	r1, r9
 80016cc:	4638      	mov	r0, r7
 80016ce:	47c0      	blx	r8
 80016d0:	3001      	adds	r0, #1
 80016d2:	d103      	bne.n	80016dc <_printf_common+0xac>
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016dc:	3501      	adds	r5, #1
 80016de:	e7c6      	b.n	800166e <_printf_common+0x3e>
 80016e0:	18e1      	adds	r1, r4, r3
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	2030      	movs	r0, #48	; 0x30
 80016e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80016ea:	4422      	add	r2, r4
 80016ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80016f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80016f4:	3302      	adds	r3, #2
 80016f6:	e7c7      	b.n	8001688 <_printf_common+0x58>
 80016f8:	2301      	movs	r3, #1
 80016fa:	4622      	mov	r2, r4
 80016fc:	4649      	mov	r1, r9
 80016fe:	4638      	mov	r0, r7
 8001700:	47c0      	blx	r8
 8001702:	3001      	adds	r0, #1
 8001704:	d0e6      	beq.n	80016d4 <_printf_common+0xa4>
 8001706:	3601      	adds	r6, #1
 8001708:	e7d9      	b.n	80016be <_printf_common+0x8e>
	...

0800170c <_printf_i>:
 800170c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001710:	460c      	mov	r4, r1
 8001712:	4691      	mov	r9, r2
 8001714:	7e27      	ldrb	r7, [r4, #24]
 8001716:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001718:	2f78      	cmp	r7, #120	; 0x78
 800171a:	4680      	mov	r8, r0
 800171c:	469a      	mov	sl, r3
 800171e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001722:	d807      	bhi.n	8001734 <_printf_i+0x28>
 8001724:	2f62      	cmp	r7, #98	; 0x62
 8001726:	d80a      	bhi.n	800173e <_printf_i+0x32>
 8001728:	2f00      	cmp	r7, #0
 800172a:	f000 80d8 	beq.w	80018de <_printf_i+0x1d2>
 800172e:	2f58      	cmp	r7, #88	; 0x58
 8001730:	f000 80a3 	beq.w	800187a <_printf_i+0x16e>
 8001734:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800173c:	e03a      	b.n	80017b4 <_printf_i+0xa8>
 800173e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001742:	2b15      	cmp	r3, #21
 8001744:	d8f6      	bhi.n	8001734 <_printf_i+0x28>
 8001746:	a001      	add	r0, pc, #4	; (adr r0, 800174c <_printf_i+0x40>)
 8001748:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800174c:	080017a5 	.word	0x080017a5
 8001750:	080017b9 	.word	0x080017b9
 8001754:	08001735 	.word	0x08001735
 8001758:	08001735 	.word	0x08001735
 800175c:	08001735 	.word	0x08001735
 8001760:	08001735 	.word	0x08001735
 8001764:	080017b9 	.word	0x080017b9
 8001768:	08001735 	.word	0x08001735
 800176c:	08001735 	.word	0x08001735
 8001770:	08001735 	.word	0x08001735
 8001774:	08001735 	.word	0x08001735
 8001778:	080018c5 	.word	0x080018c5
 800177c:	080017e9 	.word	0x080017e9
 8001780:	080018a7 	.word	0x080018a7
 8001784:	08001735 	.word	0x08001735
 8001788:	08001735 	.word	0x08001735
 800178c:	080018e7 	.word	0x080018e7
 8001790:	08001735 	.word	0x08001735
 8001794:	080017e9 	.word	0x080017e9
 8001798:	08001735 	.word	0x08001735
 800179c:	08001735 	.word	0x08001735
 80017a0:	080018af 	.word	0x080018af
 80017a4:	680b      	ldr	r3, [r1, #0]
 80017a6:	1d1a      	adds	r2, r3, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	600a      	str	r2, [r1, #0]
 80017ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80017b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0a3      	b.n	8001900 <_printf_i+0x1f4>
 80017b8:	6825      	ldr	r5, [r4, #0]
 80017ba:	6808      	ldr	r0, [r1, #0]
 80017bc:	062e      	lsls	r6, r5, #24
 80017be:	f100 0304 	add.w	r3, r0, #4
 80017c2:	d50a      	bpl.n	80017da <_printf_i+0xce>
 80017c4:	6805      	ldr	r5, [r0, #0]
 80017c6:	600b      	str	r3, [r1, #0]
 80017c8:	2d00      	cmp	r5, #0
 80017ca:	da03      	bge.n	80017d4 <_printf_i+0xc8>
 80017cc:	232d      	movs	r3, #45	; 0x2d
 80017ce:	426d      	negs	r5, r5
 80017d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017d4:	485e      	ldr	r0, [pc, #376]	; (8001950 <_printf_i+0x244>)
 80017d6:	230a      	movs	r3, #10
 80017d8:	e019      	b.n	800180e <_printf_i+0x102>
 80017da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80017de:	6805      	ldr	r5, [r0, #0]
 80017e0:	600b      	str	r3, [r1, #0]
 80017e2:	bf18      	it	ne
 80017e4:	b22d      	sxthne	r5, r5
 80017e6:	e7ef      	b.n	80017c8 <_printf_i+0xbc>
 80017e8:	680b      	ldr	r3, [r1, #0]
 80017ea:	6825      	ldr	r5, [r4, #0]
 80017ec:	1d18      	adds	r0, r3, #4
 80017ee:	6008      	str	r0, [r1, #0]
 80017f0:	0628      	lsls	r0, r5, #24
 80017f2:	d501      	bpl.n	80017f8 <_printf_i+0xec>
 80017f4:	681d      	ldr	r5, [r3, #0]
 80017f6:	e002      	b.n	80017fe <_printf_i+0xf2>
 80017f8:	0669      	lsls	r1, r5, #25
 80017fa:	d5fb      	bpl.n	80017f4 <_printf_i+0xe8>
 80017fc:	881d      	ldrh	r5, [r3, #0]
 80017fe:	4854      	ldr	r0, [pc, #336]	; (8001950 <_printf_i+0x244>)
 8001800:	2f6f      	cmp	r7, #111	; 0x6f
 8001802:	bf0c      	ite	eq
 8001804:	2308      	moveq	r3, #8
 8001806:	230a      	movne	r3, #10
 8001808:	2100      	movs	r1, #0
 800180a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800180e:	6866      	ldr	r6, [r4, #4]
 8001810:	60a6      	str	r6, [r4, #8]
 8001812:	2e00      	cmp	r6, #0
 8001814:	bfa2      	ittt	ge
 8001816:	6821      	ldrge	r1, [r4, #0]
 8001818:	f021 0104 	bicge.w	r1, r1, #4
 800181c:	6021      	strge	r1, [r4, #0]
 800181e:	b90d      	cbnz	r5, 8001824 <_printf_i+0x118>
 8001820:	2e00      	cmp	r6, #0
 8001822:	d04d      	beq.n	80018c0 <_printf_i+0x1b4>
 8001824:	4616      	mov	r6, r2
 8001826:	fbb5 f1f3 	udiv	r1, r5, r3
 800182a:	fb03 5711 	mls	r7, r3, r1, r5
 800182e:	5dc7      	ldrb	r7, [r0, r7]
 8001830:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001834:	462f      	mov	r7, r5
 8001836:	42bb      	cmp	r3, r7
 8001838:	460d      	mov	r5, r1
 800183a:	d9f4      	bls.n	8001826 <_printf_i+0x11a>
 800183c:	2b08      	cmp	r3, #8
 800183e:	d10b      	bne.n	8001858 <_printf_i+0x14c>
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	07df      	lsls	r7, r3, #31
 8001844:	d508      	bpl.n	8001858 <_printf_i+0x14c>
 8001846:	6923      	ldr	r3, [r4, #16]
 8001848:	6861      	ldr	r1, [r4, #4]
 800184a:	4299      	cmp	r1, r3
 800184c:	bfde      	ittt	le
 800184e:	2330      	movle	r3, #48	; 0x30
 8001850:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001854:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001858:	1b92      	subs	r2, r2, r6
 800185a:	6122      	str	r2, [r4, #16]
 800185c:	f8cd a000 	str.w	sl, [sp]
 8001860:	464b      	mov	r3, r9
 8001862:	aa03      	add	r2, sp, #12
 8001864:	4621      	mov	r1, r4
 8001866:	4640      	mov	r0, r8
 8001868:	f7ff fee2 	bl	8001630 <_printf_common>
 800186c:	3001      	adds	r0, #1
 800186e:	d14c      	bne.n	800190a <_printf_i+0x1fe>
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	b004      	add	sp, #16
 8001876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800187a:	4835      	ldr	r0, [pc, #212]	; (8001950 <_printf_i+0x244>)
 800187c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001880:	6823      	ldr	r3, [r4, #0]
 8001882:	680e      	ldr	r6, [r1, #0]
 8001884:	061f      	lsls	r7, r3, #24
 8001886:	f856 5b04 	ldr.w	r5, [r6], #4
 800188a:	600e      	str	r6, [r1, #0]
 800188c:	d514      	bpl.n	80018b8 <_printf_i+0x1ac>
 800188e:	07d9      	lsls	r1, r3, #31
 8001890:	bf44      	itt	mi
 8001892:	f043 0320 	orrmi.w	r3, r3, #32
 8001896:	6023      	strmi	r3, [r4, #0]
 8001898:	b91d      	cbnz	r5, 80018a2 <_printf_i+0x196>
 800189a:	6823      	ldr	r3, [r4, #0]
 800189c:	f023 0320 	bic.w	r3, r3, #32
 80018a0:	6023      	str	r3, [r4, #0]
 80018a2:	2310      	movs	r3, #16
 80018a4:	e7b0      	b.n	8001808 <_printf_i+0xfc>
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	f043 0320 	orr.w	r3, r3, #32
 80018ac:	6023      	str	r3, [r4, #0]
 80018ae:	2378      	movs	r3, #120	; 0x78
 80018b0:	4828      	ldr	r0, [pc, #160]	; (8001954 <_printf_i+0x248>)
 80018b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80018b6:	e7e3      	b.n	8001880 <_printf_i+0x174>
 80018b8:	065e      	lsls	r6, r3, #25
 80018ba:	bf48      	it	mi
 80018bc:	b2ad      	uxthmi	r5, r5
 80018be:	e7e6      	b.n	800188e <_printf_i+0x182>
 80018c0:	4616      	mov	r6, r2
 80018c2:	e7bb      	b.n	800183c <_printf_i+0x130>
 80018c4:	680b      	ldr	r3, [r1, #0]
 80018c6:	6826      	ldr	r6, [r4, #0]
 80018c8:	6960      	ldr	r0, [r4, #20]
 80018ca:	1d1d      	adds	r5, r3, #4
 80018cc:	600d      	str	r5, [r1, #0]
 80018ce:	0635      	lsls	r5, r6, #24
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	d501      	bpl.n	80018d8 <_printf_i+0x1cc>
 80018d4:	6018      	str	r0, [r3, #0]
 80018d6:	e002      	b.n	80018de <_printf_i+0x1d2>
 80018d8:	0671      	lsls	r1, r6, #25
 80018da:	d5fb      	bpl.n	80018d4 <_printf_i+0x1c8>
 80018dc:	8018      	strh	r0, [r3, #0]
 80018de:	2300      	movs	r3, #0
 80018e0:	6123      	str	r3, [r4, #16]
 80018e2:	4616      	mov	r6, r2
 80018e4:	e7ba      	b.n	800185c <_printf_i+0x150>
 80018e6:	680b      	ldr	r3, [r1, #0]
 80018e8:	1d1a      	adds	r2, r3, #4
 80018ea:	600a      	str	r2, [r1, #0]
 80018ec:	681e      	ldr	r6, [r3, #0]
 80018ee:	6862      	ldr	r2, [r4, #4]
 80018f0:	2100      	movs	r1, #0
 80018f2:	4630      	mov	r0, r6
 80018f4:	f7fe fc7c 	bl	80001f0 <memchr>
 80018f8:	b108      	cbz	r0, 80018fe <_printf_i+0x1f2>
 80018fa:	1b80      	subs	r0, r0, r6
 80018fc:	6060      	str	r0, [r4, #4]
 80018fe:	6863      	ldr	r3, [r4, #4]
 8001900:	6123      	str	r3, [r4, #16]
 8001902:	2300      	movs	r3, #0
 8001904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001908:	e7a8      	b.n	800185c <_printf_i+0x150>
 800190a:	6923      	ldr	r3, [r4, #16]
 800190c:	4632      	mov	r2, r6
 800190e:	4649      	mov	r1, r9
 8001910:	4640      	mov	r0, r8
 8001912:	47d0      	blx	sl
 8001914:	3001      	adds	r0, #1
 8001916:	d0ab      	beq.n	8001870 <_printf_i+0x164>
 8001918:	6823      	ldr	r3, [r4, #0]
 800191a:	079b      	lsls	r3, r3, #30
 800191c:	d413      	bmi.n	8001946 <_printf_i+0x23a>
 800191e:	68e0      	ldr	r0, [r4, #12]
 8001920:	9b03      	ldr	r3, [sp, #12]
 8001922:	4298      	cmp	r0, r3
 8001924:	bfb8      	it	lt
 8001926:	4618      	movlt	r0, r3
 8001928:	e7a4      	b.n	8001874 <_printf_i+0x168>
 800192a:	2301      	movs	r3, #1
 800192c:	4632      	mov	r2, r6
 800192e:	4649      	mov	r1, r9
 8001930:	4640      	mov	r0, r8
 8001932:	47d0      	blx	sl
 8001934:	3001      	adds	r0, #1
 8001936:	d09b      	beq.n	8001870 <_printf_i+0x164>
 8001938:	3501      	adds	r5, #1
 800193a:	68e3      	ldr	r3, [r4, #12]
 800193c:	9903      	ldr	r1, [sp, #12]
 800193e:	1a5b      	subs	r3, r3, r1
 8001940:	42ab      	cmp	r3, r5
 8001942:	dcf2      	bgt.n	800192a <_printf_i+0x21e>
 8001944:	e7eb      	b.n	800191e <_printf_i+0x212>
 8001946:	2500      	movs	r5, #0
 8001948:	f104 0619 	add.w	r6, r4, #25
 800194c:	e7f5      	b.n	800193a <_printf_i+0x22e>
 800194e:	bf00      	nop
 8001950:	0800201d 	.word	0x0800201d
 8001954:	0800202e 	.word	0x0800202e

08001958 <_sbrk_r>:
 8001958:	b538      	push	{r3, r4, r5, lr}
 800195a:	4d06      	ldr	r5, [pc, #24]	; (8001974 <_sbrk_r+0x1c>)
 800195c:	2300      	movs	r3, #0
 800195e:	4604      	mov	r4, r0
 8001960:	4608      	mov	r0, r1
 8001962:	602b      	str	r3, [r5, #0]
 8001964:	f7fe fd50 	bl	8000408 <_sbrk>
 8001968:	1c43      	adds	r3, r0, #1
 800196a:	d102      	bne.n	8001972 <_sbrk_r+0x1a>
 800196c:	682b      	ldr	r3, [r5, #0]
 800196e:	b103      	cbz	r3, 8001972 <_sbrk_r+0x1a>
 8001970:	6023      	str	r3, [r4, #0]
 8001972:	bd38      	pop	{r3, r4, r5, pc}
 8001974:	200000f0 	.word	0x200000f0

08001978 <__sread>:
 8001978:	b510      	push	{r4, lr}
 800197a:	460c      	mov	r4, r1
 800197c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001980:	f000 fab2 	bl	8001ee8 <_read_r>
 8001984:	2800      	cmp	r0, #0
 8001986:	bfab      	itete	ge
 8001988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800198a:	89a3      	ldrhlt	r3, [r4, #12]
 800198c:	181b      	addge	r3, r3, r0
 800198e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001992:	bfac      	ite	ge
 8001994:	6563      	strge	r3, [r4, #84]	; 0x54
 8001996:	81a3      	strhlt	r3, [r4, #12]
 8001998:	bd10      	pop	{r4, pc}

0800199a <__swrite>:
 800199a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800199e:	461f      	mov	r7, r3
 80019a0:	898b      	ldrh	r3, [r1, #12]
 80019a2:	05db      	lsls	r3, r3, #23
 80019a4:	4605      	mov	r5, r0
 80019a6:	460c      	mov	r4, r1
 80019a8:	4616      	mov	r6, r2
 80019aa:	d505      	bpl.n	80019b8 <__swrite+0x1e>
 80019ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019b0:	2302      	movs	r3, #2
 80019b2:	2200      	movs	r2, #0
 80019b4:	f000 f9c8 	bl	8001d48 <_lseek_r>
 80019b8:	89a3      	ldrh	r3, [r4, #12]
 80019ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019c2:	81a3      	strh	r3, [r4, #12]
 80019c4:	4632      	mov	r2, r6
 80019c6:	463b      	mov	r3, r7
 80019c8:	4628      	mov	r0, r5
 80019ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019ce:	f000 b869 	b.w	8001aa4 <_write_r>

080019d2 <__sseek>:
 80019d2:	b510      	push	{r4, lr}
 80019d4:	460c      	mov	r4, r1
 80019d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019da:	f000 f9b5 	bl	8001d48 <_lseek_r>
 80019de:	1c43      	adds	r3, r0, #1
 80019e0:	89a3      	ldrh	r3, [r4, #12]
 80019e2:	bf15      	itete	ne
 80019e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80019e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80019ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80019ee:	81a3      	strheq	r3, [r4, #12]
 80019f0:	bf18      	it	ne
 80019f2:	81a3      	strhne	r3, [r4, #12]
 80019f4:	bd10      	pop	{r4, pc}

080019f6 <__sclose>:
 80019f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019fa:	f000 b8d3 	b.w	8001ba4 <_close_r>
	...

08001a00 <__swbuf_r>:
 8001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a02:	460e      	mov	r6, r1
 8001a04:	4614      	mov	r4, r2
 8001a06:	4605      	mov	r5, r0
 8001a08:	b118      	cbz	r0, 8001a12 <__swbuf_r+0x12>
 8001a0a:	6983      	ldr	r3, [r0, #24]
 8001a0c:	b90b      	cbnz	r3, 8001a12 <__swbuf_r+0x12>
 8001a0e:	f7ff fbbd 	bl	800118c <__sinit>
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <__swbuf_r+0x98>)
 8001a14:	429c      	cmp	r4, r3
 8001a16:	d12b      	bne.n	8001a70 <__swbuf_r+0x70>
 8001a18:	686c      	ldr	r4, [r5, #4]
 8001a1a:	69a3      	ldr	r3, [r4, #24]
 8001a1c:	60a3      	str	r3, [r4, #8]
 8001a1e:	89a3      	ldrh	r3, [r4, #12]
 8001a20:	071a      	lsls	r2, r3, #28
 8001a22:	d52f      	bpl.n	8001a84 <__swbuf_r+0x84>
 8001a24:	6923      	ldr	r3, [r4, #16]
 8001a26:	b36b      	cbz	r3, 8001a84 <__swbuf_r+0x84>
 8001a28:	6923      	ldr	r3, [r4, #16]
 8001a2a:	6820      	ldr	r0, [r4, #0]
 8001a2c:	1ac0      	subs	r0, r0, r3
 8001a2e:	6963      	ldr	r3, [r4, #20]
 8001a30:	b2f6      	uxtb	r6, r6
 8001a32:	4283      	cmp	r3, r0
 8001a34:	4637      	mov	r7, r6
 8001a36:	dc04      	bgt.n	8001a42 <__swbuf_r+0x42>
 8001a38:	4621      	mov	r1, r4
 8001a3a:	4628      	mov	r0, r5
 8001a3c:	f000 f948 	bl	8001cd0 <_fflush_r>
 8001a40:	bb30      	cbnz	r0, 8001a90 <__swbuf_r+0x90>
 8001a42:	68a3      	ldr	r3, [r4, #8]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	60a3      	str	r3, [r4, #8]
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	6022      	str	r2, [r4, #0]
 8001a4e:	701e      	strb	r6, [r3, #0]
 8001a50:	6963      	ldr	r3, [r4, #20]
 8001a52:	3001      	adds	r0, #1
 8001a54:	4283      	cmp	r3, r0
 8001a56:	d004      	beq.n	8001a62 <__swbuf_r+0x62>
 8001a58:	89a3      	ldrh	r3, [r4, #12]
 8001a5a:	07db      	lsls	r3, r3, #31
 8001a5c:	d506      	bpl.n	8001a6c <__swbuf_r+0x6c>
 8001a5e:	2e0a      	cmp	r6, #10
 8001a60:	d104      	bne.n	8001a6c <__swbuf_r+0x6c>
 8001a62:	4621      	mov	r1, r4
 8001a64:	4628      	mov	r0, r5
 8001a66:	f000 f933 	bl	8001cd0 <_fflush_r>
 8001a6a:	b988      	cbnz	r0, 8001a90 <__swbuf_r+0x90>
 8001a6c:	4638      	mov	r0, r7
 8001a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <__swbuf_r+0x9c>)
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d101      	bne.n	8001a7a <__swbuf_r+0x7a>
 8001a76:	68ac      	ldr	r4, [r5, #8]
 8001a78:	e7cf      	b.n	8001a1a <__swbuf_r+0x1a>
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <__swbuf_r+0xa0>)
 8001a7c:	429c      	cmp	r4, r3
 8001a7e:	bf08      	it	eq
 8001a80:	68ec      	ldreq	r4, [r5, #12]
 8001a82:	e7ca      	b.n	8001a1a <__swbuf_r+0x1a>
 8001a84:	4621      	mov	r1, r4
 8001a86:	4628      	mov	r0, r5
 8001a88:	f000 f81e 	bl	8001ac8 <__swsetup_r>
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	d0cb      	beq.n	8001a28 <__swbuf_r+0x28>
 8001a90:	f04f 37ff 	mov.w	r7, #4294967295
 8001a94:	e7ea      	b.n	8001a6c <__swbuf_r+0x6c>
 8001a96:	bf00      	nop
 8001a98:	08001fcc 	.word	0x08001fcc
 8001a9c:	08001fec 	.word	0x08001fec
 8001aa0:	08001fac 	.word	0x08001fac

08001aa4 <_write_r>:
 8001aa4:	b538      	push	{r3, r4, r5, lr}
 8001aa6:	4d07      	ldr	r5, [pc, #28]	; (8001ac4 <_write_r+0x20>)
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	4608      	mov	r0, r1
 8001aac:	4611      	mov	r1, r2
 8001aae:	2200      	movs	r2, #0
 8001ab0:	602a      	str	r2, [r5, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f7fe fc5b 	bl	800036e <_write>
 8001ab8:	1c43      	adds	r3, r0, #1
 8001aba:	d102      	bne.n	8001ac2 <_write_r+0x1e>
 8001abc:	682b      	ldr	r3, [r5, #0]
 8001abe:	b103      	cbz	r3, 8001ac2 <_write_r+0x1e>
 8001ac0:	6023      	str	r3, [r4, #0]
 8001ac2:	bd38      	pop	{r3, r4, r5, pc}
 8001ac4:	200000f0 	.word	0x200000f0

08001ac8 <__swsetup_r>:
 8001ac8:	4b32      	ldr	r3, [pc, #200]	; (8001b94 <__swsetup_r+0xcc>)
 8001aca:	b570      	push	{r4, r5, r6, lr}
 8001acc:	681d      	ldr	r5, [r3, #0]
 8001ace:	4606      	mov	r6, r0
 8001ad0:	460c      	mov	r4, r1
 8001ad2:	b125      	cbz	r5, 8001ade <__swsetup_r+0x16>
 8001ad4:	69ab      	ldr	r3, [r5, #24]
 8001ad6:	b913      	cbnz	r3, 8001ade <__swsetup_r+0x16>
 8001ad8:	4628      	mov	r0, r5
 8001ada:	f7ff fb57 	bl	800118c <__sinit>
 8001ade:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <__swsetup_r+0xd0>)
 8001ae0:	429c      	cmp	r4, r3
 8001ae2:	d10f      	bne.n	8001b04 <__swsetup_r+0x3c>
 8001ae4:	686c      	ldr	r4, [r5, #4]
 8001ae6:	89a3      	ldrh	r3, [r4, #12]
 8001ae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001aec:	0719      	lsls	r1, r3, #28
 8001aee:	d42c      	bmi.n	8001b4a <__swsetup_r+0x82>
 8001af0:	06dd      	lsls	r5, r3, #27
 8001af2:	d411      	bmi.n	8001b18 <__swsetup_r+0x50>
 8001af4:	2309      	movs	r3, #9
 8001af6:	6033      	str	r3, [r6, #0]
 8001af8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001afc:	81a3      	strh	r3, [r4, #12]
 8001afe:	f04f 30ff 	mov.w	r0, #4294967295
 8001b02:	e03e      	b.n	8001b82 <__swsetup_r+0xba>
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <__swsetup_r+0xd4>)
 8001b06:	429c      	cmp	r4, r3
 8001b08:	d101      	bne.n	8001b0e <__swsetup_r+0x46>
 8001b0a:	68ac      	ldr	r4, [r5, #8]
 8001b0c:	e7eb      	b.n	8001ae6 <__swsetup_r+0x1e>
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <__swsetup_r+0xd8>)
 8001b10:	429c      	cmp	r4, r3
 8001b12:	bf08      	it	eq
 8001b14:	68ec      	ldreq	r4, [r5, #12]
 8001b16:	e7e6      	b.n	8001ae6 <__swsetup_r+0x1e>
 8001b18:	0758      	lsls	r0, r3, #29
 8001b1a:	d512      	bpl.n	8001b42 <__swsetup_r+0x7a>
 8001b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b1e:	b141      	cbz	r1, 8001b32 <__swsetup_r+0x6a>
 8001b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b24:	4299      	cmp	r1, r3
 8001b26:	d002      	beq.n	8001b2e <__swsetup_r+0x66>
 8001b28:	4630      	mov	r0, r6
 8001b2a:	f000 f98f 	bl	8001e4c <_free_r>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	6363      	str	r3, [r4, #52]	; 0x34
 8001b32:	89a3      	ldrh	r3, [r4, #12]
 8001b34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b38:	81a3      	strh	r3, [r4, #12]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	6063      	str	r3, [r4, #4]
 8001b3e:	6923      	ldr	r3, [r4, #16]
 8001b40:	6023      	str	r3, [r4, #0]
 8001b42:	89a3      	ldrh	r3, [r4, #12]
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	81a3      	strh	r3, [r4, #12]
 8001b4a:	6923      	ldr	r3, [r4, #16]
 8001b4c:	b94b      	cbnz	r3, 8001b62 <__swsetup_r+0x9a>
 8001b4e:	89a3      	ldrh	r3, [r4, #12]
 8001b50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b58:	d003      	beq.n	8001b62 <__swsetup_r+0x9a>
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	f000 f929 	bl	8001db4 <__smakebuf_r>
 8001b62:	89a0      	ldrh	r0, [r4, #12]
 8001b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b68:	f010 0301 	ands.w	r3, r0, #1
 8001b6c:	d00a      	beq.n	8001b84 <__swsetup_r+0xbc>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60a3      	str	r3, [r4, #8]
 8001b72:	6963      	ldr	r3, [r4, #20]
 8001b74:	425b      	negs	r3, r3
 8001b76:	61a3      	str	r3, [r4, #24]
 8001b78:	6923      	ldr	r3, [r4, #16]
 8001b7a:	b943      	cbnz	r3, 8001b8e <__swsetup_r+0xc6>
 8001b7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001b80:	d1ba      	bne.n	8001af8 <__swsetup_r+0x30>
 8001b82:	bd70      	pop	{r4, r5, r6, pc}
 8001b84:	0781      	lsls	r1, r0, #30
 8001b86:	bf58      	it	pl
 8001b88:	6963      	ldrpl	r3, [r4, #20]
 8001b8a:	60a3      	str	r3, [r4, #8]
 8001b8c:	e7f4      	b.n	8001b78 <__swsetup_r+0xb0>
 8001b8e:	2000      	movs	r0, #0
 8001b90:	e7f7      	b.n	8001b82 <__swsetup_r+0xba>
 8001b92:	bf00      	nop
 8001b94:	20000014 	.word	0x20000014
 8001b98:	08001fcc 	.word	0x08001fcc
 8001b9c:	08001fec 	.word	0x08001fec
 8001ba0:	08001fac 	.word	0x08001fac

08001ba4 <_close_r>:
 8001ba4:	b538      	push	{r3, r4, r5, lr}
 8001ba6:	4d06      	ldr	r5, [pc, #24]	; (8001bc0 <_close_r+0x1c>)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	4604      	mov	r4, r0
 8001bac:	4608      	mov	r0, r1
 8001bae:	602b      	str	r3, [r5, #0]
 8001bb0:	f7fe fbf9 	bl	80003a6 <_close>
 8001bb4:	1c43      	adds	r3, r0, #1
 8001bb6:	d102      	bne.n	8001bbe <_close_r+0x1a>
 8001bb8:	682b      	ldr	r3, [r5, #0]
 8001bba:	b103      	cbz	r3, 8001bbe <_close_r+0x1a>
 8001bbc:	6023      	str	r3, [r4, #0]
 8001bbe:	bd38      	pop	{r3, r4, r5, pc}
 8001bc0:	200000f0 	.word	0x200000f0

08001bc4 <__sflush_r>:
 8001bc4:	898a      	ldrh	r2, [r1, #12]
 8001bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bca:	4605      	mov	r5, r0
 8001bcc:	0710      	lsls	r0, r2, #28
 8001bce:	460c      	mov	r4, r1
 8001bd0:	d458      	bmi.n	8001c84 <__sflush_r+0xc0>
 8001bd2:	684b      	ldr	r3, [r1, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	dc05      	bgt.n	8001be4 <__sflush_r+0x20>
 8001bd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	dc02      	bgt.n	8001be4 <__sflush_r+0x20>
 8001bde:	2000      	movs	r0, #0
 8001be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001be6:	2e00      	cmp	r6, #0
 8001be8:	d0f9      	beq.n	8001bde <__sflush_r+0x1a>
 8001bea:	2300      	movs	r3, #0
 8001bec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001bf0:	682f      	ldr	r7, [r5, #0]
 8001bf2:	602b      	str	r3, [r5, #0]
 8001bf4:	d032      	beq.n	8001c5c <__sflush_r+0x98>
 8001bf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001bf8:	89a3      	ldrh	r3, [r4, #12]
 8001bfa:	075a      	lsls	r2, r3, #29
 8001bfc:	d505      	bpl.n	8001c0a <__sflush_r+0x46>
 8001bfe:	6863      	ldr	r3, [r4, #4]
 8001c00:	1ac0      	subs	r0, r0, r3
 8001c02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c04:	b10b      	cbz	r3, 8001c0a <__sflush_r+0x46>
 8001c06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c08:	1ac0      	subs	r0, r0, r3
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c10:	6a21      	ldr	r1, [r4, #32]
 8001c12:	4628      	mov	r0, r5
 8001c14:	47b0      	blx	r6
 8001c16:	1c43      	adds	r3, r0, #1
 8001c18:	89a3      	ldrh	r3, [r4, #12]
 8001c1a:	d106      	bne.n	8001c2a <__sflush_r+0x66>
 8001c1c:	6829      	ldr	r1, [r5, #0]
 8001c1e:	291d      	cmp	r1, #29
 8001c20:	d82c      	bhi.n	8001c7c <__sflush_r+0xb8>
 8001c22:	4a2a      	ldr	r2, [pc, #168]	; (8001ccc <__sflush_r+0x108>)
 8001c24:	40ca      	lsrs	r2, r1
 8001c26:	07d6      	lsls	r6, r2, #31
 8001c28:	d528      	bpl.n	8001c7c <__sflush_r+0xb8>
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	6062      	str	r2, [r4, #4]
 8001c2e:	04d9      	lsls	r1, r3, #19
 8001c30:	6922      	ldr	r2, [r4, #16]
 8001c32:	6022      	str	r2, [r4, #0]
 8001c34:	d504      	bpl.n	8001c40 <__sflush_r+0x7c>
 8001c36:	1c42      	adds	r2, r0, #1
 8001c38:	d101      	bne.n	8001c3e <__sflush_r+0x7a>
 8001c3a:	682b      	ldr	r3, [r5, #0]
 8001c3c:	b903      	cbnz	r3, 8001c40 <__sflush_r+0x7c>
 8001c3e:	6560      	str	r0, [r4, #84]	; 0x54
 8001c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c42:	602f      	str	r7, [r5, #0]
 8001c44:	2900      	cmp	r1, #0
 8001c46:	d0ca      	beq.n	8001bde <__sflush_r+0x1a>
 8001c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c4c:	4299      	cmp	r1, r3
 8001c4e:	d002      	beq.n	8001c56 <__sflush_r+0x92>
 8001c50:	4628      	mov	r0, r5
 8001c52:	f000 f8fb 	bl	8001e4c <_free_r>
 8001c56:	2000      	movs	r0, #0
 8001c58:	6360      	str	r0, [r4, #52]	; 0x34
 8001c5a:	e7c1      	b.n	8001be0 <__sflush_r+0x1c>
 8001c5c:	6a21      	ldr	r1, [r4, #32]
 8001c5e:	2301      	movs	r3, #1
 8001c60:	4628      	mov	r0, r5
 8001c62:	47b0      	blx	r6
 8001c64:	1c41      	adds	r1, r0, #1
 8001c66:	d1c7      	bne.n	8001bf8 <__sflush_r+0x34>
 8001c68:	682b      	ldr	r3, [r5, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0c4      	beq.n	8001bf8 <__sflush_r+0x34>
 8001c6e:	2b1d      	cmp	r3, #29
 8001c70:	d001      	beq.n	8001c76 <__sflush_r+0xb2>
 8001c72:	2b16      	cmp	r3, #22
 8001c74:	d101      	bne.n	8001c7a <__sflush_r+0xb6>
 8001c76:	602f      	str	r7, [r5, #0]
 8001c78:	e7b1      	b.n	8001bde <__sflush_r+0x1a>
 8001c7a:	89a3      	ldrh	r3, [r4, #12]
 8001c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c80:	81a3      	strh	r3, [r4, #12]
 8001c82:	e7ad      	b.n	8001be0 <__sflush_r+0x1c>
 8001c84:	690f      	ldr	r7, [r1, #16]
 8001c86:	2f00      	cmp	r7, #0
 8001c88:	d0a9      	beq.n	8001bde <__sflush_r+0x1a>
 8001c8a:	0793      	lsls	r3, r2, #30
 8001c8c:	680e      	ldr	r6, [r1, #0]
 8001c8e:	bf08      	it	eq
 8001c90:	694b      	ldreq	r3, [r1, #20]
 8001c92:	600f      	str	r7, [r1, #0]
 8001c94:	bf18      	it	ne
 8001c96:	2300      	movne	r3, #0
 8001c98:	eba6 0807 	sub.w	r8, r6, r7
 8001c9c:	608b      	str	r3, [r1, #8]
 8001c9e:	f1b8 0f00 	cmp.w	r8, #0
 8001ca2:	dd9c      	ble.n	8001bde <__sflush_r+0x1a>
 8001ca4:	6a21      	ldr	r1, [r4, #32]
 8001ca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001ca8:	4643      	mov	r3, r8
 8001caa:	463a      	mov	r2, r7
 8001cac:	4628      	mov	r0, r5
 8001cae:	47b0      	blx	r6
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	dc06      	bgt.n	8001cc2 <__sflush_r+0xfe>
 8001cb4:	89a3      	ldrh	r3, [r4, #12]
 8001cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cba:	81a3      	strh	r3, [r4, #12]
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	e78e      	b.n	8001be0 <__sflush_r+0x1c>
 8001cc2:	4407      	add	r7, r0
 8001cc4:	eba8 0800 	sub.w	r8, r8, r0
 8001cc8:	e7e9      	b.n	8001c9e <__sflush_r+0xda>
 8001cca:	bf00      	nop
 8001ccc:	20400001 	.word	0x20400001

08001cd0 <_fflush_r>:
 8001cd0:	b538      	push	{r3, r4, r5, lr}
 8001cd2:	690b      	ldr	r3, [r1, #16]
 8001cd4:	4605      	mov	r5, r0
 8001cd6:	460c      	mov	r4, r1
 8001cd8:	b913      	cbnz	r3, 8001ce0 <_fflush_r+0x10>
 8001cda:	2500      	movs	r5, #0
 8001cdc:	4628      	mov	r0, r5
 8001cde:	bd38      	pop	{r3, r4, r5, pc}
 8001ce0:	b118      	cbz	r0, 8001cea <_fflush_r+0x1a>
 8001ce2:	6983      	ldr	r3, [r0, #24]
 8001ce4:	b90b      	cbnz	r3, 8001cea <_fflush_r+0x1a>
 8001ce6:	f7ff fa51 	bl	800118c <__sinit>
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <_fflush_r+0x6c>)
 8001cec:	429c      	cmp	r4, r3
 8001cee:	d11b      	bne.n	8001d28 <_fflush_r+0x58>
 8001cf0:	686c      	ldr	r4, [r5, #4]
 8001cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0ef      	beq.n	8001cda <_fflush_r+0xa>
 8001cfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001cfc:	07d0      	lsls	r0, r2, #31
 8001cfe:	d404      	bmi.n	8001d0a <_fflush_r+0x3a>
 8001d00:	0599      	lsls	r1, r3, #22
 8001d02:	d402      	bmi.n	8001d0a <_fflush_r+0x3a>
 8001d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d06:	f7ff fadf 	bl	80012c8 <__retarget_lock_acquire_recursive>
 8001d0a:	4628      	mov	r0, r5
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	f7ff ff59 	bl	8001bc4 <__sflush_r>
 8001d12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d14:	07da      	lsls	r2, r3, #31
 8001d16:	4605      	mov	r5, r0
 8001d18:	d4e0      	bmi.n	8001cdc <_fflush_r+0xc>
 8001d1a:	89a3      	ldrh	r3, [r4, #12]
 8001d1c:	059b      	lsls	r3, r3, #22
 8001d1e:	d4dd      	bmi.n	8001cdc <_fflush_r+0xc>
 8001d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d22:	f7ff fad2 	bl	80012ca <__retarget_lock_release_recursive>
 8001d26:	e7d9      	b.n	8001cdc <_fflush_r+0xc>
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <_fflush_r+0x70>)
 8001d2a:	429c      	cmp	r4, r3
 8001d2c:	d101      	bne.n	8001d32 <_fflush_r+0x62>
 8001d2e:	68ac      	ldr	r4, [r5, #8]
 8001d30:	e7df      	b.n	8001cf2 <_fflush_r+0x22>
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <_fflush_r+0x74>)
 8001d34:	429c      	cmp	r4, r3
 8001d36:	bf08      	it	eq
 8001d38:	68ec      	ldreq	r4, [r5, #12]
 8001d3a:	e7da      	b.n	8001cf2 <_fflush_r+0x22>
 8001d3c:	08001fcc 	.word	0x08001fcc
 8001d40:	08001fec 	.word	0x08001fec
 8001d44:	08001fac 	.word	0x08001fac

08001d48 <_lseek_r>:
 8001d48:	b538      	push	{r3, r4, r5, lr}
 8001d4a:	4d07      	ldr	r5, [pc, #28]	; (8001d68 <_lseek_r+0x20>)
 8001d4c:	4604      	mov	r4, r0
 8001d4e:	4608      	mov	r0, r1
 8001d50:	4611      	mov	r1, r2
 8001d52:	2200      	movs	r2, #0
 8001d54:	602a      	str	r2, [r5, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	f7fe fb49 	bl	80003ee <_lseek>
 8001d5c:	1c43      	adds	r3, r0, #1
 8001d5e:	d102      	bne.n	8001d66 <_lseek_r+0x1e>
 8001d60:	682b      	ldr	r3, [r5, #0]
 8001d62:	b103      	cbz	r3, 8001d66 <_lseek_r+0x1e>
 8001d64:	6023      	str	r3, [r4, #0]
 8001d66:	bd38      	pop	{r3, r4, r5, pc}
 8001d68:	200000f0 	.word	0x200000f0

08001d6c <__swhatbuf_r>:
 8001d6c:	b570      	push	{r4, r5, r6, lr}
 8001d6e:	460e      	mov	r6, r1
 8001d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d74:	2900      	cmp	r1, #0
 8001d76:	b096      	sub	sp, #88	; 0x58
 8001d78:	4614      	mov	r4, r2
 8001d7a:	461d      	mov	r5, r3
 8001d7c:	da07      	bge.n	8001d8e <__swhatbuf_r+0x22>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	602b      	str	r3, [r5, #0]
 8001d82:	89b3      	ldrh	r3, [r6, #12]
 8001d84:	061a      	lsls	r2, r3, #24
 8001d86:	d410      	bmi.n	8001daa <__swhatbuf_r+0x3e>
 8001d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8c:	e00e      	b.n	8001dac <__swhatbuf_r+0x40>
 8001d8e:	466a      	mov	r2, sp
 8001d90:	f000 f8bc 	bl	8001f0c <_fstat_r>
 8001d94:	2800      	cmp	r0, #0
 8001d96:	dbf2      	blt.n	8001d7e <__swhatbuf_r+0x12>
 8001d98:	9a01      	ldr	r2, [sp, #4]
 8001d9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001d9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001da2:	425a      	negs	r2, r3
 8001da4:	415a      	adcs	r2, r3
 8001da6:	602a      	str	r2, [r5, #0]
 8001da8:	e7ee      	b.n	8001d88 <__swhatbuf_r+0x1c>
 8001daa:	2340      	movs	r3, #64	; 0x40
 8001dac:	2000      	movs	r0, #0
 8001dae:	6023      	str	r3, [r4, #0]
 8001db0:	b016      	add	sp, #88	; 0x58
 8001db2:	bd70      	pop	{r4, r5, r6, pc}

08001db4 <__smakebuf_r>:
 8001db4:	898b      	ldrh	r3, [r1, #12]
 8001db6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001db8:	079d      	lsls	r5, r3, #30
 8001dba:	4606      	mov	r6, r0
 8001dbc:	460c      	mov	r4, r1
 8001dbe:	d507      	bpl.n	8001dd0 <__smakebuf_r+0x1c>
 8001dc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001dc4:	6023      	str	r3, [r4, #0]
 8001dc6:	6123      	str	r3, [r4, #16]
 8001dc8:	2301      	movs	r3, #1
 8001dca:	6163      	str	r3, [r4, #20]
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd70      	pop	{r4, r5, r6, pc}
 8001dd0:	ab01      	add	r3, sp, #4
 8001dd2:	466a      	mov	r2, sp
 8001dd4:	f7ff ffca 	bl	8001d6c <__swhatbuf_r>
 8001dd8:	9900      	ldr	r1, [sp, #0]
 8001dda:	4605      	mov	r5, r0
 8001ddc:	4630      	mov	r0, r6
 8001dde:	f7ff fa75 	bl	80012cc <_malloc_r>
 8001de2:	b948      	cbnz	r0, 8001df8 <__smakebuf_r+0x44>
 8001de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001de8:	059a      	lsls	r2, r3, #22
 8001dea:	d4ef      	bmi.n	8001dcc <__smakebuf_r+0x18>
 8001dec:	f023 0303 	bic.w	r3, r3, #3
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	81a3      	strh	r3, [r4, #12]
 8001df6:	e7e3      	b.n	8001dc0 <__smakebuf_r+0xc>
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <__smakebuf_r+0x7c>)
 8001dfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8001dfc:	89a3      	ldrh	r3, [r4, #12]
 8001dfe:	6020      	str	r0, [r4, #0]
 8001e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e04:	81a3      	strh	r3, [r4, #12]
 8001e06:	9b00      	ldr	r3, [sp, #0]
 8001e08:	6163      	str	r3, [r4, #20]
 8001e0a:	9b01      	ldr	r3, [sp, #4]
 8001e0c:	6120      	str	r0, [r4, #16]
 8001e0e:	b15b      	cbz	r3, 8001e28 <__smakebuf_r+0x74>
 8001e10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e14:	4630      	mov	r0, r6
 8001e16:	f000 f88b 	bl	8001f30 <_isatty_r>
 8001e1a:	b128      	cbz	r0, 8001e28 <__smakebuf_r+0x74>
 8001e1c:	89a3      	ldrh	r3, [r4, #12]
 8001e1e:	f023 0303 	bic.w	r3, r3, #3
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	81a3      	strh	r3, [r4, #12]
 8001e28:	89a0      	ldrh	r0, [r4, #12]
 8001e2a:	4305      	orrs	r5, r0
 8001e2c:	81a5      	strh	r5, [r4, #12]
 8001e2e:	e7cd      	b.n	8001dcc <__smakebuf_r+0x18>
 8001e30:	08001125 	.word	0x08001125

08001e34 <__malloc_lock>:
 8001e34:	4801      	ldr	r0, [pc, #4]	; (8001e3c <__malloc_lock+0x8>)
 8001e36:	f7ff ba47 	b.w	80012c8 <__retarget_lock_acquire_recursive>
 8001e3a:	bf00      	nop
 8001e3c:	200000e9 	.word	0x200000e9

08001e40 <__malloc_unlock>:
 8001e40:	4801      	ldr	r0, [pc, #4]	; (8001e48 <__malloc_unlock+0x8>)
 8001e42:	f7ff ba42 	b.w	80012ca <__retarget_lock_release_recursive>
 8001e46:	bf00      	nop
 8001e48:	200000e9 	.word	0x200000e9

08001e4c <_free_r>:
 8001e4c:	b538      	push	{r3, r4, r5, lr}
 8001e4e:	4605      	mov	r5, r0
 8001e50:	2900      	cmp	r1, #0
 8001e52:	d045      	beq.n	8001ee0 <_free_r+0x94>
 8001e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e58:	1f0c      	subs	r4, r1, #4
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	bfb8      	it	lt
 8001e5e:	18e4      	addlt	r4, r4, r3
 8001e60:	f7ff ffe8 	bl	8001e34 <__malloc_lock>
 8001e64:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <_free_r+0x98>)
 8001e66:	6813      	ldr	r3, [r2, #0]
 8001e68:	4610      	mov	r0, r2
 8001e6a:	b933      	cbnz	r3, 8001e7a <_free_r+0x2e>
 8001e6c:	6063      	str	r3, [r4, #4]
 8001e6e:	6014      	str	r4, [r2, #0]
 8001e70:	4628      	mov	r0, r5
 8001e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e76:	f7ff bfe3 	b.w	8001e40 <__malloc_unlock>
 8001e7a:	42a3      	cmp	r3, r4
 8001e7c:	d90b      	bls.n	8001e96 <_free_r+0x4a>
 8001e7e:	6821      	ldr	r1, [r4, #0]
 8001e80:	1862      	adds	r2, r4, r1
 8001e82:	4293      	cmp	r3, r2
 8001e84:	bf04      	itt	eq
 8001e86:	681a      	ldreq	r2, [r3, #0]
 8001e88:	685b      	ldreq	r3, [r3, #4]
 8001e8a:	6063      	str	r3, [r4, #4]
 8001e8c:	bf04      	itt	eq
 8001e8e:	1852      	addeq	r2, r2, r1
 8001e90:	6022      	streq	r2, [r4, #0]
 8001e92:	6004      	str	r4, [r0, #0]
 8001e94:	e7ec      	b.n	8001e70 <_free_r+0x24>
 8001e96:	461a      	mov	r2, r3
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	b10b      	cbz	r3, 8001ea0 <_free_r+0x54>
 8001e9c:	42a3      	cmp	r3, r4
 8001e9e:	d9fa      	bls.n	8001e96 <_free_r+0x4a>
 8001ea0:	6811      	ldr	r1, [r2, #0]
 8001ea2:	1850      	adds	r0, r2, r1
 8001ea4:	42a0      	cmp	r0, r4
 8001ea6:	d10b      	bne.n	8001ec0 <_free_r+0x74>
 8001ea8:	6820      	ldr	r0, [r4, #0]
 8001eaa:	4401      	add	r1, r0
 8001eac:	1850      	adds	r0, r2, r1
 8001eae:	4283      	cmp	r3, r0
 8001eb0:	6011      	str	r1, [r2, #0]
 8001eb2:	d1dd      	bne.n	8001e70 <_free_r+0x24>
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	6053      	str	r3, [r2, #4]
 8001eba:	4401      	add	r1, r0
 8001ebc:	6011      	str	r1, [r2, #0]
 8001ebe:	e7d7      	b.n	8001e70 <_free_r+0x24>
 8001ec0:	d902      	bls.n	8001ec8 <_free_r+0x7c>
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	602b      	str	r3, [r5, #0]
 8001ec6:	e7d3      	b.n	8001e70 <_free_r+0x24>
 8001ec8:	6820      	ldr	r0, [r4, #0]
 8001eca:	1821      	adds	r1, r4, r0
 8001ecc:	428b      	cmp	r3, r1
 8001ece:	bf04      	itt	eq
 8001ed0:	6819      	ldreq	r1, [r3, #0]
 8001ed2:	685b      	ldreq	r3, [r3, #4]
 8001ed4:	6063      	str	r3, [r4, #4]
 8001ed6:	bf04      	itt	eq
 8001ed8:	1809      	addeq	r1, r1, r0
 8001eda:	6021      	streq	r1, [r4, #0]
 8001edc:	6054      	str	r4, [r2, #4]
 8001ede:	e7c7      	b.n	8001e70 <_free_r+0x24>
 8001ee0:	bd38      	pop	{r3, r4, r5, pc}
 8001ee2:	bf00      	nop
 8001ee4:	2000009c 	.word	0x2000009c

08001ee8 <_read_r>:
 8001ee8:	b538      	push	{r3, r4, r5, lr}
 8001eea:	4d07      	ldr	r5, [pc, #28]	; (8001f08 <_read_r+0x20>)
 8001eec:	4604      	mov	r4, r0
 8001eee:	4608      	mov	r0, r1
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	602a      	str	r2, [r5, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f7fe fa1c 	bl	8000334 <_read>
 8001efc:	1c43      	adds	r3, r0, #1
 8001efe:	d102      	bne.n	8001f06 <_read_r+0x1e>
 8001f00:	682b      	ldr	r3, [r5, #0]
 8001f02:	b103      	cbz	r3, 8001f06 <_read_r+0x1e>
 8001f04:	6023      	str	r3, [r4, #0]
 8001f06:	bd38      	pop	{r3, r4, r5, pc}
 8001f08:	200000f0 	.word	0x200000f0

08001f0c <_fstat_r>:
 8001f0c:	b538      	push	{r3, r4, r5, lr}
 8001f0e:	4d07      	ldr	r5, [pc, #28]	; (8001f2c <_fstat_r+0x20>)
 8001f10:	2300      	movs	r3, #0
 8001f12:	4604      	mov	r4, r0
 8001f14:	4608      	mov	r0, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	602b      	str	r3, [r5, #0]
 8001f1a:	f7fe fa4f 	bl	80003bc <_fstat>
 8001f1e:	1c43      	adds	r3, r0, #1
 8001f20:	d102      	bne.n	8001f28 <_fstat_r+0x1c>
 8001f22:	682b      	ldr	r3, [r5, #0]
 8001f24:	b103      	cbz	r3, 8001f28 <_fstat_r+0x1c>
 8001f26:	6023      	str	r3, [r4, #0]
 8001f28:	bd38      	pop	{r3, r4, r5, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200000f0 	.word	0x200000f0

08001f30 <_isatty_r>:
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	4d06      	ldr	r5, [pc, #24]	; (8001f4c <_isatty_r+0x1c>)
 8001f34:	2300      	movs	r3, #0
 8001f36:	4604      	mov	r4, r0
 8001f38:	4608      	mov	r0, r1
 8001f3a:	602b      	str	r3, [r5, #0]
 8001f3c:	f7fe fa4d 	bl	80003da <_isatty>
 8001f40:	1c43      	adds	r3, r0, #1
 8001f42:	d102      	bne.n	8001f4a <_isatty_r+0x1a>
 8001f44:	682b      	ldr	r3, [r5, #0]
 8001f46:	b103      	cbz	r3, 8001f4a <_isatty_r+0x1a>
 8001f48:	6023      	str	r3, [r4, #0]
 8001f4a:	bd38      	pop	{r3, r4, r5, pc}
 8001f4c:	200000f0 	.word	0x200000f0

08001f50 <_init>:
 8001f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f52:	bf00      	nop
 8001f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f56:	bc08      	pop	{r3}
 8001f58:	469e      	mov	lr, r3
 8001f5a:	4770      	bx	lr

08001f5c <_fini>:
 8001f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5e:	bf00      	nop
 8001f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f62:	bc08      	pop	{r3}
 8001f64:	469e      	mov	lr, r3
 8001f66:	4770      	bx	lr
