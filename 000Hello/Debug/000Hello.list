
000Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000257c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800272c  0800272c  0001272c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c4  080028c4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080028c4  080028c4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028c4  080028c4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c4  080028c4  000128c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028c8  080028c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080028cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000078  08002944  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002944  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059fd  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001133  00000000  00000000  00025a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000460  00000000  00000000  00026bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c8  00000000  00000000  00027038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ffb  00000000  00000000  00027400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000496a  00000000  00000000  0002b3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000d53e  00000000  00000000  0002fd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0003d2a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018c8  00000000  00000000  0003d2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002714 	.word	0x08002714

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08002714 	.word	0x08002714

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <get_day_of_week>:
//
//}


char* get_day_of_week(uint8_t i)
{
 8000290:	b4b0      	push	{r4, r5, r7}
 8000292:	b08b      	sub	sp, #44	; 0x2c
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
	char* days[] = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <get_day_of_week+0x38>)
 800029c:	f107 040c 	add.w	r4, r7, #12
 80002a0:	461d      	mov	r5, r3
 80002a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	3b01      	subs	r3, #1
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80002b8:	4413      	add	r3, r2
 80002ba:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80002be:	4618      	mov	r0, r3
 80002c0:	372c      	adds	r7, #44	; 0x2c
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bcb0      	pop	{r4, r5, r7}
 80002c6:	4770      	bx	lr
 80002c8:	08002770 	.word	0x08002770

080002cc <number_to_string>:


void number_to_string(uint8_t num , char* buf)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	6039      	str	r1, [r7, #0]
 80002d6:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	2b09      	cmp	r3, #9
 80002dc:	d809      	bhi.n	80002f2 <number_to_string+0x26>
		buf[0] = '0';
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	2230      	movs	r2, #48	; 0x30
 80002e2:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	3301      	adds	r3, #1
 80002e8:	79fa      	ldrb	r2, [r7, #7]
 80002ea:	3230      	adds	r2, #48	; 0x30
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 80002f0:	e01f      	b.n	8000332 <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	2b09      	cmp	r3, #9
 80002f6:	d91c      	bls.n	8000332 <number_to_string+0x66>
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	2b62      	cmp	r3, #98	; 0x62
 80002fc:	d819      	bhi.n	8000332 <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	4a0e      	ldr	r2, [pc, #56]	; (800033c <number_to_string+0x70>)
 8000302:	fba2 2303 	umull	r2, r3, r2, r3
 8000306:	08db      	lsrs	r3, r3, #3
 8000308:	b2db      	uxtb	r3, r3
 800030a:	3330      	adds	r3, #48	; 0x30
 800030c:	b2da      	uxtb	r2, r3
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 8000312:	79fa      	ldrb	r2, [r7, #7]
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <number_to_string+0x70>)
 8000316:	fba3 1302 	umull	r1, r3, r3, r2
 800031a:	08d9      	lsrs	r1, r3, #3
 800031c:	460b      	mov	r3, r1
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	440b      	add	r3, r1
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	1ad3      	subs	r3, r2, r3
 8000326:	b2da      	uxtb	r2, r3
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	3301      	adds	r3, #1
 800032c:	3230      	adds	r2, #48	; 0x30
 800032e:	b2d2      	uxtb	r2, r2
 8000330:	701a      	strb	r2, [r3, #0]
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	cccccccd 	.word	0xcccccccd

08000340 <time_to_string>:



//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= ':';
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <time_to_string+0x48>)
 800034a:	223a      	movs	r2, #58	; 0x3a
 800034c:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <time_to_string+0x48>)
 8000350:	223a      	movs	r2, #58	; 0x3a
 8000352:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	789b      	ldrb	r3, [r3, #2]
 8000358:	490b      	ldr	r1, [pc, #44]	; (8000388 <time_to_string+0x48>)
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ffb6 	bl	80002cc <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	785b      	ldrb	r3, [r3, #1]
 8000364:	4909      	ldr	r1, [pc, #36]	; (800038c <time_to_string+0x4c>)
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ffb0 	bl	80002cc <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	4907      	ldr	r1, [pc, #28]	; (8000390 <time_to_string+0x50>)
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ffaa 	bl	80002cc <number_to_string>

	buf[8] = '\0';
 8000378:	4b03      	ldr	r3, [pc, #12]	; (8000388 <time_to_string+0x48>)
 800037a:	2200      	movs	r2, #0
 800037c:	721a      	strb	r2, [r3, #8]

	return buf;
 800037e:	4b02      	ldr	r3, [pc, #8]	; (8000388 <time_to_string+0x48>)

}
 8000380:	4618      	mov	r0, r3
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000094 	.word	0x20000094
 800038c:	20000097 	.word	0x20000097
 8000390:	2000009a 	.word	0x2000009a

08000394 <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <date_to_string+0x48>)
 800039e:	222f      	movs	r2, #47	; 0x2f
 80003a0:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <date_to_string+0x48>)
 80003a4:	222f      	movs	r2, #47	; 0x2f
 80003a6:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	490b      	ldr	r1, [pc, #44]	; (80003dc <date_to_string+0x48>)
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ff8c 	bl	80002cc <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	785b      	ldrb	r3, [r3, #1]
 80003b8:	4909      	ldr	r1, [pc, #36]	; (80003e0 <date_to_string+0x4c>)
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff86 	bl	80002cc <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	789b      	ldrb	r3, [r3, #2]
 80003c4:	4907      	ldr	r1, [pc, #28]	; (80003e4 <date_to_string+0x50>)
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff80 	bl	80002cc <number_to_string>

	buf[8]= '\0';
 80003cc:	4b03      	ldr	r3, [pc, #12]	; (80003dc <date_to_string+0x48>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	721a      	strb	r2, [r3, #8]

	return buf;
 80003d2:	4b02      	ldr	r3, [pc, #8]	; (80003dc <date_to_string+0x48>)

}
 80003d4:	4618      	mov	r0, r3
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	200000a0 	.word	0x200000a0
 80003e0:	200000a3 	.word	0x200000a3
 80003e4:	200000a6 	.word	0x200000a6

080003e8 <main>:
{
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
}

int main(void)
{
 80003e8:	b590      	push	{r4, r7, lr}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;



	if(ds1307_init()){
 80003ee:	f000 f9df 	bl	80007b0 <ds1307_init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d003      	beq.n	8000400 <main+0x18>
		printf("RTC init has failed\n");
 80003f8:	482a      	ldr	r0, [pc, #168]	; (80004a4 <main+0xbc>)
 80003fa:	f001 fa49 	bl	8001890 <puts>
		while(1);
 80003fe:	e7fe      	b.n	80003fe <main+0x16>
	}

	//init_systick_timer(1);

	current_date.day = FRIDAY;
 8000400:	2306      	movs	r3, #6
 8000402:	71fb      	strb	r3, [r7, #7]
	current_date.date = 15;
 8000404:	230f      	movs	r3, #15
 8000406:	713b      	strb	r3, [r7, #4]
	current_date.month = 1;
 8000408:	2301      	movs	r3, #1
 800040a:	717b      	strb	r3, [r7, #5]
	current_date.year = 21;
 800040c:	2315      	movs	r3, #21
 800040e:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 11;
 8000410:	230b      	movs	r3, #11
 8000412:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 59;
 8000414:	233b      	movs	r3, #59	; 0x3b
 8000416:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 30;
 8000418:	231e      	movs	r3, #30
 800041a:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 800041c:	2301      	movs	r3, #1
 800041e:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fa2b 	bl	800087e <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 8000428:	f107 0308 	add.w	r3, r7, #8
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f9dd 	bl	80007ec <ds1307_set_current_time>

	ds1307_get_current_time(&current_time);
 8000432:	f107 0308 	add.w	r3, r7, #8
 8000436:	4618      	mov	r0, r3
 8000438:	f000 fa51 	bl	80008de <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	4618      	mov	r0, r3
 8000440:	f000 fa96 	bl	8000970 <ds1307_get_current_date>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS)
 8000444:	7afb      	ldrb	r3, [r7, #11]
 8000446:	2b02      	cmp	r3, #2
 8000448:	d012      	beq.n	8000470 <main+0x88>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 800044a:	7afb      	ldrb	r3, [r7, #11]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <main+0x6c>
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <main+0xc0>)
 8000452:	e000      	b.n	8000456 <main+0x6e>
 8000454:	4b15      	ldr	r3, [pc, #84]	; (80004ac <main+0xc4>)
 8000456:	60fb      	str	r3, [r7, #12]
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
 8000458:	f107 0308 	add.w	r3, r7, #8
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff6f 	bl	8000340 <time_to_string>
 8000462:	4603      	mov	r3, r0
 8000464:	68fa      	ldr	r2, [r7, #12]
 8000466:	4619      	mov	r1, r3
 8000468:	4811      	ldr	r0, [pc, #68]	; (80004b0 <main+0xc8>)
 800046a:	f001 f98b 	bl	8001784 <iprintf>
 800046e:	e009      	b.n	8000484 <main+0x9c>
	}
	else
	{
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
 8000470:	f107 0308 	add.w	r3, r7, #8
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff ff63 	bl	8000340 <time_to_string>
 800047a:	4603      	mov	r3, r0
 800047c:	4619      	mov	r1, r3
 800047e:	480d      	ldr	r0, [pc, #52]	; (80004b4 <main+0xcc>)
 8000480:	f001 f980 	bl	8001784 <iprintf>
	}

	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ff84 	bl	8000394 <date_to_string>
 800048c:	4604      	mov	r4, r0
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fefd 	bl	8000290 <get_day_of_week>
 8000496:	4603      	mov	r3, r0
 8000498:	461a      	mov	r2, r3
 800049a:	4621      	mov	r1, r4
 800049c:	4806      	ldr	r0, [pc, #24]	; (80004b8 <main+0xd0>)
 800049e:	f001 f971 	bl	8001784 <iprintf>

	while(1);
 80004a2:	e7fe      	b.n	80004a2 <main+0xba>
 80004a4:	0800278c 	.word	0x0800278c
 80004a8:	080027a0 	.word	0x080027a0
 80004ac:	080027a4 	.word	0x080027a4
 80004b0:	080027a8 	.word	0x080027a8
 80004b4:	080027c0 	.word	0x080027c0
 80004b8:	080027d4 	.word	0x080027d4

080004bc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <ITM_SendChar+0x44>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <ITM_SendChar+0x44>)
 80004cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004d0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <ITM_SendChar+0x48>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <ITM_SendChar+0x48>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004de:	bf00      	nop
 80004e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f8      	beq.n	80004e0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	6013      	str	r3, [r2, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	e000edfc 	.word	0xe000edfc
 8000504:	e0000e00 	.word	0xe0000e00

08000508 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e00a      	b.n	8000530 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800051a:	f3af 8000 	nop.w
 800051e:	4601      	mov	r1, r0
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1c5a      	adds	r2, r3, #1
 8000524:	60ba      	str	r2, [r7, #8]
 8000526:	b2ca      	uxtb	r2, r1
 8000528:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	3301      	adds	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dbf0      	blt.n	800051a <_read+0x12>
	}

return len;
 8000538:	687b      	ldr	r3, [r7, #4]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	e009      	b.n	8000568 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	60ba      	str	r2, [r7, #8]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ffad 	bl	80004bc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbf1      	blt.n	8000554 <_write+0x12>
	}
	return len;
 8000570:	687b      	ldr	r3, [r7, #4]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_close>:

int _close(int file)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
	return -1;
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005a0:	605a      	str	r2, [r3, #4]
	return 0;
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <_isatty>:

int _isatty(int file)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
	return 1;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b085      	sub	sp, #20
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
	return 0;
 80005ce:	2300      	movs	r3, #0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
	...

080005dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <_sbrk+0x5c>)
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <_sbrk+0x60>)
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <_sbrk+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d102      	bne.n	80005fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <_sbrk+0x64>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <_sbrk+0x68>)
 80005fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	429a      	cmp	r2, r3
 800060a:	d207      	bcs.n	800061c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800060c:	f001 f888 	bl	8001720 <__errno>
 8000610:	4603      	mov	r3, r0
 8000612:	220c      	movs	r2, #12
 8000614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e009      	b.n	8000630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <_sbrk+0x64>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	4a05      	ldr	r2, [pc, #20]	; (8000640 <_sbrk+0x64>)
 800062c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800062e:	68fb      	ldr	r3, [r7, #12]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20020000 	.word	0x20020000
 800063c:	00000400 	.word	0x00000400
 8000640:	200000ac 	.word	0x200000ac
 8000644:	200000f0 	.word	0x200000f0

08000648 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
    ldr   r0, =_estack
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800064c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <LoopForever+0x6>)
  ldr r1, =_edata
 8000652:	490d      	ldr	r1, [pc, #52]	; (8000688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000654:	4a0d      	ldr	r2, [pc, #52]	; (800068c <LoopForever+0xe>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000668:	4c0a      	ldr	r4, [pc, #40]	; (8000694 <LoopForever+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000676:	f001 f859 	bl	800172c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067a:	f7ff feb5 	bl	80003e8 <main>

0800067e <LoopForever>:

LoopForever:
    b LoopForever
 800067e:	e7fe      	b.n	800067e <LoopForever>
    ldr   r0, =_estack
 8000680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800068c:	080028cc 	.word	0x080028cc
  ldr r2, =_sbss
 8000690:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000694:	200000f0 	.word	0x200000f0

08000698 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC_IRQHandler>

0800069a <ADE_ReadData>:

}


uint32_t ADE_ReadData( SPI_RegDef_t *pSPIx, uint8_t addr, uint32_t bytes_to_read)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b088      	sub	sp, #32
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	460b      	mov	r3, r1
 80006a4:	607a      	str	r2, [r7, #4]
 80006a6:	72fb      	strb	r3, [r7, #11]
	uint32_t data = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]
	uint8_t dummy_write = 0xff;
 80006ac:	23ff      	movs	r3, #255	; 0xff
 80006ae:	75fb      	strb	r3, [r7, #23]
//	uint8_t dummy_write2 = 0x00;
	SPI_PeripheralControl(pSPIx, ENABLE); //SS pin pull to low
 80006b0:	2101      	movs	r1, #1
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f001 f818 	bl	80016e8 <SPI_PeripheralControl>
	SPI_Transfer(pSPIx, addr);
 80006b8:	7afb      	ldrb	r3, [r7, #11]
 80006ba:	4619      	mov	r1, r3
 80006bc:	68f8      	ldr	r0, [r7, #12]
 80006be:	f000 ffe8 	bl	8001692 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_read; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
 80006c6:	e00f      	b.n	80006e8 <ADE_ReadData+0x4e>
	{
		data <<= 8;
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	021b      	lsls	r3, r3, #8
 80006cc:	61fb      	str	r3, [r7, #28]
		data |= SPI_Transfer(pSPIx, dummy_write);
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	4619      	mov	r1, r3
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	f000 ffdd 	bl	8001692 <SPI_Transfer>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	4313      	orrs	r3, r2
 80006e0:	61fb      	str	r3, [r7, #28]
	for(uint32_t i = 0; i < bytes_to_read; i++)
 80006e2:	69bb      	ldr	r3, [r7, #24]
 80006e4:	3301      	adds	r3, #1
 80006e6:	61bb      	str	r3, [r7, #24]
 80006e8:	69ba      	ldr	r2, [r7, #24]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d3eb      	bcc.n	80006c8 <ADE_ReadData+0x2e>
		//printf("%x\n", data);
	}

//	SPI_Transfer(pSPIx, dummy_write2);

	SPI_PeripheralControl(pSPIx, DISABLE); //SS pin pull to high
 80006f0:	2100      	movs	r1, #0
 80006f2:	68f8      	ldr	r0, [r7, #12]
 80006f4:	f000 fff8 	bl	80016e8 <SPI_PeripheralControl>
	return data;
 80006f8:	69fb      	ldr	r3, [r7, #28]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3720      	adds	r7, #32
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <EXTI15_10_IRQHandler>:

	SPI_PeripheralControl(pSPIx, DISABLE);; //SS pin pull to high
}

void EXTI15_10_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

    uint32_t pending = EXTI->PR;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <EXTI15_10_IRQHandler+0x40>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	607b      	str	r3, [r7, #4]
//		if(GPIO_ReadFromInputPin(PORT_SAG, PIN_SAG) ==  0)
//		{
//			GPIO_WriteToOutputPin(PORT_SAG_LED, PIN_SAG_LED, 1);
//		}
//    }
    if(pending & (1 << PIN_ZX_IT))
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d00f      	beq.n	800073a <EXTI15_10_IRQHandler+0x36>
    {
        EXTI->PR |= 1 << PIN_ZX_IT; // clear pending flag, otherwise we'd get endless interrupts
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <EXTI15_10_IRQHandler+0x40>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a09      	ldr	r2, [pc, #36]	; (8000744 <EXTI15_10_IRQHandler+0x40>)
 8000720:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000724:	6153      	str	r3, [r2, #20]
        // handle pin ZX here
    	printf("VRMS : %x \n", ADE_ReadData(SPI2, VRMS, 3));
 8000726:	2203      	movs	r2, #3
 8000728:	2117      	movs	r1, #23
 800072a:	4807      	ldr	r0, [pc, #28]	; (8000748 <EXTI15_10_IRQHandler+0x44>)
 800072c:	f7ff ffb5 	bl	800069a <ADE_ReadData>
 8000730:	4603      	mov	r3, r0
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <EXTI15_10_IRQHandler+0x48>)
 8000736:	f001 f825 	bl	8001784 <iprintf>
    }

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40013c00 	.word	0x40013c00
 8000748:	40003800 	.word	0x40003800
 800074c:	0800280c 	.word	0x0800280c

08000750 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

    uint32_t pending = EXTI->PR;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <EXTI9_5_IRQHandler+0x54>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	603b      	str	r3, [r7, #0]
    if(pending & (1 << PIN_IRQ_IT))
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000762:	2b00      	cmp	r3, #0
 8000764:	d01a      	beq.n	800079c <EXTI9_5_IRQHandler+0x4c>
    {
        EXTI->PR |= 1 << PIN_IRQ_IT; // clear pending flag, otherwise we'd get endless interrupts
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <EXTI9_5_IRQHandler+0x54>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <EXTI9_5_IRQHandler+0x54>)
 800076c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000770:	6153      	str	r3, [r2, #20]
        // handle pin ZX here
        for(int i = 0; i < 5000; i++);
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	e002      	b.n	800077e <EXTI9_5_IRQHandler+0x2e>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3301      	adds	r3, #1
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f241 3287 	movw	r2, #4999	; 0x1387
 8000784:	4293      	cmp	r3, r2
 8000786:	ddf7      	ble.n	8000778 <EXTI9_5_IRQHandler+0x28>
        printf("RSTSTATUS : %x \n", ADE_ReadData(SPI2, RSTSTATUS, 2));
 8000788:	2202      	movs	r2, #2
 800078a:	210c      	movs	r1, #12
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <EXTI9_5_IRQHandler+0x58>)
 800078e:	f7ff ff84 	bl	800069a <ADE_ReadData>
 8000792:	4603      	mov	r3, r0
 8000794:	4619      	mov	r1, r3
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <EXTI9_5_IRQHandler+0x5c>)
 8000798:	f000 fff4 	bl	8001784 <iprintf>



    }

}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40013c00 	.word	0x40013c00
 80007a8:	40003800 	.word	0x40003800
 80007ac:	08002818 	.word	0x08002818

080007b0 <ds1307_init>:
I2C_Handle_t g_ds1307I2cHandle;

//returns 1 : CH = 1 ; init failed
//returns 0 : CH = 0 ; init success
uint8_t ds1307_init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

	//1. init the i2c pins
	ds1307_i2c_pin_config();
 80007b6:	f000 f90f 	bl	80009d8 <ds1307_i2c_pin_config>

	//2. initialize the i2c peripheral
	ds1307_i2c_config();
 80007ba:	f000 f94b 	bl	8000a54 <ds1307_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 80007be:	2101      	movs	r1, #1
 80007c0:	4809      	ldr	r0, [pc, #36]	; (80007e8 <ds1307_init+0x38>)
 80007c2:	f000 fce0 	bl	8001186 <I2C_PeripheralControl>

	//4. Make clock halt = 0;
	ds1307_write(0x00,DS1307_ADDR_SEC);
 80007c6:	2100      	movs	r1, #0
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 f959 	bl	8000a80 <ds1307_write>

	//5. Read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 f972 	bl	8000ab8 <ds1307_read>
 80007d4:	4603      	mov	r3, r0
 80007d6:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7 ) & 0x1);
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	09db      	lsrs	r3, r3, #7
 80007dc:	b2db      	uxtb	r3, r3

}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40005c00 	.word	0x40005c00

080007ec <ds1307_set_current_time>:


void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f97b 	bl	8000af4 <binary_to_bcd>
 80007fe:	4603      	mov	r3, r0
 8000800:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000808:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f936 	bl	8000a80 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	785b      	ldrb	r3, [r3, #1]
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f96b 	bl	8000af4 <binary_to_bcd>
 800081e:	4603      	mov	r3, r0
 8000820:	2101      	movs	r1, #1
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f92c 	bl	8000a80 <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	789b      	ldrb	r3, [r3, #2]
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f961 	bl	8000af4 <binary_to_bcd>
 8000832:	4603      	mov	r3, r0
 8000834:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	78db      	ldrb	r3, [r3, #3]
 800083a:	2b02      	cmp	r3, #2
 800083c:	d104      	bne.n	8000848 <ds1307_set_current_time+0x5c>
		hrs &= ~(1 << 6);
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000844:	73fb      	strb	r3, [r7, #15]
 8000846:	e011      	b.n	800086c <ds1307_set_current_time+0x80>
	}else{
		hrs |= (1 << 6);
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084e:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format  == TIME_FORMAT_12HRS_PM) ? hrs | ( 1 << 5) :  hrs & ~( 1 << 5) ;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	78db      	ldrb	r3, [r3, #3]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d104      	bne.n	8000862 <ds1307_set_current_time+0x76>
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	f043 0320 	orr.w	r3, r3, #32
 800085e:	b2db      	uxtb	r3, r3
 8000860:	e003      	b.n	800086a <ds1307_set_current_time+0x7e>
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	f023 0320 	bic.w	r3, r3, #32
 8000868:	b2db      	uxtb	r3, r3
 800086a:	73fb      	strb	r3, [r7, #15]
	}

	ds1307_write(hrs,DS1307_ADDR_HRS);
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	2102      	movs	r1, #2
 8000870:	4618      	mov	r0, r3
 8000872:	f000 f905 	bl	8000a80 <ds1307_write>

}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date),DS1307_ADDR_DATE);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f000 f932 	bl	8000af4 <binary_to_bcd>
 8000890:	4603      	mov	r3, r0
 8000892:	2104      	movs	r1, #4
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f8f3 	bl	8000a80 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->month),DS1307_ADDR_MONTH);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	785b      	ldrb	r3, [r3, #1]
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f928 	bl	8000af4 <binary_to_bcd>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2105      	movs	r1, #5
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f8e9 	bl	8000a80 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->year),DS1307_ADDR_YEAR);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	789b      	ldrb	r3, [r3, #2]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f91e 	bl	8000af4 <binary_to_bcd>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2106      	movs	r1, #6
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f8df 	bl	8000a80 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->day),DS1307_ADDR_DAY);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	78db      	ldrb	r3, [r3, #3]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f914 	bl	8000af4 <binary_to_bcd>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2103      	movs	r1, #3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 f8d5 	bl	8000a80 <ds1307_write>

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b084      	sub	sp, #16
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]

	uint8_t seconds,hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 f8e6 	bl	8000ab8 <ds1307_read>
 80008ec:	4603      	mov	r3, r0
 80008ee:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 80008f0:	7bbb      	ldrb	r3, [r7, #14]
 80008f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f6:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 80008f8:	7bbb      	ldrb	r3, [r7, #14]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f926 	bl	8000b4c <bcd_to_binary>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000908:	2001      	movs	r0, #1
 800090a:	f000 f8d5 	bl	8000ab8 <ds1307_read>
 800090e:	4603      	mov	r3, r0
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f91b 	bl	8000b4c <bcd_to_binary>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 800091e:	2002      	movs	r0, #2
 8000920:	f000 f8ca 	bl	8000ab8 <ds1307_read>
 8000924:	4603      	mov	r3, r0
 8000926:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)){
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092e:	2b00      	cmp	r3, #0
 8000930:	d00f      	beq.n	8000952 <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	f003 0320 	and.w	r3, r3, #32
 8000938:	2b00      	cmp	r3, #0
 800093a:	bf14      	ite	ne
 800093c:	2301      	movne	r3, #1
 800093e:	2300      	moveq	r3, #0
 8000940:	b2db      	uxtb	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	e002      	b.n	8000958 <ds1307_get_current_time+0x7a>
	}else{
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2202      	movs	r2, #2
 8000956:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f8f6 	bl	8000b4c <bcd_to_binary>
 8000960:	4603      	mov	r3, r0
 8000962:	461a      	mov	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	709a      	strb	r2, [r3, #2]
}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	rtc_date->day =  bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f89d 	bl	8000ab8 <ds1307_read>
 800097e:	4603      	mov	r3, r0
 8000980:	4618      	mov	r0, r3
 8000982:	f000 f8e3 	bl	8000b4c <bcd_to_binary>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 800098e:	2004      	movs	r0, #4
 8000990:	f000 f892 	bl	8000ab8 <ds1307_read>
 8000994:	4603      	mov	r3, r0
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f8d8 	bl	8000b4c <bcd_to_binary>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 80009a4:	2005      	movs	r0, #5
 80009a6:	f000 f887 	bl	8000ab8 <ds1307_read>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f8cd 	bl	8000b4c <bcd_to_binary>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 80009ba:	2006      	movs	r0, #6
 80009bc:	f000 f87c 	bl	8000ab8 <ds1307_read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f8c2 	bl	8000b4c <bcd_to_binary>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	709a      	strb	r2, [r3, #2]

}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda,i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	220c      	movs	r2, #12
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fec4 	bl	8001774 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 80009ec:	463b      	mov	r3, r7
 80009ee:	220c      	movs	r2, #12
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 febe 	bl	8001774 <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT_SDA;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <ds1307_i2c_pin_config+0x74>)
 80009fa:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80009fc:	2304      	movs	r3, #4
 80009fe:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 8000a00:	2302      	movs	r3, #2
 8000a02:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000a04:	2309      	movs	r3, #9
 8000a06:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_OD;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a10:	2302      	movs	r3, #2
 8000a12:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f999 	bl	8000d50 <GPIO_Init>


	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT_SCL;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <ds1307_i2c_pin_config+0x78>)
 8000a20:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000a22:	2304      	movs	r3, #4
 8000a24:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 8000a26:	2302      	movs	r3, #2
 8000a28:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_OD;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000a32:	2301      	movs	r3, #1
 8000a34:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a36:	2302      	movs	r3, #2
 8000a38:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 f987 	bl	8000d50 <GPIO_Init>

}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40020800 	.word	0x40020800
 8000a50:	40020000 	.word	0x40020000

08000a54 <ds1307_i2c_config>:


static void ds1307_i2c_config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <ds1307_i2c_config+0x20>)
 8000a5a:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <ds1307_i2c_config+0x24>)
 8000a5c:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <ds1307_i2c_config+0x20>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <ds1307_i2c_config+0x20>)
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <ds1307_i2c_config+0x28>)
 8000a68:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 8000a6a:	4802      	ldr	r0, [pc, #8]	; (8000a74 <ds1307_i2c_config+0x20>)
 8000a6c:	f000 fbdc 	bl	8001228 <I2C_Init>
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200000b8 	.word	0x200000b8
 8000a78:	40005c00 	.word	0x40005c00
 8000a7c:	000186a0 	.word	0x000186a0

08000a80 <ds1307_write>:


static void ds1307_write(uint8_t value,uint8_t reg_addr)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	4603      	mov	r3, r0
 8000a88:	460a      	mov	r2, r1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 8000a90:	79bb      	ldrb	r3, [r7, #6]
 8000a92:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 8000a98:	f107 010c 	add.w	r1, r7, #12
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2368      	movs	r3, #104	; 0x68
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <ds1307_write+0x34>)
 8000aa6:	f000 fc84 	bl	80013b2 <I2C_MasterSendData>
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200000b8 	.word	0x200000b8

08000ab8 <ds1307_read>:



static uint8_t ds1307_read(uint8_t reg_addr)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 8000ac2:	1df9      	adds	r1, r7, #7
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2368      	movs	r3, #104	; 0x68
 8000aca:	2201      	movs	r2, #1
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <ds1307_read+0x38>)
 8000ace:	f000 fc70 	bl	80013b2 <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000ad2:	f107 010f 	add.w	r1, r7, #15
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	2368      	movs	r3, #104	; 0x68
 8000adc:	2201      	movs	r2, #1
 8000ade:	4804      	ldr	r0, [pc, #16]	; (8000af0 <ds1307_read+0x38>)
 8000ae0:	f000 fcca 	bl	8001478 <I2C_MasterReceiveData>

    return data;
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000b8 	.word	0x200000b8

08000af4 <binary_to_bcd>:



static uint8_t binary_to_bcd(uint8_t value)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b09      	cmp	r3, #9
 8000b06:	d918      	bls.n	8000b3a <binary_to_bcd+0x46>
	{
		m = value /10;
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <binary_to_bcd+0x54>)
 8000b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b10:	08db      	lsrs	r3, r3, #3
 8000b12:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000b14:	79fa      	ldrb	r2, [r7, #7]
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <binary_to_bcd+0x54>)
 8000b18:	fba3 1302 	umull	r1, r3, r3, r2
 8000b1c:	08d9      	lsrs	r1, r3, #3
 8000b1e:	460b      	mov	r3, r1
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	440b      	add	r3, r1
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 8000b2a:	7bbb      	ldrb	r3, [r7, #14]
 8000b2c:	011b      	lsls	r3, r3, #4
 8000b2e:	b25a      	sxtb	r2, r3
 8000b30:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	cccccccd 	.word	0xcccccccd

08000b4c <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	091b      	lsrs	r3, r3, #4
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	4413      	add	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	f003 030f 	and.w	r3, r3, #15
 8000b6c:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 8000b6e:	7bfa      	ldrb	r2, [r7, #15]
 8000b70:	7bbb      	ldrb	r3, [r7, #14]
 8000b72:	4413      	add	r3, r2
 8000b74:	b2db      	uxtb	r3, r3
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t*pGPIOx, uint8_t EnorDi)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b8c:	78fb      	ldrb	r3, [r7, #3]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d162      	bne.n	8000c58 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a64      	ldr	r2, [pc, #400]	; (8000d28 <GPIO_PeriClockControl+0x1a8>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d106      	bne.n	8000ba8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000b9a:	4b64      	ldr	r3, [pc, #400]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a63      	ldr	r2, [pc, #396]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000ba6:	e0b9      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a61      	ldr	r2, [pc, #388]	; (8000d30 <GPIO_PeriClockControl+0x1b0>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d106      	bne.n	8000bbe <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000bb0:	4b5e      	ldr	r3, [pc, #376]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	4a5d      	ldr	r2, [pc, #372]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bbc:	e0ae      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a5c      	ldr	r2, [pc, #368]	; (8000d34 <GPIO_PeriClockControl+0x1b4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d106      	bne.n	8000bd4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000bc6:	4b59      	ldr	r3, [pc, #356]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a58      	ldr	r2, [pc, #352]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bd2:	e0a3      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a58      	ldr	r2, [pc, #352]	; (8000d38 <GPIO_PeriClockControl+0x1b8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d106      	bne.n	8000bea <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000bdc:	4b53      	ldr	r3, [pc, #332]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a52      	ldr	r2, [pc, #328]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000be2:	f043 0308 	orr.w	r3, r3, #8
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000be8:	e098      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a53      	ldr	r2, [pc, #332]	; (8000d3c <GPIO_PeriClockControl+0x1bc>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d106      	bne.n	8000c00 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000bf2:	4b4e      	ldr	r3, [pc, #312]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a4d      	ldr	r2, [pc, #308]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bfe:	e08d      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a4f      	ldr	r2, [pc, #316]	; (8000d40 <GPIO_PeriClockControl+0x1c0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d106      	bne.n	8000c16 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000c08:	4b48      	ldr	r3, [pc, #288]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	4a47      	ldr	r2, [pc, #284]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000c0e:	f043 0320 	orr.w	r3, r3, #32
 8000c12:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c14:	e082      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a4a      	ldr	r2, [pc, #296]	; (8000d44 <GPIO_PeriClockControl+0x1c4>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d106      	bne.n	8000c2c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000c1e:	4b43      	ldr	r3, [pc, #268]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a42      	ldr	r2, [pc, #264]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c2a:	e077      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a46      	ldr	r2, [pc, #280]	; (8000d48 <GPIO_PeriClockControl+0x1c8>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d106      	bne.n	8000c42 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000c34:	4b3d      	ldr	r3, [pc, #244]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	4a3c      	ldr	r2, [pc, #240]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c40:	e06c      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a41      	ldr	r2, [pc, #260]	; (8000d4c <GPIO_PeriClockControl+0x1cc>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d168      	bne.n	8000d1c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000c4a:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a37      	ldr	r2, [pc, #220]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c56:	e061      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a33      	ldr	r2, [pc, #204]	; (8000d28 <GPIO_PeriClockControl+0x1a8>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d106      	bne.n	8000c6e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000c60:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a31      	ldr	r2, [pc, #196]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000c66:	f023 0301 	bic.w	r3, r3, #1
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c6c:	e056      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a2f      	ldr	r2, [pc, #188]	; (8000d30 <GPIO_PeriClockControl+0x1b0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d106      	bne.n	8000c84 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000c76:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a2c      	ldr	r2, [pc, #176]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000c7c:	f023 0302 	bic.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c82:	e04b      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a2b      	ldr	r2, [pc, #172]	; (8000d34 <GPIO_PeriClockControl+0x1b4>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d106      	bne.n	8000c9a <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000c8c:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	4a26      	ldr	r2, [pc, #152]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000c92:	f023 0304 	bic.w	r3, r3, #4
 8000c96:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c98:	e040      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a26      	ldr	r2, [pc, #152]	; (8000d38 <GPIO_PeriClockControl+0x1b8>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d106      	bne.n	8000cb0 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000ca8:	f023 0308 	bic.w	r3, r3, #8
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cae:	e035      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a22      	ldr	r2, [pc, #136]	; (8000d3c <GPIO_PeriClockControl+0x1bc>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d106      	bne.n	8000cc6 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000cbe:	f023 0310 	bic.w	r3, r3, #16
 8000cc2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cc4:	e02a      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a1d      	ldr	r2, [pc, #116]	; (8000d40 <GPIO_PeriClockControl+0x1c0>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d106      	bne.n	8000cdc <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000cd4:	f023 0320 	bic.w	r3, r3, #32
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cda:	e01f      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <GPIO_PeriClockControl+0x1c4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d106      	bne.n	8000cf2 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cf0:	e014      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <GPIO_PeriClockControl+0x1c8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d106      	bne.n	8000d08 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d06:	e009      	b.n	8000d1c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <GPIO_PeriClockControl+0x1cc>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d105      	bne.n	8000d1c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <GPIO_PeriClockControl+0x1ac>)
 8000d16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d1a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020c00 	.word	0x40020c00
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40021400 	.word	0x40021400
 8000d44:	40021800 	.word	0x40021800
 8000d48:	40021c00 	.word	0x40021c00
 8000d4c:	40022000 	.word	0x40022000

08000d50 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2101      	movs	r1, #1
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff0c 	bl	8000b80 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	795b      	ldrb	r3, [r3, #5]
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d820      	bhi.n	8000db2 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	795b      	ldrb	r3, [r3, #5]
 8000d74:	461a      	mov	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	791b      	ldrb	r3, [r3, #4]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	791b      	ldrb	r3, [r3, #4]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2103      	movs	r1, #3
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4619      	mov	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6819      	ldr	r1, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	e0cb      	b.n	8000f4a <GPIO_Init+0x1fa>

	}else
	{
		// interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	795b      	ldrb	r3, [r3, #5]
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	d117      	bne.n	8000dea <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000dba:	4b4b      	ldr	r3, [pc, #300]	; (8000ee8 <GPIO_Init+0x198>)
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	7912      	ldrb	r2, [r2, #4]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	408a      	lsls	r2, r1
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4a47      	ldr	r2, [pc, #284]	; (8000ee8 <GPIO_Init+0x198>)
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000dd0:	4b45      	ldr	r3, [pc, #276]	; (8000ee8 <GPIO_Init+0x198>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	7912      	ldrb	r2, [r2, #4]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	2201      	movs	r2, #1
 8000ddc:	408a      	lsls	r2, r1
 8000dde:	43d2      	mvns	r2, r2
 8000de0:	4611      	mov	r1, r2
 8000de2:	4a41      	ldr	r2, [pc, #260]	; (8000ee8 <GPIO_Init+0x198>)
 8000de4:	400b      	ands	r3, r1
 8000de6:	6093      	str	r3, [r2, #8]
 8000de8:	e035      	b.n	8000e56 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	795b      	ldrb	r3, [r3, #5]
 8000dee:	2b05      	cmp	r3, #5
 8000df0:	d117      	bne.n	8000e22 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000df2:	4b3d      	ldr	r3, [pc, #244]	; (8000ee8 <GPIO_Init+0x198>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	7912      	ldrb	r2, [r2, #4]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	408a      	lsls	r2, r1
 8000e00:	4611      	mov	r1, r2
 8000e02:	4a39      	ldr	r2, [pc, #228]	; (8000ee8 <GPIO_Init+0x198>)
 8000e04:	430b      	orrs	r3, r1
 8000e06:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e08:	4b37      	ldr	r3, [pc, #220]	; (8000ee8 <GPIO_Init+0x198>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	7912      	ldrb	r2, [r2, #4]
 8000e10:	4611      	mov	r1, r2
 8000e12:	2201      	movs	r2, #1
 8000e14:	408a      	lsls	r2, r1
 8000e16:	43d2      	mvns	r2, r2
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4a33      	ldr	r2, [pc, #204]	; (8000ee8 <GPIO_Init+0x198>)
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	60d3      	str	r3, [r2, #12]
 8000e20:	e019      	b.n	8000e56 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	795b      	ldrb	r3, [r3, #5]
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d115      	bne.n	8000e56 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <GPIO_Init+0x198>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	7912      	ldrb	r2, [r2, #4]
 8000e32:	4611      	mov	r1, r2
 8000e34:	2201      	movs	r2, #1
 8000e36:	408a      	lsls	r2, r1
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4a2b      	ldr	r2, [pc, #172]	; (8000ee8 <GPIO_Init+0x198>)
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e40:	4b29      	ldr	r3, [pc, #164]	; (8000ee8 <GPIO_Init+0x198>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	7912      	ldrb	r2, [r2, #4]
 8000e48:	4611      	mov	r1, r2
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	408a      	lsls	r2, r1
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4a25      	ldr	r2, [pc, #148]	; (8000ee8 <GPIO_Init+0x198>)
 8000e52:	430b      	orrs	r3, r1
 8000e54:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	791b      	ldrb	r3, [r3, #4]
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	791b      	ldrb	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <GPIO_Init+0x19c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d04e      	beq.n	8000f10 <GPIO_Init+0x1c0>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a1e      	ldr	r2, [pc, #120]	; (8000ef0 <GPIO_Init+0x1a0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d032      	beq.n	8000ee2 <GPIO_Init+0x192>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <GPIO_Init+0x1a4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d02b      	beq.n	8000ede <GPIO_Init+0x18e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <GPIO_Init+0x1a8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d024      	beq.n	8000eda <GPIO_Init+0x18a>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a19      	ldr	r2, [pc, #100]	; (8000efc <GPIO_Init+0x1ac>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d01d      	beq.n	8000ed6 <GPIO_Init+0x186>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <GPIO_Init+0x1b0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d016      	beq.n	8000ed2 <GPIO_Init+0x182>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <GPIO_Init+0x1b4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00f      	beq.n	8000ece <GPIO_Init+0x17e>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <GPIO_Init+0x1b8>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d008      	beq.n	8000eca <GPIO_Init+0x17a>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <GPIO_Init+0x1bc>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d101      	bne.n	8000ec6 <GPIO_Init+0x176>
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	e025      	b.n	8000f12 <GPIO_Init+0x1c2>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e023      	b.n	8000f12 <GPIO_Init+0x1c2>
 8000eca:	2307      	movs	r3, #7
 8000ecc:	e021      	b.n	8000f12 <GPIO_Init+0x1c2>
 8000ece:	2306      	movs	r3, #6
 8000ed0:	e01f      	b.n	8000f12 <GPIO_Init+0x1c2>
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	e01d      	b.n	8000f12 <GPIO_Init+0x1c2>
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	e01b      	b.n	8000f12 <GPIO_Init+0x1c2>
 8000eda:	2303      	movs	r3, #3
 8000edc:	e019      	b.n	8000f12 <GPIO_Init+0x1c2>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e017      	b.n	8000f12 <GPIO_Init+0x1c2>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e015      	b.n	8000f12 <GPIO_Init+0x1c2>
 8000ee6:	bf00      	nop
 8000ee8:	40013c00 	.word	0x40013c00
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	40020c00 	.word	0x40020c00
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40021400 	.word	0x40021400
 8000f04:	40021800 	.word	0x40021800
 8000f08:	40021c00 	.word	0x40021c00
 8000f0c:	40022000 	.word	0x40022000
 8000f10:	2300      	movs	r3, #0
 8000f12:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000f14:	4b59      	ldr	r3, [pc, #356]	; (800107c <GPIO_Init+0x32c>)
 8000f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f18:	4a58      	ldr	r2, [pc, #352]	; (800107c <GPIO_Init+0x32c>)
 8000f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000f20:	7c7a      	ldrb	r2, [r7, #17]
 8000f22:	7cbb      	ldrb	r3, [r7, #18]
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	fa02 f103 	lsl.w	r1, r2, r3
 8000f2a:	4a55      	ldr	r2, [pc, #340]	; (8001080 <GPIO_Init+0x330>)
 8000f2c:	7cfb      	ldrb	r3, [r7, #19]
 8000f2e:	3302      	adds	r3, #2
 8000f30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000f34:	4b53      	ldr	r3, [pc, #332]	; (8001084 <GPIO_Init+0x334>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	7912      	ldrb	r2, [r2, #4]
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	2201      	movs	r2, #1
 8000f40:	408a      	lsls	r2, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	4a4f      	ldr	r2, [pc, #316]	; (8001084 <GPIO_Init+0x334>)
 8000f46:	430b      	orrs	r3, r1
 8000f48:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	799b      	ldrb	r3, [r3, #6]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	791b      	ldrb	r3, [r3, #4]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	791b      	ldrb	r3, [r3, #4]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2103      	movs	r1, #3
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	4619      	mov	r1, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	400a      	ands	r2, r1
 8000f78:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6899      	ldr	r1, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	79db      	ldrb	r3, [r3, #7]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	791b      	ldrb	r3, [r3, #4]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2103      	movs	r1, #3
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68d9      	ldr	r1, [r3, #12]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinoType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7a1b      	ldrb	r3, [r3, #8]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	791b      	ldrb	r3, [r3, #4]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	791b      	ldrb	r3, [r3, #4]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	408b      	lsls	r3, r1
 8000fea:	43db      	mvns	r3, r3
 8000fec:	4619      	mov	r1, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	400a      	ands	r2, r1
 8000ff4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6859      	ldr	r1, [r3, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	430a      	orrs	r2, r1
 8001004:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	795b      	ldrb	r3, [r3, #5]
 800100a:	2b02      	cmp	r3, #2
 800100c:	d131      	bne.n	8001072 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	791b      	ldrb	r3, [r3, #4]
 8001012:	08db      	lsrs	r3, r3, #3
 8001014:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	791b      	ldrb	r3, [r3, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	7c3a      	ldrb	r2, [r7, #16]
 8001026:	3208      	adds	r2, #8
 8001028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	4618      	mov	r0, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	7c3a      	ldrb	r2, [r7, #16]
 8001040:	4001      	ands	r1, r0
 8001042:	3208      	adds	r2, #8
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	7c3a      	ldrb	r2, [r7, #16]
 800104e:	3208      	adds	r2, #8
 8001050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7a5b      	ldrb	r3, [r3, #9]
 8001058:	461a      	mov	r2, r3
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	7c3a      	ldrb	r2, [r7, #16]
 800106a:	4301      	orrs	r1, r0
 800106c:	3208      	adds	r2, #8
 800106e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40013800 	.word	0x40013800
 8001084:	40013c00 	.word	0x40013c00

08001088 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	601a      	str	r2, [r3, #0]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80010b2:	78fb      	ldrb	r3, [r7, #3]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	f023 0301 	bic.w	r3, r3, #1
 80010be:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80010c0:	78fa      	ldrb	r2, [r7, #3]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	611a      	str	r2, [r3, #16]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80010ea:	78fa      	ldrb	r2, [r7, #3]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	611a      	str	r2, [r3, #16]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr

080010fa <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b00      	cmp	r3, #0
 800110e:	d01f      	beq.n	8001150 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7f1b      	ldrb	r3, [r3, #28]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d112      	bne.n	800113e <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d11f      	bne.n	8001160 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fa38 	bl	800159c <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 800113c:	e010      	b.n	8001160 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	60fb      	str	r3, [r7, #12]
}
 800114e:	e007      	b.n	8001160 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	60fb      	str	r3, [r7, #12]
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	601a      	str	r2, [r3, #0]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr

08001186 <I2C_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	460b      	mov	r3, r1
 8001190:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d106      	bne.n	80011a6 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f043 0201 	orr.w	r2, r3, #1
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 80011a4:	e005      	b.n	80011b2 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 0201 	bic.w	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	601a      	str	r2, [r3, #0]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <I2C_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d11f      	bne.n	800120e <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a11      	ldr	r2, [pc, #68]	; (8001218 <I2C_PeriClockControl+0x5c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d106      	bne.n	80011e4 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <I2C_PeriClockControl+0x60>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a10      	ldr	r2, [pc, #64]	; (800121c <I2C_PeriClockControl+0x60>)
 80011dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
	else
	{
		//TODO
	}

}
 80011e2:	e014      	b.n	800120e <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <I2C_PeriClockControl+0x64>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d106      	bne.n	80011fa <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <I2C_PeriClockControl+0x60>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <I2C_PeriClockControl+0x60>)
 80011f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011f8:	e009      	b.n	800120e <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a09      	ldr	r2, [pc, #36]	; (8001224 <I2C_PeriClockControl+0x68>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d105      	bne.n	800120e <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <I2C_PeriClockControl+0x60>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <I2C_PeriClockControl+0x60>)
 8001208:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	40005400 	.word	0x40005400
 800121c:	40023800 	.word	0x40023800
 8001220:	40005800 	.word	0x40005800
 8001224:	40005c00 	.word	0x40005c00

08001228 <I2C_Init>:
 * @return            -
 *
 * @Note              -
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2101      	movs	r1, #1
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ffbe 	bl	80011bc <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7a5b      	ldrb	r3, [r3, #9]
 8001244:	029b      	lsls	r3, r3, #10
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 800125a:	f000 f9bb 	bl	80015d4 <RCC_GetPCLK1Value>
 800125e:	4603      	mov	r3, r0
 8001260:	4a47      	ldr	r2, [pc, #284]	; (8001380 <I2C_Init+0x158>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	0c9b      	lsrs	r3, r3, #18
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001278:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7a1b      	ldrb	r3, [r3, #8]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	461a      	mov	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001292:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4a36      	ldr	r2, [pc, #216]	; (8001384 <I2C_Init+0x15c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d80f      	bhi.n	80012ce <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80012ae:	f000 f991 	bl	80015d4 <RCC_GetPCLK1Value>
 80012b2:	4602      	mov	r2, r0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80012c0:	897b      	ldrh	r3, [r7, #10]
 80012c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	e02d      	b.n	800132a <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d4:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7a9b      	ldrb	r3, [r3, #10]
 80012da:	039b      	lsls	r3, r3, #14
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7a9b      	ldrb	r3, [r3, #10]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10b      	bne.n	8001304 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80012ec:	f000 f972 	bl	80015d4 <RCC_GetPCLK1Value>
 80012f0:	4601      	mov	r1, r0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001300:	817b      	strh	r3, [r7, #10]
 8001302:	e00c      	b.n	800131e <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8001304:	f000 f966 	bl	80015d4 <RCC_GetPCLK1Value>
 8001308:	4601      	mov	r1, r0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	009a      	lsls	r2, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	fbb1 f3f3 	udiv	r3, r1, r3
 800131c:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 800131e:	897b      	ldrh	r3, [r7, #10]
 8001320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	4a13      	ldr	r2, [pc, #76]	; (8001384 <I2C_Init+0x15c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d809      	bhi.n	8001350 <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 800133c:	f000 f94a 	bl	80015d4 <RCC_GetPCLK1Value>
 8001340:	4603      	mov	r3, r0
 8001342:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <I2C_Init+0x158>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	0c9b      	lsrs	r3, r3, #18
 800134a:	3301      	adds	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	e00d      	b.n	800136c <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8001350:	f000 f940 	bl	80015d4 <RCC_GetPCLK1Value>
 8001354:	4603      	mov	r3, r0
 8001356:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	0a5b      	lsrs	r3, r3, #9
 8001360:	4a09      	ldr	r2, [pc, #36]	; (8001388 <I2C_Init+0x160>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	09db      	lsrs	r3, r3, #7
 8001368:	3301      	adds	r3, #1
 800136a:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001376:	621a      	str	r2, [r3, #32]

}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	431bde83 	.word	0x431bde83
 8001384:	000186a0 	.word	0x000186a0
 8001388:	00044b83 	.word	0x00044b83

0800138c <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695a      	ldr	r2, [r3, #20]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	4013      	ands	r3, r2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fe5f 	bl	8001088 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 80013ca:	bf00      	nop
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2101      	movs	r1, #1
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ffda 	bl	800138c <I2C_GetFlagStatus>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f6      	beq.n	80013cc <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	78fa      	ldrb	r2, [r7, #3]
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fe5d 	bl	80010a6 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 80013ec:	bf00      	nop
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2102      	movs	r1, #2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ffc9 	bl	800138c <I2C_GetFlagStatus>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f6      	beq.n	80013ee <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7ff fe7a 	bl	80010fa <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8001406:	e014      	b.n	8001432 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8001408:	bf00      	nop
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2180      	movs	r1, #128	; 0x80
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ffbb 	bl	800138c <I2C_GetFlagStatus>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f6      	beq.n	800140a <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3301      	adds	r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
		Len--;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1e7      	bne.n	8001408 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8001438:	bf00      	nop
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2180      	movs	r1, #128	; 0x80
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ffa3 	bl	800138c <I2C_GetFlagStatus>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f6      	beq.n	800143a <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 800144c:	bf00      	nop
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2104      	movs	r1, #4
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff99 	bl	800138c <I2C_GetFlagStatus>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f6      	beq.n	800144e <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8001460:	7e3b      	ldrb	r3, [r7, #24]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d104      	bne.n	8001470 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fe7c 	bl	8001168 <I2C_GenerateStopCondition>

}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	4611      	mov	r1, r2
 8001484:	461a      	mov	r2, r3
 8001486:	460b      	mov	r3, r1
 8001488:	71fb      	strb	r3, [r7, #7]
 800148a:	4613      	mov	r3, r2
 800148c:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fdf8 	bl	8001088 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8001498:	bf00      	nop
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2101      	movs	r1, #1
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff73 	bl	800138c <I2C_GetFlagStatus>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f6      	beq.n	800149a <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	79ba      	ldrb	r2, [r7, #6]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe0b 	bl	80010d0 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 80014ba:	bf00      	nop
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2102      	movs	r1, #2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff62 	bl	800138c <I2C_GetFlagStatus>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f6      	beq.n	80014bc <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len == 1)
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d121      	bne.n	8001518 <I2C_MasterReceiveData+0xa0>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f85e 	bl	800159c <I2C_ManageAcking>


		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f7ff fe0a 	bl	80010fa <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 80014e6:	bf00      	nop
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2140      	movs	r1, #64	; 0x40
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff4c 	bl	800138c <I2C_GetFlagStatus>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f6      	beq.n	80014e8 <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 80014fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d104      	bne.n	800150c <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fe2e 	bl	8001168 <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d930      	bls.n	8001580 <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7ff fdeb 	bl	80010fa <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e027      	b.n	800157a <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 800152a:	bf00      	nop
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2140      	movs	r1, #64	; 0x40
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ff2a 	bl	800138c <I2C_GetFlagStatus>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f6      	beq.n	800152c <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d10e      	bne.n	8001562 <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f826 	bl	800159c <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 8001550:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d104      	bne.n	8001562 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fe03 	bl	8001168 <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	3301      	adds	r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3b01      	subs	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1d4      	bne.n	800152a <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	7a5b      	ldrb	r3, [r3, #9]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d105      	bne.n	8001594 <I2C_MasterReceiveData+0x11c>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2101      	movs	r1, #1
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f804 	bl	800159c <I2C_ManageAcking>
	}

}
 8001594:	bf00      	nop
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d106      	bne.n	80015bc <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 80015ba:	e005      	b.n	80015c8 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	601a      	str	r2, [r3, #0]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
	...

080015d4 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <RCC_GetPCLK1Value+0x9c>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 80015e8:	7a7b      	ldrb	r3, [r7, #9]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80015ee:	4b21      	ldr	r3, [pc, #132]	; (8001674 <RCC_GetPCLK1Value+0xa0>)
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	e00b      	b.n	800160c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 80015f4:	7a7b      	ldrb	r3, [r7, #9]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d102      	bne.n	8001600 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80015fa:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <RCC_GetPCLK1Value+0xa4>)
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	e005      	b.n	800160c <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8001600:	7a7b      	ldrb	r3, [r7, #9]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d102      	bne.n	800160c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8001606:	f000 f83d 	bl	8001684 <RCC_GetPLLOutputClock>
 800160a:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <RCC_GetPCLK1Value+0x9c>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800161a:	7a3b      	ldrb	r3, [r7, #8]
 800161c:	2b07      	cmp	r3, #7
 800161e:	d802      	bhi.n	8001626 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8001620:	2301      	movs	r3, #1
 8001622:	72fb      	strb	r3, [r7, #11]
 8001624:	e005      	b.n	8001632 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8001626:	7a3b      	ldrb	r3, [r7, #8]
 8001628:	3b08      	subs	r3, #8
 800162a:	4a14      	ldr	r2, [pc, #80]	; (800167c <RCC_GetPCLK1Value+0xa8>)
 800162c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001630:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <RCC_GetPCLK1Value+0x9c>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	0a9b      	lsrs	r3, r3, #10
 8001638:	b2db      	uxtb	r3, r3
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8001640:	7a3b      	ldrb	r3, [r7, #8]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d802      	bhi.n	800164c <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8001646:	2301      	movs	r3, #1
 8001648:	72bb      	strb	r3, [r7, #10]
 800164a:	e004      	b.n	8001656 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 800164c:	7a3b      	ldrb	r3, [r7, #8]
 800164e:	3b04      	subs	r3, #4
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <RCC_GetPCLK1Value+0xac>)
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8001656:	7afb      	ldrb	r3, [r7, #11]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	fbb2 f2f3 	udiv	r2, r2, r3
 800165e:	7abb      	ldrb	r3, [r7, #10]
 8001660:	fbb2 f3f3 	udiv	r3, r2, r3
 8001664:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001666:	687b      	ldr	r3, [r7, #4]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	00f42400 	.word	0x00f42400
 8001678:	007a1200 	.word	0x007a1200
 800167c:	20000000 	.word	0x20000000
 8001680:	20000010 	.word	0x20000010

08001684 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

	return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <SPI_Transfer>:
		}

}

uint8_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	70fb      	strb	r3, [r7, #3]
	while((((pSPIx)->SR & ((uint8_t)0x02 | (uint8_t)0x01)) == 0 || ((pSPIx)->SR & (uint8_t)0x80)));
 800169e:	bf00      	nop
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f9      	beq.n	80016a0 <SPI_Transfer+0xe>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f3      	bne.n	80016a0 <SPI_Transfer+0xe>

	pSPIx->DR = data;
 80016b8:	78fa      	ldrb	r2, [r7, #3]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	60da      	str	r2, [r3, #12]

	while((((pSPIx)->SR & ((uint8_t)0x02 | (uint8_t)0x01)) == 0 || ((pSPIx)->SR & (uint8_t)0x80)));
 80016be:	bf00      	nop
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f9      	beq.n	80016c0 <SPI_Transfer+0x2e>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f3      	bne.n	80016c0 <SPI_Transfer+0x2e>

	//while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );

	return pSPIx->DR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	b2db      	uxtb	r3, r3
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <SPI_PeripheralControl>:
/**************************
 *
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d106      	bne.n	8001708 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	601a      	str	r2, [r3, #0]
	} else
	{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 8001706:	e005      	b.n	8001714 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	601a      	str	r2, [r3, #0]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
	...

08001720 <__errno>:
 8001720:	4b01      	ldr	r3, [pc, #4]	; (8001728 <__errno+0x8>)
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000014 	.word	0x20000014

0800172c <__libc_init_array>:
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	4d0d      	ldr	r5, [pc, #52]	; (8001764 <__libc_init_array+0x38>)
 8001730:	4c0d      	ldr	r4, [pc, #52]	; (8001768 <__libc_init_array+0x3c>)
 8001732:	1b64      	subs	r4, r4, r5
 8001734:	10a4      	asrs	r4, r4, #2
 8001736:	2600      	movs	r6, #0
 8001738:	42a6      	cmp	r6, r4
 800173a:	d109      	bne.n	8001750 <__libc_init_array+0x24>
 800173c:	4d0b      	ldr	r5, [pc, #44]	; (800176c <__libc_init_array+0x40>)
 800173e:	4c0c      	ldr	r4, [pc, #48]	; (8001770 <__libc_init_array+0x44>)
 8001740:	f000 ffe8 	bl	8002714 <_init>
 8001744:	1b64      	subs	r4, r4, r5
 8001746:	10a4      	asrs	r4, r4, #2
 8001748:	2600      	movs	r6, #0
 800174a:	42a6      	cmp	r6, r4
 800174c:	d105      	bne.n	800175a <__libc_init_array+0x2e>
 800174e:	bd70      	pop	{r4, r5, r6, pc}
 8001750:	f855 3b04 	ldr.w	r3, [r5], #4
 8001754:	4798      	blx	r3
 8001756:	3601      	adds	r6, #1
 8001758:	e7ee      	b.n	8001738 <__libc_init_array+0xc>
 800175a:	f855 3b04 	ldr.w	r3, [r5], #4
 800175e:	4798      	blx	r3
 8001760:	3601      	adds	r6, #1
 8001762:	e7f2      	b.n	800174a <__libc_init_array+0x1e>
 8001764:	080028c4 	.word	0x080028c4
 8001768:	080028c4 	.word	0x080028c4
 800176c:	080028c4 	.word	0x080028c4
 8001770:	080028c8 	.word	0x080028c8

08001774 <memset>:
 8001774:	4402      	add	r2, r0
 8001776:	4603      	mov	r3, r0
 8001778:	4293      	cmp	r3, r2
 800177a:	d100      	bne.n	800177e <memset+0xa>
 800177c:	4770      	bx	lr
 800177e:	f803 1b01 	strb.w	r1, [r3], #1
 8001782:	e7f9      	b.n	8001778 <memset+0x4>

08001784 <iprintf>:
 8001784:	b40f      	push	{r0, r1, r2, r3}
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <iprintf+0x2c>)
 8001788:	b513      	push	{r0, r1, r4, lr}
 800178a:	681c      	ldr	r4, [r3, #0]
 800178c:	b124      	cbz	r4, 8001798 <iprintf+0x14>
 800178e:	69a3      	ldr	r3, [r4, #24]
 8001790:	b913      	cbnz	r3, 8001798 <iprintf+0x14>
 8001792:	4620      	mov	r0, r4
 8001794:	f000 fa5e 	bl	8001c54 <__sinit>
 8001798:	ab05      	add	r3, sp, #20
 800179a:	9a04      	ldr	r2, [sp, #16]
 800179c:	68a1      	ldr	r1, [r4, #8]
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	4620      	mov	r0, r4
 80017a2:	f000 fc2b 	bl	8001ffc <_vfiprintf_r>
 80017a6:	b002      	add	sp, #8
 80017a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017ac:	b004      	add	sp, #16
 80017ae:	4770      	bx	lr
 80017b0:	20000014 	.word	0x20000014

080017b4 <_puts_r>:
 80017b4:	b570      	push	{r4, r5, r6, lr}
 80017b6:	460e      	mov	r6, r1
 80017b8:	4605      	mov	r5, r0
 80017ba:	b118      	cbz	r0, 80017c4 <_puts_r+0x10>
 80017bc:	6983      	ldr	r3, [r0, #24]
 80017be:	b90b      	cbnz	r3, 80017c4 <_puts_r+0x10>
 80017c0:	f000 fa48 	bl	8001c54 <__sinit>
 80017c4:	69ab      	ldr	r3, [r5, #24]
 80017c6:	68ac      	ldr	r4, [r5, #8]
 80017c8:	b913      	cbnz	r3, 80017d0 <_puts_r+0x1c>
 80017ca:	4628      	mov	r0, r5
 80017cc:	f000 fa42 	bl	8001c54 <__sinit>
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <_puts_r+0xd0>)
 80017d2:	429c      	cmp	r4, r3
 80017d4:	d120      	bne.n	8001818 <_puts_r+0x64>
 80017d6:	686c      	ldr	r4, [r5, #4]
 80017d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017da:	07db      	lsls	r3, r3, #31
 80017dc:	d405      	bmi.n	80017ea <_puts_r+0x36>
 80017de:	89a3      	ldrh	r3, [r4, #12]
 80017e0:	0598      	lsls	r0, r3, #22
 80017e2:	d402      	bmi.n	80017ea <_puts_r+0x36>
 80017e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017e6:	f000 fad3 	bl	8001d90 <__retarget_lock_acquire_recursive>
 80017ea:	89a3      	ldrh	r3, [r4, #12]
 80017ec:	0719      	lsls	r1, r3, #28
 80017ee:	d51d      	bpl.n	800182c <_puts_r+0x78>
 80017f0:	6923      	ldr	r3, [r4, #16]
 80017f2:	b1db      	cbz	r3, 800182c <_puts_r+0x78>
 80017f4:	3e01      	subs	r6, #1
 80017f6:	68a3      	ldr	r3, [r4, #8]
 80017f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80017fc:	3b01      	subs	r3, #1
 80017fe:	60a3      	str	r3, [r4, #8]
 8001800:	bb39      	cbnz	r1, 8001852 <_puts_r+0x9e>
 8001802:	2b00      	cmp	r3, #0
 8001804:	da38      	bge.n	8001878 <_puts_r+0xc4>
 8001806:	4622      	mov	r2, r4
 8001808:	210a      	movs	r1, #10
 800180a:	4628      	mov	r0, r5
 800180c:	f000 f848 	bl	80018a0 <__swbuf_r>
 8001810:	3001      	adds	r0, #1
 8001812:	d011      	beq.n	8001838 <_puts_r+0x84>
 8001814:	250a      	movs	r5, #10
 8001816:	e011      	b.n	800183c <_puts_r+0x88>
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <_puts_r+0xd4>)
 800181a:	429c      	cmp	r4, r3
 800181c:	d101      	bne.n	8001822 <_puts_r+0x6e>
 800181e:	68ac      	ldr	r4, [r5, #8]
 8001820:	e7da      	b.n	80017d8 <_puts_r+0x24>
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <_puts_r+0xd8>)
 8001824:	429c      	cmp	r4, r3
 8001826:	bf08      	it	eq
 8001828:	68ec      	ldreq	r4, [r5, #12]
 800182a:	e7d5      	b.n	80017d8 <_puts_r+0x24>
 800182c:	4621      	mov	r1, r4
 800182e:	4628      	mov	r0, r5
 8001830:	f000 f888 	bl	8001944 <__swsetup_r>
 8001834:	2800      	cmp	r0, #0
 8001836:	d0dd      	beq.n	80017f4 <_puts_r+0x40>
 8001838:	f04f 35ff 	mov.w	r5, #4294967295
 800183c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800183e:	07da      	lsls	r2, r3, #31
 8001840:	d405      	bmi.n	800184e <_puts_r+0x9a>
 8001842:	89a3      	ldrh	r3, [r4, #12]
 8001844:	059b      	lsls	r3, r3, #22
 8001846:	d402      	bmi.n	800184e <_puts_r+0x9a>
 8001848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800184a:	f000 faa2 	bl	8001d92 <__retarget_lock_release_recursive>
 800184e:	4628      	mov	r0, r5
 8001850:	bd70      	pop	{r4, r5, r6, pc}
 8001852:	2b00      	cmp	r3, #0
 8001854:	da04      	bge.n	8001860 <_puts_r+0xac>
 8001856:	69a2      	ldr	r2, [r4, #24]
 8001858:	429a      	cmp	r2, r3
 800185a:	dc06      	bgt.n	800186a <_puts_r+0xb6>
 800185c:	290a      	cmp	r1, #10
 800185e:	d004      	beq.n	800186a <_puts_r+0xb6>
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	6022      	str	r2, [r4, #0]
 8001866:	7019      	strb	r1, [r3, #0]
 8001868:	e7c5      	b.n	80017f6 <_puts_r+0x42>
 800186a:	4622      	mov	r2, r4
 800186c:	4628      	mov	r0, r5
 800186e:	f000 f817 	bl	80018a0 <__swbuf_r>
 8001872:	3001      	adds	r0, #1
 8001874:	d1bf      	bne.n	80017f6 <_puts_r+0x42>
 8001876:	e7df      	b.n	8001838 <_puts_r+0x84>
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	250a      	movs	r5, #10
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	6022      	str	r2, [r4, #0]
 8001880:	701d      	strb	r5, [r3, #0]
 8001882:	e7db      	b.n	800183c <_puts_r+0x88>
 8001884:	08002850 	.word	0x08002850
 8001888:	08002870 	.word	0x08002870
 800188c:	08002830 	.word	0x08002830

08001890 <puts>:
 8001890:	4b02      	ldr	r3, [pc, #8]	; (800189c <puts+0xc>)
 8001892:	4601      	mov	r1, r0
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	f7ff bf8d 	b.w	80017b4 <_puts_r>
 800189a:	bf00      	nop
 800189c:	20000014 	.word	0x20000014

080018a0 <__swbuf_r>:
 80018a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a2:	460e      	mov	r6, r1
 80018a4:	4614      	mov	r4, r2
 80018a6:	4605      	mov	r5, r0
 80018a8:	b118      	cbz	r0, 80018b2 <__swbuf_r+0x12>
 80018aa:	6983      	ldr	r3, [r0, #24]
 80018ac:	b90b      	cbnz	r3, 80018b2 <__swbuf_r+0x12>
 80018ae:	f000 f9d1 	bl	8001c54 <__sinit>
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <__swbuf_r+0x98>)
 80018b4:	429c      	cmp	r4, r3
 80018b6:	d12b      	bne.n	8001910 <__swbuf_r+0x70>
 80018b8:	686c      	ldr	r4, [r5, #4]
 80018ba:	69a3      	ldr	r3, [r4, #24]
 80018bc:	60a3      	str	r3, [r4, #8]
 80018be:	89a3      	ldrh	r3, [r4, #12]
 80018c0:	071a      	lsls	r2, r3, #28
 80018c2:	d52f      	bpl.n	8001924 <__swbuf_r+0x84>
 80018c4:	6923      	ldr	r3, [r4, #16]
 80018c6:	b36b      	cbz	r3, 8001924 <__swbuf_r+0x84>
 80018c8:	6923      	ldr	r3, [r4, #16]
 80018ca:	6820      	ldr	r0, [r4, #0]
 80018cc:	1ac0      	subs	r0, r0, r3
 80018ce:	6963      	ldr	r3, [r4, #20]
 80018d0:	b2f6      	uxtb	r6, r6
 80018d2:	4283      	cmp	r3, r0
 80018d4:	4637      	mov	r7, r6
 80018d6:	dc04      	bgt.n	80018e2 <__swbuf_r+0x42>
 80018d8:	4621      	mov	r1, r4
 80018da:	4628      	mov	r0, r5
 80018dc:	f000 f926 	bl	8001b2c <_fflush_r>
 80018e0:	bb30      	cbnz	r0, 8001930 <__swbuf_r+0x90>
 80018e2:	68a3      	ldr	r3, [r4, #8]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	60a3      	str	r3, [r4, #8]
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	6022      	str	r2, [r4, #0]
 80018ee:	701e      	strb	r6, [r3, #0]
 80018f0:	6963      	ldr	r3, [r4, #20]
 80018f2:	3001      	adds	r0, #1
 80018f4:	4283      	cmp	r3, r0
 80018f6:	d004      	beq.n	8001902 <__swbuf_r+0x62>
 80018f8:	89a3      	ldrh	r3, [r4, #12]
 80018fa:	07db      	lsls	r3, r3, #31
 80018fc:	d506      	bpl.n	800190c <__swbuf_r+0x6c>
 80018fe:	2e0a      	cmp	r6, #10
 8001900:	d104      	bne.n	800190c <__swbuf_r+0x6c>
 8001902:	4621      	mov	r1, r4
 8001904:	4628      	mov	r0, r5
 8001906:	f000 f911 	bl	8001b2c <_fflush_r>
 800190a:	b988      	cbnz	r0, 8001930 <__swbuf_r+0x90>
 800190c:	4638      	mov	r0, r7
 800190e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <__swbuf_r+0x9c>)
 8001912:	429c      	cmp	r4, r3
 8001914:	d101      	bne.n	800191a <__swbuf_r+0x7a>
 8001916:	68ac      	ldr	r4, [r5, #8]
 8001918:	e7cf      	b.n	80018ba <__swbuf_r+0x1a>
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <__swbuf_r+0xa0>)
 800191c:	429c      	cmp	r4, r3
 800191e:	bf08      	it	eq
 8001920:	68ec      	ldreq	r4, [r5, #12]
 8001922:	e7ca      	b.n	80018ba <__swbuf_r+0x1a>
 8001924:	4621      	mov	r1, r4
 8001926:	4628      	mov	r0, r5
 8001928:	f000 f80c 	bl	8001944 <__swsetup_r>
 800192c:	2800      	cmp	r0, #0
 800192e:	d0cb      	beq.n	80018c8 <__swbuf_r+0x28>
 8001930:	f04f 37ff 	mov.w	r7, #4294967295
 8001934:	e7ea      	b.n	800190c <__swbuf_r+0x6c>
 8001936:	bf00      	nop
 8001938:	08002850 	.word	0x08002850
 800193c:	08002870 	.word	0x08002870
 8001940:	08002830 	.word	0x08002830

08001944 <__swsetup_r>:
 8001944:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <__swsetup_r+0xcc>)
 8001946:	b570      	push	{r4, r5, r6, lr}
 8001948:	681d      	ldr	r5, [r3, #0]
 800194a:	4606      	mov	r6, r0
 800194c:	460c      	mov	r4, r1
 800194e:	b125      	cbz	r5, 800195a <__swsetup_r+0x16>
 8001950:	69ab      	ldr	r3, [r5, #24]
 8001952:	b913      	cbnz	r3, 800195a <__swsetup_r+0x16>
 8001954:	4628      	mov	r0, r5
 8001956:	f000 f97d 	bl	8001c54 <__sinit>
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <__swsetup_r+0xd0>)
 800195c:	429c      	cmp	r4, r3
 800195e:	d10f      	bne.n	8001980 <__swsetup_r+0x3c>
 8001960:	686c      	ldr	r4, [r5, #4]
 8001962:	89a3      	ldrh	r3, [r4, #12]
 8001964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001968:	0719      	lsls	r1, r3, #28
 800196a:	d42c      	bmi.n	80019c6 <__swsetup_r+0x82>
 800196c:	06dd      	lsls	r5, r3, #27
 800196e:	d411      	bmi.n	8001994 <__swsetup_r+0x50>
 8001970:	2309      	movs	r3, #9
 8001972:	6033      	str	r3, [r6, #0]
 8001974:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001978:	81a3      	strh	r3, [r4, #12]
 800197a:	f04f 30ff 	mov.w	r0, #4294967295
 800197e:	e03e      	b.n	80019fe <__swsetup_r+0xba>
 8001980:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <__swsetup_r+0xd4>)
 8001982:	429c      	cmp	r4, r3
 8001984:	d101      	bne.n	800198a <__swsetup_r+0x46>
 8001986:	68ac      	ldr	r4, [r5, #8]
 8001988:	e7eb      	b.n	8001962 <__swsetup_r+0x1e>
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <__swsetup_r+0xd8>)
 800198c:	429c      	cmp	r4, r3
 800198e:	bf08      	it	eq
 8001990:	68ec      	ldreq	r4, [r5, #12]
 8001992:	e7e6      	b.n	8001962 <__swsetup_r+0x1e>
 8001994:	0758      	lsls	r0, r3, #29
 8001996:	d512      	bpl.n	80019be <__swsetup_r+0x7a>
 8001998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800199a:	b141      	cbz	r1, 80019ae <__swsetup_r+0x6a>
 800199c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019a0:	4299      	cmp	r1, r3
 80019a2:	d002      	beq.n	80019aa <__swsetup_r+0x66>
 80019a4:	4630      	mov	r0, r6
 80019a6:	f000 fa59 	bl	8001e5c <_free_r>
 80019aa:	2300      	movs	r3, #0
 80019ac:	6363      	str	r3, [r4, #52]	; 0x34
 80019ae:	89a3      	ldrh	r3, [r4, #12]
 80019b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80019b4:	81a3      	strh	r3, [r4, #12]
 80019b6:	2300      	movs	r3, #0
 80019b8:	6063      	str	r3, [r4, #4]
 80019ba:	6923      	ldr	r3, [r4, #16]
 80019bc:	6023      	str	r3, [r4, #0]
 80019be:	89a3      	ldrh	r3, [r4, #12]
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	81a3      	strh	r3, [r4, #12]
 80019c6:	6923      	ldr	r3, [r4, #16]
 80019c8:	b94b      	cbnz	r3, 80019de <__swsetup_r+0x9a>
 80019ca:	89a3      	ldrh	r3, [r4, #12]
 80019cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80019d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d4:	d003      	beq.n	80019de <__swsetup_r+0x9a>
 80019d6:	4621      	mov	r1, r4
 80019d8:	4630      	mov	r0, r6
 80019da:	f000 f9ff 	bl	8001ddc <__smakebuf_r>
 80019de:	89a0      	ldrh	r0, [r4, #12]
 80019e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80019e4:	f010 0301 	ands.w	r3, r0, #1
 80019e8:	d00a      	beq.n	8001a00 <__swsetup_r+0xbc>
 80019ea:	2300      	movs	r3, #0
 80019ec:	60a3      	str	r3, [r4, #8]
 80019ee:	6963      	ldr	r3, [r4, #20]
 80019f0:	425b      	negs	r3, r3
 80019f2:	61a3      	str	r3, [r4, #24]
 80019f4:	6923      	ldr	r3, [r4, #16]
 80019f6:	b943      	cbnz	r3, 8001a0a <__swsetup_r+0xc6>
 80019f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80019fc:	d1ba      	bne.n	8001974 <__swsetup_r+0x30>
 80019fe:	bd70      	pop	{r4, r5, r6, pc}
 8001a00:	0781      	lsls	r1, r0, #30
 8001a02:	bf58      	it	pl
 8001a04:	6963      	ldrpl	r3, [r4, #20]
 8001a06:	60a3      	str	r3, [r4, #8]
 8001a08:	e7f4      	b.n	80019f4 <__swsetup_r+0xb0>
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	e7f7      	b.n	80019fe <__swsetup_r+0xba>
 8001a0e:	bf00      	nop
 8001a10:	20000014 	.word	0x20000014
 8001a14:	08002850 	.word	0x08002850
 8001a18:	08002870 	.word	0x08002870
 8001a1c:	08002830 	.word	0x08002830

08001a20 <__sflush_r>:
 8001a20:	898a      	ldrh	r2, [r1, #12]
 8001a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a26:	4605      	mov	r5, r0
 8001a28:	0710      	lsls	r0, r2, #28
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	d458      	bmi.n	8001ae0 <__sflush_r+0xc0>
 8001a2e:	684b      	ldr	r3, [r1, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	dc05      	bgt.n	8001a40 <__sflush_r+0x20>
 8001a34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	dc02      	bgt.n	8001a40 <__sflush_r+0x20>
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a42:	2e00      	cmp	r6, #0
 8001a44:	d0f9      	beq.n	8001a3a <__sflush_r+0x1a>
 8001a46:	2300      	movs	r3, #0
 8001a48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a4c:	682f      	ldr	r7, [r5, #0]
 8001a4e:	602b      	str	r3, [r5, #0]
 8001a50:	d032      	beq.n	8001ab8 <__sflush_r+0x98>
 8001a52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a54:	89a3      	ldrh	r3, [r4, #12]
 8001a56:	075a      	lsls	r2, r3, #29
 8001a58:	d505      	bpl.n	8001a66 <__sflush_r+0x46>
 8001a5a:	6863      	ldr	r3, [r4, #4]
 8001a5c:	1ac0      	subs	r0, r0, r3
 8001a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a60:	b10b      	cbz	r3, 8001a66 <__sflush_r+0x46>
 8001a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a64:	1ac0      	subs	r0, r0, r3
 8001a66:	2300      	movs	r3, #0
 8001a68:	4602      	mov	r2, r0
 8001a6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a6c:	6a21      	ldr	r1, [r4, #32]
 8001a6e:	4628      	mov	r0, r5
 8001a70:	47b0      	blx	r6
 8001a72:	1c43      	adds	r3, r0, #1
 8001a74:	89a3      	ldrh	r3, [r4, #12]
 8001a76:	d106      	bne.n	8001a86 <__sflush_r+0x66>
 8001a78:	6829      	ldr	r1, [r5, #0]
 8001a7a:	291d      	cmp	r1, #29
 8001a7c:	d82c      	bhi.n	8001ad8 <__sflush_r+0xb8>
 8001a7e:	4a2a      	ldr	r2, [pc, #168]	; (8001b28 <__sflush_r+0x108>)
 8001a80:	40ca      	lsrs	r2, r1
 8001a82:	07d6      	lsls	r6, r2, #31
 8001a84:	d528      	bpl.n	8001ad8 <__sflush_r+0xb8>
 8001a86:	2200      	movs	r2, #0
 8001a88:	6062      	str	r2, [r4, #4]
 8001a8a:	04d9      	lsls	r1, r3, #19
 8001a8c:	6922      	ldr	r2, [r4, #16]
 8001a8e:	6022      	str	r2, [r4, #0]
 8001a90:	d504      	bpl.n	8001a9c <__sflush_r+0x7c>
 8001a92:	1c42      	adds	r2, r0, #1
 8001a94:	d101      	bne.n	8001a9a <__sflush_r+0x7a>
 8001a96:	682b      	ldr	r3, [r5, #0]
 8001a98:	b903      	cbnz	r3, 8001a9c <__sflush_r+0x7c>
 8001a9a:	6560      	str	r0, [r4, #84]	; 0x54
 8001a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a9e:	602f      	str	r7, [r5, #0]
 8001aa0:	2900      	cmp	r1, #0
 8001aa2:	d0ca      	beq.n	8001a3a <__sflush_r+0x1a>
 8001aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001aa8:	4299      	cmp	r1, r3
 8001aaa:	d002      	beq.n	8001ab2 <__sflush_r+0x92>
 8001aac:	4628      	mov	r0, r5
 8001aae:	f000 f9d5 	bl	8001e5c <_free_r>
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	6360      	str	r0, [r4, #52]	; 0x34
 8001ab6:	e7c1      	b.n	8001a3c <__sflush_r+0x1c>
 8001ab8:	6a21      	ldr	r1, [r4, #32]
 8001aba:	2301      	movs	r3, #1
 8001abc:	4628      	mov	r0, r5
 8001abe:	47b0      	blx	r6
 8001ac0:	1c41      	adds	r1, r0, #1
 8001ac2:	d1c7      	bne.n	8001a54 <__sflush_r+0x34>
 8001ac4:	682b      	ldr	r3, [r5, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0c4      	beq.n	8001a54 <__sflush_r+0x34>
 8001aca:	2b1d      	cmp	r3, #29
 8001acc:	d001      	beq.n	8001ad2 <__sflush_r+0xb2>
 8001ace:	2b16      	cmp	r3, #22
 8001ad0:	d101      	bne.n	8001ad6 <__sflush_r+0xb6>
 8001ad2:	602f      	str	r7, [r5, #0]
 8001ad4:	e7b1      	b.n	8001a3a <__sflush_r+0x1a>
 8001ad6:	89a3      	ldrh	r3, [r4, #12]
 8001ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001adc:	81a3      	strh	r3, [r4, #12]
 8001ade:	e7ad      	b.n	8001a3c <__sflush_r+0x1c>
 8001ae0:	690f      	ldr	r7, [r1, #16]
 8001ae2:	2f00      	cmp	r7, #0
 8001ae4:	d0a9      	beq.n	8001a3a <__sflush_r+0x1a>
 8001ae6:	0793      	lsls	r3, r2, #30
 8001ae8:	680e      	ldr	r6, [r1, #0]
 8001aea:	bf08      	it	eq
 8001aec:	694b      	ldreq	r3, [r1, #20]
 8001aee:	600f      	str	r7, [r1, #0]
 8001af0:	bf18      	it	ne
 8001af2:	2300      	movne	r3, #0
 8001af4:	eba6 0807 	sub.w	r8, r6, r7
 8001af8:	608b      	str	r3, [r1, #8]
 8001afa:	f1b8 0f00 	cmp.w	r8, #0
 8001afe:	dd9c      	ble.n	8001a3a <__sflush_r+0x1a>
 8001b00:	6a21      	ldr	r1, [r4, #32]
 8001b02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001b04:	4643      	mov	r3, r8
 8001b06:	463a      	mov	r2, r7
 8001b08:	4628      	mov	r0, r5
 8001b0a:	47b0      	blx	r6
 8001b0c:	2800      	cmp	r0, #0
 8001b0e:	dc06      	bgt.n	8001b1e <__sflush_r+0xfe>
 8001b10:	89a3      	ldrh	r3, [r4, #12]
 8001b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b16:	81a3      	strh	r3, [r4, #12]
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	e78e      	b.n	8001a3c <__sflush_r+0x1c>
 8001b1e:	4407      	add	r7, r0
 8001b20:	eba8 0800 	sub.w	r8, r8, r0
 8001b24:	e7e9      	b.n	8001afa <__sflush_r+0xda>
 8001b26:	bf00      	nop
 8001b28:	20400001 	.word	0x20400001

08001b2c <_fflush_r>:
 8001b2c:	b538      	push	{r3, r4, r5, lr}
 8001b2e:	690b      	ldr	r3, [r1, #16]
 8001b30:	4605      	mov	r5, r0
 8001b32:	460c      	mov	r4, r1
 8001b34:	b913      	cbnz	r3, 8001b3c <_fflush_r+0x10>
 8001b36:	2500      	movs	r5, #0
 8001b38:	4628      	mov	r0, r5
 8001b3a:	bd38      	pop	{r3, r4, r5, pc}
 8001b3c:	b118      	cbz	r0, 8001b46 <_fflush_r+0x1a>
 8001b3e:	6983      	ldr	r3, [r0, #24]
 8001b40:	b90b      	cbnz	r3, 8001b46 <_fflush_r+0x1a>
 8001b42:	f000 f887 	bl	8001c54 <__sinit>
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <_fflush_r+0x6c>)
 8001b48:	429c      	cmp	r4, r3
 8001b4a:	d11b      	bne.n	8001b84 <_fflush_r+0x58>
 8001b4c:	686c      	ldr	r4, [r5, #4]
 8001b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0ef      	beq.n	8001b36 <_fflush_r+0xa>
 8001b56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001b58:	07d0      	lsls	r0, r2, #31
 8001b5a:	d404      	bmi.n	8001b66 <_fflush_r+0x3a>
 8001b5c:	0599      	lsls	r1, r3, #22
 8001b5e:	d402      	bmi.n	8001b66 <_fflush_r+0x3a>
 8001b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b62:	f000 f915 	bl	8001d90 <__retarget_lock_acquire_recursive>
 8001b66:	4628      	mov	r0, r5
 8001b68:	4621      	mov	r1, r4
 8001b6a:	f7ff ff59 	bl	8001a20 <__sflush_r>
 8001b6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b70:	07da      	lsls	r2, r3, #31
 8001b72:	4605      	mov	r5, r0
 8001b74:	d4e0      	bmi.n	8001b38 <_fflush_r+0xc>
 8001b76:	89a3      	ldrh	r3, [r4, #12]
 8001b78:	059b      	lsls	r3, r3, #22
 8001b7a:	d4dd      	bmi.n	8001b38 <_fflush_r+0xc>
 8001b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b7e:	f000 f908 	bl	8001d92 <__retarget_lock_release_recursive>
 8001b82:	e7d9      	b.n	8001b38 <_fflush_r+0xc>
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <_fflush_r+0x70>)
 8001b86:	429c      	cmp	r4, r3
 8001b88:	d101      	bne.n	8001b8e <_fflush_r+0x62>
 8001b8a:	68ac      	ldr	r4, [r5, #8]
 8001b8c:	e7df      	b.n	8001b4e <_fflush_r+0x22>
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <_fflush_r+0x74>)
 8001b90:	429c      	cmp	r4, r3
 8001b92:	bf08      	it	eq
 8001b94:	68ec      	ldreq	r4, [r5, #12]
 8001b96:	e7da      	b.n	8001b4e <_fflush_r+0x22>
 8001b98:	08002850 	.word	0x08002850
 8001b9c:	08002870 	.word	0x08002870
 8001ba0:	08002830 	.word	0x08002830

08001ba4 <std>:
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	b510      	push	{r4, lr}
 8001ba8:	4604      	mov	r4, r0
 8001baa:	e9c0 3300 	strd	r3, r3, [r0]
 8001bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001bb2:	6083      	str	r3, [r0, #8]
 8001bb4:	8181      	strh	r1, [r0, #12]
 8001bb6:	6643      	str	r3, [r0, #100]	; 0x64
 8001bb8:	81c2      	strh	r2, [r0, #14]
 8001bba:	6183      	str	r3, [r0, #24]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	305c      	adds	r0, #92	; 0x5c
 8001bc2:	f7ff fdd7 	bl	8001774 <memset>
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <std+0x38>)
 8001bc8:	6263      	str	r3, [r4, #36]	; 0x24
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <std+0x3c>)
 8001bcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <std+0x40>)
 8001bd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <std+0x44>)
 8001bd4:	6224      	str	r4, [r4, #32]
 8001bd6:	6323      	str	r3, [r4, #48]	; 0x30
 8001bd8:	bd10      	pop	{r4, pc}
 8001bda:	bf00      	nop
 8001bdc:	080025a5 	.word	0x080025a5
 8001be0:	080025c7 	.word	0x080025c7
 8001be4:	080025ff 	.word	0x080025ff
 8001be8:	08002623 	.word	0x08002623

08001bec <_cleanup_r>:
 8001bec:	4901      	ldr	r1, [pc, #4]	; (8001bf4 <_cleanup_r+0x8>)
 8001bee:	f000 b8af 	b.w	8001d50 <_fwalk_reent>
 8001bf2:	bf00      	nop
 8001bf4:	08001b2d 	.word	0x08001b2d

08001bf8 <__sfmoreglue>:
 8001bf8:	b570      	push	{r4, r5, r6, lr}
 8001bfa:	1e4a      	subs	r2, r1, #1
 8001bfc:	2568      	movs	r5, #104	; 0x68
 8001bfe:	4355      	muls	r5, r2
 8001c00:	460e      	mov	r6, r1
 8001c02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001c06:	f000 f977 	bl	8001ef8 <_malloc_r>
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	b140      	cbz	r0, 8001c20 <__sfmoreglue+0x28>
 8001c0e:	2100      	movs	r1, #0
 8001c10:	e9c0 1600 	strd	r1, r6, [r0]
 8001c14:	300c      	adds	r0, #12
 8001c16:	60a0      	str	r0, [r4, #8]
 8001c18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001c1c:	f7ff fdaa 	bl	8001774 <memset>
 8001c20:	4620      	mov	r0, r4
 8001c22:	bd70      	pop	{r4, r5, r6, pc}

08001c24 <__sfp_lock_acquire>:
 8001c24:	4801      	ldr	r0, [pc, #4]	; (8001c2c <__sfp_lock_acquire+0x8>)
 8001c26:	f000 b8b3 	b.w	8001d90 <__retarget_lock_acquire_recursive>
 8001c2a:	bf00      	nop
 8001c2c:	200000e8 	.word	0x200000e8

08001c30 <__sfp_lock_release>:
 8001c30:	4801      	ldr	r0, [pc, #4]	; (8001c38 <__sfp_lock_release+0x8>)
 8001c32:	f000 b8ae 	b.w	8001d92 <__retarget_lock_release_recursive>
 8001c36:	bf00      	nop
 8001c38:	200000e8 	.word	0x200000e8

08001c3c <__sinit_lock_acquire>:
 8001c3c:	4801      	ldr	r0, [pc, #4]	; (8001c44 <__sinit_lock_acquire+0x8>)
 8001c3e:	f000 b8a7 	b.w	8001d90 <__retarget_lock_acquire_recursive>
 8001c42:	bf00      	nop
 8001c44:	200000e3 	.word	0x200000e3

08001c48 <__sinit_lock_release>:
 8001c48:	4801      	ldr	r0, [pc, #4]	; (8001c50 <__sinit_lock_release+0x8>)
 8001c4a:	f000 b8a2 	b.w	8001d92 <__retarget_lock_release_recursive>
 8001c4e:	bf00      	nop
 8001c50:	200000e3 	.word	0x200000e3

08001c54 <__sinit>:
 8001c54:	b510      	push	{r4, lr}
 8001c56:	4604      	mov	r4, r0
 8001c58:	f7ff fff0 	bl	8001c3c <__sinit_lock_acquire>
 8001c5c:	69a3      	ldr	r3, [r4, #24]
 8001c5e:	b11b      	cbz	r3, 8001c68 <__sinit+0x14>
 8001c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c64:	f7ff bff0 	b.w	8001c48 <__sinit_lock_release>
 8001c68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001c6c:	6523      	str	r3, [r4, #80]	; 0x50
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <__sinit+0x68>)
 8001c70:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <__sinit+0x6c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c76:	42a3      	cmp	r3, r4
 8001c78:	bf04      	itt	eq
 8001c7a:	2301      	moveq	r3, #1
 8001c7c:	61a3      	streq	r3, [r4, #24]
 8001c7e:	4620      	mov	r0, r4
 8001c80:	f000 f820 	bl	8001cc4 <__sfp>
 8001c84:	6060      	str	r0, [r4, #4]
 8001c86:	4620      	mov	r0, r4
 8001c88:	f000 f81c 	bl	8001cc4 <__sfp>
 8001c8c:	60a0      	str	r0, [r4, #8]
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f000 f818 	bl	8001cc4 <__sfp>
 8001c94:	2200      	movs	r2, #0
 8001c96:	60e0      	str	r0, [r4, #12]
 8001c98:	2104      	movs	r1, #4
 8001c9a:	6860      	ldr	r0, [r4, #4]
 8001c9c:	f7ff ff82 	bl	8001ba4 <std>
 8001ca0:	68a0      	ldr	r0, [r4, #8]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2109      	movs	r1, #9
 8001ca6:	f7ff ff7d 	bl	8001ba4 <std>
 8001caa:	68e0      	ldr	r0, [r4, #12]
 8001cac:	2202      	movs	r2, #2
 8001cae:	2112      	movs	r1, #18
 8001cb0:	f7ff ff78 	bl	8001ba4 <std>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	61a3      	str	r3, [r4, #24]
 8001cb8:	e7d2      	b.n	8001c60 <__sinit+0xc>
 8001cba:	bf00      	nop
 8001cbc:	0800282c 	.word	0x0800282c
 8001cc0:	08001bed 	.word	0x08001bed

08001cc4 <__sfp>:
 8001cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc6:	4607      	mov	r7, r0
 8001cc8:	f7ff ffac 	bl	8001c24 <__sfp_lock_acquire>
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <__sfp+0x84>)
 8001cce:	681e      	ldr	r6, [r3, #0]
 8001cd0:	69b3      	ldr	r3, [r6, #24]
 8001cd2:	b913      	cbnz	r3, 8001cda <__sfp+0x16>
 8001cd4:	4630      	mov	r0, r6
 8001cd6:	f7ff ffbd 	bl	8001c54 <__sinit>
 8001cda:	3648      	adds	r6, #72	; 0x48
 8001cdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	d503      	bpl.n	8001cec <__sfp+0x28>
 8001ce4:	6833      	ldr	r3, [r6, #0]
 8001ce6:	b30b      	cbz	r3, 8001d2c <__sfp+0x68>
 8001ce8:	6836      	ldr	r6, [r6, #0]
 8001cea:	e7f7      	b.n	8001cdc <__sfp+0x18>
 8001cec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001cf0:	b9d5      	cbnz	r5, 8001d28 <__sfp+0x64>
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <__sfp+0x88>)
 8001cf4:	60e3      	str	r3, [r4, #12]
 8001cf6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001cfa:	6665      	str	r5, [r4, #100]	; 0x64
 8001cfc:	f000 f847 	bl	8001d8e <__retarget_lock_init_recursive>
 8001d00:	f7ff ff96 	bl	8001c30 <__sfp_lock_release>
 8001d04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001d08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001d0c:	6025      	str	r5, [r4, #0]
 8001d0e:	61a5      	str	r5, [r4, #24]
 8001d10:	2208      	movs	r2, #8
 8001d12:	4629      	mov	r1, r5
 8001d14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d18:	f7ff fd2c 	bl	8001774 <memset>
 8001d1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001d24:	4620      	mov	r0, r4
 8001d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d28:	3468      	adds	r4, #104	; 0x68
 8001d2a:	e7d9      	b.n	8001ce0 <__sfp+0x1c>
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	4638      	mov	r0, r7
 8001d30:	f7ff ff62 	bl	8001bf8 <__sfmoreglue>
 8001d34:	4604      	mov	r4, r0
 8001d36:	6030      	str	r0, [r6, #0]
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	d1d5      	bne.n	8001ce8 <__sfp+0x24>
 8001d3c:	f7ff ff78 	bl	8001c30 <__sfp_lock_release>
 8001d40:	230c      	movs	r3, #12
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	e7ee      	b.n	8001d24 <__sfp+0x60>
 8001d46:	bf00      	nop
 8001d48:	0800282c 	.word	0x0800282c
 8001d4c:	ffff0001 	.word	0xffff0001

08001d50 <_fwalk_reent>:
 8001d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d54:	4606      	mov	r6, r0
 8001d56:	4688      	mov	r8, r1
 8001d58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001d5c:	2700      	movs	r7, #0
 8001d5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d62:	f1b9 0901 	subs.w	r9, r9, #1
 8001d66:	d505      	bpl.n	8001d74 <_fwalk_reent+0x24>
 8001d68:	6824      	ldr	r4, [r4, #0]
 8001d6a:	2c00      	cmp	r4, #0
 8001d6c:	d1f7      	bne.n	8001d5e <_fwalk_reent+0xe>
 8001d6e:	4638      	mov	r0, r7
 8001d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d74:	89ab      	ldrh	r3, [r5, #12]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d907      	bls.n	8001d8a <_fwalk_reent+0x3a>
 8001d7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	d003      	beq.n	8001d8a <_fwalk_reent+0x3a>
 8001d82:	4629      	mov	r1, r5
 8001d84:	4630      	mov	r0, r6
 8001d86:	47c0      	blx	r8
 8001d88:	4307      	orrs	r7, r0
 8001d8a:	3568      	adds	r5, #104	; 0x68
 8001d8c:	e7e9      	b.n	8001d62 <_fwalk_reent+0x12>

08001d8e <__retarget_lock_init_recursive>:
 8001d8e:	4770      	bx	lr

08001d90 <__retarget_lock_acquire_recursive>:
 8001d90:	4770      	bx	lr

08001d92 <__retarget_lock_release_recursive>:
 8001d92:	4770      	bx	lr

08001d94 <__swhatbuf_r>:
 8001d94:	b570      	push	{r4, r5, r6, lr}
 8001d96:	460e      	mov	r6, r1
 8001d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d9c:	2900      	cmp	r1, #0
 8001d9e:	b096      	sub	sp, #88	; 0x58
 8001da0:	4614      	mov	r4, r2
 8001da2:	461d      	mov	r5, r3
 8001da4:	da07      	bge.n	8001db6 <__swhatbuf_r+0x22>
 8001da6:	2300      	movs	r3, #0
 8001da8:	602b      	str	r3, [r5, #0]
 8001daa:	89b3      	ldrh	r3, [r6, #12]
 8001dac:	061a      	lsls	r2, r3, #24
 8001dae:	d410      	bmi.n	8001dd2 <__swhatbuf_r+0x3e>
 8001db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db4:	e00e      	b.n	8001dd4 <__swhatbuf_r+0x40>
 8001db6:	466a      	mov	r2, sp
 8001db8:	f000 fc5a 	bl	8002670 <_fstat_r>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	dbf2      	blt.n	8001da6 <__swhatbuf_r+0x12>
 8001dc0:	9a01      	ldr	r2, [sp, #4]
 8001dc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001dc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001dca:	425a      	negs	r2, r3
 8001dcc:	415a      	adcs	r2, r3
 8001dce:	602a      	str	r2, [r5, #0]
 8001dd0:	e7ee      	b.n	8001db0 <__swhatbuf_r+0x1c>
 8001dd2:	2340      	movs	r3, #64	; 0x40
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	6023      	str	r3, [r4, #0]
 8001dd8:	b016      	add	sp, #88	; 0x58
 8001dda:	bd70      	pop	{r4, r5, r6, pc}

08001ddc <__smakebuf_r>:
 8001ddc:	898b      	ldrh	r3, [r1, #12]
 8001dde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001de0:	079d      	lsls	r5, r3, #30
 8001de2:	4606      	mov	r6, r0
 8001de4:	460c      	mov	r4, r1
 8001de6:	d507      	bpl.n	8001df8 <__smakebuf_r+0x1c>
 8001de8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001dec:	6023      	str	r3, [r4, #0]
 8001dee:	6123      	str	r3, [r4, #16]
 8001df0:	2301      	movs	r3, #1
 8001df2:	6163      	str	r3, [r4, #20]
 8001df4:	b002      	add	sp, #8
 8001df6:	bd70      	pop	{r4, r5, r6, pc}
 8001df8:	ab01      	add	r3, sp, #4
 8001dfa:	466a      	mov	r2, sp
 8001dfc:	f7ff ffca 	bl	8001d94 <__swhatbuf_r>
 8001e00:	9900      	ldr	r1, [sp, #0]
 8001e02:	4605      	mov	r5, r0
 8001e04:	4630      	mov	r0, r6
 8001e06:	f000 f877 	bl	8001ef8 <_malloc_r>
 8001e0a:	b948      	cbnz	r0, 8001e20 <__smakebuf_r+0x44>
 8001e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e10:	059a      	lsls	r2, r3, #22
 8001e12:	d4ef      	bmi.n	8001df4 <__smakebuf_r+0x18>
 8001e14:	f023 0303 	bic.w	r3, r3, #3
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	81a3      	strh	r3, [r4, #12]
 8001e1e:	e7e3      	b.n	8001de8 <__smakebuf_r+0xc>
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <__smakebuf_r+0x7c>)
 8001e22:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e24:	89a3      	ldrh	r3, [r4, #12]
 8001e26:	6020      	str	r0, [r4, #0]
 8001e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2c:	81a3      	strh	r3, [r4, #12]
 8001e2e:	9b00      	ldr	r3, [sp, #0]
 8001e30:	6163      	str	r3, [r4, #20]
 8001e32:	9b01      	ldr	r3, [sp, #4]
 8001e34:	6120      	str	r0, [r4, #16]
 8001e36:	b15b      	cbz	r3, 8001e50 <__smakebuf_r+0x74>
 8001e38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e3c:	4630      	mov	r0, r6
 8001e3e:	f000 fc29 	bl	8002694 <_isatty_r>
 8001e42:	b128      	cbz	r0, 8001e50 <__smakebuf_r+0x74>
 8001e44:	89a3      	ldrh	r3, [r4, #12]
 8001e46:	f023 0303 	bic.w	r3, r3, #3
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	81a3      	strh	r3, [r4, #12]
 8001e50:	89a0      	ldrh	r0, [r4, #12]
 8001e52:	4305      	orrs	r5, r0
 8001e54:	81a5      	strh	r5, [r4, #12]
 8001e56:	e7cd      	b.n	8001df4 <__smakebuf_r+0x18>
 8001e58:	08001bed 	.word	0x08001bed

08001e5c <_free_r>:
 8001e5c:	b538      	push	{r3, r4, r5, lr}
 8001e5e:	4605      	mov	r5, r0
 8001e60:	2900      	cmp	r1, #0
 8001e62:	d045      	beq.n	8001ef0 <_free_r+0x94>
 8001e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e68:	1f0c      	subs	r4, r1, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bfb8      	it	lt
 8001e6e:	18e4      	addlt	r4, r4, r3
 8001e70:	f000 fc32 	bl	80026d8 <__malloc_lock>
 8001e74:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <_free_r+0x98>)
 8001e76:	6813      	ldr	r3, [r2, #0]
 8001e78:	4610      	mov	r0, r2
 8001e7a:	b933      	cbnz	r3, 8001e8a <_free_r+0x2e>
 8001e7c:	6063      	str	r3, [r4, #4]
 8001e7e:	6014      	str	r4, [r2, #0]
 8001e80:	4628      	mov	r0, r5
 8001e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e86:	f000 bc2d 	b.w	80026e4 <__malloc_unlock>
 8001e8a:	42a3      	cmp	r3, r4
 8001e8c:	d90b      	bls.n	8001ea6 <_free_r+0x4a>
 8001e8e:	6821      	ldr	r1, [r4, #0]
 8001e90:	1862      	adds	r2, r4, r1
 8001e92:	4293      	cmp	r3, r2
 8001e94:	bf04      	itt	eq
 8001e96:	681a      	ldreq	r2, [r3, #0]
 8001e98:	685b      	ldreq	r3, [r3, #4]
 8001e9a:	6063      	str	r3, [r4, #4]
 8001e9c:	bf04      	itt	eq
 8001e9e:	1852      	addeq	r2, r2, r1
 8001ea0:	6022      	streq	r2, [r4, #0]
 8001ea2:	6004      	str	r4, [r0, #0]
 8001ea4:	e7ec      	b.n	8001e80 <_free_r+0x24>
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	b10b      	cbz	r3, 8001eb0 <_free_r+0x54>
 8001eac:	42a3      	cmp	r3, r4
 8001eae:	d9fa      	bls.n	8001ea6 <_free_r+0x4a>
 8001eb0:	6811      	ldr	r1, [r2, #0]
 8001eb2:	1850      	adds	r0, r2, r1
 8001eb4:	42a0      	cmp	r0, r4
 8001eb6:	d10b      	bne.n	8001ed0 <_free_r+0x74>
 8001eb8:	6820      	ldr	r0, [r4, #0]
 8001eba:	4401      	add	r1, r0
 8001ebc:	1850      	adds	r0, r2, r1
 8001ebe:	4283      	cmp	r3, r0
 8001ec0:	6011      	str	r1, [r2, #0]
 8001ec2:	d1dd      	bne.n	8001e80 <_free_r+0x24>
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	6053      	str	r3, [r2, #4]
 8001eca:	4401      	add	r1, r0
 8001ecc:	6011      	str	r1, [r2, #0]
 8001ece:	e7d7      	b.n	8001e80 <_free_r+0x24>
 8001ed0:	d902      	bls.n	8001ed8 <_free_r+0x7c>
 8001ed2:	230c      	movs	r3, #12
 8001ed4:	602b      	str	r3, [r5, #0]
 8001ed6:	e7d3      	b.n	8001e80 <_free_r+0x24>
 8001ed8:	6820      	ldr	r0, [r4, #0]
 8001eda:	1821      	adds	r1, r4, r0
 8001edc:	428b      	cmp	r3, r1
 8001ede:	bf04      	itt	eq
 8001ee0:	6819      	ldreq	r1, [r3, #0]
 8001ee2:	685b      	ldreq	r3, [r3, #4]
 8001ee4:	6063      	str	r3, [r4, #4]
 8001ee6:	bf04      	itt	eq
 8001ee8:	1809      	addeq	r1, r1, r0
 8001eea:	6021      	streq	r1, [r4, #0]
 8001eec:	6054      	str	r4, [r2, #4]
 8001eee:	e7c7      	b.n	8001e80 <_free_r+0x24>
 8001ef0:	bd38      	pop	{r3, r4, r5, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200000b0 	.word	0x200000b0

08001ef8 <_malloc_r>:
 8001ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efa:	1ccd      	adds	r5, r1, #3
 8001efc:	f025 0503 	bic.w	r5, r5, #3
 8001f00:	3508      	adds	r5, #8
 8001f02:	2d0c      	cmp	r5, #12
 8001f04:	bf38      	it	cc
 8001f06:	250c      	movcc	r5, #12
 8001f08:	2d00      	cmp	r5, #0
 8001f0a:	4606      	mov	r6, r0
 8001f0c:	db01      	blt.n	8001f12 <_malloc_r+0x1a>
 8001f0e:	42a9      	cmp	r1, r5
 8001f10:	d903      	bls.n	8001f1a <_malloc_r+0x22>
 8001f12:	230c      	movs	r3, #12
 8001f14:	6033      	str	r3, [r6, #0]
 8001f16:	2000      	movs	r0, #0
 8001f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f1a:	f000 fbdd 	bl	80026d8 <__malloc_lock>
 8001f1e:	4921      	ldr	r1, [pc, #132]	; (8001fa4 <_malloc_r+0xac>)
 8001f20:	680a      	ldr	r2, [r1, #0]
 8001f22:	4614      	mov	r4, r2
 8001f24:	b99c      	cbnz	r4, 8001f4e <_malloc_r+0x56>
 8001f26:	4f20      	ldr	r7, [pc, #128]	; (8001fa8 <_malloc_r+0xb0>)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	b923      	cbnz	r3, 8001f36 <_malloc_r+0x3e>
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	4630      	mov	r0, r6
 8001f30:	f000 fb28 	bl	8002584 <_sbrk_r>
 8001f34:	6038      	str	r0, [r7, #0]
 8001f36:	4629      	mov	r1, r5
 8001f38:	4630      	mov	r0, r6
 8001f3a:	f000 fb23 	bl	8002584 <_sbrk_r>
 8001f3e:	1c43      	adds	r3, r0, #1
 8001f40:	d123      	bne.n	8001f8a <_malloc_r+0x92>
 8001f42:	230c      	movs	r3, #12
 8001f44:	6033      	str	r3, [r6, #0]
 8001f46:	4630      	mov	r0, r6
 8001f48:	f000 fbcc 	bl	80026e4 <__malloc_unlock>
 8001f4c:	e7e3      	b.n	8001f16 <_malloc_r+0x1e>
 8001f4e:	6823      	ldr	r3, [r4, #0]
 8001f50:	1b5b      	subs	r3, r3, r5
 8001f52:	d417      	bmi.n	8001f84 <_malloc_r+0x8c>
 8001f54:	2b0b      	cmp	r3, #11
 8001f56:	d903      	bls.n	8001f60 <_malloc_r+0x68>
 8001f58:	6023      	str	r3, [r4, #0]
 8001f5a:	441c      	add	r4, r3
 8001f5c:	6025      	str	r5, [r4, #0]
 8001f5e:	e004      	b.n	8001f6a <_malloc_r+0x72>
 8001f60:	6863      	ldr	r3, [r4, #4]
 8001f62:	42a2      	cmp	r2, r4
 8001f64:	bf0c      	ite	eq
 8001f66:	600b      	streq	r3, [r1, #0]
 8001f68:	6053      	strne	r3, [r2, #4]
 8001f6a:	4630      	mov	r0, r6
 8001f6c:	f000 fbba 	bl	80026e4 <__malloc_unlock>
 8001f70:	f104 000b 	add.w	r0, r4, #11
 8001f74:	1d23      	adds	r3, r4, #4
 8001f76:	f020 0007 	bic.w	r0, r0, #7
 8001f7a:	1ac2      	subs	r2, r0, r3
 8001f7c:	d0cc      	beq.n	8001f18 <_malloc_r+0x20>
 8001f7e:	1a1b      	subs	r3, r3, r0
 8001f80:	50a3      	str	r3, [r4, r2]
 8001f82:	e7c9      	b.n	8001f18 <_malloc_r+0x20>
 8001f84:	4622      	mov	r2, r4
 8001f86:	6864      	ldr	r4, [r4, #4]
 8001f88:	e7cc      	b.n	8001f24 <_malloc_r+0x2c>
 8001f8a:	1cc4      	adds	r4, r0, #3
 8001f8c:	f024 0403 	bic.w	r4, r4, #3
 8001f90:	42a0      	cmp	r0, r4
 8001f92:	d0e3      	beq.n	8001f5c <_malloc_r+0x64>
 8001f94:	1a21      	subs	r1, r4, r0
 8001f96:	4630      	mov	r0, r6
 8001f98:	f000 faf4 	bl	8002584 <_sbrk_r>
 8001f9c:	3001      	adds	r0, #1
 8001f9e:	d1dd      	bne.n	8001f5c <_malloc_r+0x64>
 8001fa0:	e7cf      	b.n	8001f42 <_malloc_r+0x4a>
 8001fa2:	bf00      	nop
 8001fa4:	200000b0 	.word	0x200000b0
 8001fa8:	200000b4 	.word	0x200000b4

08001fac <__sfputc_r>:
 8001fac:	6893      	ldr	r3, [r2, #8]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	b410      	push	{r4}
 8001fb4:	6093      	str	r3, [r2, #8]
 8001fb6:	da07      	bge.n	8001fc8 <__sfputc_r+0x1c>
 8001fb8:	6994      	ldr	r4, [r2, #24]
 8001fba:	42a3      	cmp	r3, r4
 8001fbc:	db01      	blt.n	8001fc2 <__sfputc_r+0x16>
 8001fbe:	290a      	cmp	r1, #10
 8001fc0:	d102      	bne.n	8001fc8 <__sfputc_r+0x1c>
 8001fc2:	bc10      	pop	{r4}
 8001fc4:	f7ff bc6c 	b.w	80018a0 <__swbuf_r>
 8001fc8:	6813      	ldr	r3, [r2, #0]
 8001fca:	1c58      	adds	r0, r3, #1
 8001fcc:	6010      	str	r0, [r2, #0]
 8001fce:	7019      	strb	r1, [r3, #0]
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	bc10      	pop	{r4}
 8001fd4:	4770      	bx	lr

08001fd6 <__sfputs_r>:
 8001fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd8:	4606      	mov	r6, r0
 8001fda:	460f      	mov	r7, r1
 8001fdc:	4614      	mov	r4, r2
 8001fde:	18d5      	adds	r5, r2, r3
 8001fe0:	42ac      	cmp	r4, r5
 8001fe2:	d101      	bne.n	8001fe8 <__sfputs_r+0x12>
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	e007      	b.n	8001ff8 <__sfputs_r+0x22>
 8001fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fec:	463a      	mov	r2, r7
 8001fee:	4630      	mov	r0, r6
 8001ff0:	f7ff ffdc 	bl	8001fac <__sfputc_r>
 8001ff4:	1c43      	adds	r3, r0, #1
 8001ff6:	d1f3      	bne.n	8001fe0 <__sfputs_r+0xa>
 8001ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ffc <_vfiprintf_r>:
 8001ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002000:	460d      	mov	r5, r1
 8002002:	b09d      	sub	sp, #116	; 0x74
 8002004:	4614      	mov	r4, r2
 8002006:	4698      	mov	r8, r3
 8002008:	4606      	mov	r6, r0
 800200a:	b118      	cbz	r0, 8002014 <_vfiprintf_r+0x18>
 800200c:	6983      	ldr	r3, [r0, #24]
 800200e:	b90b      	cbnz	r3, 8002014 <_vfiprintf_r+0x18>
 8002010:	f7ff fe20 	bl	8001c54 <__sinit>
 8002014:	4b89      	ldr	r3, [pc, #548]	; (800223c <_vfiprintf_r+0x240>)
 8002016:	429d      	cmp	r5, r3
 8002018:	d11b      	bne.n	8002052 <_vfiprintf_r+0x56>
 800201a:	6875      	ldr	r5, [r6, #4]
 800201c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800201e:	07d9      	lsls	r1, r3, #31
 8002020:	d405      	bmi.n	800202e <_vfiprintf_r+0x32>
 8002022:	89ab      	ldrh	r3, [r5, #12]
 8002024:	059a      	lsls	r2, r3, #22
 8002026:	d402      	bmi.n	800202e <_vfiprintf_r+0x32>
 8002028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800202a:	f7ff feb1 	bl	8001d90 <__retarget_lock_acquire_recursive>
 800202e:	89ab      	ldrh	r3, [r5, #12]
 8002030:	071b      	lsls	r3, r3, #28
 8002032:	d501      	bpl.n	8002038 <_vfiprintf_r+0x3c>
 8002034:	692b      	ldr	r3, [r5, #16]
 8002036:	b9eb      	cbnz	r3, 8002074 <_vfiprintf_r+0x78>
 8002038:	4629      	mov	r1, r5
 800203a:	4630      	mov	r0, r6
 800203c:	f7ff fc82 	bl	8001944 <__swsetup_r>
 8002040:	b1c0      	cbz	r0, 8002074 <_vfiprintf_r+0x78>
 8002042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002044:	07dc      	lsls	r4, r3, #31
 8002046:	d50e      	bpl.n	8002066 <_vfiprintf_r+0x6a>
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	b01d      	add	sp, #116	; 0x74
 800204e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002052:	4b7b      	ldr	r3, [pc, #492]	; (8002240 <_vfiprintf_r+0x244>)
 8002054:	429d      	cmp	r5, r3
 8002056:	d101      	bne.n	800205c <_vfiprintf_r+0x60>
 8002058:	68b5      	ldr	r5, [r6, #8]
 800205a:	e7df      	b.n	800201c <_vfiprintf_r+0x20>
 800205c:	4b79      	ldr	r3, [pc, #484]	; (8002244 <_vfiprintf_r+0x248>)
 800205e:	429d      	cmp	r5, r3
 8002060:	bf08      	it	eq
 8002062:	68f5      	ldreq	r5, [r6, #12]
 8002064:	e7da      	b.n	800201c <_vfiprintf_r+0x20>
 8002066:	89ab      	ldrh	r3, [r5, #12]
 8002068:	0598      	lsls	r0, r3, #22
 800206a:	d4ed      	bmi.n	8002048 <_vfiprintf_r+0x4c>
 800206c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800206e:	f7ff fe90 	bl	8001d92 <__retarget_lock_release_recursive>
 8002072:	e7e9      	b.n	8002048 <_vfiprintf_r+0x4c>
 8002074:	2300      	movs	r3, #0
 8002076:	9309      	str	r3, [sp, #36]	; 0x24
 8002078:	2320      	movs	r3, #32
 800207a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800207e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002082:	2330      	movs	r3, #48	; 0x30
 8002084:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002248 <_vfiprintf_r+0x24c>
 8002088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800208c:	f04f 0901 	mov.w	r9, #1
 8002090:	4623      	mov	r3, r4
 8002092:	469a      	mov	sl, r3
 8002094:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002098:	b10a      	cbz	r2, 800209e <_vfiprintf_r+0xa2>
 800209a:	2a25      	cmp	r2, #37	; 0x25
 800209c:	d1f9      	bne.n	8002092 <_vfiprintf_r+0x96>
 800209e:	ebba 0b04 	subs.w	fp, sl, r4
 80020a2:	d00b      	beq.n	80020bc <_vfiprintf_r+0xc0>
 80020a4:	465b      	mov	r3, fp
 80020a6:	4622      	mov	r2, r4
 80020a8:	4629      	mov	r1, r5
 80020aa:	4630      	mov	r0, r6
 80020ac:	f7ff ff93 	bl	8001fd6 <__sfputs_r>
 80020b0:	3001      	adds	r0, #1
 80020b2:	f000 80aa 	beq.w	800220a <_vfiprintf_r+0x20e>
 80020b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020b8:	445a      	add	r2, fp
 80020ba:	9209      	str	r2, [sp, #36]	; 0x24
 80020bc:	f89a 3000 	ldrb.w	r3, [sl]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80a2 	beq.w	800220a <_vfiprintf_r+0x20e>
 80020c6:	2300      	movs	r3, #0
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020d0:	f10a 0a01 	add.w	sl, sl, #1
 80020d4:	9304      	str	r3, [sp, #16]
 80020d6:	9307      	str	r3, [sp, #28]
 80020d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020dc:	931a      	str	r3, [sp, #104]	; 0x68
 80020de:	4654      	mov	r4, sl
 80020e0:	2205      	movs	r2, #5
 80020e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020e6:	4858      	ldr	r0, [pc, #352]	; (8002248 <_vfiprintf_r+0x24c>)
 80020e8:	f7fe f882 	bl	80001f0 <memchr>
 80020ec:	9a04      	ldr	r2, [sp, #16]
 80020ee:	b9d8      	cbnz	r0, 8002128 <_vfiprintf_r+0x12c>
 80020f0:	06d1      	lsls	r1, r2, #27
 80020f2:	bf44      	itt	mi
 80020f4:	2320      	movmi	r3, #32
 80020f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020fa:	0713      	lsls	r3, r2, #28
 80020fc:	bf44      	itt	mi
 80020fe:	232b      	movmi	r3, #43	; 0x2b
 8002100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002104:	f89a 3000 	ldrb.w	r3, [sl]
 8002108:	2b2a      	cmp	r3, #42	; 0x2a
 800210a:	d015      	beq.n	8002138 <_vfiprintf_r+0x13c>
 800210c:	9a07      	ldr	r2, [sp, #28]
 800210e:	4654      	mov	r4, sl
 8002110:	2000      	movs	r0, #0
 8002112:	f04f 0c0a 	mov.w	ip, #10
 8002116:	4621      	mov	r1, r4
 8002118:	f811 3b01 	ldrb.w	r3, [r1], #1
 800211c:	3b30      	subs	r3, #48	; 0x30
 800211e:	2b09      	cmp	r3, #9
 8002120:	d94e      	bls.n	80021c0 <_vfiprintf_r+0x1c4>
 8002122:	b1b0      	cbz	r0, 8002152 <_vfiprintf_r+0x156>
 8002124:	9207      	str	r2, [sp, #28]
 8002126:	e014      	b.n	8002152 <_vfiprintf_r+0x156>
 8002128:	eba0 0308 	sub.w	r3, r0, r8
 800212c:	fa09 f303 	lsl.w	r3, r9, r3
 8002130:	4313      	orrs	r3, r2
 8002132:	9304      	str	r3, [sp, #16]
 8002134:	46a2      	mov	sl, r4
 8002136:	e7d2      	b.n	80020de <_vfiprintf_r+0xe2>
 8002138:	9b03      	ldr	r3, [sp, #12]
 800213a:	1d19      	adds	r1, r3, #4
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	9103      	str	r1, [sp, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	bfbb      	ittet	lt
 8002144:	425b      	neglt	r3, r3
 8002146:	f042 0202 	orrlt.w	r2, r2, #2
 800214a:	9307      	strge	r3, [sp, #28]
 800214c:	9307      	strlt	r3, [sp, #28]
 800214e:	bfb8      	it	lt
 8002150:	9204      	strlt	r2, [sp, #16]
 8002152:	7823      	ldrb	r3, [r4, #0]
 8002154:	2b2e      	cmp	r3, #46	; 0x2e
 8002156:	d10c      	bne.n	8002172 <_vfiprintf_r+0x176>
 8002158:	7863      	ldrb	r3, [r4, #1]
 800215a:	2b2a      	cmp	r3, #42	; 0x2a
 800215c:	d135      	bne.n	80021ca <_vfiprintf_r+0x1ce>
 800215e:	9b03      	ldr	r3, [sp, #12]
 8002160:	1d1a      	adds	r2, r3, #4
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	9203      	str	r2, [sp, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	bfb8      	it	lt
 800216a:	f04f 33ff 	movlt.w	r3, #4294967295
 800216e:	3402      	adds	r4, #2
 8002170:	9305      	str	r3, [sp, #20]
 8002172:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002258 <_vfiprintf_r+0x25c>
 8002176:	7821      	ldrb	r1, [r4, #0]
 8002178:	2203      	movs	r2, #3
 800217a:	4650      	mov	r0, sl
 800217c:	f7fe f838 	bl	80001f0 <memchr>
 8002180:	b140      	cbz	r0, 8002194 <_vfiprintf_r+0x198>
 8002182:	2340      	movs	r3, #64	; 0x40
 8002184:	eba0 000a 	sub.w	r0, r0, sl
 8002188:	fa03 f000 	lsl.w	r0, r3, r0
 800218c:	9b04      	ldr	r3, [sp, #16]
 800218e:	4303      	orrs	r3, r0
 8002190:	3401      	adds	r4, #1
 8002192:	9304      	str	r3, [sp, #16]
 8002194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002198:	482c      	ldr	r0, [pc, #176]	; (800224c <_vfiprintf_r+0x250>)
 800219a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800219e:	2206      	movs	r2, #6
 80021a0:	f7fe f826 	bl	80001f0 <memchr>
 80021a4:	2800      	cmp	r0, #0
 80021a6:	d03f      	beq.n	8002228 <_vfiprintf_r+0x22c>
 80021a8:	4b29      	ldr	r3, [pc, #164]	; (8002250 <_vfiprintf_r+0x254>)
 80021aa:	bb1b      	cbnz	r3, 80021f4 <_vfiprintf_r+0x1f8>
 80021ac:	9b03      	ldr	r3, [sp, #12]
 80021ae:	3307      	adds	r3, #7
 80021b0:	f023 0307 	bic.w	r3, r3, #7
 80021b4:	3308      	adds	r3, #8
 80021b6:	9303      	str	r3, [sp, #12]
 80021b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021ba:	443b      	add	r3, r7
 80021bc:	9309      	str	r3, [sp, #36]	; 0x24
 80021be:	e767      	b.n	8002090 <_vfiprintf_r+0x94>
 80021c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80021c4:	460c      	mov	r4, r1
 80021c6:	2001      	movs	r0, #1
 80021c8:	e7a5      	b.n	8002116 <_vfiprintf_r+0x11a>
 80021ca:	2300      	movs	r3, #0
 80021cc:	3401      	adds	r4, #1
 80021ce:	9305      	str	r3, [sp, #20]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f04f 0c0a 	mov.w	ip, #10
 80021d6:	4620      	mov	r0, r4
 80021d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021dc:	3a30      	subs	r2, #48	; 0x30
 80021de:	2a09      	cmp	r2, #9
 80021e0:	d903      	bls.n	80021ea <_vfiprintf_r+0x1ee>
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0c5      	beq.n	8002172 <_vfiprintf_r+0x176>
 80021e6:	9105      	str	r1, [sp, #20]
 80021e8:	e7c3      	b.n	8002172 <_vfiprintf_r+0x176>
 80021ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80021ee:	4604      	mov	r4, r0
 80021f0:	2301      	movs	r3, #1
 80021f2:	e7f0      	b.n	80021d6 <_vfiprintf_r+0x1da>
 80021f4:	ab03      	add	r3, sp, #12
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	462a      	mov	r2, r5
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <_vfiprintf_r+0x258>)
 80021fc:	a904      	add	r1, sp, #16
 80021fe:	4630      	mov	r0, r6
 8002200:	f3af 8000 	nop.w
 8002204:	4607      	mov	r7, r0
 8002206:	1c78      	adds	r0, r7, #1
 8002208:	d1d6      	bne.n	80021b8 <_vfiprintf_r+0x1bc>
 800220a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800220c:	07d9      	lsls	r1, r3, #31
 800220e:	d405      	bmi.n	800221c <_vfiprintf_r+0x220>
 8002210:	89ab      	ldrh	r3, [r5, #12]
 8002212:	059a      	lsls	r2, r3, #22
 8002214:	d402      	bmi.n	800221c <_vfiprintf_r+0x220>
 8002216:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002218:	f7ff fdbb 	bl	8001d92 <__retarget_lock_release_recursive>
 800221c:	89ab      	ldrh	r3, [r5, #12]
 800221e:	065b      	lsls	r3, r3, #25
 8002220:	f53f af12 	bmi.w	8002048 <_vfiprintf_r+0x4c>
 8002224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002226:	e711      	b.n	800204c <_vfiprintf_r+0x50>
 8002228:	ab03      	add	r3, sp, #12
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	462a      	mov	r2, r5
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <_vfiprintf_r+0x258>)
 8002230:	a904      	add	r1, sp, #16
 8002232:	4630      	mov	r0, r6
 8002234:	f000 f880 	bl	8002338 <_printf_i>
 8002238:	e7e4      	b.n	8002204 <_vfiprintf_r+0x208>
 800223a:	bf00      	nop
 800223c:	08002850 	.word	0x08002850
 8002240:	08002870 	.word	0x08002870
 8002244:	08002830 	.word	0x08002830
 8002248:	08002890 	.word	0x08002890
 800224c:	0800289a 	.word	0x0800289a
 8002250:	00000000 	.word	0x00000000
 8002254:	08001fd7 	.word	0x08001fd7
 8002258:	08002896 	.word	0x08002896

0800225c <_printf_common>:
 800225c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002260:	4616      	mov	r6, r2
 8002262:	4699      	mov	r9, r3
 8002264:	688a      	ldr	r2, [r1, #8]
 8002266:	690b      	ldr	r3, [r1, #16]
 8002268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800226c:	4293      	cmp	r3, r2
 800226e:	bfb8      	it	lt
 8002270:	4613      	movlt	r3, r2
 8002272:	6033      	str	r3, [r6, #0]
 8002274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002278:	4607      	mov	r7, r0
 800227a:	460c      	mov	r4, r1
 800227c:	b10a      	cbz	r2, 8002282 <_printf_common+0x26>
 800227e:	3301      	adds	r3, #1
 8002280:	6033      	str	r3, [r6, #0]
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	0699      	lsls	r1, r3, #26
 8002286:	bf42      	ittt	mi
 8002288:	6833      	ldrmi	r3, [r6, #0]
 800228a:	3302      	addmi	r3, #2
 800228c:	6033      	strmi	r3, [r6, #0]
 800228e:	6825      	ldr	r5, [r4, #0]
 8002290:	f015 0506 	ands.w	r5, r5, #6
 8002294:	d106      	bne.n	80022a4 <_printf_common+0x48>
 8002296:	f104 0a19 	add.w	sl, r4, #25
 800229a:	68e3      	ldr	r3, [r4, #12]
 800229c:	6832      	ldr	r2, [r6, #0]
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	42ab      	cmp	r3, r5
 80022a2:	dc26      	bgt.n	80022f2 <_printf_common+0x96>
 80022a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80022a8:	1e13      	subs	r3, r2, #0
 80022aa:	6822      	ldr	r2, [r4, #0]
 80022ac:	bf18      	it	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	0692      	lsls	r2, r2, #26
 80022b2:	d42b      	bmi.n	800230c <_printf_common+0xb0>
 80022b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022b8:	4649      	mov	r1, r9
 80022ba:	4638      	mov	r0, r7
 80022bc:	47c0      	blx	r8
 80022be:	3001      	adds	r0, #1
 80022c0:	d01e      	beq.n	8002300 <_printf_common+0xa4>
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	68e5      	ldr	r5, [r4, #12]
 80022c6:	6832      	ldr	r2, [r6, #0]
 80022c8:	f003 0306 	and.w	r3, r3, #6
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	bf08      	it	eq
 80022d0:	1aad      	subeq	r5, r5, r2
 80022d2:	68a3      	ldr	r3, [r4, #8]
 80022d4:	6922      	ldr	r2, [r4, #16]
 80022d6:	bf0c      	ite	eq
 80022d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022dc:	2500      	movne	r5, #0
 80022de:	4293      	cmp	r3, r2
 80022e0:	bfc4      	itt	gt
 80022e2:	1a9b      	subgt	r3, r3, r2
 80022e4:	18ed      	addgt	r5, r5, r3
 80022e6:	2600      	movs	r6, #0
 80022e8:	341a      	adds	r4, #26
 80022ea:	42b5      	cmp	r5, r6
 80022ec:	d11a      	bne.n	8002324 <_printf_common+0xc8>
 80022ee:	2000      	movs	r0, #0
 80022f0:	e008      	b.n	8002304 <_printf_common+0xa8>
 80022f2:	2301      	movs	r3, #1
 80022f4:	4652      	mov	r2, sl
 80022f6:	4649      	mov	r1, r9
 80022f8:	4638      	mov	r0, r7
 80022fa:	47c0      	blx	r8
 80022fc:	3001      	adds	r0, #1
 80022fe:	d103      	bne.n	8002308 <_printf_common+0xac>
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002308:	3501      	adds	r5, #1
 800230a:	e7c6      	b.n	800229a <_printf_common+0x3e>
 800230c:	18e1      	adds	r1, r4, r3
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	2030      	movs	r0, #48	; 0x30
 8002312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002316:	4422      	add	r2, r4
 8002318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800231c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002320:	3302      	adds	r3, #2
 8002322:	e7c7      	b.n	80022b4 <_printf_common+0x58>
 8002324:	2301      	movs	r3, #1
 8002326:	4622      	mov	r2, r4
 8002328:	4649      	mov	r1, r9
 800232a:	4638      	mov	r0, r7
 800232c:	47c0      	blx	r8
 800232e:	3001      	adds	r0, #1
 8002330:	d0e6      	beq.n	8002300 <_printf_common+0xa4>
 8002332:	3601      	adds	r6, #1
 8002334:	e7d9      	b.n	80022ea <_printf_common+0x8e>
	...

08002338 <_printf_i>:
 8002338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800233c:	460c      	mov	r4, r1
 800233e:	4691      	mov	r9, r2
 8002340:	7e27      	ldrb	r7, [r4, #24]
 8002342:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002344:	2f78      	cmp	r7, #120	; 0x78
 8002346:	4680      	mov	r8, r0
 8002348:	469a      	mov	sl, r3
 800234a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800234e:	d807      	bhi.n	8002360 <_printf_i+0x28>
 8002350:	2f62      	cmp	r7, #98	; 0x62
 8002352:	d80a      	bhi.n	800236a <_printf_i+0x32>
 8002354:	2f00      	cmp	r7, #0
 8002356:	f000 80d8 	beq.w	800250a <_printf_i+0x1d2>
 800235a:	2f58      	cmp	r7, #88	; 0x58
 800235c:	f000 80a3 	beq.w	80024a6 <_printf_i+0x16e>
 8002360:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002368:	e03a      	b.n	80023e0 <_printf_i+0xa8>
 800236a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800236e:	2b15      	cmp	r3, #21
 8002370:	d8f6      	bhi.n	8002360 <_printf_i+0x28>
 8002372:	a001      	add	r0, pc, #4	; (adr r0, 8002378 <_printf_i+0x40>)
 8002374:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002378:	080023d1 	.word	0x080023d1
 800237c:	080023e5 	.word	0x080023e5
 8002380:	08002361 	.word	0x08002361
 8002384:	08002361 	.word	0x08002361
 8002388:	08002361 	.word	0x08002361
 800238c:	08002361 	.word	0x08002361
 8002390:	080023e5 	.word	0x080023e5
 8002394:	08002361 	.word	0x08002361
 8002398:	08002361 	.word	0x08002361
 800239c:	08002361 	.word	0x08002361
 80023a0:	08002361 	.word	0x08002361
 80023a4:	080024f1 	.word	0x080024f1
 80023a8:	08002415 	.word	0x08002415
 80023ac:	080024d3 	.word	0x080024d3
 80023b0:	08002361 	.word	0x08002361
 80023b4:	08002361 	.word	0x08002361
 80023b8:	08002513 	.word	0x08002513
 80023bc:	08002361 	.word	0x08002361
 80023c0:	08002415 	.word	0x08002415
 80023c4:	08002361 	.word	0x08002361
 80023c8:	08002361 	.word	0x08002361
 80023cc:	080024db 	.word	0x080024db
 80023d0:	680b      	ldr	r3, [r1, #0]
 80023d2:	1d1a      	adds	r2, r3, #4
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	600a      	str	r2, [r1, #0]
 80023d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80023dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0a3      	b.n	800252c <_printf_i+0x1f4>
 80023e4:	6825      	ldr	r5, [r4, #0]
 80023e6:	6808      	ldr	r0, [r1, #0]
 80023e8:	062e      	lsls	r6, r5, #24
 80023ea:	f100 0304 	add.w	r3, r0, #4
 80023ee:	d50a      	bpl.n	8002406 <_printf_i+0xce>
 80023f0:	6805      	ldr	r5, [r0, #0]
 80023f2:	600b      	str	r3, [r1, #0]
 80023f4:	2d00      	cmp	r5, #0
 80023f6:	da03      	bge.n	8002400 <_printf_i+0xc8>
 80023f8:	232d      	movs	r3, #45	; 0x2d
 80023fa:	426d      	negs	r5, r5
 80023fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002400:	485e      	ldr	r0, [pc, #376]	; (800257c <_printf_i+0x244>)
 8002402:	230a      	movs	r3, #10
 8002404:	e019      	b.n	800243a <_printf_i+0x102>
 8002406:	f015 0f40 	tst.w	r5, #64	; 0x40
 800240a:	6805      	ldr	r5, [r0, #0]
 800240c:	600b      	str	r3, [r1, #0]
 800240e:	bf18      	it	ne
 8002410:	b22d      	sxthne	r5, r5
 8002412:	e7ef      	b.n	80023f4 <_printf_i+0xbc>
 8002414:	680b      	ldr	r3, [r1, #0]
 8002416:	6825      	ldr	r5, [r4, #0]
 8002418:	1d18      	adds	r0, r3, #4
 800241a:	6008      	str	r0, [r1, #0]
 800241c:	0628      	lsls	r0, r5, #24
 800241e:	d501      	bpl.n	8002424 <_printf_i+0xec>
 8002420:	681d      	ldr	r5, [r3, #0]
 8002422:	e002      	b.n	800242a <_printf_i+0xf2>
 8002424:	0669      	lsls	r1, r5, #25
 8002426:	d5fb      	bpl.n	8002420 <_printf_i+0xe8>
 8002428:	881d      	ldrh	r5, [r3, #0]
 800242a:	4854      	ldr	r0, [pc, #336]	; (800257c <_printf_i+0x244>)
 800242c:	2f6f      	cmp	r7, #111	; 0x6f
 800242e:	bf0c      	ite	eq
 8002430:	2308      	moveq	r3, #8
 8002432:	230a      	movne	r3, #10
 8002434:	2100      	movs	r1, #0
 8002436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800243a:	6866      	ldr	r6, [r4, #4]
 800243c:	60a6      	str	r6, [r4, #8]
 800243e:	2e00      	cmp	r6, #0
 8002440:	bfa2      	ittt	ge
 8002442:	6821      	ldrge	r1, [r4, #0]
 8002444:	f021 0104 	bicge.w	r1, r1, #4
 8002448:	6021      	strge	r1, [r4, #0]
 800244a:	b90d      	cbnz	r5, 8002450 <_printf_i+0x118>
 800244c:	2e00      	cmp	r6, #0
 800244e:	d04d      	beq.n	80024ec <_printf_i+0x1b4>
 8002450:	4616      	mov	r6, r2
 8002452:	fbb5 f1f3 	udiv	r1, r5, r3
 8002456:	fb03 5711 	mls	r7, r3, r1, r5
 800245a:	5dc7      	ldrb	r7, [r0, r7]
 800245c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002460:	462f      	mov	r7, r5
 8002462:	42bb      	cmp	r3, r7
 8002464:	460d      	mov	r5, r1
 8002466:	d9f4      	bls.n	8002452 <_printf_i+0x11a>
 8002468:	2b08      	cmp	r3, #8
 800246a:	d10b      	bne.n	8002484 <_printf_i+0x14c>
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	07df      	lsls	r7, r3, #31
 8002470:	d508      	bpl.n	8002484 <_printf_i+0x14c>
 8002472:	6923      	ldr	r3, [r4, #16]
 8002474:	6861      	ldr	r1, [r4, #4]
 8002476:	4299      	cmp	r1, r3
 8002478:	bfde      	ittt	le
 800247a:	2330      	movle	r3, #48	; 0x30
 800247c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002480:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002484:	1b92      	subs	r2, r2, r6
 8002486:	6122      	str	r2, [r4, #16]
 8002488:	f8cd a000 	str.w	sl, [sp]
 800248c:	464b      	mov	r3, r9
 800248e:	aa03      	add	r2, sp, #12
 8002490:	4621      	mov	r1, r4
 8002492:	4640      	mov	r0, r8
 8002494:	f7ff fee2 	bl	800225c <_printf_common>
 8002498:	3001      	adds	r0, #1
 800249a:	d14c      	bne.n	8002536 <_printf_i+0x1fe>
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	b004      	add	sp, #16
 80024a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024a6:	4835      	ldr	r0, [pc, #212]	; (800257c <_printf_i+0x244>)
 80024a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	680e      	ldr	r6, [r1, #0]
 80024b0:	061f      	lsls	r7, r3, #24
 80024b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80024b6:	600e      	str	r6, [r1, #0]
 80024b8:	d514      	bpl.n	80024e4 <_printf_i+0x1ac>
 80024ba:	07d9      	lsls	r1, r3, #31
 80024bc:	bf44      	itt	mi
 80024be:	f043 0320 	orrmi.w	r3, r3, #32
 80024c2:	6023      	strmi	r3, [r4, #0]
 80024c4:	b91d      	cbnz	r5, 80024ce <_printf_i+0x196>
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	f023 0320 	bic.w	r3, r3, #32
 80024cc:	6023      	str	r3, [r4, #0]
 80024ce:	2310      	movs	r3, #16
 80024d0:	e7b0      	b.n	8002434 <_printf_i+0xfc>
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	f043 0320 	orr.w	r3, r3, #32
 80024d8:	6023      	str	r3, [r4, #0]
 80024da:	2378      	movs	r3, #120	; 0x78
 80024dc:	4828      	ldr	r0, [pc, #160]	; (8002580 <_printf_i+0x248>)
 80024de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024e2:	e7e3      	b.n	80024ac <_printf_i+0x174>
 80024e4:	065e      	lsls	r6, r3, #25
 80024e6:	bf48      	it	mi
 80024e8:	b2ad      	uxthmi	r5, r5
 80024ea:	e7e6      	b.n	80024ba <_printf_i+0x182>
 80024ec:	4616      	mov	r6, r2
 80024ee:	e7bb      	b.n	8002468 <_printf_i+0x130>
 80024f0:	680b      	ldr	r3, [r1, #0]
 80024f2:	6826      	ldr	r6, [r4, #0]
 80024f4:	6960      	ldr	r0, [r4, #20]
 80024f6:	1d1d      	adds	r5, r3, #4
 80024f8:	600d      	str	r5, [r1, #0]
 80024fa:	0635      	lsls	r5, r6, #24
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	d501      	bpl.n	8002504 <_printf_i+0x1cc>
 8002500:	6018      	str	r0, [r3, #0]
 8002502:	e002      	b.n	800250a <_printf_i+0x1d2>
 8002504:	0671      	lsls	r1, r6, #25
 8002506:	d5fb      	bpl.n	8002500 <_printf_i+0x1c8>
 8002508:	8018      	strh	r0, [r3, #0]
 800250a:	2300      	movs	r3, #0
 800250c:	6123      	str	r3, [r4, #16]
 800250e:	4616      	mov	r6, r2
 8002510:	e7ba      	b.n	8002488 <_printf_i+0x150>
 8002512:	680b      	ldr	r3, [r1, #0]
 8002514:	1d1a      	adds	r2, r3, #4
 8002516:	600a      	str	r2, [r1, #0]
 8002518:	681e      	ldr	r6, [r3, #0]
 800251a:	6862      	ldr	r2, [r4, #4]
 800251c:	2100      	movs	r1, #0
 800251e:	4630      	mov	r0, r6
 8002520:	f7fd fe66 	bl	80001f0 <memchr>
 8002524:	b108      	cbz	r0, 800252a <_printf_i+0x1f2>
 8002526:	1b80      	subs	r0, r0, r6
 8002528:	6060      	str	r0, [r4, #4]
 800252a:	6863      	ldr	r3, [r4, #4]
 800252c:	6123      	str	r3, [r4, #16]
 800252e:	2300      	movs	r3, #0
 8002530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002534:	e7a8      	b.n	8002488 <_printf_i+0x150>
 8002536:	6923      	ldr	r3, [r4, #16]
 8002538:	4632      	mov	r2, r6
 800253a:	4649      	mov	r1, r9
 800253c:	4640      	mov	r0, r8
 800253e:	47d0      	blx	sl
 8002540:	3001      	adds	r0, #1
 8002542:	d0ab      	beq.n	800249c <_printf_i+0x164>
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	079b      	lsls	r3, r3, #30
 8002548:	d413      	bmi.n	8002572 <_printf_i+0x23a>
 800254a:	68e0      	ldr	r0, [r4, #12]
 800254c:	9b03      	ldr	r3, [sp, #12]
 800254e:	4298      	cmp	r0, r3
 8002550:	bfb8      	it	lt
 8002552:	4618      	movlt	r0, r3
 8002554:	e7a4      	b.n	80024a0 <_printf_i+0x168>
 8002556:	2301      	movs	r3, #1
 8002558:	4632      	mov	r2, r6
 800255a:	4649      	mov	r1, r9
 800255c:	4640      	mov	r0, r8
 800255e:	47d0      	blx	sl
 8002560:	3001      	adds	r0, #1
 8002562:	d09b      	beq.n	800249c <_printf_i+0x164>
 8002564:	3501      	adds	r5, #1
 8002566:	68e3      	ldr	r3, [r4, #12]
 8002568:	9903      	ldr	r1, [sp, #12]
 800256a:	1a5b      	subs	r3, r3, r1
 800256c:	42ab      	cmp	r3, r5
 800256e:	dcf2      	bgt.n	8002556 <_printf_i+0x21e>
 8002570:	e7eb      	b.n	800254a <_printf_i+0x212>
 8002572:	2500      	movs	r5, #0
 8002574:	f104 0619 	add.w	r6, r4, #25
 8002578:	e7f5      	b.n	8002566 <_printf_i+0x22e>
 800257a:	bf00      	nop
 800257c:	080028a1 	.word	0x080028a1
 8002580:	080028b2 	.word	0x080028b2

08002584 <_sbrk_r>:
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	4d06      	ldr	r5, [pc, #24]	; (80025a0 <_sbrk_r+0x1c>)
 8002588:	2300      	movs	r3, #0
 800258a:	4604      	mov	r4, r0
 800258c:	4608      	mov	r0, r1
 800258e:	602b      	str	r3, [r5, #0]
 8002590:	f7fe f824 	bl	80005dc <_sbrk>
 8002594:	1c43      	adds	r3, r0, #1
 8002596:	d102      	bne.n	800259e <_sbrk_r+0x1a>
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	b103      	cbz	r3, 800259e <_sbrk_r+0x1a>
 800259c:	6023      	str	r3, [r4, #0]
 800259e:	bd38      	pop	{r3, r4, r5, pc}
 80025a0:	200000ec 	.word	0x200000ec

080025a4 <__sread>:
 80025a4:	b510      	push	{r4, lr}
 80025a6:	460c      	mov	r4, r1
 80025a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025ac:	f000 f8a0 	bl	80026f0 <_read_r>
 80025b0:	2800      	cmp	r0, #0
 80025b2:	bfab      	itete	ge
 80025b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80025b6:	89a3      	ldrhlt	r3, [r4, #12]
 80025b8:	181b      	addge	r3, r3, r0
 80025ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80025be:	bfac      	ite	ge
 80025c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80025c2:	81a3      	strhlt	r3, [r4, #12]
 80025c4:	bd10      	pop	{r4, pc}

080025c6 <__swrite>:
 80025c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ca:	461f      	mov	r7, r3
 80025cc:	898b      	ldrh	r3, [r1, #12]
 80025ce:	05db      	lsls	r3, r3, #23
 80025d0:	4605      	mov	r5, r0
 80025d2:	460c      	mov	r4, r1
 80025d4:	4616      	mov	r6, r2
 80025d6:	d505      	bpl.n	80025e4 <__swrite+0x1e>
 80025d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025dc:	2302      	movs	r3, #2
 80025de:	2200      	movs	r2, #0
 80025e0:	f000 f868 	bl	80026b4 <_lseek_r>
 80025e4:	89a3      	ldrh	r3, [r4, #12]
 80025e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025ee:	81a3      	strh	r3, [r4, #12]
 80025f0:	4632      	mov	r2, r6
 80025f2:	463b      	mov	r3, r7
 80025f4:	4628      	mov	r0, r5
 80025f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025fa:	f000 b817 	b.w	800262c <_write_r>

080025fe <__sseek>:
 80025fe:	b510      	push	{r4, lr}
 8002600:	460c      	mov	r4, r1
 8002602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002606:	f000 f855 	bl	80026b4 <_lseek_r>
 800260a:	1c43      	adds	r3, r0, #1
 800260c:	89a3      	ldrh	r3, [r4, #12]
 800260e:	bf15      	itete	ne
 8002610:	6560      	strne	r0, [r4, #84]	; 0x54
 8002612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800261a:	81a3      	strheq	r3, [r4, #12]
 800261c:	bf18      	it	ne
 800261e:	81a3      	strhne	r3, [r4, #12]
 8002620:	bd10      	pop	{r4, pc}

08002622 <__sclose>:
 8002622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002626:	f000 b813 	b.w	8002650 <_close_r>
	...

0800262c <_write_r>:
 800262c:	b538      	push	{r3, r4, r5, lr}
 800262e:	4d07      	ldr	r5, [pc, #28]	; (800264c <_write_r+0x20>)
 8002630:	4604      	mov	r4, r0
 8002632:	4608      	mov	r0, r1
 8002634:	4611      	mov	r1, r2
 8002636:	2200      	movs	r2, #0
 8002638:	602a      	str	r2, [r5, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	f7fd ff81 	bl	8000542 <_write>
 8002640:	1c43      	adds	r3, r0, #1
 8002642:	d102      	bne.n	800264a <_write_r+0x1e>
 8002644:	682b      	ldr	r3, [r5, #0]
 8002646:	b103      	cbz	r3, 800264a <_write_r+0x1e>
 8002648:	6023      	str	r3, [r4, #0]
 800264a:	bd38      	pop	{r3, r4, r5, pc}
 800264c:	200000ec 	.word	0x200000ec

08002650 <_close_r>:
 8002650:	b538      	push	{r3, r4, r5, lr}
 8002652:	4d06      	ldr	r5, [pc, #24]	; (800266c <_close_r+0x1c>)
 8002654:	2300      	movs	r3, #0
 8002656:	4604      	mov	r4, r0
 8002658:	4608      	mov	r0, r1
 800265a:	602b      	str	r3, [r5, #0]
 800265c:	f7fd ff8d 	bl	800057a <_close>
 8002660:	1c43      	adds	r3, r0, #1
 8002662:	d102      	bne.n	800266a <_close_r+0x1a>
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	b103      	cbz	r3, 800266a <_close_r+0x1a>
 8002668:	6023      	str	r3, [r4, #0]
 800266a:	bd38      	pop	{r3, r4, r5, pc}
 800266c:	200000ec 	.word	0x200000ec

08002670 <_fstat_r>:
 8002670:	b538      	push	{r3, r4, r5, lr}
 8002672:	4d07      	ldr	r5, [pc, #28]	; (8002690 <_fstat_r+0x20>)
 8002674:	2300      	movs	r3, #0
 8002676:	4604      	mov	r4, r0
 8002678:	4608      	mov	r0, r1
 800267a:	4611      	mov	r1, r2
 800267c:	602b      	str	r3, [r5, #0]
 800267e:	f7fd ff87 	bl	8000590 <_fstat>
 8002682:	1c43      	adds	r3, r0, #1
 8002684:	d102      	bne.n	800268c <_fstat_r+0x1c>
 8002686:	682b      	ldr	r3, [r5, #0]
 8002688:	b103      	cbz	r3, 800268c <_fstat_r+0x1c>
 800268a:	6023      	str	r3, [r4, #0]
 800268c:	bd38      	pop	{r3, r4, r5, pc}
 800268e:	bf00      	nop
 8002690:	200000ec 	.word	0x200000ec

08002694 <_isatty_r>:
 8002694:	b538      	push	{r3, r4, r5, lr}
 8002696:	4d06      	ldr	r5, [pc, #24]	; (80026b0 <_isatty_r+0x1c>)
 8002698:	2300      	movs	r3, #0
 800269a:	4604      	mov	r4, r0
 800269c:	4608      	mov	r0, r1
 800269e:	602b      	str	r3, [r5, #0]
 80026a0:	f7fd ff85 	bl	80005ae <_isatty>
 80026a4:	1c43      	adds	r3, r0, #1
 80026a6:	d102      	bne.n	80026ae <_isatty_r+0x1a>
 80026a8:	682b      	ldr	r3, [r5, #0]
 80026aa:	b103      	cbz	r3, 80026ae <_isatty_r+0x1a>
 80026ac:	6023      	str	r3, [r4, #0]
 80026ae:	bd38      	pop	{r3, r4, r5, pc}
 80026b0:	200000ec 	.word	0x200000ec

080026b4 <_lseek_r>:
 80026b4:	b538      	push	{r3, r4, r5, lr}
 80026b6:	4d07      	ldr	r5, [pc, #28]	; (80026d4 <_lseek_r+0x20>)
 80026b8:	4604      	mov	r4, r0
 80026ba:	4608      	mov	r0, r1
 80026bc:	4611      	mov	r1, r2
 80026be:	2200      	movs	r2, #0
 80026c0:	602a      	str	r2, [r5, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f7fd ff7d 	bl	80005c2 <_lseek>
 80026c8:	1c43      	adds	r3, r0, #1
 80026ca:	d102      	bne.n	80026d2 <_lseek_r+0x1e>
 80026cc:	682b      	ldr	r3, [r5, #0]
 80026ce:	b103      	cbz	r3, 80026d2 <_lseek_r+0x1e>
 80026d0:	6023      	str	r3, [r4, #0]
 80026d2:	bd38      	pop	{r3, r4, r5, pc}
 80026d4:	200000ec 	.word	0x200000ec

080026d8 <__malloc_lock>:
 80026d8:	4801      	ldr	r0, [pc, #4]	; (80026e0 <__malloc_lock+0x8>)
 80026da:	f7ff bb59 	b.w	8001d90 <__retarget_lock_acquire_recursive>
 80026de:	bf00      	nop
 80026e0:	200000e4 	.word	0x200000e4

080026e4 <__malloc_unlock>:
 80026e4:	4801      	ldr	r0, [pc, #4]	; (80026ec <__malloc_unlock+0x8>)
 80026e6:	f7ff bb54 	b.w	8001d92 <__retarget_lock_release_recursive>
 80026ea:	bf00      	nop
 80026ec:	200000e4 	.word	0x200000e4

080026f0 <_read_r>:
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	4d07      	ldr	r5, [pc, #28]	; (8002710 <_read_r+0x20>)
 80026f4:	4604      	mov	r4, r0
 80026f6:	4608      	mov	r0, r1
 80026f8:	4611      	mov	r1, r2
 80026fa:	2200      	movs	r2, #0
 80026fc:	602a      	str	r2, [r5, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	f7fd ff02 	bl	8000508 <_read>
 8002704:	1c43      	adds	r3, r0, #1
 8002706:	d102      	bne.n	800270e <_read_r+0x1e>
 8002708:	682b      	ldr	r3, [r5, #0]
 800270a:	b103      	cbz	r3, 800270e <_read_r+0x1e>
 800270c:	6023      	str	r3, [r4, #0]
 800270e:	bd38      	pop	{r3, r4, r5, pc}
 8002710:	200000ec 	.word	0x200000ec

08002714 <_init>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	bf00      	nop
 8002718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271a:	bc08      	pop	{r3}
 800271c:	469e      	mov	lr, r3
 800271e:	4770      	bx	lr

08002720 <_fini>:
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002722:	bf00      	nop
 8002724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002726:	bc08      	pop	{r3}
 8002728:	469e      	mov	lr, r3
 800272a:	4770      	bx	lr
