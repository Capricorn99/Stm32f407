
000Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a90  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08001c40  08001c40  00011c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ce8  08001ce8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001ce8  08001ce8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ce8  08001ce8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ce8  08001ce8  00011ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cec  08001cec  00011cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000064  08001d54  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08001d54  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a42  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b53  00000000  00000000  00023ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000288  00000000  00000000  00024628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000220  00000000  00000000  000248b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036f2  00000000  00000000  00024ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c45  00000000  00000000  000281c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000bd4d  00000000  00000000  0002ae07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00036b54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001108  00000000  00000000  00036ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001c28 	.word	0x08001c28

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08001c28 	.word	0x08001c28

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <SPI2_GPIOInits+0x58>)
 8000298:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 800029a:	2302      	movs	r3, #2
 800029c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800029e:	2305      	movs	r3, #5
 80002a0:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 80002a2:	2300      	movs	r3, #0
 80002a4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002aa:	2302      	movs	r3, #2
 80002ac:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ae:	230d      	movs	r3, #13
 80002b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fa85 	bl	80007c4 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002ba:	230f      	movs	r3, #15
 80002bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fa7f 	bl	80007c4 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002c6:	230e      	movs	r3, #14
 80002c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fa79 	bl	80007c4 <GPIO_Init>


	//NSS
 	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002d2:	230c      	movs	r3, #12
 80002d4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fa73 	bl	80007c4 <GPIO_Init>
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40020400 	.word	0x40020400

080002ec <SPI2_Inits>:

void SPI2_Inits(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <SPI2_Inits+0x40>)
 80002f2:	4a0f      	ldr	r2, [pc, #60]	; (8000330 <SPI2_Inits+0x44>)
 80002f4:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <SPI2_Inits+0x40>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <SPI2_Inits+0x40>)
 80002fe:	2201      	movs	r2, #1
 8000300:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <SPI2_Inits+0x40>)
 8000304:	2202      	movs	r2, #2
 8000306:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <SPI2_Inits+0x40>)
 800030a:	2200      	movs	r2, #0
 800030c:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <SPI2_Inits+0x40>)
 8000310:	2200      	movs	r2, #0
 8000312:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;					//CPHA 1
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <SPI2_Inits+0x40>)
 8000316:	2201      	movs	r2, #1
 8000318:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 800031a:	4b04      	ldr	r3, [pc, #16]	; (800032c <SPI2_Inits+0x40>)
 800031c:	2200      	movs	r2, #0
 800031e:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000320:	4802      	ldr	r0, [pc, #8]	; (800032c <SPI2_Inits+0x40>)
 8000322:	f000 fc5a 	bl	8000bda <SPI_Init>
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000090 	.word	0x20000090
 8000330:	40003800 	.word	0x40003800

08000334 <main>:

int main (void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 800033a:	f7ff ffa9 	bl	8000290 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 800033e:	f7ff ffd5 	bl	80002ec <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2, ENABLE);
 8000342:	2101      	movs	r1, #1
 8000344:	4813      	ldr	r0, [pc, #76]	; (8000394 <main+0x60>)
 8000346:	f000 fc2d 	bl	8000ba4 <SPI_SSOEConfig>
	uint32_t data = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]

	data = ADE_ReadData(SPI2, MODE, 2);
 800034e:	2202      	movs	r2, #2
 8000350:	2109      	movs	r1, #9
 8000352:	4810      	ldr	r0, [pc, #64]	; (8000394 <main+0x60>)
 8000354:	f000 f912 	bl	800057c <ADE_ReadData>
 8000358:	6078      	str	r0, [r7, #4]
	printf("DATA : %x \n", data);
 800035a:	6879      	ldr	r1, [r7, #4]
 800035c:	480e      	ldr	r0, [pc, #56]	; (8000398 <main+0x64>)
 800035e:	f000 fd11 	bl	8000d84 <iprintf>

	data = ADE_ReadData(SPI2, MODE, 2);
 8000362:	2202      	movs	r2, #2
 8000364:	2109      	movs	r1, #9
 8000366:	480b      	ldr	r0, [pc, #44]	; (8000394 <main+0x60>)
 8000368:	f000 f908 	bl	800057c <ADE_ReadData>
 800036c:	6078      	str	r0, [r7, #4]
	printf("DATA : %x \n", data);
 800036e:	6879      	ldr	r1, [r7, #4]
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <main+0x64>)
 8000372:	f000 fd07 	bl	8000d84 <iprintf>

	data = ADE_ReadData(SPI2, MODE, 2);
 8000376:	2202      	movs	r2, #2
 8000378:	2109      	movs	r1, #9
 800037a:	4806      	ldr	r0, [pc, #24]	; (8000394 <main+0x60>)
 800037c:	f000 f8fe 	bl	800057c <ADE_ReadData>
 8000380:	6078      	str	r0, [r7, #4]
	printf("DATA : %x \n", data);
 8000382:	6879      	ldr	r1, [r7, #4]
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <main+0x64>)
 8000386:	f000 fcfd 	bl	8000d84 <iprintf>
 800038a:	2300      	movs	r3, #0

	//void ADE_WriteData(SPI_RegDef_t *pSPIx,uint8_t address, uint32_t write_buffer, uint32_t bytes_to_write);
}
 800038c:	4618      	mov	r0, r3
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40003800 	.word	0x40003800
 8000398:	08001c40 	.word	0x08001c40

0800039c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <ITM_SendChar+0x44>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <ITM_SendChar+0x44>)
 80003ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003b0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <ITM_SendChar+0x48>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a0b      	ldr	r2, [pc, #44]	; (80003e4 <ITM_SendChar+0x48>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80003be:	bf00      	nop
 80003c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d0f8      	beq.n	80003c0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80003ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	6013      	str	r3, [r2, #0]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	e000edfc 	.word	0xe000edfc
 80003e4:	e0000e00 	.word	0xe0000e00

080003e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
 80003f8:	e00a      	b.n	8000410 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003fa:	f3af 8000 	nop.w
 80003fe:	4601      	mov	r1, r0
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	1c5a      	adds	r2, r3, #1
 8000404:	60ba      	str	r2, [r7, #8]
 8000406:	b2ca      	uxtb	r2, r1
 8000408:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	3301      	adds	r3, #1
 800040e:	617b      	str	r3, [r7, #20]
 8000410:	697a      	ldr	r2, [r7, #20]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	429a      	cmp	r2, r3
 8000416:	dbf0      	blt.n	80003fa <_read+0x12>
	}

return len;
 8000418:	687b      	ldr	r3, [r7, #4]
}
 800041a:	4618      	mov	r0, r3
 800041c:	3718      	adds	r7, #24
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b086      	sub	sp, #24
 8000426:	af00      	add	r7, sp, #0
 8000428:	60f8      	str	r0, [r7, #12]
 800042a:	60b9      	str	r1, [r7, #8]
 800042c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
 8000432:	e009      	b.n	8000448 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	1c5a      	adds	r2, r3, #1
 8000438:	60ba      	str	r2, [r7, #8]
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ffad 	bl	800039c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	3301      	adds	r3, #1
 8000446:	617b      	str	r3, [r7, #20]
 8000448:	697a      	ldr	r2, [r7, #20]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	429a      	cmp	r2, r3
 800044e:	dbf1      	blt.n	8000434 <_write+0x12>
	}
	return len;
 8000450:	687b      	ldr	r3, [r7, #4]
}
 8000452:	4618      	mov	r0, r3
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <_close>:

int _close(int file)
{
 800045a:	b480      	push	{r7}
 800045c:	b083      	sub	sp, #12
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
	return -1;
 8000462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000480:	605a      	str	r2, [r3, #4]
	return 0;
 8000482:	2300      	movs	r3, #0
}
 8000484:	4618      	mov	r0, r3
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <_isatty>:

int _isatty(int file)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
	return 1;
 8000496:	2301      	movs	r3, #1
}
 8000498:	4618      	mov	r0, r3
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b085      	sub	sp, #20
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	60f8      	str	r0, [r7, #12]
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	607a      	str	r2, [r7, #4]
	return 0;
 80004ae:	2300      	movs	r3, #0
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3714      	adds	r7, #20
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
	...

080004bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c4:	4a14      	ldr	r2, [pc, #80]	; (8000518 <_sbrk+0x5c>)
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <_sbrk+0x60>)
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <_sbrk+0x64>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d102      	bne.n	80004de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <_sbrk+0x64>)
 80004da:	4a12      	ldr	r2, [pc, #72]	; (8000524 <_sbrk+0x68>)
 80004dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	693a      	ldr	r2, [r7, #16]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d207      	bcs.n	80004fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004ec:	f000 fc18 	bl	8000d20 <__errno>
 80004f0:	4603      	mov	r3, r0
 80004f2:	220c      	movs	r2, #12
 80004f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295
 80004fa:	e009      	b.n	8000510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <_sbrk+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <_sbrk+0x64>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	4a05      	ldr	r2, [pc, #20]	; (8000520 <_sbrk+0x64>)
 800050c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3718      	adds	r7, #24
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20020000 	.word	0x20020000
 800051c:	00000400 	.word	0x00000400
 8000520:	20000080 	.word	0x20000080
 8000524:	200002b8 	.word	0x200002b8

08000528 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800052c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <LoopForever+0x6>)
  ldr r1, =_edata
 8000532:	490d      	ldr	r1, [pc, #52]	; (8000568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <LoopForever+0xe>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000548:	4c0a      	ldr	r4, [pc, #40]	; (8000574 <LoopForever+0x16>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000556:	f000 fbe9 	bl	8000d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff feeb 	bl	8000334 <main>

0800055e <LoopForever>:

LoopForever:
    b LoopForever
 800055e:	e7fe      	b.n	800055e <LoopForever>
  ldr   r0, =_estack
 8000560:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800056c:	08001cf0 	.word	0x08001cf0
  ldr r2, =_sbss
 8000570:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000574:	200002b4 	.word	0x200002b4

08000578 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <ADC_IRQHandler>
	...

0800057c <ADE_ReadData>:




uint32_t ADE_ReadData( SPI_RegDef_t *pSPIx, uint8_t addr, uint32_t bytes_to_read)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	460b      	mov	r3, r1
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	72fb      	strb	r3, [r7, #11]
	uint32_t data = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
	uint8_t dummy_write = 0xff;
 800058e:	23ff      	movs	r3, #255	; 0xff
 8000590:	75fb      	strb	r3, [r7, #23]
//	uint8_t dummy_read;
	SPI_PeripheralControl(pSPIx,ENABLE); //SS pin pull to low
 8000592:	2101      	movs	r1, #1
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f000 fba7 	bl	8000ce8 <SPI_PeripheralControl>
//	SPI_SendData(pSPIx, &address, 1);      //send address
//	SPI_ReceiveData(pSPIx, &dummy_read, 1);	//clear RXNE flag
//	SPI_SendData(pSPIx, &dummy_write, 1);	//Send some dummy byte to fetch the response from the slave
//	SPI_ReceiveData(pSPIx, pRxBuffer, bytes_to_read); //luu data received

	SPI_Transfer(pSPIx, &addr);
 800059a:	f107 030b 	add.w	r3, r7, #11
 800059e:	4619      	mov	r1, r3
 80005a0:	68f8      	ldr	r0, [r7, #12]
 80005a2:	f000 fb88 	bl	8000cb6 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_read; i++)
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
 80005aa:	e014      	b.n	80005d6 <ADE_ReadData+0x5a>
	{
		data <<= 8;
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	021b      	lsls	r3, r3, #8
 80005b0:	61fb      	str	r3, [r7, #28]
		data |= SPI_Transfer(pSPIx, &dummy_write);
 80005b2:	f107 0317 	add.w	r3, r7, #23
 80005b6:	4619      	mov	r1, r3
 80005b8:	68f8      	ldr	r0, [r7, #12]
 80005ba:	f000 fb7c 	bl	8000cb6 <SPI_Transfer>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	61fb      	str	r3, [r7, #28]
		printf("%x\n", data);
 80005c8:	69f9      	ldr	r1, [r7, #28]
 80005ca:	4809      	ldr	r0, [pc, #36]	; (80005f0 <ADE_ReadData+0x74>)
 80005cc:	f000 fbda 	bl	8000d84 <iprintf>
	for(uint32_t i = 0; i < bytes_to_read; i++)
 80005d0:	69bb      	ldr	r3, [r7, #24]
 80005d2:	3301      	adds	r3, #1
 80005d4:	61bb      	str	r3, [r7, #24]
 80005d6:	69ba      	ldr	r2, [r7, #24]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d3e6      	bcc.n	80005ac <ADE_ReadData+0x30>
	}
	SPI_PeripheralControl(pSPIx, DISABLE); //SS pin pull to high
 80005de:	2100      	movs	r1, #0
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f000 fb81 	bl	8000ce8 <SPI_PeripheralControl>
	return data;
 80005e6:	69fb      	ldr	r3, [r7, #28]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	08001c4c 	.word	0x08001c4c

080005f4 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t*pGPIOx, uint8_t EnorDi)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d162      	bne.n	80006cc <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a64      	ldr	r2, [pc, #400]	; (800079c <GPIO_PeriClockControl+0x1a8>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d106      	bne.n	800061c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800060e:	4b64      	ldr	r3, [pc, #400]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a63      	ldr	r2, [pc, #396]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800061a:	e0b9      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a61      	ldr	r2, [pc, #388]	; (80007a4 <GPIO_PeriClockControl+0x1b0>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d106      	bne.n	8000632 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000624:	4b5e      	ldr	r3, [pc, #376]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a5d      	ldr	r2, [pc, #372]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 800062a:	f043 0302 	orr.w	r3, r3, #2
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000630:	e0ae      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a5c      	ldr	r2, [pc, #368]	; (80007a8 <GPIO_PeriClockControl+0x1b4>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d106      	bne.n	8000648 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800063a:	4b59      	ldr	r3, [pc, #356]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a58      	ldr	r2, [pc, #352]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000646:	e0a3      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a58      	ldr	r2, [pc, #352]	; (80007ac <GPIO_PeriClockControl+0x1b8>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d106      	bne.n	800065e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000650:	4b53      	ldr	r3, [pc, #332]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	4a52      	ldr	r2, [pc, #328]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000656:	f043 0308 	orr.w	r3, r3, #8
 800065a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800065c:	e098      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a53      	ldr	r2, [pc, #332]	; (80007b0 <GPIO_PeriClockControl+0x1bc>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d106      	bne.n	8000674 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000666:	4b4e      	ldr	r3, [pc, #312]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a4d      	ldr	r2, [pc, #308]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 800066c:	f043 0310 	orr.w	r3, r3, #16
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000672:	e08d      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a4f      	ldr	r2, [pc, #316]	; (80007b4 <GPIO_PeriClockControl+0x1c0>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d106      	bne.n	800068a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800067c:	4b48      	ldr	r3, [pc, #288]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	4a47      	ldr	r2, [pc, #284]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000682:	f043 0320 	orr.w	r3, r3, #32
 8000686:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000688:	e082      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a4a      	ldr	r2, [pc, #296]	; (80007b8 <GPIO_PeriClockControl+0x1c4>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d106      	bne.n	80006a0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000692:	4b43      	ldr	r3, [pc, #268]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a42      	ldr	r2, [pc, #264]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800069e:	e077      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a46      	ldr	r2, [pc, #280]	; (80007bc <GPIO_PeriClockControl+0x1c8>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d106      	bne.n	80006b6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80006a8:	4b3d      	ldr	r3, [pc, #244]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ac:	4a3c      	ldr	r2, [pc, #240]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 80006ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006b4:	e06c      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a41      	ldr	r2, [pc, #260]	; (80007c0 <GPIO_PeriClockControl+0x1cc>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d168      	bne.n	8000790 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80006be:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a37      	ldr	r2, [pc, #220]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 80006c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ca:	e061      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a33      	ldr	r2, [pc, #204]	; (800079c <GPIO_PeriClockControl+0x1a8>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d106      	bne.n	80006e2 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80006d4:	4b32      	ldr	r3, [pc, #200]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d8:	4a31      	ldr	r2, [pc, #196]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 80006da:	f023 0301 	bic.w	r3, r3, #1
 80006de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006e0:	e056      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a2f      	ldr	r2, [pc, #188]	; (80007a4 <GPIO_PeriClockControl+0x1b0>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d106      	bne.n	80006f8 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80006ea:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2c      	ldr	r2, [pc, #176]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 80006f0:	f023 0302 	bic.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006f6:	e04b      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a2b      	ldr	r2, [pc, #172]	; (80007a8 <GPIO_PeriClockControl+0x1b4>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d106      	bne.n	800070e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000706:	f023 0304 	bic.w	r3, r3, #4
 800070a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800070c:	e040      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a26      	ldr	r2, [pc, #152]	; (80007ac <GPIO_PeriClockControl+0x1b8>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d106      	bne.n	8000724 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 800071c:	f023 0308 	bic.w	r3, r3, #8
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000722:	e035      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a22      	ldr	r2, [pc, #136]	; (80007b0 <GPIO_PeriClockControl+0x1bc>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d106      	bne.n	800073a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000730:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000732:	f023 0310 	bic.w	r3, r3, #16
 8000736:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000738:	e02a      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a1d      	ldr	r2, [pc, #116]	; (80007b4 <GPIO_PeriClockControl+0x1c0>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d106      	bne.n	8000750 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000748:	f023 0320 	bic.w	r3, r3, #32
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800074e:	e01f      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <GPIO_PeriClockControl+0x1c4>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d106      	bne.n	8000766 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 800075e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000762:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000764:	e014      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a14      	ldr	r2, [pc, #80]	; (80007bc <GPIO_PeriClockControl+0x1c8>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d106      	bne.n	800077c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
}
 800077a:	e009      	b.n	8000790 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <GPIO_PeriClockControl+0x1cc>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d105      	bne.n	8000790 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	4a05      	ldr	r2, [pc, #20]	; (80007a0 <GPIO_PeriClockControl+0x1ac>)
 800078a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800078e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40020000 	.word	0x40020000
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020800 	.word	0x40020800
 80007ac:	40020c00 	.word	0x40020c00
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40021400 	.word	0x40021400
 80007b8:	40021800 	.word	0x40021800
 80007bc:	40021c00 	.word	0x40021c00
 80007c0:	40022000 	.word	0x40022000

080007c4 <GPIO_Init>:

/*
 * Init & De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2101      	movs	r1, #1
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff0c 	bl	80005f4 <GPIO_PeriClockControl>

	//1. configure the mode of gpio
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	795b      	ldrb	r3, [r3, #5]
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d81f      	bhi.n	8000824 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	795b      	ldrb	r3, [r3, #5]
 80007e8:	461a      	mov	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	791b      	ldrb	r3, [r3, #4]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	617b      	str	r3, [r7, #20]

		pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	791b      	ldrb	r3, [r3, #4]
 8000800:	4619      	mov	r1, r3
 8000802:	2303      	movs	r3, #3
 8000804:	408b      	lsls	r3, r1
 8000806:	43db      	mvns	r3, r3
 8000808:	4619      	mov	r1, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	400a      	ands	r2, r1
 8000810:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx ->MODER |= temp; //setting
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	6819      	ldr	r1, [r3, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	697a      	ldr	r2, [r7, #20]
 800081e:	430a      	orrs	r2, r1
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	e0c2      	b.n	80009aa <GPIO_Init+0x1e6>


	}else
	{
		//code later
		if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	795b      	ldrb	r3, [r3, #5]
 8000828:	2b04      	cmp	r3, #4
 800082a:	d817      	bhi.n	800085c <GPIO_Init+0x98>
		{
			//1. configure the FTSR
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 800082c:	4b47      	ldr	r3, [pc, #284]	; (800094c <GPIO_Init+0x188>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	7912      	ldrb	r2, [r2, #4]
 8000834:	4611      	mov	r1, r2
 8000836:	2201      	movs	r2, #1
 8000838:	408a      	lsls	r2, r1
 800083a:	4611      	mov	r1, r2
 800083c:	4a43      	ldr	r2, [pc, #268]	; (800094c <GPIO_Init+0x188>)
 800083e:	430b      	orrs	r3, r1
 8000840:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI ->RTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000842:	4b42      	ldr	r3, [pc, #264]	; (800094c <GPIO_Init+0x188>)
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	7912      	ldrb	r2, [r2, #4]
 800084a:	4611      	mov	r1, r2
 800084c:	2201      	movs	r2, #1
 800084e:	408a      	lsls	r2, r1
 8000850:	43d2      	mvns	r2, r2
 8000852:	4611      	mov	r1, r2
 8000854:	4a3d      	ldr	r2, [pc, #244]	; (800094c <GPIO_Init+0x188>)
 8000856:	400b      	ands	r3, r1
 8000858:	6093      	str	r3, [r2, #8]
 800085a:	e035      	b.n	80008c8 <GPIO_Init+0x104>
		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	795b      	ldrb	r3, [r3, #5]
 8000860:	2b05      	cmp	r3, #5
 8000862:	d817      	bhi.n	8000894 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000864:	4b39      	ldr	r3, [pc, #228]	; (800094c <GPIO_Init+0x188>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	7912      	ldrb	r2, [r2, #4]
 800086c:	4611      	mov	r1, r2
 800086e:	2201      	movs	r2, #1
 8000870:	408a      	lsls	r2, r1
 8000872:	4611      	mov	r1, r2
 8000874:	4a35      	ldr	r2, [pc, #212]	; (800094c <GPIO_Init+0x188>)
 8000876:	430b      	orrs	r3, r1
 8000878:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 800087a:	4b34      	ldr	r3, [pc, #208]	; (800094c <GPIO_Init+0x188>)
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	7912      	ldrb	r2, [r2, #4]
 8000882:	4611      	mov	r1, r2
 8000884:	2201      	movs	r2, #1
 8000886:	408a      	lsls	r2, r1
 8000888:	43d2      	mvns	r2, r2
 800088a:	4611      	mov	r1, r2
 800088c:	4a2f      	ldr	r2, [pc, #188]	; (800094c <GPIO_Init+0x188>)
 800088e:	400b      	ands	r3, r1
 8000890:	60d3      	str	r3, [r2, #12]
 8000892:	e019      	b.n	80008c8 <GPIO_Init+0x104>

		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	795b      	ldrb	r3, [r3, #5]
 8000898:	2b06      	cmp	r3, #6
 800089a:	d815      	bhi.n	80008c8 <GPIO_Init+0x104>
		{
			//1. configure the both FTSR and RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 800089c:	4b2b      	ldr	r3, [pc, #172]	; (800094c <GPIO_Init+0x188>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	7912      	ldrb	r2, [r2, #4]
 80008a4:	4611      	mov	r1, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	408a      	lsls	r2, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	4a27      	ldr	r2, [pc, #156]	; (800094c <GPIO_Init+0x188>)
 80008ae:	430b      	orrs	r3, r1
 80008b0:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <GPIO_Init+0x188>)
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	7912      	ldrb	r2, [r2, #4]
 80008ba:	4611      	mov	r1, r2
 80008bc:	2201      	movs	r2, #1
 80008be:	408a      	lsls	r2, r1
 80008c0:	4611      	mov	r1, r2
 80008c2:	4a22      	ldr	r2, [pc, #136]	; (800094c <GPIO_Init+0x188>)
 80008c4:	430b      	orrs	r3, r1
 80008c6:	60d3      	str	r3, [r2, #12]

		}

		//2. configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	089b      	lsrs	r3, r3, #2
 80008ce:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	f003 0303 	and.w	r3, r3, #3
 80008d8:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a1c      	ldr	r2, [pc, #112]	; (8000950 <GPIO_Init+0x18c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d045      	beq.n	8000970 <GPIO_Init+0x1ac>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1a      	ldr	r2, [pc, #104]	; (8000954 <GPIO_Init+0x190>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d02b      	beq.n	8000946 <GPIO_Init+0x182>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a19      	ldr	r2, [pc, #100]	; (8000958 <GPIO_Init+0x194>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d024      	beq.n	8000942 <GPIO_Init+0x17e>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a17      	ldr	r2, [pc, #92]	; (800095c <GPIO_Init+0x198>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d01d      	beq.n	800093e <GPIO_Init+0x17a>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a16      	ldr	r2, [pc, #88]	; (8000960 <GPIO_Init+0x19c>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d016      	beq.n	800093a <GPIO_Init+0x176>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <GPIO_Init+0x1a0>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d00f      	beq.n	8000936 <GPIO_Init+0x172>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <GPIO_Init+0x1a4>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d008      	beq.n	8000932 <GPIO_Init+0x16e>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a11      	ldr	r2, [pc, #68]	; (800096c <GPIO_Init+0x1a8>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <GPIO_Init+0x16a>
 800092a:	2307      	movs	r3, #7
 800092c:	e021      	b.n	8000972 <GPIO_Init+0x1ae>
 800092e:	2300      	movs	r3, #0
 8000930:	e01f      	b.n	8000972 <GPIO_Init+0x1ae>
 8000932:	2306      	movs	r3, #6
 8000934:	e01d      	b.n	8000972 <GPIO_Init+0x1ae>
 8000936:	2305      	movs	r3, #5
 8000938:	e01b      	b.n	8000972 <GPIO_Init+0x1ae>
 800093a:	2304      	movs	r3, #4
 800093c:	e019      	b.n	8000972 <GPIO_Init+0x1ae>
 800093e:	2303      	movs	r3, #3
 8000940:	e017      	b.n	8000972 <GPIO_Init+0x1ae>
 8000942:	2302      	movs	r3, #2
 8000944:	e015      	b.n	8000972 <GPIO_Init+0x1ae>
 8000946:	2301      	movs	r3, #1
 8000948:	e013      	b.n	8000972 <GPIO_Init+0x1ae>
 800094a:	bf00      	nop
 800094c:	40013c00 	.word	0x40013c00
 8000950:	40020000 	.word	0x40020000
 8000954:	40020400 	.word	0x40020400
 8000958:	40020800 	.word	0x40020800
 800095c:	40020c00 	.word	0x40020c00
 8000960:	40021000 	.word	0x40021000
 8000964:	40021400 	.word	0x40021400
 8000968:	40021800 	.word	0x40021800
 800096c:	40021c00 	.word	0x40021c00
 8000970:	2300      	movs	r3, #0
 8000972:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000974:	4b5c      	ldr	r3, [pc, #368]	; (8000ae8 <GPIO_Init+0x324>)
 8000976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000978:	4a5b      	ldr	r2, [pc, #364]	; (8000ae8 <GPIO_Init+0x324>)
 800097a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]= portcode << (temp2*4);
 8000980:	7c7a      	ldrb	r2, [r7, #17]
 8000982:	7cbb      	ldrb	r3, [r7, #18]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	fa02 f103 	lsl.w	r1, r2, r3
 800098a:	4a58      	ldr	r2, [pc, #352]	; (8000aec <GPIO_Init+0x328>)
 800098c:	7cfb      	ldrb	r3, [r7, #19]
 800098e:	3302      	adds	r3, #2
 8000990:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI ->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000994:	4b56      	ldr	r3, [pc, #344]	; (8000af0 <GPIO_Init+0x32c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	7912      	ldrb	r2, [r2, #4]
 800099c:	4611      	mov	r1, r2
 800099e:	2201      	movs	r2, #1
 80009a0:	408a      	lsls	r2, r1
 80009a2:	4611      	mov	r1, r2
 80009a4:	4a52      	ldr	r2, [pc, #328]	; (8000af0 <GPIO_Init+0x32c>)
 80009a6:	430b      	orrs	r3, r1
 80009a8:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
	//2. configure the speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	799b      	ldrb	r3, [r3, #6]
 80009b2:	461a      	mov	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	791b      	ldrb	r3, [r3, #4]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	791b      	ldrb	r3, [r3, #4]
 80009ca:	4619      	mov	r1, r3
 80009cc:	2303      	movs	r3, #3
 80009ce:	408b      	lsls	r3, r1
 80009d0:	43db      	mvns	r3, r3
 80009d2:	4619      	mov	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	400a      	ands	r2, r1
 80009da:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OSPEEDR |= temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6899      	ldr	r1, [r3, #8]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	430a      	orrs	r2, r1
 80009ea:	609a      	str	r2, [r3, #8]

	temp =0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
	//3. configure the pu pd settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	79db      	ldrb	r3, [r3, #7]
 80009f4:	461a      	mov	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	791b      	ldrb	r3, [r3, #4]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	2303      	movs	r3, #3
 8000a10:	408b      	lsls	r3, r1
 8000a12:	43db      	mvns	r3, r3
 8000a14:	4619      	mov	r1, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	400a      	ands	r2, r1
 8000a1c:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->PUPDR |= temp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	68d9      	ldr	r1, [r3, #12]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	60da      	str	r2, [r3, #12]

	temp =0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]

	//4. configure
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinoType << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	7a1b      	ldrb	r3, [r3, #8]
 8000a36:	461a      	mov	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	791b      	ldrb	r3, [r3, #4]
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x01 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	791b      	ldrb	r3, [r3, #4]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2301      	movs	r3, #1
 8000a50:	408b      	lsls	r3, r1
 8000a52:	43db      	mvns	r3, r3
 8000a54:	4619      	mov	r1, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OTYPER |= temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6859      	ldr	r1, [r3, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	605a      	str	r2, [r3, #4]

	temp =0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]

	//5. configure
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	795b      	ldrb	r3, [r3, #5]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d132      	bne.n	8000ae0 <GPIO_Init+0x31c>
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	791b      	ldrb	r3, [r3, #4]
 8000a7e:	08db      	lsrs	r3, r3, #3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	791b      	ldrb	r3, [r3, #4]
 8000a88:	f003 0307 	and.w	r3, r3, #7
 8000a8c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	3208      	adds	r2, #8
 8000a96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4011      	ands	r1, r2
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	3208      	adds	r2, #8
 8000ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	3208      	adds	r2, #8
 8000abe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7a5b      	ldrb	r3, [r3, #9]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4311      	orrs	r1, r2
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	3208      	adds	r2, #8
 8000adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000ae0:	bf00      	nop
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40013800 	.word	0x40013800
 8000af0:	40013c00 	.word	0x40013c00

08000af4 <SPI_PeriClockControl>:
static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_RegDef_t*pSPIx, uint8_t EnorDi)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d120      	bne.n	8000b48 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a22      	ldr	r2, [pc, #136]	; (8000b94 <SPI_PeriClockControl+0xa0>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d106      	bne.n	8000b1c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000b0e:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <SPI_PeriClockControl+0xa4>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a21      	ldr	r2, [pc, #132]	; (8000b98 <SPI_PeriClockControl+0xa4>)
 8000b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI3_PCLK_DI();
		}
	}

}
 8000b1a:	e035      	b.n	8000b88 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a1f      	ldr	r2, [pc, #124]	; (8000b9c <SPI_PeriClockControl+0xa8>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d106      	bne.n	8000b32 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <SPI_PeriClockControl+0xa4>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <SPI_PeriClockControl+0xa4>)
 8000b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b30:	e02a      	b.n	8000b88 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a1a      	ldr	r2, [pc, #104]	; (8000ba0 <SPI_PeriClockControl+0xac>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d126      	bne.n	8000b88 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <SPI_PeriClockControl+0xa4>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <SPI_PeriClockControl+0xa4>)
 8000b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b46:	e01f      	b.n	8000b88 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <SPI_PeriClockControl+0xa0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d106      	bne.n	8000b5e <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <SPI_PeriClockControl+0xa4>)
 8000b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b54:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <SPI_PeriClockControl+0xa4>)
 8000b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b5a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b5c:	e014      	b.n	8000b88 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <SPI_PeriClockControl+0xa8>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d106      	bne.n	8000b74 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <SPI_PeriClockControl+0xa4>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <SPI_PeriClockControl+0xa4>)
 8000b6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b72:	e009      	b.n	8000b88 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <SPI_PeriClockControl+0xac>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d105      	bne.n	8000b88 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SPI_PeriClockControl+0xa4>)
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b80:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <SPI_PeriClockControl+0xa4>)
 8000b82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b86:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40013000 	.word	0x40013000
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40003800 	.word	0x40003800
 8000ba0:	40003c00 	.word	0x40003c00

08000ba4 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d106      	bne.n	8000bc4 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f043 0204 	orr.w	r2, r3, #4
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000bc2:	e005      	b.n	8000bd0 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f023 0204 	bic.w	r2, r3, #4
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	605a      	str	r2, [r3, #4]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <SPI_Init>:
/************************
 *
 */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b084      	sub	sp, #16
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2101      	movs	r1, #1
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff83 	bl	8000af4 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	791b      	ldrb	r3, [r3, #4]
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	795b      	ldrb	r3, [r3, #5]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d104      	bne.n	8000c12 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	e014      	b.n	8000c3c <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	795b      	ldrb	r3, [r3, #5]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d104      	bne.n	8000c24 <SPI_Init+0x4a>
	{
		//BIDI mode should be set
		tempreg |= ~(1<<SPI_CR1_BIDIMODE);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	e00b      	b.n	8000c3c <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	795b      	ldrb	r3, [r3, #5]
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d107      	bne.n	8000c3c <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c32:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1<<SPI_CR1_RXONLY);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3a:	60fb      	str	r3, [r7, #12]
	}
	//3. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	799b      	ldrb	r3, [r3, #6]
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	461a      	mov	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	79db      	ldrb	r3, [r3, #7]
 8000c4e:	02db      	lsls	r3, r3, #11
 8000c50:	461a      	mov	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]
	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7a1b      	ldrb	r3, [r3, #8]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7a5b      	ldrb	r3, [r3, #9]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	7a9b      	ldrb	r3, [r3, #10]
 8000c76:	025b      	lsls	r3, r3, #9
 8000c78:	461a      	mov	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <SPI_GetFlagStatus>:
/*************************
 *
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
//	printf(" %x \n",pSPIx->SR & FlagName);
	if(pSPIx->SR & FlagName)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000caa:	2300      	movs	r3, #0

}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr

08000cb6 <SPI_Transfer>:
		}

}

uint8_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	6039      	str	r1, [r7, #0]
	pSPIx->DR = *pTxBuffer;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	60da      	str	r2, [r3, #12]
	while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000cca:	bf00      	nop
 8000ccc:	2101      	movs	r1, #1
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ffde 	bl	8000c90 <SPI_GetFlagStatus>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f8      	beq.n	8000ccc <SPI_Transfer+0x16>
	return pSPIx->DR;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	b2db      	uxtb	r3, r3
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <SPI_PeripheralControl>:
/**************************
 *
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d106      	bne.n	8000d08 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 8000d06:	e005      	b.n	8000d14 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
	...

08000d20 <__errno>:
 8000d20:	4b01      	ldr	r3, [pc, #4]	; (8000d28 <__errno+0x8>)
 8000d22:	6818      	ldr	r0, [r3, #0]
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000000 	.word	0x20000000

08000d2c <__libc_init_array>:
 8000d2c:	b570      	push	{r4, r5, r6, lr}
 8000d2e:	4d0d      	ldr	r5, [pc, #52]	; (8000d64 <__libc_init_array+0x38>)
 8000d30:	4c0d      	ldr	r4, [pc, #52]	; (8000d68 <__libc_init_array+0x3c>)
 8000d32:	1b64      	subs	r4, r4, r5
 8000d34:	10a4      	asrs	r4, r4, #2
 8000d36:	2600      	movs	r6, #0
 8000d38:	42a6      	cmp	r6, r4
 8000d3a:	d109      	bne.n	8000d50 <__libc_init_array+0x24>
 8000d3c:	4d0b      	ldr	r5, [pc, #44]	; (8000d6c <__libc_init_array+0x40>)
 8000d3e:	4c0c      	ldr	r4, [pc, #48]	; (8000d70 <__libc_init_array+0x44>)
 8000d40:	f000 ff72 	bl	8001c28 <_init>
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	10a4      	asrs	r4, r4, #2
 8000d48:	2600      	movs	r6, #0
 8000d4a:	42a6      	cmp	r6, r4
 8000d4c:	d105      	bne.n	8000d5a <__libc_init_array+0x2e>
 8000d4e:	bd70      	pop	{r4, r5, r6, pc}
 8000d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d54:	4798      	blx	r3
 8000d56:	3601      	adds	r6, #1
 8000d58:	e7ee      	b.n	8000d38 <__libc_init_array+0xc>
 8000d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d5e:	4798      	blx	r3
 8000d60:	3601      	adds	r6, #1
 8000d62:	e7f2      	b.n	8000d4a <__libc_init_array+0x1e>
 8000d64:	08001ce8 	.word	0x08001ce8
 8000d68:	08001ce8 	.word	0x08001ce8
 8000d6c:	08001ce8 	.word	0x08001ce8
 8000d70:	08001cec 	.word	0x08001cec

08000d74 <memset>:
 8000d74:	4402      	add	r2, r0
 8000d76:	4603      	mov	r3, r0
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d100      	bne.n	8000d7e <memset+0xa>
 8000d7c:	4770      	bx	lr
 8000d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8000d82:	e7f9      	b.n	8000d78 <memset+0x4>

08000d84 <iprintf>:
 8000d84:	b40f      	push	{r0, r1, r2, r3}
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <iprintf+0x2c>)
 8000d88:	b513      	push	{r0, r1, r4, lr}
 8000d8a:	681c      	ldr	r4, [r3, #0]
 8000d8c:	b124      	cbz	r4, 8000d98 <iprintf+0x14>
 8000d8e:	69a3      	ldr	r3, [r4, #24]
 8000d90:	b913      	cbnz	r3, 8000d98 <iprintf+0x14>
 8000d92:	4620      	mov	r0, r4
 8000d94:	f000 f9e8 	bl	8001168 <__sinit>
 8000d98:	ab05      	add	r3, sp, #20
 8000d9a:	9a04      	ldr	r2, [sp, #16]
 8000d9c:	68a1      	ldr	r1, [r4, #8]
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	4620      	mov	r0, r4
 8000da2:	f000 fbb5 	bl	8001510 <_vfiprintf_r>
 8000da6:	b002      	add	sp, #8
 8000da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dac:	b004      	add	sp, #16
 8000dae:	4770      	bx	lr
 8000db0:	20000000 	.word	0x20000000

08000db4 <__swbuf_r>:
 8000db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db6:	460e      	mov	r6, r1
 8000db8:	4614      	mov	r4, r2
 8000dba:	4605      	mov	r5, r0
 8000dbc:	b118      	cbz	r0, 8000dc6 <__swbuf_r+0x12>
 8000dbe:	6983      	ldr	r3, [r0, #24]
 8000dc0:	b90b      	cbnz	r3, 8000dc6 <__swbuf_r+0x12>
 8000dc2:	f000 f9d1 	bl	8001168 <__sinit>
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <__swbuf_r+0x98>)
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d12b      	bne.n	8000e24 <__swbuf_r+0x70>
 8000dcc:	686c      	ldr	r4, [r5, #4]
 8000dce:	69a3      	ldr	r3, [r4, #24]
 8000dd0:	60a3      	str	r3, [r4, #8]
 8000dd2:	89a3      	ldrh	r3, [r4, #12]
 8000dd4:	071a      	lsls	r2, r3, #28
 8000dd6:	d52f      	bpl.n	8000e38 <__swbuf_r+0x84>
 8000dd8:	6923      	ldr	r3, [r4, #16]
 8000dda:	b36b      	cbz	r3, 8000e38 <__swbuf_r+0x84>
 8000ddc:	6923      	ldr	r3, [r4, #16]
 8000dde:	6820      	ldr	r0, [r4, #0]
 8000de0:	1ac0      	subs	r0, r0, r3
 8000de2:	6963      	ldr	r3, [r4, #20]
 8000de4:	b2f6      	uxtb	r6, r6
 8000de6:	4283      	cmp	r3, r0
 8000de8:	4637      	mov	r7, r6
 8000dea:	dc04      	bgt.n	8000df6 <__swbuf_r+0x42>
 8000dec:	4621      	mov	r1, r4
 8000dee:	4628      	mov	r0, r5
 8000df0:	f000 f926 	bl	8001040 <_fflush_r>
 8000df4:	bb30      	cbnz	r0, 8000e44 <__swbuf_r+0x90>
 8000df6:	68a3      	ldr	r3, [r4, #8]
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	60a3      	str	r3, [r4, #8]
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	6022      	str	r2, [r4, #0]
 8000e02:	701e      	strb	r6, [r3, #0]
 8000e04:	6963      	ldr	r3, [r4, #20]
 8000e06:	3001      	adds	r0, #1
 8000e08:	4283      	cmp	r3, r0
 8000e0a:	d004      	beq.n	8000e16 <__swbuf_r+0x62>
 8000e0c:	89a3      	ldrh	r3, [r4, #12]
 8000e0e:	07db      	lsls	r3, r3, #31
 8000e10:	d506      	bpl.n	8000e20 <__swbuf_r+0x6c>
 8000e12:	2e0a      	cmp	r6, #10
 8000e14:	d104      	bne.n	8000e20 <__swbuf_r+0x6c>
 8000e16:	4621      	mov	r1, r4
 8000e18:	4628      	mov	r0, r5
 8000e1a:	f000 f911 	bl	8001040 <_fflush_r>
 8000e1e:	b988      	cbnz	r0, 8000e44 <__swbuf_r+0x90>
 8000e20:	4638      	mov	r0, r7
 8000e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <__swbuf_r+0x9c>)
 8000e26:	429c      	cmp	r4, r3
 8000e28:	d101      	bne.n	8000e2e <__swbuf_r+0x7a>
 8000e2a:	68ac      	ldr	r4, [r5, #8]
 8000e2c:	e7cf      	b.n	8000dce <__swbuf_r+0x1a>
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <__swbuf_r+0xa0>)
 8000e30:	429c      	cmp	r4, r3
 8000e32:	bf08      	it	eq
 8000e34:	68ec      	ldreq	r4, [r5, #12]
 8000e36:	e7ca      	b.n	8000dce <__swbuf_r+0x1a>
 8000e38:	4621      	mov	r1, r4
 8000e3a:	4628      	mov	r0, r5
 8000e3c:	f000 f80c 	bl	8000e58 <__swsetup_r>
 8000e40:	2800      	cmp	r0, #0
 8000e42:	d0cb      	beq.n	8000ddc <__swbuf_r+0x28>
 8000e44:	f04f 37ff 	mov.w	r7, #4294967295
 8000e48:	e7ea      	b.n	8000e20 <__swbuf_r+0x6c>
 8000e4a:	bf00      	nop
 8000e4c:	08001c74 	.word	0x08001c74
 8000e50:	08001c94 	.word	0x08001c94
 8000e54:	08001c54 	.word	0x08001c54

08000e58 <__swsetup_r>:
 8000e58:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <__swsetup_r+0xcc>)
 8000e5a:	b570      	push	{r4, r5, r6, lr}
 8000e5c:	681d      	ldr	r5, [r3, #0]
 8000e5e:	4606      	mov	r6, r0
 8000e60:	460c      	mov	r4, r1
 8000e62:	b125      	cbz	r5, 8000e6e <__swsetup_r+0x16>
 8000e64:	69ab      	ldr	r3, [r5, #24]
 8000e66:	b913      	cbnz	r3, 8000e6e <__swsetup_r+0x16>
 8000e68:	4628      	mov	r0, r5
 8000e6a:	f000 f97d 	bl	8001168 <__sinit>
 8000e6e:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <__swsetup_r+0xd0>)
 8000e70:	429c      	cmp	r4, r3
 8000e72:	d10f      	bne.n	8000e94 <__swsetup_r+0x3c>
 8000e74:	686c      	ldr	r4, [r5, #4]
 8000e76:	89a3      	ldrh	r3, [r4, #12]
 8000e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000e7c:	0719      	lsls	r1, r3, #28
 8000e7e:	d42c      	bmi.n	8000eda <__swsetup_r+0x82>
 8000e80:	06dd      	lsls	r5, r3, #27
 8000e82:	d411      	bmi.n	8000ea8 <__swsetup_r+0x50>
 8000e84:	2309      	movs	r3, #9
 8000e86:	6033      	str	r3, [r6, #0]
 8000e88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000e8c:	81a3      	strh	r3, [r4, #12]
 8000e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e92:	e03e      	b.n	8000f12 <__swsetup_r+0xba>
 8000e94:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <__swsetup_r+0xd4>)
 8000e96:	429c      	cmp	r4, r3
 8000e98:	d101      	bne.n	8000e9e <__swsetup_r+0x46>
 8000e9a:	68ac      	ldr	r4, [r5, #8]
 8000e9c:	e7eb      	b.n	8000e76 <__swsetup_r+0x1e>
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <__swsetup_r+0xd8>)
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	bf08      	it	eq
 8000ea4:	68ec      	ldreq	r4, [r5, #12]
 8000ea6:	e7e6      	b.n	8000e76 <__swsetup_r+0x1e>
 8000ea8:	0758      	lsls	r0, r3, #29
 8000eaa:	d512      	bpl.n	8000ed2 <__swsetup_r+0x7a>
 8000eac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000eae:	b141      	cbz	r1, 8000ec2 <__swsetup_r+0x6a>
 8000eb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	d002      	beq.n	8000ebe <__swsetup_r+0x66>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	f000 fa59 	bl	8001370 <_free_r>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	6363      	str	r3, [r4, #52]	; 0x34
 8000ec2:	89a3      	ldrh	r3, [r4, #12]
 8000ec4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000ec8:	81a3      	strh	r3, [r4, #12]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	6063      	str	r3, [r4, #4]
 8000ece:	6923      	ldr	r3, [r4, #16]
 8000ed0:	6023      	str	r3, [r4, #0]
 8000ed2:	89a3      	ldrh	r3, [r4, #12]
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	81a3      	strh	r3, [r4, #12]
 8000eda:	6923      	ldr	r3, [r4, #16]
 8000edc:	b94b      	cbnz	r3, 8000ef2 <__swsetup_r+0x9a>
 8000ede:	89a3      	ldrh	r3, [r4, #12]
 8000ee0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ee8:	d003      	beq.n	8000ef2 <__swsetup_r+0x9a>
 8000eea:	4621      	mov	r1, r4
 8000eec:	4630      	mov	r0, r6
 8000eee:	f000 f9ff 	bl	80012f0 <__smakebuf_r>
 8000ef2:	89a0      	ldrh	r0, [r4, #12]
 8000ef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000ef8:	f010 0301 	ands.w	r3, r0, #1
 8000efc:	d00a      	beq.n	8000f14 <__swsetup_r+0xbc>
 8000efe:	2300      	movs	r3, #0
 8000f00:	60a3      	str	r3, [r4, #8]
 8000f02:	6963      	ldr	r3, [r4, #20]
 8000f04:	425b      	negs	r3, r3
 8000f06:	61a3      	str	r3, [r4, #24]
 8000f08:	6923      	ldr	r3, [r4, #16]
 8000f0a:	b943      	cbnz	r3, 8000f1e <__swsetup_r+0xc6>
 8000f0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000f10:	d1ba      	bne.n	8000e88 <__swsetup_r+0x30>
 8000f12:	bd70      	pop	{r4, r5, r6, pc}
 8000f14:	0781      	lsls	r1, r0, #30
 8000f16:	bf58      	it	pl
 8000f18:	6963      	ldrpl	r3, [r4, #20]
 8000f1a:	60a3      	str	r3, [r4, #8]
 8000f1c:	e7f4      	b.n	8000f08 <__swsetup_r+0xb0>
 8000f1e:	2000      	movs	r0, #0
 8000f20:	e7f7      	b.n	8000f12 <__swsetup_r+0xba>
 8000f22:	bf00      	nop
 8000f24:	20000000 	.word	0x20000000
 8000f28:	08001c74 	.word	0x08001c74
 8000f2c:	08001c94 	.word	0x08001c94
 8000f30:	08001c54 	.word	0x08001c54

08000f34 <__sflush_r>:
 8000f34:	898a      	ldrh	r2, [r1, #12]
 8000f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f3a:	4605      	mov	r5, r0
 8000f3c:	0710      	lsls	r0, r2, #28
 8000f3e:	460c      	mov	r4, r1
 8000f40:	d458      	bmi.n	8000ff4 <__sflush_r+0xc0>
 8000f42:	684b      	ldr	r3, [r1, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	dc05      	bgt.n	8000f54 <__sflush_r+0x20>
 8000f48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	dc02      	bgt.n	8000f54 <__sflush_r+0x20>
 8000f4e:	2000      	movs	r0, #0
 8000f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f56:	2e00      	cmp	r6, #0
 8000f58:	d0f9      	beq.n	8000f4e <__sflush_r+0x1a>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000f60:	682f      	ldr	r7, [r5, #0]
 8000f62:	602b      	str	r3, [r5, #0]
 8000f64:	d032      	beq.n	8000fcc <__sflush_r+0x98>
 8000f66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000f68:	89a3      	ldrh	r3, [r4, #12]
 8000f6a:	075a      	lsls	r2, r3, #29
 8000f6c:	d505      	bpl.n	8000f7a <__sflush_r+0x46>
 8000f6e:	6863      	ldr	r3, [r4, #4]
 8000f70:	1ac0      	subs	r0, r0, r3
 8000f72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f74:	b10b      	cbz	r3, 8000f7a <__sflush_r+0x46>
 8000f76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f78:	1ac0      	subs	r0, r0, r3
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f80:	6a21      	ldr	r1, [r4, #32]
 8000f82:	4628      	mov	r0, r5
 8000f84:	47b0      	blx	r6
 8000f86:	1c43      	adds	r3, r0, #1
 8000f88:	89a3      	ldrh	r3, [r4, #12]
 8000f8a:	d106      	bne.n	8000f9a <__sflush_r+0x66>
 8000f8c:	6829      	ldr	r1, [r5, #0]
 8000f8e:	291d      	cmp	r1, #29
 8000f90:	d82c      	bhi.n	8000fec <__sflush_r+0xb8>
 8000f92:	4a2a      	ldr	r2, [pc, #168]	; (800103c <__sflush_r+0x108>)
 8000f94:	40ca      	lsrs	r2, r1
 8000f96:	07d6      	lsls	r6, r2, #31
 8000f98:	d528      	bpl.n	8000fec <__sflush_r+0xb8>
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	6062      	str	r2, [r4, #4]
 8000f9e:	04d9      	lsls	r1, r3, #19
 8000fa0:	6922      	ldr	r2, [r4, #16]
 8000fa2:	6022      	str	r2, [r4, #0]
 8000fa4:	d504      	bpl.n	8000fb0 <__sflush_r+0x7c>
 8000fa6:	1c42      	adds	r2, r0, #1
 8000fa8:	d101      	bne.n	8000fae <__sflush_r+0x7a>
 8000faa:	682b      	ldr	r3, [r5, #0]
 8000fac:	b903      	cbnz	r3, 8000fb0 <__sflush_r+0x7c>
 8000fae:	6560      	str	r0, [r4, #84]	; 0x54
 8000fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000fb2:	602f      	str	r7, [r5, #0]
 8000fb4:	2900      	cmp	r1, #0
 8000fb6:	d0ca      	beq.n	8000f4e <__sflush_r+0x1a>
 8000fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000fbc:	4299      	cmp	r1, r3
 8000fbe:	d002      	beq.n	8000fc6 <__sflush_r+0x92>
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	f000 f9d5 	bl	8001370 <_free_r>
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	6360      	str	r0, [r4, #52]	; 0x34
 8000fca:	e7c1      	b.n	8000f50 <__sflush_r+0x1c>
 8000fcc:	6a21      	ldr	r1, [r4, #32]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	47b0      	blx	r6
 8000fd4:	1c41      	adds	r1, r0, #1
 8000fd6:	d1c7      	bne.n	8000f68 <__sflush_r+0x34>
 8000fd8:	682b      	ldr	r3, [r5, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0c4      	beq.n	8000f68 <__sflush_r+0x34>
 8000fde:	2b1d      	cmp	r3, #29
 8000fe0:	d001      	beq.n	8000fe6 <__sflush_r+0xb2>
 8000fe2:	2b16      	cmp	r3, #22
 8000fe4:	d101      	bne.n	8000fea <__sflush_r+0xb6>
 8000fe6:	602f      	str	r7, [r5, #0]
 8000fe8:	e7b1      	b.n	8000f4e <__sflush_r+0x1a>
 8000fea:	89a3      	ldrh	r3, [r4, #12]
 8000fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff0:	81a3      	strh	r3, [r4, #12]
 8000ff2:	e7ad      	b.n	8000f50 <__sflush_r+0x1c>
 8000ff4:	690f      	ldr	r7, [r1, #16]
 8000ff6:	2f00      	cmp	r7, #0
 8000ff8:	d0a9      	beq.n	8000f4e <__sflush_r+0x1a>
 8000ffa:	0793      	lsls	r3, r2, #30
 8000ffc:	680e      	ldr	r6, [r1, #0]
 8000ffe:	bf08      	it	eq
 8001000:	694b      	ldreq	r3, [r1, #20]
 8001002:	600f      	str	r7, [r1, #0]
 8001004:	bf18      	it	ne
 8001006:	2300      	movne	r3, #0
 8001008:	eba6 0807 	sub.w	r8, r6, r7
 800100c:	608b      	str	r3, [r1, #8]
 800100e:	f1b8 0f00 	cmp.w	r8, #0
 8001012:	dd9c      	ble.n	8000f4e <__sflush_r+0x1a>
 8001014:	6a21      	ldr	r1, [r4, #32]
 8001016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001018:	4643      	mov	r3, r8
 800101a:	463a      	mov	r2, r7
 800101c:	4628      	mov	r0, r5
 800101e:	47b0      	blx	r6
 8001020:	2800      	cmp	r0, #0
 8001022:	dc06      	bgt.n	8001032 <__sflush_r+0xfe>
 8001024:	89a3      	ldrh	r3, [r4, #12]
 8001026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800102a:	81a3      	strh	r3, [r4, #12]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	e78e      	b.n	8000f50 <__sflush_r+0x1c>
 8001032:	4407      	add	r7, r0
 8001034:	eba8 0800 	sub.w	r8, r8, r0
 8001038:	e7e9      	b.n	800100e <__sflush_r+0xda>
 800103a:	bf00      	nop
 800103c:	20400001 	.word	0x20400001

08001040 <_fflush_r>:
 8001040:	b538      	push	{r3, r4, r5, lr}
 8001042:	690b      	ldr	r3, [r1, #16]
 8001044:	4605      	mov	r5, r0
 8001046:	460c      	mov	r4, r1
 8001048:	b913      	cbnz	r3, 8001050 <_fflush_r+0x10>
 800104a:	2500      	movs	r5, #0
 800104c:	4628      	mov	r0, r5
 800104e:	bd38      	pop	{r3, r4, r5, pc}
 8001050:	b118      	cbz	r0, 800105a <_fflush_r+0x1a>
 8001052:	6983      	ldr	r3, [r0, #24]
 8001054:	b90b      	cbnz	r3, 800105a <_fflush_r+0x1a>
 8001056:	f000 f887 	bl	8001168 <__sinit>
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <_fflush_r+0x6c>)
 800105c:	429c      	cmp	r4, r3
 800105e:	d11b      	bne.n	8001098 <_fflush_r+0x58>
 8001060:	686c      	ldr	r4, [r5, #4]
 8001062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0ef      	beq.n	800104a <_fflush_r+0xa>
 800106a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800106c:	07d0      	lsls	r0, r2, #31
 800106e:	d404      	bmi.n	800107a <_fflush_r+0x3a>
 8001070:	0599      	lsls	r1, r3, #22
 8001072:	d402      	bmi.n	800107a <_fflush_r+0x3a>
 8001074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001076:	f000 f915 	bl	80012a4 <__retarget_lock_acquire_recursive>
 800107a:	4628      	mov	r0, r5
 800107c:	4621      	mov	r1, r4
 800107e:	f7ff ff59 	bl	8000f34 <__sflush_r>
 8001082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001084:	07da      	lsls	r2, r3, #31
 8001086:	4605      	mov	r5, r0
 8001088:	d4e0      	bmi.n	800104c <_fflush_r+0xc>
 800108a:	89a3      	ldrh	r3, [r4, #12]
 800108c:	059b      	lsls	r3, r3, #22
 800108e:	d4dd      	bmi.n	800104c <_fflush_r+0xc>
 8001090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001092:	f000 f908 	bl	80012a6 <__retarget_lock_release_recursive>
 8001096:	e7d9      	b.n	800104c <_fflush_r+0xc>
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <_fflush_r+0x70>)
 800109a:	429c      	cmp	r4, r3
 800109c:	d101      	bne.n	80010a2 <_fflush_r+0x62>
 800109e:	68ac      	ldr	r4, [r5, #8]
 80010a0:	e7df      	b.n	8001062 <_fflush_r+0x22>
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <_fflush_r+0x74>)
 80010a4:	429c      	cmp	r4, r3
 80010a6:	bf08      	it	eq
 80010a8:	68ec      	ldreq	r4, [r5, #12]
 80010aa:	e7da      	b.n	8001062 <_fflush_r+0x22>
 80010ac:	08001c74 	.word	0x08001c74
 80010b0:	08001c94 	.word	0x08001c94
 80010b4:	08001c54 	.word	0x08001c54

080010b8 <std>:
 80010b8:	2300      	movs	r3, #0
 80010ba:	b510      	push	{r4, lr}
 80010bc:	4604      	mov	r4, r0
 80010be:	e9c0 3300 	strd	r3, r3, [r0]
 80010c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80010c6:	6083      	str	r3, [r0, #8]
 80010c8:	8181      	strh	r1, [r0, #12]
 80010ca:	6643      	str	r3, [r0, #100]	; 0x64
 80010cc:	81c2      	strh	r2, [r0, #14]
 80010ce:	6183      	str	r3, [r0, #24]
 80010d0:	4619      	mov	r1, r3
 80010d2:	2208      	movs	r2, #8
 80010d4:	305c      	adds	r0, #92	; 0x5c
 80010d6:	f7ff fe4d 	bl	8000d74 <memset>
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <std+0x38>)
 80010dc:	6263      	str	r3, [r4, #36]	; 0x24
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <std+0x3c>)
 80010e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <std+0x40>)
 80010e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <std+0x44>)
 80010e8:	6224      	str	r4, [r4, #32]
 80010ea:	6323      	str	r3, [r4, #48]	; 0x30
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	bf00      	nop
 80010f0:	08001ab9 	.word	0x08001ab9
 80010f4:	08001adb 	.word	0x08001adb
 80010f8:	08001b13 	.word	0x08001b13
 80010fc:	08001b37 	.word	0x08001b37

08001100 <_cleanup_r>:
 8001100:	4901      	ldr	r1, [pc, #4]	; (8001108 <_cleanup_r+0x8>)
 8001102:	f000 b8af 	b.w	8001264 <_fwalk_reent>
 8001106:	bf00      	nop
 8001108:	08001041 	.word	0x08001041

0800110c <__sfmoreglue>:
 800110c:	b570      	push	{r4, r5, r6, lr}
 800110e:	1e4a      	subs	r2, r1, #1
 8001110:	2568      	movs	r5, #104	; 0x68
 8001112:	4355      	muls	r5, r2
 8001114:	460e      	mov	r6, r1
 8001116:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800111a:	f000 f977 	bl	800140c <_malloc_r>
 800111e:	4604      	mov	r4, r0
 8001120:	b140      	cbz	r0, 8001134 <__sfmoreglue+0x28>
 8001122:	2100      	movs	r1, #0
 8001124:	e9c0 1600 	strd	r1, r6, [r0]
 8001128:	300c      	adds	r0, #12
 800112a:	60a0      	str	r0, [r4, #8]
 800112c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001130:	f7ff fe20 	bl	8000d74 <memset>
 8001134:	4620      	mov	r0, r4
 8001136:	bd70      	pop	{r4, r5, r6, pc}

08001138 <__sfp_lock_acquire>:
 8001138:	4801      	ldr	r0, [pc, #4]	; (8001140 <__sfp_lock_acquire+0x8>)
 800113a:	f000 b8b3 	b.w	80012a4 <__retarget_lock_acquire_recursive>
 800113e:	bf00      	nop
 8001140:	200002ac 	.word	0x200002ac

08001144 <__sfp_lock_release>:
 8001144:	4801      	ldr	r0, [pc, #4]	; (800114c <__sfp_lock_release+0x8>)
 8001146:	f000 b8ae 	b.w	80012a6 <__retarget_lock_release_recursive>
 800114a:	bf00      	nop
 800114c:	200002ac 	.word	0x200002ac

08001150 <__sinit_lock_acquire>:
 8001150:	4801      	ldr	r0, [pc, #4]	; (8001158 <__sinit_lock_acquire+0x8>)
 8001152:	f000 b8a7 	b.w	80012a4 <__retarget_lock_acquire_recursive>
 8001156:	bf00      	nop
 8001158:	200002a7 	.word	0x200002a7

0800115c <__sinit_lock_release>:
 800115c:	4801      	ldr	r0, [pc, #4]	; (8001164 <__sinit_lock_release+0x8>)
 800115e:	f000 b8a2 	b.w	80012a6 <__retarget_lock_release_recursive>
 8001162:	bf00      	nop
 8001164:	200002a7 	.word	0x200002a7

08001168 <__sinit>:
 8001168:	b510      	push	{r4, lr}
 800116a:	4604      	mov	r4, r0
 800116c:	f7ff fff0 	bl	8001150 <__sinit_lock_acquire>
 8001170:	69a3      	ldr	r3, [r4, #24]
 8001172:	b11b      	cbz	r3, 800117c <__sinit+0x14>
 8001174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001178:	f7ff bff0 	b.w	800115c <__sinit_lock_release>
 800117c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001180:	6523      	str	r3, [r4, #80]	; 0x50
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <__sinit+0x68>)
 8001184:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <__sinit+0x6c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	62a2      	str	r2, [r4, #40]	; 0x28
 800118a:	42a3      	cmp	r3, r4
 800118c:	bf04      	itt	eq
 800118e:	2301      	moveq	r3, #1
 8001190:	61a3      	streq	r3, [r4, #24]
 8001192:	4620      	mov	r0, r4
 8001194:	f000 f820 	bl	80011d8 <__sfp>
 8001198:	6060      	str	r0, [r4, #4]
 800119a:	4620      	mov	r0, r4
 800119c:	f000 f81c 	bl	80011d8 <__sfp>
 80011a0:	60a0      	str	r0, [r4, #8]
 80011a2:	4620      	mov	r0, r4
 80011a4:	f000 f818 	bl	80011d8 <__sfp>
 80011a8:	2200      	movs	r2, #0
 80011aa:	60e0      	str	r0, [r4, #12]
 80011ac:	2104      	movs	r1, #4
 80011ae:	6860      	ldr	r0, [r4, #4]
 80011b0:	f7ff ff82 	bl	80010b8 <std>
 80011b4:	68a0      	ldr	r0, [r4, #8]
 80011b6:	2201      	movs	r2, #1
 80011b8:	2109      	movs	r1, #9
 80011ba:	f7ff ff7d 	bl	80010b8 <std>
 80011be:	68e0      	ldr	r0, [r4, #12]
 80011c0:	2202      	movs	r2, #2
 80011c2:	2112      	movs	r1, #18
 80011c4:	f7ff ff78 	bl	80010b8 <std>
 80011c8:	2301      	movs	r3, #1
 80011ca:	61a3      	str	r3, [r4, #24]
 80011cc:	e7d2      	b.n	8001174 <__sinit+0xc>
 80011ce:	bf00      	nop
 80011d0:	08001c50 	.word	0x08001c50
 80011d4:	08001101 	.word	0x08001101

080011d8 <__sfp>:
 80011d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011da:	4607      	mov	r7, r0
 80011dc:	f7ff ffac 	bl	8001138 <__sfp_lock_acquire>
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <__sfp+0x84>)
 80011e2:	681e      	ldr	r6, [r3, #0]
 80011e4:	69b3      	ldr	r3, [r6, #24]
 80011e6:	b913      	cbnz	r3, 80011ee <__sfp+0x16>
 80011e8:	4630      	mov	r0, r6
 80011ea:	f7ff ffbd 	bl	8001168 <__sinit>
 80011ee:	3648      	adds	r6, #72	; 0x48
 80011f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	d503      	bpl.n	8001200 <__sfp+0x28>
 80011f8:	6833      	ldr	r3, [r6, #0]
 80011fa:	b30b      	cbz	r3, 8001240 <__sfp+0x68>
 80011fc:	6836      	ldr	r6, [r6, #0]
 80011fe:	e7f7      	b.n	80011f0 <__sfp+0x18>
 8001200:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001204:	b9d5      	cbnz	r5, 800123c <__sfp+0x64>
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <__sfp+0x88>)
 8001208:	60e3      	str	r3, [r4, #12]
 800120a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800120e:	6665      	str	r5, [r4, #100]	; 0x64
 8001210:	f000 f847 	bl	80012a2 <__retarget_lock_init_recursive>
 8001214:	f7ff ff96 	bl	8001144 <__sfp_lock_release>
 8001218:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800121c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001220:	6025      	str	r5, [r4, #0]
 8001222:	61a5      	str	r5, [r4, #24]
 8001224:	2208      	movs	r2, #8
 8001226:	4629      	mov	r1, r5
 8001228:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800122c:	f7ff fda2 	bl	8000d74 <memset>
 8001230:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001234:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001238:	4620      	mov	r0, r4
 800123a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800123c:	3468      	adds	r4, #104	; 0x68
 800123e:	e7d9      	b.n	80011f4 <__sfp+0x1c>
 8001240:	2104      	movs	r1, #4
 8001242:	4638      	mov	r0, r7
 8001244:	f7ff ff62 	bl	800110c <__sfmoreglue>
 8001248:	4604      	mov	r4, r0
 800124a:	6030      	str	r0, [r6, #0]
 800124c:	2800      	cmp	r0, #0
 800124e:	d1d5      	bne.n	80011fc <__sfp+0x24>
 8001250:	f7ff ff78 	bl	8001144 <__sfp_lock_release>
 8001254:	230c      	movs	r3, #12
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	e7ee      	b.n	8001238 <__sfp+0x60>
 800125a:	bf00      	nop
 800125c:	08001c50 	.word	0x08001c50
 8001260:	ffff0001 	.word	0xffff0001

08001264 <_fwalk_reent>:
 8001264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001268:	4606      	mov	r6, r0
 800126a:	4688      	mov	r8, r1
 800126c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001270:	2700      	movs	r7, #0
 8001272:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001276:	f1b9 0901 	subs.w	r9, r9, #1
 800127a:	d505      	bpl.n	8001288 <_fwalk_reent+0x24>
 800127c:	6824      	ldr	r4, [r4, #0]
 800127e:	2c00      	cmp	r4, #0
 8001280:	d1f7      	bne.n	8001272 <_fwalk_reent+0xe>
 8001282:	4638      	mov	r0, r7
 8001284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001288:	89ab      	ldrh	r3, [r5, #12]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d907      	bls.n	800129e <_fwalk_reent+0x3a>
 800128e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001292:	3301      	adds	r3, #1
 8001294:	d003      	beq.n	800129e <_fwalk_reent+0x3a>
 8001296:	4629      	mov	r1, r5
 8001298:	4630      	mov	r0, r6
 800129a:	47c0      	blx	r8
 800129c:	4307      	orrs	r7, r0
 800129e:	3568      	adds	r5, #104	; 0x68
 80012a0:	e7e9      	b.n	8001276 <_fwalk_reent+0x12>

080012a2 <__retarget_lock_init_recursive>:
 80012a2:	4770      	bx	lr

080012a4 <__retarget_lock_acquire_recursive>:
 80012a4:	4770      	bx	lr

080012a6 <__retarget_lock_release_recursive>:
 80012a6:	4770      	bx	lr

080012a8 <__swhatbuf_r>:
 80012a8:	b570      	push	{r4, r5, r6, lr}
 80012aa:	460e      	mov	r6, r1
 80012ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012b0:	2900      	cmp	r1, #0
 80012b2:	b096      	sub	sp, #88	; 0x58
 80012b4:	4614      	mov	r4, r2
 80012b6:	461d      	mov	r5, r3
 80012b8:	da07      	bge.n	80012ca <__swhatbuf_r+0x22>
 80012ba:	2300      	movs	r3, #0
 80012bc:	602b      	str	r3, [r5, #0]
 80012be:	89b3      	ldrh	r3, [r6, #12]
 80012c0:	061a      	lsls	r2, r3, #24
 80012c2:	d410      	bmi.n	80012e6 <__swhatbuf_r+0x3e>
 80012c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c8:	e00e      	b.n	80012e8 <__swhatbuf_r+0x40>
 80012ca:	466a      	mov	r2, sp
 80012cc:	f000 fc5a 	bl	8001b84 <_fstat_r>
 80012d0:	2800      	cmp	r0, #0
 80012d2:	dbf2      	blt.n	80012ba <__swhatbuf_r+0x12>
 80012d4:	9a01      	ldr	r2, [sp, #4]
 80012d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80012da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80012de:	425a      	negs	r2, r3
 80012e0:	415a      	adcs	r2, r3
 80012e2:	602a      	str	r2, [r5, #0]
 80012e4:	e7ee      	b.n	80012c4 <__swhatbuf_r+0x1c>
 80012e6:	2340      	movs	r3, #64	; 0x40
 80012e8:	2000      	movs	r0, #0
 80012ea:	6023      	str	r3, [r4, #0]
 80012ec:	b016      	add	sp, #88	; 0x58
 80012ee:	bd70      	pop	{r4, r5, r6, pc}

080012f0 <__smakebuf_r>:
 80012f0:	898b      	ldrh	r3, [r1, #12]
 80012f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012f4:	079d      	lsls	r5, r3, #30
 80012f6:	4606      	mov	r6, r0
 80012f8:	460c      	mov	r4, r1
 80012fa:	d507      	bpl.n	800130c <__smakebuf_r+0x1c>
 80012fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001300:	6023      	str	r3, [r4, #0]
 8001302:	6123      	str	r3, [r4, #16]
 8001304:	2301      	movs	r3, #1
 8001306:	6163      	str	r3, [r4, #20]
 8001308:	b002      	add	sp, #8
 800130a:	bd70      	pop	{r4, r5, r6, pc}
 800130c:	ab01      	add	r3, sp, #4
 800130e:	466a      	mov	r2, sp
 8001310:	f7ff ffca 	bl	80012a8 <__swhatbuf_r>
 8001314:	9900      	ldr	r1, [sp, #0]
 8001316:	4605      	mov	r5, r0
 8001318:	4630      	mov	r0, r6
 800131a:	f000 f877 	bl	800140c <_malloc_r>
 800131e:	b948      	cbnz	r0, 8001334 <__smakebuf_r+0x44>
 8001320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001324:	059a      	lsls	r2, r3, #22
 8001326:	d4ef      	bmi.n	8001308 <__smakebuf_r+0x18>
 8001328:	f023 0303 	bic.w	r3, r3, #3
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	81a3      	strh	r3, [r4, #12]
 8001332:	e7e3      	b.n	80012fc <__smakebuf_r+0xc>
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <__smakebuf_r+0x7c>)
 8001336:	62b3      	str	r3, [r6, #40]	; 0x28
 8001338:	89a3      	ldrh	r3, [r4, #12]
 800133a:	6020      	str	r0, [r4, #0]
 800133c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001340:	81a3      	strh	r3, [r4, #12]
 8001342:	9b00      	ldr	r3, [sp, #0]
 8001344:	6163      	str	r3, [r4, #20]
 8001346:	9b01      	ldr	r3, [sp, #4]
 8001348:	6120      	str	r0, [r4, #16]
 800134a:	b15b      	cbz	r3, 8001364 <__smakebuf_r+0x74>
 800134c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001350:	4630      	mov	r0, r6
 8001352:	f000 fc29 	bl	8001ba8 <_isatty_r>
 8001356:	b128      	cbz	r0, 8001364 <__smakebuf_r+0x74>
 8001358:	89a3      	ldrh	r3, [r4, #12]
 800135a:	f023 0303 	bic.w	r3, r3, #3
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	81a3      	strh	r3, [r4, #12]
 8001364:	89a0      	ldrh	r0, [r4, #12]
 8001366:	4305      	orrs	r5, r0
 8001368:	81a5      	strh	r5, [r4, #12]
 800136a:	e7cd      	b.n	8001308 <__smakebuf_r+0x18>
 800136c:	08001101 	.word	0x08001101

08001370 <_free_r>:
 8001370:	b538      	push	{r3, r4, r5, lr}
 8001372:	4605      	mov	r5, r0
 8001374:	2900      	cmp	r1, #0
 8001376:	d045      	beq.n	8001404 <_free_r+0x94>
 8001378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800137c:	1f0c      	subs	r4, r1, #4
 800137e:	2b00      	cmp	r3, #0
 8001380:	bfb8      	it	lt
 8001382:	18e4      	addlt	r4, r4, r3
 8001384:	f000 fc32 	bl	8001bec <__malloc_lock>
 8001388:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <_free_r+0x98>)
 800138a:	6813      	ldr	r3, [r2, #0]
 800138c:	4610      	mov	r0, r2
 800138e:	b933      	cbnz	r3, 800139e <_free_r+0x2e>
 8001390:	6063      	str	r3, [r4, #4]
 8001392:	6014      	str	r4, [r2, #0]
 8001394:	4628      	mov	r0, r5
 8001396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800139a:	f000 bc2d 	b.w	8001bf8 <__malloc_unlock>
 800139e:	42a3      	cmp	r3, r4
 80013a0:	d90b      	bls.n	80013ba <_free_r+0x4a>
 80013a2:	6821      	ldr	r1, [r4, #0]
 80013a4:	1862      	adds	r2, r4, r1
 80013a6:	4293      	cmp	r3, r2
 80013a8:	bf04      	itt	eq
 80013aa:	681a      	ldreq	r2, [r3, #0]
 80013ac:	685b      	ldreq	r3, [r3, #4]
 80013ae:	6063      	str	r3, [r4, #4]
 80013b0:	bf04      	itt	eq
 80013b2:	1852      	addeq	r2, r2, r1
 80013b4:	6022      	streq	r2, [r4, #0]
 80013b6:	6004      	str	r4, [r0, #0]
 80013b8:	e7ec      	b.n	8001394 <_free_r+0x24>
 80013ba:	461a      	mov	r2, r3
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	b10b      	cbz	r3, 80013c4 <_free_r+0x54>
 80013c0:	42a3      	cmp	r3, r4
 80013c2:	d9fa      	bls.n	80013ba <_free_r+0x4a>
 80013c4:	6811      	ldr	r1, [r2, #0]
 80013c6:	1850      	adds	r0, r2, r1
 80013c8:	42a0      	cmp	r0, r4
 80013ca:	d10b      	bne.n	80013e4 <_free_r+0x74>
 80013cc:	6820      	ldr	r0, [r4, #0]
 80013ce:	4401      	add	r1, r0
 80013d0:	1850      	adds	r0, r2, r1
 80013d2:	4283      	cmp	r3, r0
 80013d4:	6011      	str	r1, [r2, #0]
 80013d6:	d1dd      	bne.n	8001394 <_free_r+0x24>
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	6053      	str	r3, [r2, #4]
 80013de:	4401      	add	r1, r0
 80013e0:	6011      	str	r1, [r2, #0]
 80013e2:	e7d7      	b.n	8001394 <_free_r+0x24>
 80013e4:	d902      	bls.n	80013ec <_free_r+0x7c>
 80013e6:	230c      	movs	r3, #12
 80013e8:	602b      	str	r3, [r5, #0]
 80013ea:	e7d3      	b.n	8001394 <_free_r+0x24>
 80013ec:	6820      	ldr	r0, [r4, #0]
 80013ee:	1821      	adds	r1, r4, r0
 80013f0:	428b      	cmp	r3, r1
 80013f2:	bf04      	itt	eq
 80013f4:	6819      	ldreq	r1, [r3, #0]
 80013f6:	685b      	ldreq	r3, [r3, #4]
 80013f8:	6063      	str	r3, [r4, #4]
 80013fa:	bf04      	itt	eq
 80013fc:	1809      	addeq	r1, r1, r0
 80013fe:	6021      	streq	r1, [r4, #0]
 8001400:	6054      	str	r4, [r2, #4]
 8001402:	e7c7      	b.n	8001394 <_free_r+0x24>
 8001404:	bd38      	pop	{r3, r4, r5, pc}
 8001406:	bf00      	nop
 8001408:	20000084 	.word	0x20000084

0800140c <_malloc_r>:
 800140c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800140e:	1ccd      	adds	r5, r1, #3
 8001410:	f025 0503 	bic.w	r5, r5, #3
 8001414:	3508      	adds	r5, #8
 8001416:	2d0c      	cmp	r5, #12
 8001418:	bf38      	it	cc
 800141a:	250c      	movcc	r5, #12
 800141c:	2d00      	cmp	r5, #0
 800141e:	4606      	mov	r6, r0
 8001420:	db01      	blt.n	8001426 <_malloc_r+0x1a>
 8001422:	42a9      	cmp	r1, r5
 8001424:	d903      	bls.n	800142e <_malloc_r+0x22>
 8001426:	230c      	movs	r3, #12
 8001428:	6033      	str	r3, [r6, #0]
 800142a:	2000      	movs	r0, #0
 800142c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800142e:	f000 fbdd 	bl	8001bec <__malloc_lock>
 8001432:	4921      	ldr	r1, [pc, #132]	; (80014b8 <_malloc_r+0xac>)
 8001434:	680a      	ldr	r2, [r1, #0]
 8001436:	4614      	mov	r4, r2
 8001438:	b99c      	cbnz	r4, 8001462 <_malloc_r+0x56>
 800143a:	4f20      	ldr	r7, [pc, #128]	; (80014bc <_malloc_r+0xb0>)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b923      	cbnz	r3, 800144a <_malloc_r+0x3e>
 8001440:	4621      	mov	r1, r4
 8001442:	4630      	mov	r0, r6
 8001444:	f000 fb28 	bl	8001a98 <_sbrk_r>
 8001448:	6038      	str	r0, [r7, #0]
 800144a:	4629      	mov	r1, r5
 800144c:	4630      	mov	r0, r6
 800144e:	f000 fb23 	bl	8001a98 <_sbrk_r>
 8001452:	1c43      	adds	r3, r0, #1
 8001454:	d123      	bne.n	800149e <_malloc_r+0x92>
 8001456:	230c      	movs	r3, #12
 8001458:	6033      	str	r3, [r6, #0]
 800145a:	4630      	mov	r0, r6
 800145c:	f000 fbcc 	bl	8001bf8 <__malloc_unlock>
 8001460:	e7e3      	b.n	800142a <_malloc_r+0x1e>
 8001462:	6823      	ldr	r3, [r4, #0]
 8001464:	1b5b      	subs	r3, r3, r5
 8001466:	d417      	bmi.n	8001498 <_malloc_r+0x8c>
 8001468:	2b0b      	cmp	r3, #11
 800146a:	d903      	bls.n	8001474 <_malloc_r+0x68>
 800146c:	6023      	str	r3, [r4, #0]
 800146e:	441c      	add	r4, r3
 8001470:	6025      	str	r5, [r4, #0]
 8001472:	e004      	b.n	800147e <_malloc_r+0x72>
 8001474:	6863      	ldr	r3, [r4, #4]
 8001476:	42a2      	cmp	r2, r4
 8001478:	bf0c      	ite	eq
 800147a:	600b      	streq	r3, [r1, #0]
 800147c:	6053      	strne	r3, [r2, #4]
 800147e:	4630      	mov	r0, r6
 8001480:	f000 fbba 	bl	8001bf8 <__malloc_unlock>
 8001484:	f104 000b 	add.w	r0, r4, #11
 8001488:	1d23      	adds	r3, r4, #4
 800148a:	f020 0007 	bic.w	r0, r0, #7
 800148e:	1ac2      	subs	r2, r0, r3
 8001490:	d0cc      	beq.n	800142c <_malloc_r+0x20>
 8001492:	1a1b      	subs	r3, r3, r0
 8001494:	50a3      	str	r3, [r4, r2]
 8001496:	e7c9      	b.n	800142c <_malloc_r+0x20>
 8001498:	4622      	mov	r2, r4
 800149a:	6864      	ldr	r4, [r4, #4]
 800149c:	e7cc      	b.n	8001438 <_malloc_r+0x2c>
 800149e:	1cc4      	adds	r4, r0, #3
 80014a0:	f024 0403 	bic.w	r4, r4, #3
 80014a4:	42a0      	cmp	r0, r4
 80014a6:	d0e3      	beq.n	8001470 <_malloc_r+0x64>
 80014a8:	1a21      	subs	r1, r4, r0
 80014aa:	4630      	mov	r0, r6
 80014ac:	f000 faf4 	bl	8001a98 <_sbrk_r>
 80014b0:	3001      	adds	r0, #1
 80014b2:	d1dd      	bne.n	8001470 <_malloc_r+0x64>
 80014b4:	e7cf      	b.n	8001456 <_malloc_r+0x4a>
 80014b6:	bf00      	nop
 80014b8:	20000084 	.word	0x20000084
 80014bc:	20000088 	.word	0x20000088

080014c0 <__sfputc_r>:
 80014c0:	6893      	ldr	r3, [r2, #8]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	b410      	push	{r4}
 80014c8:	6093      	str	r3, [r2, #8]
 80014ca:	da07      	bge.n	80014dc <__sfputc_r+0x1c>
 80014cc:	6994      	ldr	r4, [r2, #24]
 80014ce:	42a3      	cmp	r3, r4
 80014d0:	db01      	blt.n	80014d6 <__sfputc_r+0x16>
 80014d2:	290a      	cmp	r1, #10
 80014d4:	d102      	bne.n	80014dc <__sfputc_r+0x1c>
 80014d6:	bc10      	pop	{r4}
 80014d8:	f7ff bc6c 	b.w	8000db4 <__swbuf_r>
 80014dc:	6813      	ldr	r3, [r2, #0]
 80014de:	1c58      	adds	r0, r3, #1
 80014e0:	6010      	str	r0, [r2, #0]
 80014e2:	7019      	strb	r1, [r3, #0]
 80014e4:	4608      	mov	r0, r1
 80014e6:	bc10      	pop	{r4}
 80014e8:	4770      	bx	lr

080014ea <__sfputs_r>:
 80014ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ec:	4606      	mov	r6, r0
 80014ee:	460f      	mov	r7, r1
 80014f0:	4614      	mov	r4, r2
 80014f2:	18d5      	adds	r5, r2, r3
 80014f4:	42ac      	cmp	r4, r5
 80014f6:	d101      	bne.n	80014fc <__sfputs_r+0x12>
 80014f8:	2000      	movs	r0, #0
 80014fa:	e007      	b.n	800150c <__sfputs_r+0x22>
 80014fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001500:	463a      	mov	r2, r7
 8001502:	4630      	mov	r0, r6
 8001504:	f7ff ffdc 	bl	80014c0 <__sfputc_r>
 8001508:	1c43      	adds	r3, r0, #1
 800150a:	d1f3      	bne.n	80014f4 <__sfputs_r+0xa>
 800150c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001510 <_vfiprintf_r>:
 8001510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001514:	460d      	mov	r5, r1
 8001516:	b09d      	sub	sp, #116	; 0x74
 8001518:	4614      	mov	r4, r2
 800151a:	4698      	mov	r8, r3
 800151c:	4606      	mov	r6, r0
 800151e:	b118      	cbz	r0, 8001528 <_vfiprintf_r+0x18>
 8001520:	6983      	ldr	r3, [r0, #24]
 8001522:	b90b      	cbnz	r3, 8001528 <_vfiprintf_r+0x18>
 8001524:	f7ff fe20 	bl	8001168 <__sinit>
 8001528:	4b89      	ldr	r3, [pc, #548]	; (8001750 <_vfiprintf_r+0x240>)
 800152a:	429d      	cmp	r5, r3
 800152c:	d11b      	bne.n	8001566 <_vfiprintf_r+0x56>
 800152e:	6875      	ldr	r5, [r6, #4]
 8001530:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001532:	07d9      	lsls	r1, r3, #31
 8001534:	d405      	bmi.n	8001542 <_vfiprintf_r+0x32>
 8001536:	89ab      	ldrh	r3, [r5, #12]
 8001538:	059a      	lsls	r2, r3, #22
 800153a:	d402      	bmi.n	8001542 <_vfiprintf_r+0x32>
 800153c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800153e:	f7ff feb1 	bl	80012a4 <__retarget_lock_acquire_recursive>
 8001542:	89ab      	ldrh	r3, [r5, #12]
 8001544:	071b      	lsls	r3, r3, #28
 8001546:	d501      	bpl.n	800154c <_vfiprintf_r+0x3c>
 8001548:	692b      	ldr	r3, [r5, #16]
 800154a:	b9eb      	cbnz	r3, 8001588 <_vfiprintf_r+0x78>
 800154c:	4629      	mov	r1, r5
 800154e:	4630      	mov	r0, r6
 8001550:	f7ff fc82 	bl	8000e58 <__swsetup_r>
 8001554:	b1c0      	cbz	r0, 8001588 <_vfiprintf_r+0x78>
 8001556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001558:	07dc      	lsls	r4, r3, #31
 800155a:	d50e      	bpl.n	800157a <_vfiprintf_r+0x6a>
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	b01d      	add	sp, #116	; 0x74
 8001562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001566:	4b7b      	ldr	r3, [pc, #492]	; (8001754 <_vfiprintf_r+0x244>)
 8001568:	429d      	cmp	r5, r3
 800156a:	d101      	bne.n	8001570 <_vfiprintf_r+0x60>
 800156c:	68b5      	ldr	r5, [r6, #8]
 800156e:	e7df      	b.n	8001530 <_vfiprintf_r+0x20>
 8001570:	4b79      	ldr	r3, [pc, #484]	; (8001758 <_vfiprintf_r+0x248>)
 8001572:	429d      	cmp	r5, r3
 8001574:	bf08      	it	eq
 8001576:	68f5      	ldreq	r5, [r6, #12]
 8001578:	e7da      	b.n	8001530 <_vfiprintf_r+0x20>
 800157a:	89ab      	ldrh	r3, [r5, #12]
 800157c:	0598      	lsls	r0, r3, #22
 800157e:	d4ed      	bmi.n	800155c <_vfiprintf_r+0x4c>
 8001580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001582:	f7ff fe90 	bl	80012a6 <__retarget_lock_release_recursive>
 8001586:	e7e9      	b.n	800155c <_vfiprintf_r+0x4c>
 8001588:	2300      	movs	r3, #0
 800158a:	9309      	str	r3, [sp, #36]	; 0x24
 800158c:	2320      	movs	r3, #32
 800158e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001592:	f8cd 800c 	str.w	r8, [sp, #12]
 8001596:	2330      	movs	r3, #48	; 0x30
 8001598:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800175c <_vfiprintf_r+0x24c>
 800159c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80015a0:	f04f 0901 	mov.w	r9, #1
 80015a4:	4623      	mov	r3, r4
 80015a6:	469a      	mov	sl, r3
 80015a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80015ac:	b10a      	cbz	r2, 80015b2 <_vfiprintf_r+0xa2>
 80015ae:	2a25      	cmp	r2, #37	; 0x25
 80015b0:	d1f9      	bne.n	80015a6 <_vfiprintf_r+0x96>
 80015b2:	ebba 0b04 	subs.w	fp, sl, r4
 80015b6:	d00b      	beq.n	80015d0 <_vfiprintf_r+0xc0>
 80015b8:	465b      	mov	r3, fp
 80015ba:	4622      	mov	r2, r4
 80015bc:	4629      	mov	r1, r5
 80015be:	4630      	mov	r0, r6
 80015c0:	f7ff ff93 	bl	80014ea <__sfputs_r>
 80015c4:	3001      	adds	r0, #1
 80015c6:	f000 80aa 	beq.w	800171e <_vfiprintf_r+0x20e>
 80015ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015cc:	445a      	add	r2, fp
 80015ce:	9209      	str	r2, [sp, #36]	; 0x24
 80015d0:	f89a 3000 	ldrb.w	r3, [sl]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a2 	beq.w	800171e <_vfiprintf_r+0x20e>
 80015da:	2300      	movs	r3, #0
 80015dc:	f04f 32ff 	mov.w	r2, #4294967295
 80015e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015e4:	f10a 0a01 	add.w	sl, sl, #1
 80015e8:	9304      	str	r3, [sp, #16]
 80015ea:	9307      	str	r3, [sp, #28]
 80015ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80015f0:	931a      	str	r3, [sp, #104]	; 0x68
 80015f2:	4654      	mov	r4, sl
 80015f4:	2205      	movs	r2, #5
 80015f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015fa:	4858      	ldr	r0, [pc, #352]	; (800175c <_vfiprintf_r+0x24c>)
 80015fc:	f7fe fdf8 	bl	80001f0 <memchr>
 8001600:	9a04      	ldr	r2, [sp, #16]
 8001602:	b9d8      	cbnz	r0, 800163c <_vfiprintf_r+0x12c>
 8001604:	06d1      	lsls	r1, r2, #27
 8001606:	bf44      	itt	mi
 8001608:	2320      	movmi	r3, #32
 800160a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800160e:	0713      	lsls	r3, r2, #28
 8001610:	bf44      	itt	mi
 8001612:	232b      	movmi	r3, #43	; 0x2b
 8001614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001618:	f89a 3000 	ldrb.w	r3, [sl]
 800161c:	2b2a      	cmp	r3, #42	; 0x2a
 800161e:	d015      	beq.n	800164c <_vfiprintf_r+0x13c>
 8001620:	9a07      	ldr	r2, [sp, #28]
 8001622:	4654      	mov	r4, sl
 8001624:	2000      	movs	r0, #0
 8001626:	f04f 0c0a 	mov.w	ip, #10
 800162a:	4621      	mov	r1, r4
 800162c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001630:	3b30      	subs	r3, #48	; 0x30
 8001632:	2b09      	cmp	r3, #9
 8001634:	d94e      	bls.n	80016d4 <_vfiprintf_r+0x1c4>
 8001636:	b1b0      	cbz	r0, 8001666 <_vfiprintf_r+0x156>
 8001638:	9207      	str	r2, [sp, #28]
 800163a:	e014      	b.n	8001666 <_vfiprintf_r+0x156>
 800163c:	eba0 0308 	sub.w	r3, r0, r8
 8001640:	fa09 f303 	lsl.w	r3, r9, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	9304      	str	r3, [sp, #16]
 8001648:	46a2      	mov	sl, r4
 800164a:	e7d2      	b.n	80015f2 <_vfiprintf_r+0xe2>
 800164c:	9b03      	ldr	r3, [sp, #12]
 800164e:	1d19      	adds	r1, r3, #4
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	9103      	str	r1, [sp, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	bfbb      	ittet	lt
 8001658:	425b      	neglt	r3, r3
 800165a:	f042 0202 	orrlt.w	r2, r2, #2
 800165e:	9307      	strge	r3, [sp, #28]
 8001660:	9307      	strlt	r3, [sp, #28]
 8001662:	bfb8      	it	lt
 8001664:	9204      	strlt	r2, [sp, #16]
 8001666:	7823      	ldrb	r3, [r4, #0]
 8001668:	2b2e      	cmp	r3, #46	; 0x2e
 800166a:	d10c      	bne.n	8001686 <_vfiprintf_r+0x176>
 800166c:	7863      	ldrb	r3, [r4, #1]
 800166e:	2b2a      	cmp	r3, #42	; 0x2a
 8001670:	d135      	bne.n	80016de <_vfiprintf_r+0x1ce>
 8001672:	9b03      	ldr	r3, [sp, #12]
 8001674:	1d1a      	adds	r2, r3, #4
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	9203      	str	r2, [sp, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	bfb8      	it	lt
 800167e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001682:	3402      	adds	r4, #2
 8001684:	9305      	str	r3, [sp, #20]
 8001686:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800176c <_vfiprintf_r+0x25c>
 800168a:	7821      	ldrb	r1, [r4, #0]
 800168c:	2203      	movs	r2, #3
 800168e:	4650      	mov	r0, sl
 8001690:	f7fe fdae 	bl	80001f0 <memchr>
 8001694:	b140      	cbz	r0, 80016a8 <_vfiprintf_r+0x198>
 8001696:	2340      	movs	r3, #64	; 0x40
 8001698:	eba0 000a 	sub.w	r0, r0, sl
 800169c:	fa03 f000 	lsl.w	r0, r3, r0
 80016a0:	9b04      	ldr	r3, [sp, #16]
 80016a2:	4303      	orrs	r3, r0
 80016a4:	3401      	adds	r4, #1
 80016a6:	9304      	str	r3, [sp, #16]
 80016a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016ac:	482c      	ldr	r0, [pc, #176]	; (8001760 <_vfiprintf_r+0x250>)
 80016ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80016b2:	2206      	movs	r2, #6
 80016b4:	f7fe fd9c 	bl	80001f0 <memchr>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d03f      	beq.n	800173c <_vfiprintf_r+0x22c>
 80016bc:	4b29      	ldr	r3, [pc, #164]	; (8001764 <_vfiprintf_r+0x254>)
 80016be:	bb1b      	cbnz	r3, 8001708 <_vfiprintf_r+0x1f8>
 80016c0:	9b03      	ldr	r3, [sp, #12]
 80016c2:	3307      	adds	r3, #7
 80016c4:	f023 0307 	bic.w	r3, r3, #7
 80016c8:	3308      	adds	r3, #8
 80016ca:	9303      	str	r3, [sp, #12]
 80016cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016ce:	443b      	add	r3, r7
 80016d0:	9309      	str	r3, [sp, #36]	; 0x24
 80016d2:	e767      	b.n	80015a4 <_vfiprintf_r+0x94>
 80016d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80016d8:	460c      	mov	r4, r1
 80016da:	2001      	movs	r0, #1
 80016dc:	e7a5      	b.n	800162a <_vfiprintf_r+0x11a>
 80016de:	2300      	movs	r3, #0
 80016e0:	3401      	adds	r4, #1
 80016e2:	9305      	str	r3, [sp, #20]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f04f 0c0a 	mov.w	ip, #10
 80016ea:	4620      	mov	r0, r4
 80016ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016f0:	3a30      	subs	r2, #48	; 0x30
 80016f2:	2a09      	cmp	r2, #9
 80016f4:	d903      	bls.n	80016fe <_vfiprintf_r+0x1ee>
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0c5      	beq.n	8001686 <_vfiprintf_r+0x176>
 80016fa:	9105      	str	r1, [sp, #20]
 80016fc:	e7c3      	b.n	8001686 <_vfiprintf_r+0x176>
 80016fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8001702:	4604      	mov	r4, r0
 8001704:	2301      	movs	r3, #1
 8001706:	e7f0      	b.n	80016ea <_vfiprintf_r+0x1da>
 8001708:	ab03      	add	r3, sp, #12
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	462a      	mov	r2, r5
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <_vfiprintf_r+0x258>)
 8001710:	a904      	add	r1, sp, #16
 8001712:	4630      	mov	r0, r6
 8001714:	f3af 8000 	nop.w
 8001718:	4607      	mov	r7, r0
 800171a:	1c78      	adds	r0, r7, #1
 800171c:	d1d6      	bne.n	80016cc <_vfiprintf_r+0x1bc>
 800171e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001720:	07d9      	lsls	r1, r3, #31
 8001722:	d405      	bmi.n	8001730 <_vfiprintf_r+0x220>
 8001724:	89ab      	ldrh	r3, [r5, #12]
 8001726:	059a      	lsls	r2, r3, #22
 8001728:	d402      	bmi.n	8001730 <_vfiprintf_r+0x220>
 800172a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800172c:	f7ff fdbb 	bl	80012a6 <__retarget_lock_release_recursive>
 8001730:	89ab      	ldrh	r3, [r5, #12]
 8001732:	065b      	lsls	r3, r3, #25
 8001734:	f53f af12 	bmi.w	800155c <_vfiprintf_r+0x4c>
 8001738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800173a:	e711      	b.n	8001560 <_vfiprintf_r+0x50>
 800173c:	ab03      	add	r3, sp, #12
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	462a      	mov	r2, r5
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <_vfiprintf_r+0x258>)
 8001744:	a904      	add	r1, sp, #16
 8001746:	4630      	mov	r0, r6
 8001748:	f000 f880 	bl	800184c <_printf_i>
 800174c:	e7e4      	b.n	8001718 <_vfiprintf_r+0x208>
 800174e:	bf00      	nop
 8001750:	08001c74 	.word	0x08001c74
 8001754:	08001c94 	.word	0x08001c94
 8001758:	08001c54 	.word	0x08001c54
 800175c:	08001cb4 	.word	0x08001cb4
 8001760:	08001cbe 	.word	0x08001cbe
 8001764:	00000000 	.word	0x00000000
 8001768:	080014eb 	.word	0x080014eb
 800176c:	08001cba 	.word	0x08001cba

08001770 <_printf_common>:
 8001770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001774:	4616      	mov	r6, r2
 8001776:	4699      	mov	r9, r3
 8001778:	688a      	ldr	r2, [r1, #8]
 800177a:	690b      	ldr	r3, [r1, #16]
 800177c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001780:	4293      	cmp	r3, r2
 8001782:	bfb8      	it	lt
 8001784:	4613      	movlt	r3, r2
 8001786:	6033      	str	r3, [r6, #0]
 8001788:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800178c:	4607      	mov	r7, r0
 800178e:	460c      	mov	r4, r1
 8001790:	b10a      	cbz	r2, 8001796 <_printf_common+0x26>
 8001792:	3301      	adds	r3, #1
 8001794:	6033      	str	r3, [r6, #0]
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	0699      	lsls	r1, r3, #26
 800179a:	bf42      	ittt	mi
 800179c:	6833      	ldrmi	r3, [r6, #0]
 800179e:	3302      	addmi	r3, #2
 80017a0:	6033      	strmi	r3, [r6, #0]
 80017a2:	6825      	ldr	r5, [r4, #0]
 80017a4:	f015 0506 	ands.w	r5, r5, #6
 80017a8:	d106      	bne.n	80017b8 <_printf_common+0x48>
 80017aa:	f104 0a19 	add.w	sl, r4, #25
 80017ae:	68e3      	ldr	r3, [r4, #12]
 80017b0:	6832      	ldr	r2, [r6, #0]
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	42ab      	cmp	r3, r5
 80017b6:	dc26      	bgt.n	8001806 <_printf_common+0x96>
 80017b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80017bc:	1e13      	subs	r3, r2, #0
 80017be:	6822      	ldr	r2, [r4, #0]
 80017c0:	bf18      	it	ne
 80017c2:	2301      	movne	r3, #1
 80017c4:	0692      	lsls	r2, r2, #26
 80017c6:	d42b      	bmi.n	8001820 <_printf_common+0xb0>
 80017c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80017cc:	4649      	mov	r1, r9
 80017ce:	4638      	mov	r0, r7
 80017d0:	47c0      	blx	r8
 80017d2:	3001      	adds	r0, #1
 80017d4:	d01e      	beq.n	8001814 <_printf_common+0xa4>
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	68e5      	ldr	r5, [r4, #12]
 80017da:	6832      	ldr	r2, [r6, #0]
 80017dc:	f003 0306 	and.w	r3, r3, #6
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	bf08      	it	eq
 80017e4:	1aad      	subeq	r5, r5, r2
 80017e6:	68a3      	ldr	r3, [r4, #8]
 80017e8:	6922      	ldr	r2, [r4, #16]
 80017ea:	bf0c      	ite	eq
 80017ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017f0:	2500      	movne	r5, #0
 80017f2:	4293      	cmp	r3, r2
 80017f4:	bfc4      	itt	gt
 80017f6:	1a9b      	subgt	r3, r3, r2
 80017f8:	18ed      	addgt	r5, r5, r3
 80017fa:	2600      	movs	r6, #0
 80017fc:	341a      	adds	r4, #26
 80017fe:	42b5      	cmp	r5, r6
 8001800:	d11a      	bne.n	8001838 <_printf_common+0xc8>
 8001802:	2000      	movs	r0, #0
 8001804:	e008      	b.n	8001818 <_printf_common+0xa8>
 8001806:	2301      	movs	r3, #1
 8001808:	4652      	mov	r2, sl
 800180a:	4649      	mov	r1, r9
 800180c:	4638      	mov	r0, r7
 800180e:	47c0      	blx	r8
 8001810:	3001      	adds	r0, #1
 8001812:	d103      	bne.n	800181c <_printf_common+0xac>
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800181c:	3501      	adds	r5, #1
 800181e:	e7c6      	b.n	80017ae <_printf_common+0x3e>
 8001820:	18e1      	adds	r1, r4, r3
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	2030      	movs	r0, #48	; 0x30
 8001826:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800182a:	4422      	add	r2, r4
 800182c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001830:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001834:	3302      	adds	r3, #2
 8001836:	e7c7      	b.n	80017c8 <_printf_common+0x58>
 8001838:	2301      	movs	r3, #1
 800183a:	4622      	mov	r2, r4
 800183c:	4649      	mov	r1, r9
 800183e:	4638      	mov	r0, r7
 8001840:	47c0      	blx	r8
 8001842:	3001      	adds	r0, #1
 8001844:	d0e6      	beq.n	8001814 <_printf_common+0xa4>
 8001846:	3601      	adds	r6, #1
 8001848:	e7d9      	b.n	80017fe <_printf_common+0x8e>
	...

0800184c <_printf_i>:
 800184c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001850:	460c      	mov	r4, r1
 8001852:	4691      	mov	r9, r2
 8001854:	7e27      	ldrb	r7, [r4, #24]
 8001856:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001858:	2f78      	cmp	r7, #120	; 0x78
 800185a:	4680      	mov	r8, r0
 800185c:	469a      	mov	sl, r3
 800185e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001862:	d807      	bhi.n	8001874 <_printf_i+0x28>
 8001864:	2f62      	cmp	r7, #98	; 0x62
 8001866:	d80a      	bhi.n	800187e <_printf_i+0x32>
 8001868:	2f00      	cmp	r7, #0
 800186a:	f000 80d8 	beq.w	8001a1e <_printf_i+0x1d2>
 800186e:	2f58      	cmp	r7, #88	; 0x58
 8001870:	f000 80a3 	beq.w	80019ba <_printf_i+0x16e>
 8001874:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800187c:	e03a      	b.n	80018f4 <_printf_i+0xa8>
 800187e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001882:	2b15      	cmp	r3, #21
 8001884:	d8f6      	bhi.n	8001874 <_printf_i+0x28>
 8001886:	a001      	add	r0, pc, #4	; (adr r0, 800188c <_printf_i+0x40>)
 8001888:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800188c:	080018e5 	.word	0x080018e5
 8001890:	080018f9 	.word	0x080018f9
 8001894:	08001875 	.word	0x08001875
 8001898:	08001875 	.word	0x08001875
 800189c:	08001875 	.word	0x08001875
 80018a0:	08001875 	.word	0x08001875
 80018a4:	080018f9 	.word	0x080018f9
 80018a8:	08001875 	.word	0x08001875
 80018ac:	08001875 	.word	0x08001875
 80018b0:	08001875 	.word	0x08001875
 80018b4:	08001875 	.word	0x08001875
 80018b8:	08001a05 	.word	0x08001a05
 80018bc:	08001929 	.word	0x08001929
 80018c0:	080019e7 	.word	0x080019e7
 80018c4:	08001875 	.word	0x08001875
 80018c8:	08001875 	.word	0x08001875
 80018cc:	08001a27 	.word	0x08001a27
 80018d0:	08001875 	.word	0x08001875
 80018d4:	08001929 	.word	0x08001929
 80018d8:	08001875 	.word	0x08001875
 80018dc:	08001875 	.word	0x08001875
 80018e0:	080019ef 	.word	0x080019ef
 80018e4:	680b      	ldr	r3, [r1, #0]
 80018e6:	1d1a      	adds	r2, r3, #4
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	600a      	str	r2, [r1, #0]
 80018ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80018f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0a3      	b.n	8001a40 <_printf_i+0x1f4>
 80018f8:	6825      	ldr	r5, [r4, #0]
 80018fa:	6808      	ldr	r0, [r1, #0]
 80018fc:	062e      	lsls	r6, r5, #24
 80018fe:	f100 0304 	add.w	r3, r0, #4
 8001902:	d50a      	bpl.n	800191a <_printf_i+0xce>
 8001904:	6805      	ldr	r5, [r0, #0]
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	2d00      	cmp	r5, #0
 800190a:	da03      	bge.n	8001914 <_printf_i+0xc8>
 800190c:	232d      	movs	r3, #45	; 0x2d
 800190e:	426d      	negs	r5, r5
 8001910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001914:	485e      	ldr	r0, [pc, #376]	; (8001a90 <_printf_i+0x244>)
 8001916:	230a      	movs	r3, #10
 8001918:	e019      	b.n	800194e <_printf_i+0x102>
 800191a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800191e:	6805      	ldr	r5, [r0, #0]
 8001920:	600b      	str	r3, [r1, #0]
 8001922:	bf18      	it	ne
 8001924:	b22d      	sxthne	r5, r5
 8001926:	e7ef      	b.n	8001908 <_printf_i+0xbc>
 8001928:	680b      	ldr	r3, [r1, #0]
 800192a:	6825      	ldr	r5, [r4, #0]
 800192c:	1d18      	adds	r0, r3, #4
 800192e:	6008      	str	r0, [r1, #0]
 8001930:	0628      	lsls	r0, r5, #24
 8001932:	d501      	bpl.n	8001938 <_printf_i+0xec>
 8001934:	681d      	ldr	r5, [r3, #0]
 8001936:	e002      	b.n	800193e <_printf_i+0xf2>
 8001938:	0669      	lsls	r1, r5, #25
 800193a:	d5fb      	bpl.n	8001934 <_printf_i+0xe8>
 800193c:	881d      	ldrh	r5, [r3, #0]
 800193e:	4854      	ldr	r0, [pc, #336]	; (8001a90 <_printf_i+0x244>)
 8001940:	2f6f      	cmp	r7, #111	; 0x6f
 8001942:	bf0c      	ite	eq
 8001944:	2308      	moveq	r3, #8
 8001946:	230a      	movne	r3, #10
 8001948:	2100      	movs	r1, #0
 800194a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800194e:	6866      	ldr	r6, [r4, #4]
 8001950:	60a6      	str	r6, [r4, #8]
 8001952:	2e00      	cmp	r6, #0
 8001954:	bfa2      	ittt	ge
 8001956:	6821      	ldrge	r1, [r4, #0]
 8001958:	f021 0104 	bicge.w	r1, r1, #4
 800195c:	6021      	strge	r1, [r4, #0]
 800195e:	b90d      	cbnz	r5, 8001964 <_printf_i+0x118>
 8001960:	2e00      	cmp	r6, #0
 8001962:	d04d      	beq.n	8001a00 <_printf_i+0x1b4>
 8001964:	4616      	mov	r6, r2
 8001966:	fbb5 f1f3 	udiv	r1, r5, r3
 800196a:	fb03 5711 	mls	r7, r3, r1, r5
 800196e:	5dc7      	ldrb	r7, [r0, r7]
 8001970:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001974:	462f      	mov	r7, r5
 8001976:	42bb      	cmp	r3, r7
 8001978:	460d      	mov	r5, r1
 800197a:	d9f4      	bls.n	8001966 <_printf_i+0x11a>
 800197c:	2b08      	cmp	r3, #8
 800197e:	d10b      	bne.n	8001998 <_printf_i+0x14c>
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	07df      	lsls	r7, r3, #31
 8001984:	d508      	bpl.n	8001998 <_printf_i+0x14c>
 8001986:	6923      	ldr	r3, [r4, #16]
 8001988:	6861      	ldr	r1, [r4, #4]
 800198a:	4299      	cmp	r1, r3
 800198c:	bfde      	ittt	le
 800198e:	2330      	movle	r3, #48	; 0x30
 8001990:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001994:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001998:	1b92      	subs	r2, r2, r6
 800199a:	6122      	str	r2, [r4, #16]
 800199c:	f8cd a000 	str.w	sl, [sp]
 80019a0:	464b      	mov	r3, r9
 80019a2:	aa03      	add	r2, sp, #12
 80019a4:	4621      	mov	r1, r4
 80019a6:	4640      	mov	r0, r8
 80019a8:	f7ff fee2 	bl	8001770 <_printf_common>
 80019ac:	3001      	adds	r0, #1
 80019ae:	d14c      	bne.n	8001a4a <_printf_i+0x1fe>
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	b004      	add	sp, #16
 80019b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019ba:	4835      	ldr	r0, [pc, #212]	; (8001a90 <_printf_i+0x244>)
 80019bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80019c0:	6823      	ldr	r3, [r4, #0]
 80019c2:	680e      	ldr	r6, [r1, #0]
 80019c4:	061f      	lsls	r7, r3, #24
 80019c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80019ca:	600e      	str	r6, [r1, #0]
 80019cc:	d514      	bpl.n	80019f8 <_printf_i+0x1ac>
 80019ce:	07d9      	lsls	r1, r3, #31
 80019d0:	bf44      	itt	mi
 80019d2:	f043 0320 	orrmi.w	r3, r3, #32
 80019d6:	6023      	strmi	r3, [r4, #0]
 80019d8:	b91d      	cbnz	r5, 80019e2 <_printf_i+0x196>
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	f023 0320 	bic.w	r3, r3, #32
 80019e0:	6023      	str	r3, [r4, #0]
 80019e2:	2310      	movs	r3, #16
 80019e4:	e7b0      	b.n	8001948 <_printf_i+0xfc>
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	f043 0320 	orr.w	r3, r3, #32
 80019ec:	6023      	str	r3, [r4, #0]
 80019ee:	2378      	movs	r3, #120	; 0x78
 80019f0:	4828      	ldr	r0, [pc, #160]	; (8001a94 <_printf_i+0x248>)
 80019f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80019f6:	e7e3      	b.n	80019c0 <_printf_i+0x174>
 80019f8:	065e      	lsls	r6, r3, #25
 80019fa:	bf48      	it	mi
 80019fc:	b2ad      	uxthmi	r5, r5
 80019fe:	e7e6      	b.n	80019ce <_printf_i+0x182>
 8001a00:	4616      	mov	r6, r2
 8001a02:	e7bb      	b.n	800197c <_printf_i+0x130>
 8001a04:	680b      	ldr	r3, [r1, #0]
 8001a06:	6826      	ldr	r6, [r4, #0]
 8001a08:	6960      	ldr	r0, [r4, #20]
 8001a0a:	1d1d      	adds	r5, r3, #4
 8001a0c:	600d      	str	r5, [r1, #0]
 8001a0e:	0635      	lsls	r5, r6, #24
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	d501      	bpl.n	8001a18 <_printf_i+0x1cc>
 8001a14:	6018      	str	r0, [r3, #0]
 8001a16:	e002      	b.n	8001a1e <_printf_i+0x1d2>
 8001a18:	0671      	lsls	r1, r6, #25
 8001a1a:	d5fb      	bpl.n	8001a14 <_printf_i+0x1c8>
 8001a1c:	8018      	strh	r0, [r3, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	6123      	str	r3, [r4, #16]
 8001a22:	4616      	mov	r6, r2
 8001a24:	e7ba      	b.n	800199c <_printf_i+0x150>
 8001a26:	680b      	ldr	r3, [r1, #0]
 8001a28:	1d1a      	adds	r2, r3, #4
 8001a2a:	600a      	str	r2, [r1, #0]
 8001a2c:	681e      	ldr	r6, [r3, #0]
 8001a2e:	6862      	ldr	r2, [r4, #4]
 8001a30:	2100      	movs	r1, #0
 8001a32:	4630      	mov	r0, r6
 8001a34:	f7fe fbdc 	bl	80001f0 <memchr>
 8001a38:	b108      	cbz	r0, 8001a3e <_printf_i+0x1f2>
 8001a3a:	1b80      	subs	r0, r0, r6
 8001a3c:	6060      	str	r0, [r4, #4]
 8001a3e:	6863      	ldr	r3, [r4, #4]
 8001a40:	6123      	str	r3, [r4, #16]
 8001a42:	2300      	movs	r3, #0
 8001a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a48:	e7a8      	b.n	800199c <_printf_i+0x150>
 8001a4a:	6923      	ldr	r3, [r4, #16]
 8001a4c:	4632      	mov	r2, r6
 8001a4e:	4649      	mov	r1, r9
 8001a50:	4640      	mov	r0, r8
 8001a52:	47d0      	blx	sl
 8001a54:	3001      	adds	r0, #1
 8001a56:	d0ab      	beq.n	80019b0 <_printf_i+0x164>
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	079b      	lsls	r3, r3, #30
 8001a5c:	d413      	bmi.n	8001a86 <_printf_i+0x23a>
 8001a5e:	68e0      	ldr	r0, [r4, #12]
 8001a60:	9b03      	ldr	r3, [sp, #12]
 8001a62:	4298      	cmp	r0, r3
 8001a64:	bfb8      	it	lt
 8001a66:	4618      	movlt	r0, r3
 8001a68:	e7a4      	b.n	80019b4 <_printf_i+0x168>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	4632      	mov	r2, r6
 8001a6e:	4649      	mov	r1, r9
 8001a70:	4640      	mov	r0, r8
 8001a72:	47d0      	blx	sl
 8001a74:	3001      	adds	r0, #1
 8001a76:	d09b      	beq.n	80019b0 <_printf_i+0x164>
 8001a78:	3501      	adds	r5, #1
 8001a7a:	68e3      	ldr	r3, [r4, #12]
 8001a7c:	9903      	ldr	r1, [sp, #12]
 8001a7e:	1a5b      	subs	r3, r3, r1
 8001a80:	42ab      	cmp	r3, r5
 8001a82:	dcf2      	bgt.n	8001a6a <_printf_i+0x21e>
 8001a84:	e7eb      	b.n	8001a5e <_printf_i+0x212>
 8001a86:	2500      	movs	r5, #0
 8001a88:	f104 0619 	add.w	r6, r4, #25
 8001a8c:	e7f5      	b.n	8001a7a <_printf_i+0x22e>
 8001a8e:	bf00      	nop
 8001a90:	08001cc5 	.word	0x08001cc5
 8001a94:	08001cd6 	.word	0x08001cd6

08001a98 <_sbrk_r>:
 8001a98:	b538      	push	{r3, r4, r5, lr}
 8001a9a:	4d06      	ldr	r5, [pc, #24]	; (8001ab4 <_sbrk_r+0x1c>)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	4608      	mov	r0, r1
 8001aa2:	602b      	str	r3, [r5, #0]
 8001aa4:	f7fe fd0a 	bl	80004bc <_sbrk>
 8001aa8:	1c43      	adds	r3, r0, #1
 8001aaa:	d102      	bne.n	8001ab2 <_sbrk_r+0x1a>
 8001aac:	682b      	ldr	r3, [r5, #0]
 8001aae:	b103      	cbz	r3, 8001ab2 <_sbrk_r+0x1a>
 8001ab0:	6023      	str	r3, [r4, #0]
 8001ab2:	bd38      	pop	{r3, r4, r5, pc}
 8001ab4:	200002b0 	.word	0x200002b0

08001ab8 <__sread>:
 8001ab8:	b510      	push	{r4, lr}
 8001aba:	460c      	mov	r4, r1
 8001abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ac0:	f000 f8a0 	bl	8001c04 <_read_r>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	bfab      	itete	ge
 8001ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001aca:	89a3      	ldrhlt	r3, [r4, #12]
 8001acc:	181b      	addge	r3, r3, r0
 8001ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ad2:	bfac      	ite	ge
 8001ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ad6:	81a3      	strhlt	r3, [r4, #12]
 8001ad8:	bd10      	pop	{r4, pc}

08001ada <__swrite>:
 8001ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ade:	461f      	mov	r7, r3
 8001ae0:	898b      	ldrh	r3, [r1, #12]
 8001ae2:	05db      	lsls	r3, r3, #23
 8001ae4:	4605      	mov	r5, r0
 8001ae6:	460c      	mov	r4, r1
 8001ae8:	4616      	mov	r6, r2
 8001aea:	d505      	bpl.n	8001af8 <__swrite+0x1e>
 8001aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001af0:	2302      	movs	r3, #2
 8001af2:	2200      	movs	r2, #0
 8001af4:	f000 f868 	bl	8001bc8 <_lseek_r>
 8001af8:	89a3      	ldrh	r3, [r4, #12]
 8001afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b02:	81a3      	strh	r3, [r4, #12]
 8001b04:	4632      	mov	r2, r6
 8001b06:	463b      	mov	r3, r7
 8001b08:	4628      	mov	r0, r5
 8001b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b0e:	f000 b817 	b.w	8001b40 <_write_r>

08001b12 <__sseek>:
 8001b12:	b510      	push	{r4, lr}
 8001b14:	460c      	mov	r4, r1
 8001b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b1a:	f000 f855 	bl	8001bc8 <_lseek_r>
 8001b1e:	1c43      	adds	r3, r0, #1
 8001b20:	89a3      	ldrh	r3, [r4, #12]
 8001b22:	bf15      	itete	ne
 8001b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b2e:	81a3      	strheq	r3, [r4, #12]
 8001b30:	bf18      	it	ne
 8001b32:	81a3      	strhne	r3, [r4, #12]
 8001b34:	bd10      	pop	{r4, pc}

08001b36 <__sclose>:
 8001b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b3a:	f000 b813 	b.w	8001b64 <_close_r>
	...

08001b40 <_write_r>:
 8001b40:	b538      	push	{r3, r4, r5, lr}
 8001b42:	4d07      	ldr	r5, [pc, #28]	; (8001b60 <_write_r+0x20>)
 8001b44:	4604      	mov	r4, r0
 8001b46:	4608      	mov	r0, r1
 8001b48:	4611      	mov	r1, r2
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	602a      	str	r2, [r5, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f7fe fc67 	bl	8000422 <_write>
 8001b54:	1c43      	adds	r3, r0, #1
 8001b56:	d102      	bne.n	8001b5e <_write_r+0x1e>
 8001b58:	682b      	ldr	r3, [r5, #0]
 8001b5a:	b103      	cbz	r3, 8001b5e <_write_r+0x1e>
 8001b5c:	6023      	str	r3, [r4, #0]
 8001b5e:	bd38      	pop	{r3, r4, r5, pc}
 8001b60:	200002b0 	.word	0x200002b0

08001b64 <_close_r>:
 8001b64:	b538      	push	{r3, r4, r5, lr}
 8001b66:	4d06      	ldr	r5, [pc, #24]	; (8001b80 <_close_r+0x1c>)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	4608      	mov	r0, r1
 8001b6e:	602b      	str	r3, [r5, #0]
 8001b70:	f7fe fc73 	bl	800045a <_close>
 8001b74:	1c43      	adds	r3, r0, #1
 8001b76:	d102      	bne.n	8001b7e <_close_r+0x1a>
 8001b78:	682b      	ldr	r3, [r5, #0]
 8001b7a:	b103      	cbz	r3, 8001b7e <_close_r+0x1a>
 8001b7c:	6023      	str	r3, [r4, #0]
 8001b7e:	bd38      	pop	{r3, r4, r5, pc}
 8001b80:	200002b0 	.word	0x200002b0

08001b84 <_fstat_r>:
 8001b84:	b538      	push	{r3, r4, r5, lr}
 8001b86:	4d07      	ldr	r5, [pc, #28]	; (8001ba4 <_fstat_r+0x20>)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	4604      	mov	r4, r0
 8001b8c:	4608      	mov	r0, r1
 8001b8e:	4611      	mov	r1, r2
 8001b90:	602b      	str	r3, [r5, #0]
 8001b92:	f7fe fc6d 	bl	8000470 <_fstat>
 8001b96:	1c43      	adds	r3, r0, #1
 8001b98:	d102      	bne.n	8001ba0 <_fstat_r+0x1c>
 8001b9a:	682b      	ldr	r3, [r5, #0]
 8001b9c:	b103      	cbz	r3, 8001ba0 <_fstat_r+0x1c>
 8001b9e:	6023      	str	r3, [r4, #0]
 8001ba0:	bd38      	pop	{r3, r4, r5, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200002b0 	.word	0x200002b0

08001ba8 <_isatty_r>:
 8001ba8:	b538      	push	{r3, r4, r5, lr}
 8001baa:	4d06      	ldr	r5, [pc, #24]	; (8001bc4 <_isatty_r+0x1c>)
 8001bac:	2300      	movs	r3, #0
 8001bae:	4604      	mov	r4, r0
 8001bb0:	4608      	mov	r0, r1
 8001bb2:	602b      	str	r3, [r5, #0]
 8001bb4:	f7fe fc6b 	bl	800048e <_isatty>
 8001bb8:	1c43      	adds	r3, r0, #1
 8001bba:	d102      	bne.n	8001bc2 <_isatty_r+0x1a>
 8001bbc:	682b      	ldr	r3, [r5, #0]
 8001bbe:	b103      	cbz	r3, 8001bc2 <_isatty_r+0x1a>
 8001bc0:	6023      	str	r3, [r4, #0]
 8001bc2:	bd38      	pop	{r3, r4, r5, pc}
 8001bc4:	200002b0 	.word	0x200002b0

08001bc8 <_lseek_r>:
 8001bc8:	b538      	push	{r3, r4, r5, lr}
 8001bca:	4d07      	ldr	r5, [pc, #28]	; (8001be8 <_lseek_r+0x20>)
 8001bcc:	4604      	mov	r4, r0
 8001bce:	4608      	mov	r0, r1
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	602a      	str	r2, [r5, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f7fe fc63 	bl	80004a2 <_lseek>
 8001bdc:	1c43      	adds	r3, r0, #1
 8001bde:	d102      	bne.n	8001be6 <_lseek_r+0x1e>
 8001be0:	682b      	ldr	r3, [r5, #0]
 8001be2:	b103      	cbz	r3, 8001be6 <_lseek_r+0x1e>
 8001be4:	6023      	str	r3, [r4, #0]
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
 8001be8:	200002b0 	.word	0x200002b0

08001bec <__malloc_lock>:
 8001bec:	4801      	ldr	r0, [pc, #4]	; (8001bf4 <__malloc_lock+0x8>)
 8001bee:	f7ff bb59 	b.w	80012a4 <__retarget_lock_acquire_recursive>
 8001bf2:	bf00      	nop
 8001bf4:	200002a8 	.word	0x200002a8

08001bf8 <__malloc_unlock>:
 8001bf8:	4801      	ldr	r0, [pc, #4]	; (8001c00 <__malloc_unlock+0x8>)
 8001bfa:	f7ff bb54 	b.w	80012a6 <__retarget_lock_release_recursive>
 8001bfe:	bf00      	nop
 8001c00:	200002a8 	.word	0x200002a8

08001c04 <_read_r>:
 8001c04:	b538      	push	{r3, r4, r5, lr}
 8001c06:	4d07      	ldr	r5, [pc, #28]	; (8001c24 <_read_r+0x20>)
 8001c08:	4604      	mov	r4, r0
 8001c0a:	4608      	mov	r0, r1
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	2200      	movs	r2, #0
 8001c10:	602a      	str	r2, [r5, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	f7fe fbe8 	bl	80003e8 <_read>
 8001c18:	1c43      	adds	r3, r0, #1
 8001c1a:	d102      	bne.n	8001c22 <_read_r+0x1e>
 8001c1c:	682b      	ldr	r3, [r5, #0]
 8001c1e:	b103      	cbz	r3, 8001c22 <_read_r+0x1e>
 8001c20:	6023      	str	r3, [r4, #0]
 8001c22:	bd38      	pop	{r3, r4, r5, pc}
 8001c24:	200002b0 	.word	0x200002b0

08001c28 <_init>:
 8001c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c2a:	bf00      	nop
 8001c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c2e:	bc08      	pop	{r3}
 8001c30:	469e      	mov	lr, r3
 8001c32:	4770      	bx	lr

08001c34 <_fini>:
 8001c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c36:	bf00      	nop
 8001c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c3a:	bc08      	pop	{r3}
 8001c3c:	469e      	mov	lr, r3
 8001c3e:	4770      	bx	lr
