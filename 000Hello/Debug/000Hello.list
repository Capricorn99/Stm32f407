
000Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002198  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08002348  08002348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002430  08002430  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002430  08002430  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002430  08002430  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002430  08002430  00012430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002434  08002434  00012434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000064  0800249c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  0800249c  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003839  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a40  00000000  00000000  000238c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  00024308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000220  00000000  00000000  00024580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000343c  00000000  00000000  000247a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002864  00000000  00000000  00027bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000bb15  00000000  00000000  0002a440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00035f55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001148  00000000  00000000  00035fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002330 	.word	0x08002330

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08002330 	.word	0x08002330

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <SPI2_GPIOInits+0x58>)
 8000298:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 800029a:	2302      	movs	r3, #2
 800029c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800029e:	2305      	movs	r3, #5
 80002a0:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 80002a2:	2300      	movs	r3, #0
 80002a4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002aa:	2302      	movs	r3, #2
 80002ac:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ae:	230d      	movs	r3, #13
 80002b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 faf5 	bl	80008a4 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002ba:	230f      	movs	r3, #15
 80002bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 faef 	bl	80008a4 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002c6:	230e      	movs	r3, #14
 80002c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fae9 	bl	80008a4 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002d2:	230c      	movs	r3, #12
 80002d4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fae3 	bl	80008a4 <GPIO_Init>
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40020400 	.word	0x40020400

080002ec <SPI2_Inits>:

void SPI2_Inits(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <SPI2_Inits+0x40>)
 80002f2:	4a0f      	ldr	r2, [pc, #60]	; (8000330 <SPI2_Inits+0x44>)
 80002f4:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <SPI2_Inits+0x40>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <SPI2_Inits+0x40>)
 80002fe:	2201      	movs	r2, #1
 8000300:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <SPI2_Inits+0x40>)
 8000304:	2204      	movs	r2, #4
 8000306:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <SPI2_Inits+0x40>)
 800030a:	2200      	movs	r2, #0
 800030c:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <SPI2_Inits+0x40>)
 8000310:	2200      	movs	r2, #0
 8000312:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <SPI2_Inits+0x40>)
 8000316:	2200      	movs	r2, #0
 8000318:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 800031a:	4b04      	ldr	r3, [pc, #16]	; (800032c <SPI2_Inits+0x40>)
 800031c:	2200      	movs	r2, #0
 800031e:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000320:	4802      	ldr	r0, [pc, #8]	; (800032c <SPI2_Inits+0x40>)
 8000322:	f000 fd9c 	bl	8000e5e <SPI_Init>
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000098 	.word	0x20000098
 8000330:	40003800 	.word	0x40003800

08000334 <Slave_GPIO_InterruptPinInit>:


/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	220c      	movs	r2, #12
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f001 f825 	bl	8001390 <memset>

	//this is led gpio configuration
	spiIntPin.pGPIOx = GPIOD;
 8000346:	4b0d      	ldr	r3, [pc, #52]	; (800037c <Slave_GPIO_InterruptPinInit+0x48>)
 8000348:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800034a:	2306      	movs	r3, #6
 800034c:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800034e:	2304      	movs	r3, #4
 8000350:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000352:	2300      	movs	r3, #0
 8000354:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000356:	2300      	movs	r3, #0
 8000358:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f000 faa1 	bl	80008a4 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5,NVIC_IRQ_PRIO15);
 8000362:	210f      	movs	r1, #15
 8000364:	2017      	movs	r0, #23
 8000366:	f000 fcbd 	bl	8000ce4 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 800036a:	2101      	movs	r1, #1
 800036c:	2017      	movs	r0, #23
 800036e:	f000 fc39 	bl	8000be4 <GPIO_IRQInterruptConfig>
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40020c00 	.word	0x40020c00

08000380 <main>:

int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
	printf("After main\n");
 8000386:	482c      	ldr	r0, [pc, #176]	; (8000438 <main+0xb8>)
 8000388:	f001 f890 	bl	80014ac <puts>


	uint8_t dummy = 0xff;
 800038c:	23ff      	movs	r3, #255	; 0xff
 800038e:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 8000390:	f7ff ffd0 	bl	8000334 <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000394:	f7ff ff7c 	bl	8000290 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000398:	f7ff ffa8 	bl	80002ec <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 800039c:	2101      	movs	r1, #1
 800039e:	4827      	ldr	r0, [pc, #156]	; (800043c <main+0xbc>)
 80003a0:	f000 fd42 	bl	8000e28 <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 80003a4:	2101      	movs	r1, #1
 80003a6:	2024      	movs	r0, #36	; 0x24
 80003a8:	f000 fde2 	bl	8000f70 <SPI_IRQInterruptConfig>

	printf("Done configuration\n");
 80003ac:	4824      	ldr	r0, [pc, #144]	; (8000440 <main+0xc0>)
 80003ae:	f001 f87d 	bl	80014ac <puts>

	//printf("GPIOB MODE %x \n", );

	while(1){

		rcvStop = 0;
 80003b2:	4b24      	ldr	r3, [pc, #144]	; (8000444 <main+0xc4>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 80003b8:	bf00      	nop
 80003ba:	4b23      	ldr	r3, [pc, #140]	; (8000448 <main+0xc8>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d0fa      	beq.n	80003ba <main+0x3a>

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,DISABLE);
 80003c4:	2100      	movs	r1, #0
 80003c6:	2017      	movs	r0, #23
 80003c8:	f000 fc0c 	bl	8000be4 <GPIO_IRQInterruptConfig>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 80003cc:	2101      	movs	r1, #1
 80003ce:	481b      	ldr	r0, [pc, #108]	; (800043c <main+0xbc>)
 80003d0:	f000 fdb3 	bl	8000f3a <SPI_PeripheralControl>


		while(!rcvStop)
 80003d4:	e012      	b.n	80003fc <main+0x7c>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while ( SPI_SendDataIT(&SPI2handle,&dummy,1) == SPI_BUSY_IN_TX);
 80003d6:	bf00      	nop
 80003d8:	1dfb      	adds	r3, r7, #7
 80003da:	2201      	movs	r2, #1
 80003dc:	4619      	mov	r1, r3
 80003de:	481b      	ldr	r0, [pc, #108]	; (800044c <main+0xcc>)
 80003e0:	f000 fe4a 	bl	8001078 <SPI_SendDataIT>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b02      	cmp	r3, #2
 80003e8:	d0f6      	beq.n	80003d8 <main+0x58>
			while ( SPI_ReceiveDataIT(&SPI2handle,&ReadByte,1) == SPI_BUSY_IN_RX );
 80003ea:	bf00      	nop
 80003ec:	2201      	movs	r2, #1
 80003ee:	4918      	ldr	r1, [pc, #96]	; (8000450 <main+0xd0>)
 80003f0:	4816      	ldr	r0, [pc, #88]	; (800044c <main+0xcc>)
 80003f2:	f000 fe64 	bl	80010be <SPI_ReceiveDataIT>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d0f7      	beq.n	80003ec <main+0x6c>
		while(!rcvStop)
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <main+0xc4>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	b2db      	uxtb	r3, r3
 8000402:	2b00      	cmp	r3, #0
 8000404:	d0e7      	beq.n	80003d6 <main+0x56>
		}

		// confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 8000406:	bf00      	nop
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	480c      	ldr	r0, [pc, #48]	; (800043c <main+0xbc>)
 800040c:	f000 fd82 	bl	8000f14 <SPI_GetFlagStatus>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1f8      	bne.n	8000408 <main+0x88>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 8000416:	2100      	movs	r1, #0
 8000418:	4808      	ldr	r0, [pc, #32]	; (800043c <main+0xbc>)
 800041a:	f000 fd8e 	bl	8000f3a <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 800041e:	490d      	ldr	r1, [pc, #52]	; (8000454 <main+0xd4>)
 8000420:	480d      	ldr	r0, [pc, #52]	; (8000458 <main+0xd8>)
 8000422:	f000 ffbd 	bl	80013a0 <iprintf>

		dataAvailable = 0;
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <main+0xc8>)
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 800042c:	2101      	movs	r1, #1
 800042e:	2017      	movs	r0, #23
 8000430:	f000 fbd8 	bl	8000be4 <GPIO_IRQInterruptConfig>
		rcvStop = 0;
 8000434:	e7bd      	b.n	80003b2 <main+0x32>
 8000436:	bf00      	nop
 8000438:	08002348 	.word	0x08002348
 800043c:	40003800 	.word	0x40003800
 8000440:	08002354 	.word	0x08002354
 8000444:	20000080 	.word	0x20000080
 8000448:	20000081 	.word	0x20000081
 800044c:	20000098 	.word	0x20000098
 8000450:	20000094 	.word	0x20000094
 8000454:	200000b8 	.word	0x200000b8
 8000458:	08002368 	.word	0x08002368

0800045c <SPI2_IRQHandler>:
	return 0;
}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI2_IRQHandler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI2handle);
 8000460:	4802      	ldr	r0, [pc, #8]	; (800046c <SPI2_IRQHandler+0x10>)
 8000462:	f000 fe4f 	bl	8001104 <SPI_IRQHandling>
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000098 	.word	0x20000098

08000470 <SPI_ApplicationEventCallback>:

void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	460b      	mov	r3, r1
 800047a:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_CMPLT)
 800047c:	78fb      	ldrb	r3, [r7, #3]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d11f      	bne.n	80004c2 <SPI_ApplicationEventCallback+0x52>
	{
		RcvBuff[i++] = ReadByte;
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <SPI_ApplicationEventCallback+0x5c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	4910      	ldr	r1, [pc, #64]	; (80004cc <SPI_ApplicationEventCallback+0x5c>)
 800048a:	600a      	str	r2, [r1, #0]
 800048c:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <SPI_ApplicationEventCallback+0x60>)
 800048e:	7812      	ldrb	r2, [r2, #0]
 8000490:	b2d1      	uxtb	r1, r2
 8000492:	4a10      	ldr	r2, [pc, #64]	; (80004d4 <SPI_ApplicationEventCallback+0x64>)
 8000494:	54d1      	strb	r1, [r2, r3]
		if(ReadByte == '\0' || ( i == MAX_LEN)){
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <SPI_ApplicationEventCallback+0x60>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	b2db      	uxtb	r3, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	d004      	beq.n	80004aa <SPI_ApplicationEventCallback+0x3a>
 80004a0:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <SPI_ApplicationEventCallback+0x5c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80004a8:	d10b      	bne.n	80004c2 <SPI_ApplicationEventCallback+0x52>
			rcvStop = 1;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <SPI_ApplicationEventCallback+0x68>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
			RcvBuff[i-1] = '\0';
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <SPI_ApplicationEventCallback+0x5c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	4a07      	ldr	r2, [pc, #28]	; (80004d4 <SPI_ApplicationEventCallback+0x64>)
 80004b8:	2100      	movs	r1, #0
 80004ba:	54d1      	strb	r1, [r2, r3]
			i = 0;
 80004bc:	4b03      	ldr	r3, [pc, #12]	; (80004cc <SPI_ApplicationEventCallback+0x5c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
		}
	}
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	20000084 	.word	0x20000084
 80004d0:	20000094 	.word	0x20000094
 80004d4:	200000b8 	.word	0x200000b8
 80004d8:	20000080 	.word	0x20000080

080004dc <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_6);
 80004e0:	2006      	movs	r0, #6
 80004e2:	f000 fc29 	bl	8000d38 <GPIO_IRQHandling>
	dataAvailable = 1;
 80004e6:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <EXTI9_5_IRQHandler+0x14>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	701a      	strb	r2, [r3, #0]
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000081 	.word	0x20000081

080004f4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <ITM_SendChar+0x44>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <ITM_SendChar+0x44>)
 8000504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000508:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <ITM_SendChar+0x48>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a0b      	ldr	r2, [pc, #44]	; (800053c <ITM_SendChar+0x48>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000516:	bf00      	nop
 8000518:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0f8      	beq.n	8000518 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000526:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	6013      	str	r3, [r2, #0]
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	e000edfc 	.word	0xe000edfc
 800053c:	e0000e00 	.word	0xe0000e00

08000540 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	e00a      	b.n	8000568 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000552:	f3af 8000 	nop.w
 8000556:	4601      	mov	r1, r0
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	60ba      	str	r2, [r7, #8]
 800055e:	b2ca      	uxtb	r2, r1
 8000560:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbf0      	blt.n	8000552 <_read+0x12>
	}

return len;
 8000570:	687b      	ldr	r3, [r7, #4]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	b086      	sub	sp, #24
 800057e:	af00      	add	r7, sp, #0
 8000580:	60f8      	str	r0, [r7, #12]
 8000582:	60b9      	str	r1, [r7, #8]
 8000584:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
 800058a:	e009      	b.n	80005a0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	60ba      	str	r2, [r7, #8]
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ffad 	bl	80004f4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	3301      	adds	r3, #1
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbf1      	blt.n	800058c <_write+0x12>
	}
	return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <_close>:

int _close(int file)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
	return -1;
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005d8:	605a      	str	r2, [r3, #4]
	return 0;
 80005da:	2300      	movs	r3, #0
}
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <_isatty>:

int _isatty(int file)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
	return 1;
 80005ee:	2301      	movs	r3, #1
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b085      	sub	sp, #20
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
	return 0;
 8000606:	2300      	movs	r3, #0
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
	...

08000614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800061c:	4a14      	ldr	r2, [pc, #80]	; (8000670 <_sbrk+0x5c>)
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <_sbrk+0x60>)
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d102      	bne.n	8000636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <_sbrk+0x64>)
 8000632:	4a12      	ldr	r2, [pc, #72]	; (800067c <_sbrk+0x68>)
 8000634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	429a      	cmp	r2, r3
 8000642:	d207      	bcs.n	8000654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000644:	f000 fe7a 	bl	800133c <__errno>
 8000648:	4603      	mov	r3, r0
 800064a:	220c      	movs	r2, #12
 800064c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	e009      	b.n	8000668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <_sbrk+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <_sbrk+0x64>)
 8000664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000666:	68fb      	ldr	r3, [r7, #12]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20020000 	.word	0x20020000
 8000674:	00000400 	.word	0x00000400
 8000678:	20000088 	.word	0x20000088
 800067c:	200002c0 	.word	0x200002c0

08000680 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000682:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000684:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <LoopForever+0x6>)
  ldr r1, =_edata
 800068a:	490d      	ldr	r1, [pc, #52]	; (80006c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800068c:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <LoopForever+0xe>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000690:	e002      	b.n	8000698 <LoopCopyDataInit>

08000692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000696:	3304      	adds	r3, #4

08000698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800069c:	d3f9      	bcc.n	8000692 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a0:	4c0a      	ldr	r4, [pc, #40]	; (80006cc <LoopForever+0x16>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a4:	e001      	b.n	80006aa <LoopFillZerobss>

080006a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a8:	3204      	adds	r2, #4

080006aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ac:	d3fb      	bcc.n	80006a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ae:	f000 fe4b 	bl	8001348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b2:	f7ff fe65 	bl	8000380 <main>

080006b6 <LoopForever>:

LoopForever:
    b LoopForever
 80006b6:	e7fe      	b.n	80006b6 <LoopForever>
  ldr   r0, =_estack
 80006b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006c4:	08002438 	.word	0x08002438
  ldr r2, =_sbss
 80006c8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006cc:	200002bc 	.word	0x200002bc

080006d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC_IRQHandler>
	...

080006d4 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t*pGPIOx, uint8_t EnorDi)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d162      	bne.n	80007ac <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a64      	ldr	r2, [pc, #400]	; (800087c <GPIO_PeriClockControl+0x1a8>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d106      	bne.n	80006fc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80006ee:	4b64      	ldr	r3, [pc, #400]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a63      	ldr	r2, [pc, #396]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80006fa:	e0b9      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a61      	ldr	r2, [pc, #388]	; (8000884 <GPIO_PeriClockControl+0x1b0>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d106      	bne.n	8000712 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000704:	4b5e      	ldr	r3, [pc, #376]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000708:	4a5d      	ldr	r2, [pc, #372]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800070a:	f043 0302 	orr.w	r3, r3, #2
 800070e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000710:	e0ae      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a5c      	ldr	r2, [pc, #368]	; (8000888 <GPIO_PeriClockControl+0x1b4>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d106      	bne.n	8000728 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800071a:	4b59      	ldr	r3, [pc, #356]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a58      	ldr	r2, [pc, #352]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000726:	e0a3      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a58      	ldr	r2, [pc, #352]	; (800088c <GPIO_PeriClockControl+0x1b8>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d106      	bne.n	800073e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000730:	4b53      	ldr	r3, [pc, #332]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	4a52      	ldr	r2, [pc, #328]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800073c:	e098      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a53      	ldr	r2, [pc, #332]	; (8000890 <GPIO_PeriClockControl+0x1bc>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d106      	bne.n	8000754 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000746:	4b4e      	ldr	r3, [pc, #312]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a4d      	ldr	r2, [pc, #308]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000752:	e08d      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a4f      	ldr	r2, [pc, #316]	; (8000894 <GPIO_PeriClockControl+0x1c0>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d106      	bne.n	800076a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800075c:	4b48      	ldr	r3, [pc, #288]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	4a47      	ldr	r2, [pc, #284]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000768:	e082      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a4a      	ldr	r2, [pc, #296]	; (8000898 <GPIO_PeriClockControl+0x1c4>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d106      	bne.n	8000780 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000772:	4b43      	ldr	r3, [pc, #268]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a42      	ldr	r2, [pc, #264]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800077e:	e077      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a46      	ldr	r2, [pc, #280]	; (800089c <GPIO_PeriClockControl+0x1c8>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d106      	bne.n	8000796 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000788:	4b3d      	ldr	r3, [pc, #244]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078c:	4a3c      	ldr	r2, [pc, #240]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800078e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000792:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000794:	e06c      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a41      	ldr	r2, [pc, #260]	; (80008a0 <GPIO_PeriClockControl+0x1cc>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d168      	bne.n	8000870 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800079e:	4b38      	ldr	r3, [pc, #224]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a37      	ldr	r2, [pc, #220]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007aa:	e061      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a33      	ldr	r2, [pc, #204]	; (800087c <GPIO_PeriClockControl+0x1a8>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d106      	bne.n	80007c2 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80007b4:	4b32      	ldr	r3, [pc, #200]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	4a31      	ldr	r2, [pc, #196]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007ba:	f023 0301 	bic.w	r3, r3, #1
 80007be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c0:	e056      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a2f      	ldr	r2, [pc, #188]	; (8000884 <GPIO_PeriClockControl+0x1b0>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d106      	bne.n	80007d8 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007d0:	f023 0302 	bic.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d6:	e04b      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a2b      	ldr	r2, [pc, #172]	; (8000888 <GPIO_PeriClockControl+0x1b4>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d106      	bne.n	80007ee <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e4:	4a26      	ldr	r2, [pc, #152]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007e6:	f023 0304 	bic.w	r3, r3, #4
 80007ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ec:	e040      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a26      	ldr	r2, [pc, #152]	; (800088c <GPIO_PeriClockControl+0x1b8>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d106      	bne.n	8000804 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a21      	ldr	r2, [pc, #132]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007fc:	f023 0308 	bic.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000802:	e035      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a22      	ldr	r2, [pc, #136]	; (8000890 <GPIO_PeriClockControl+0x1bc>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d106      	bne.n	800081a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800080c:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800080e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000812:	f023 0310 	bic.w	r3, r3, #16
 8000816:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000818:	e02a      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <GPIO_PeriClockControl+0x1c0>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d106      	bne.n	8000830 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000828:	f023 0320 	bic.w	r3, r3, #32
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800082e:	e01f      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a19      	ldr	r2, [pc, #100]	; (8000898 <GPIO_PeriClockControl+0x1c4>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d106      	bne.n	8000846 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	4a10      	ldr	r2, [pc, #64]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800083e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000842:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000844:	e014      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a14      	ldr	r2, [pc, #80]	; (800089c <GPIO_PeriClockControl+0x1c8>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d106      	bne.n	800085c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
}
 800085a:	e009      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <GPIO_PeriClockControl+0x1cc>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d105      	bne.n	8000870 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800086a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800086e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40020000 	.word	0x40020000
 8000880:	40023800 	.word	0x40023800
 8000884:	40020400 	.word	0x40020400
 8000888:	40020800 	.word	0x40020800
 800088c:	40020c00 	.word	0x40020c00
 8000890:	40021000 	.word	0x40021000
 8000894:	40021400 	.word	0x40021400
 8000898:	40021800 	.word	0x40021800
 800089c:	40021c00 	.word	0x40021c00
 80008a0:	40022000 	.word	0x40022000

080008a4 <GPIO_Init>:

/*
 * Init & De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2101      	movs	r1, #1
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff0c 	bl	80006d4 <GPIO_PeriClockControl>

	//1. configure the mode of gpio
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	795b      	ldrb	r3, [r3, #5]
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	d826      	bhi.n	8000912 <GPIO_Init+0x6e>
	{
		//the non interrupt mode
		temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	795b      	ldrb	r3, [r3, #5]
 80008c8:	461a      	mov	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	791b      	ldrb	r3, [r3, #4]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	617b      	str	r3, [r7, #20]

		pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	791b      	ldrb	r3, [r3, #4]
 80008e0:	4619      	mov	r1, r3
 80008e2:	2303      	movs	r3, #3
 80008e4:	408b      	lsls	r3, r1
 80008e6:	43db      	mvns	r3, r3
 80008e8:	4619      	mov	r1, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	400a      	ands	r2, r1
 80008f0:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx ->MODER |= temp; //setting
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	6819      	ldr	r1, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	430a      	orrs	r2, r1
 8000900:	601a      	str	r2, [r3, #0]

		printf("Gia tri thanh ghi MODER %x \n", pGPIOHandle ->pGPIOx ->MODER);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	484b      	ldr	r0, [pc, #300]	; (8000a38 <GPIO_Init+0x194>)
 800090c:	f000 fd48 	bl	80013a0 <iprintf>
 8000910:	e0c3      	b.n	8000a9a <GPIO_Init+0x1f6>


	}else
	{
		//code later
		if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	795b      	ldrb	r3, [r3, #5]
 8000916:	2b04      	cmp	r3, #4
 8000918:	d817      	bhi.n	800094a <GPIO_Init+0xa6>
		{
			//1. configure the FTSR
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 800091a:	4b48      	ldr	r3, [pc, #288]	; (8000a3c <GPIO_Init+0x198>)
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	7912      	ldrb	r2, [r2, #4]
 8000922:	4611      	mov	r1, r2
 8000924:	2201      	movs	r2, #1
 8000926:	408a      	lsls	r2, r1
 8000928:	4611      	mov	r1, r2
 800092a:	4a44      	ldr	r2, [pc, #272]	; (8000a3c <GPIO_Init+0x198>)
 800092c:	430b      	orrs	r3, r1
 800092e:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI ->RTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000930:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <GPIO_Init+0x198>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	7912      	ldrb	r2, [r2, #4]
 8000938:	4611      	mov	r1, r2
 800093a:	2201      	movs	r2, #1
 800093c:	408a      	lsls	r2, r1
 800093e:	43d2      	mvns	r2, r2
 8000940:	4611      	mov	r1, r2
 8000942:	4a3e      	ldr	r2, [pc, #248]	; (8000a3c <GPIO_Init+0x198>)
 8000944:	400b      	ands	r3, r1
 8000946:	6093      	str	r3, [r2, #8]
 8000948:	e035      	b.n	80009b6 <GPIO_Init+0x112>
		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	795b      	ldrb	r3, [r3, #5]
 800094e:	2b05      	cmp	r3, #5
 8000950:	d817      	bhi.n	8000982 <GPIO_Init+0xde>
		{
			//1. configure the RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000952:	4b3a      	ldr	r3, [pc, #232]	; (8000a3c <GPIO_Init+0x198>)
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	7912      	ldrb	r2, [r2, #4]
 800095a:	4611      	mov	r1, r2
 800095c:	2201      	movs	r2, #1
 800095e:	408a      	lsls	r2, r1
 8000960:	4611      	mov	r1, r2
 8000962:	4a36      	ldr	r2, [pc, #216]	; (8000a3c <GPIO_Init+0x198>)
 8000964:	430b      	orrs	r3, r1
 8000966:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000968:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <GPIO_Init+0x198>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	7912      	ldrb	r2, [r2, #4]
 8000970:	4611      	mov	r1, r2
 8000972:	2201      	movs	r2, #1
 8000974:	408a      	lsls	r2, r1
 8000976:	43d2      	mvns	r2, r2
 8000978:	4611      	mov	r1, r2
 800097a:	4a30      	ldr	r2, [pc, #192]	; (8000a3c <GPIO_Init+0x198>)
 800097c:	400b      	ands	r3, r1
 800097e:	60d3      	str	r3, [r2, #12]
 8000980:	e019      	b.n	80009b6 <GPIO_Init+0x112>

		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	795b      	ldrb	r3, [r3, #5]
 8000986:	2b06      	cmp	r3, #6
 8000988:	d815      	bhi.n	80009b6 <GPIO_Init+0x112>
		{
			//1. configure the both FTSR and RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <GPIO_Init+0x198>)
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	7912      	ldrb	r2, [r2, #4]
 8000992:	4611      	mov	r1, r2
 8000994:	2201      	movs	r2, #1
 8000996:	408a      	lsls	r2, r1
 8000998:	4611      	mov	r1, r2
 800099a:	4a28      	ldr	r2, [pc, #160]	; (8000a3c <GPIO_Init+0x198>)
 800099c:	430b      	orrs	r3, r1
 800099e:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 80009a0:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <GPIO_Init+0x198>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	7912      	ldrb	r2, [r2, #4]
 80009a8:	4611      	mov	r1, r2
 80009aa:	2201      	movs	r2, #1
 80009ac:	408a      	lsls	r2, r1
 80009ae:	4611      	mov	r1, r2
 80009b0:	4a22      	ldr	r2, [pc, #136]	; (8000a3c <GPIO_Init+0x198>)
 80009b2:	430b      	orrs	r3, r1
 80009b4:	60d3      	str	r3, [r2, #12]

		}

		//2. configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	791b      	ldrb	r3, [r3, #4]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	791b      	ldrb	r3, [r3, #4]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a1c      	ldr	r2, [pc, #112]	; (8000a40 <GPIO_Init+0x19c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d046      	beq.n	8000a60 <GPIO_Init+0x1bc>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <GPIO_Init+0x1a0>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d02b      	beq.n	8000a34 <GPIO_Init+0x190>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <GPIO_Init+0x1a4>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d024      	beq.n	8000a30 <GPIO_Init+0x18c>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <GPIO_Init+0x1a8>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d01d      	beq.n	8000a2c <GPIO_Init+0x188>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <GPIO_Init+0x1ac>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d016      	beq.n	8000a28 <GPIO_Init+0x184>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <GPIO_Init+0x1b0>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d00f      	beq.n	8000a24 <GPIO_Init+0x180>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <GPIO_Init+0x1b4>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d008      	beq.n	8000a20 <GPIO_Init+0x17c>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <GPIO_Init+0x1b8>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d101      	bne.n	8000a1c <GPIO_Init+0x178>
 8000a18:	2307      	movs	r3, #7
 8000a1a:	e022      	b.n	8000a62 <GPIO_Init+0x1be>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e020      	b.n	8000a62 <GPIO_Init+0x1be>
 8000a20:	2306      	movs	r3, #6
 8000a22:	e01e      	b.n	8000a62 <GPIO_Init+0x1be>
 8000a24:	2305      	movs	r3, #5
 8000a26:	e01c      	b.n	8000a62 <GPIO_Init+0x1be>
 8000a28:	2304      	movs	r3, #4
 8000a2a:	e01a      	b.n	8000a62 <GPIO_Init+0x1be>
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	e018      	b.n	8000a62 <GPIO_Init+0x1be>
 8000a30:	2302      	movs	r3, #2
 8000a32:	e016      	b.n	8000a62 <GPIO_Init+0x1be>
 8000a34:	2301      	movs	r3, #1
 8000a36:	e014      	b.n	8000a62 <GPIO_Init+0x1be>
 8000a38:	08002378 	.word	0x08002378
 8000a3c:	40013c00 	.word	0x40013c00
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020400 	.word	0x40020400
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40021400 	.word	0x40021400
 8000a58:	40021800 	.word	0x40021800
 8000a5c:	40021c00 	.word	0x40021c00
 8000a60:	2300      	movs	r3, #0
 8000a62:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000a64:	4b5c      	ldr	r3, [pc, #368]	; (8000bd8 <GPIO_Init+0x334>)
 8000a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a68:	4a5b      	ldr	r2, [pc, #364]	; (8000bd8 <GPIO_Init+0x334>)
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]= portcode << (temp2*4);
 8000a70:	7c7a      	ldrb	r2, [r7, #17]
 8000a72:	7cbb      	ldrb	r3, [r7, #18]
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	fa02 f103 	lsl.w	r1, r2, r3
 8000a7a:	4a58      	ldr	r2, [pc, #352]	; (8000bdc <GPIO_Init+0x338>)
 8000a7c:	7cfb      	ldrb	r3, [r7, #19]
 8000a7e:	3302      	adds	r3, #2
 8000a80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI ->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000a84:	4b56      	ldr	r3, [pc, #344]	; (8000be0 <GPIO_Init+0x33c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	7912      	ldrb	r2, [r2, #4]
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	2201      	movs	r2, #1
 8000a90:	408a      	lsls	r2, r1
 8000a92:	4611      	mov	r1, r2
 8000a94:	4a52      	ldr	r2, [pc, #328]	; (8000be0 <GPIO_Init+0x33c>)
 8000a96:	430b      	orrs	r3, r1
 8000a98:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
	//2. configure the speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	799b      	ldrb	r3, [r3, #6]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	791b      	ldrb	r3, [r3, #4]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	791b      	ldrb	r3, [r3, #4]
 8000aba:	4619      	mov	r1, r3
 8000abc:	2303      	movs	r3, #3
 8000abe:	408b      	lsls	r3, r1
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	400a      	ands	r2, r1
 8000aca:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OSPEEDR |= temp;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6899      	ldr	r1, [r3, #8]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	609a      	str	r2, [r3, #8]

	temp =0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
	//3. configure the pu pd settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	79db      	ldrb	r3, [r3, #7]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	791b      	ldrb	r3, [r3, #4]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	791b      	ldrb	r3, [r3, #4]
 8000afc:	4619      	mov	r1, r3
 8000afe:	2303      	movs	r3, #3
 8000b00:	408b      	lsls	r3, r1
 8000b02:	43db      	mvns	r3, r3
 8000b04:	4619      	mov	r1, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->PUPDR |= temp;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68d9      	ldr	r1, [r3, #12]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	60da      	str	r2, [r3, #12]

	temp =0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]

	//4. configure
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinoType << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	7a1b      	ldrb	r3, [r3, #8]
 8000b26:	461a      	mov	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	791b      	ldrb	r3, [r3, #4]
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x01 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	791b      	ldrb	r3, [r3, #4]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	2301      	movs	r3, #1
 8000b40:	408b      	lsls	r3, r1
 8000b42:	43db      	mvns	r3, r3
 8000b44:	4619      	mov	r1, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	400a      	ands	r2, r1
 8000b4c:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OTYPER |= temp;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6859      	ldr	r1, [r3, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	605a      	str	r2, [r3, #4]

	temp =0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]

	//5. configure
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	795b      	ldrb	r3, [r3, #5]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d132      	bne.n	8000bd0 <GPIO_Init+0x32c>
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	791b      	ldrb	r3, [r3, #4]
 8000b6e:	08db      	lsrs	r3, r3, #3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	791b      	ldrb	r3, [r3, #4]
 8000b78:	f003 0307 	and.w	r3, r3, #7
 8000b7c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	3208      	adds	r2, #8
 8000b86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	210f      	movs	r1, #15
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	4619      	mov	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4011      	ands	r1, r2
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	3208      	adds	r2, #8
 8000ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	3208      	adds	r2, #8
 8000bae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	7a5b      	ldrb	r3, [r3, #9]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4311      	orrs	r1, r2
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	3208      	adds	r2, #8
 8000bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000bd0:	bf00      	nop
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40013800 	.word	0x40013800
 8000be0:	40013c00 	.word	0x40013c00

08000be4 <GPIO_IRQInterruptConfig>:
}
/*
 * IRQ Configuration & ISR handling
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	460a      	mov	r2, r1
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000bf4:	79bb      	ldrb	r3, [r7, #6]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d133      	bne.n	8000c62 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <=31)
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b1f      	cmp	r3, #31
 8000bfe:	d80a      	bhi.n	8000c16 <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000c00:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <GPIO_IRQInterruptConfig+0xf0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	79fa      	ldrb	r2, [r7, #7]
 8000c06:	2101      	movs	r1, #1
 8000c08:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4a31      	ldr	r2, [pc, #196]	; (8000cd4 <GPIO_IRQInterruptConfig+0xf0>)
 8000c10:	430b      	orrs	r3, r1
 8000c12:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
		}
	}

}
 8000c14:	e059      	b.n	8000cca <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber >31 && IRQNumber < 64)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b1f      	cmp	r3, #31
 8000c1a:	d90f      	bls.n	8000c3c <GPIO_IRQInterruptConfig+0x58>
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c20:	d80c      	bhi.n	8000c3c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER0 |= ( 1 << IRQNumber %32 );
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <GPIO_IRQInterruptConfig+0xf0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	79fa      	ldrb	r2, [r7, #7]
 8000c28:	f002 021f 	and.w	r2, r2, #31
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c32:	4611      	mov	r1, r2
 8000c34:	4a27      	ldr	r2, [pc, #156]	; (8000cd4 <GPIO_IRQInterruptConfig+0xf0>)
 8000c36:	430b      	orrs	r3, r1
 8000c38:	6013      	str	r3, [r2, #0]
 8000c3a:	e046      	b.n	8000cca <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >=64 && IRQNumber < 96)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c40:	d943      	bls.n	8000cca <GPIO_IRQInterruptConfig+0xe6>
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b5f      	cmp	r3, #95	; 0x5f
 8000c46:	d840      	bhi.n	8000cca <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER0 |= ( 1 << IRQNumber % 64 );
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <GPIO_IRQInterruptConfig+0xf0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	79fa      	ldrb	r2, [r7, #7]
 8000c4e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c52:	2101      	movs	r1, #1
 8000c54:	fa01 f202 	lsl.w	r2, r1, r2
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <GPIO_IRQInterruptConfig+0xf0>)
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	e033      	b.n	8000cca <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <=31)
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b1f      	cmp	r3, #31
 8000c66:	d80a      	bhi.n	8000c7e <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <GPIO_IRQInterruptConfig+0xf4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	79fa      	ldrb	r2, [r7, #7]
 8000c6e:	2101      	movs	r1, #1
 8000c70:	fa01 f202 	lsl.w	r2, r1, r2
 8000c74:	4611      	mov	r1, r2
 8000c76:	4a18      	ldr	r2, [pc, #96]	; (8000cd8 <GPIO_IRQInterruptConfig+0xf4>)
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	e025      	b.n	8000cca <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber >31 && IRQNumber < 64)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b1f      	cmp	r3, #31
 8000c82:	d90f      	bls.n	8000ca4 <GPIO_IRQInterruptConfig+0xc0>
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b3f      	cmp	r3, #63	; 0x3f
 8000c88:	d80c      	bhi.n	8000ca4 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << IRQNumber % 32 );
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <GPIO_IRQInterruptConfig+0xf8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	79fa      	ldrb	r2, [r7, #7]
 8000c90:	f002 021f 	and.w	r2, r2, #31
 8000c94:	2101      	movs	r1, #1
 8000c96:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <GPIO_IRQInterruptConfig+0xf8>)
 8000c9e:	430b      	orrs	r3, r1
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	e012      	b.n	8000cca <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >=64 && IRQNumber < 96)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ca8:	d90f      	bls.n	8000cca <GPIO_IRQInterruptConfig+0xe6>
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b5f      	cmp	r3, #95	; 0x5f
 8000cae:	d80c      	bhi.n	8000cca <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << IRQNumber % 64 );
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <GPIO_IRQInterruptConfig+0xfc>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	79fa      	ldrb	r2, [r7, #7]
 8000cb6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cba:	2101      	movs	r1, #1
 8000cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <GPIO_IRQInterruptConfig+0xfc>)
 8000cc4:	430b      	orrs	r3, r1
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	e7ff      	b.n	8000cca <GPIO_IRQInterruptConfig+0xe6>
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000e180 	.word	0xe000e180
 8000cdc:	e000e184 	.word	0xe000e184
 8000ce0:	e000e188 	.word	0xe000e188

08000ce4 <GPIO_IRQPriorityConfig>:
void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
	//1. First find out the ipr register
	uint8_t iprx = IRQNumber /4;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber %4;
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * iprx_section) + (8- NO_PR_BITS_IMPLEMENTED);
 8000cfe:	7bbb      	ldrb	r3, [r7, #14]
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	3304      	adds	r3, #4
 8000d06:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount );
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000d10:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000d14:	6819      	ldr	r1, [r3, #0]
 8000d16:	7b7b      	ldrb	r3, [r7, #13]
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000d24:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]

}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
	...

08000d38 <GPIO_IRQHandling>:


void GPIO_IRQHandling(uint8_t PinNumber) //interrupt happen, do the action in here
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if(EXTI ->PR & (1<< PinNumber))
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <GPIO_IRQHandling+0x3c>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	79fa      	ldrb	r2, [r7, #7]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d009      	beq.n	8000d68 <GPIO_IRQHandling+0x30>
	{
	//clear
		EXTI -> PR |= (1<< PinNumber);
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <GPIO_IRQHandling+0x3c>)
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	79fa      	ldrb	r2, [r7, #7]
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d60:	4611      	mov	r1, r2
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <GPIO_IRQHandling+0x3c>)
 8000d64:	430b      	orrs	r3, r1
 8000d66:	6153      	str	r3, [r2, #20]
	}

}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40013c00 	.word	0x40013c00

08000d78 <SPI_PeriClockControl>:
static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_RegDef_t*pSPIx, uint8_t EnorDi)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d120      	bne.n	8000dcc <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a22      	ldr	r2, [pc, #136]	; (8000e18 <SPI_PeriClockControl+0xa0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d106      	bne.n	8000da0 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000d92:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <SPI_PeriClockControl+0xa4>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <SPI_PeriClockControl+0xa4>)
 8000d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI3_PCLK_DI();
		}
	}

}
 8000d9e:	e035      	b.n	8000e0c <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a1f      	ldr	r2, [pc, #124]	; (8000e20 <SPI_PeriClockControl+0xa8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d106      	bne.n	8000db6 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000da8:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <SPI_PeriClockControl+0xa4>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	4a1b      	ldr	r2, [pc, #108]	; (8000e1c <SPI_PeriClockControl+0xa4>)
 8000dae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000db4:	e02a      	b.n	8000e0c <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a1a      	ldr	r2, [pc, #104]	; (8000e24 <SPI_PeriClockControl+0xac>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d126      	bne.n	8000e0c <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <SPI_PeriClockControl+0xa4>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <SPI_PeriClockControl+0xa4>)
 8000dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dca:	e01f      	b.n	8000e0c <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <SPI_PeriClockControl+0xa0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d106      	bne.n	8000de2 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <SPI_PeriClockControl+0xa4>)
 8000dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd8:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <SPI_PeriClockControl+0xa4>)
 8000dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dde:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000de0:	e014      	b.n	8000e0c <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <SPI_PeriClockControl+0xa8>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d106      	bne.n	8000df8 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <SPI_PeriClockControl+0xa4>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <SPI_PeriClockControl+0xa4>)
 8000df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000df6:	e009      	b.n	8000e0c <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <SPI_PeriClockControl+0xac>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d105      	bne.n	8000e0c <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <SPI_PeriClockControl+0xa4>)
 8000e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e04:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <SPI_PeriClockControl+0xa4>)
 8000e06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e0a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40013000 	.word	0x40013000
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40003800 	.word	0x40003800
 8000e24:	40003c00 	.word	0x40003c00

08000e28 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000e34:	78fb      	ldrb	r3, [r7, #3]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d106      	bne.n	8000e48 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f043 0204 	orr.w	r2, r3, #4
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000e46:	e005      	b.n	8000e54 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f023 0204 	bic.w	r2, r3, #4
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	605a      	str	r2, [r3, #4]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <SPI_Init>:
/************************
 *
 */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff83 	bl	8000d78 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	791b      	ldrb	r3, [r3, #4]
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	795b      	ldrb	r3, [r3, #5]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d104      	bne.n	8000e96 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	e014      	b.n	8000ec0 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	795b      	ldrb	r3, [r3, #5]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d104      	bne.n	8000ea8 <SPI_Init+0x4a>
	{
		//BIDI mode should be set
		tempreg |= ~(1<<SPI_CR1_BIDIMODE);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	e00b      	b.n	8000ec0 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	795b      	ldrb	r3, [r3, #5]
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	d107      	bne.n	8000ec0 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000eb6:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1<<SPI_CR1_RXONLY);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ebe:	60fb      	str	r3, [r7, #12]
	}
	//3. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	799b      	ldrb	r3, [r3, #6]
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
	//4. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	79db      	ldrb	r3, [r3, #7]
 8000ed2:	02db      	lsls	r3, r3, #11
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]
	//5. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7a1b      	ldrb	r3, [r3, #8]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	7a5b      	ldrb	r3, [r3, #9]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7a9b      	ldrb	r3, [r3, #10]
 8000efa:	025b      	lsls	r3, r3, #9
 8000efc:	461a      	mov	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	601a      	str	r2, [r3, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <SPI_GetFlagStatus>:
/*************************
 *
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	4013      	ands	r3, r2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000f2e:	2300      	movs	r3, #0

}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr

08000f3a <SPI_PeripheralControl>:
/**************************
 *
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d106      	bne.n	8000f5a <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 8000f58:	e005      	b.n	8000f66 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <SPI_IRQInterruptConfig>:
 * @return            -
 *
 * @Note              -
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	460a      	mov	r2, r1
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d133      	bne.n	8000fee <SPI_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b1f      	cmp	r3, #31
 8000f8a:	d80a      	bhi.n	8000fa2 <SPI_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000f8c:	4b34      	ldr	r3, [pc, #208]	; (8001060 <SPI_IRQInterruptConfig+0xf0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	79fa      	ldrb	r2, [r7, #7]
 8000f92:	2101      	movs	r1, #1
 8000f94:	fa01 f202 	lsl.w	r2, r1, r2
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4a31      	ldr	r2, [pc, #196]	; (8001060 <SPI_IRQInterruptConfig+0xf0>)
 8000f9c:	430b      	orrs	r3, r1
 8000f9e:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000fa0:	e059      	b.n	8001056 <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b1f      	cmp	r3, #31
 8000fa6:	d90f      	bls.n	8000fc8 <SPI_IRQInterruptConfig+0x58>
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b3f      	cmp	r3, #63	; 0x3f
 8000fac:	d80c      	bhi.n	8000fc8 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000fae:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <SPI_IRQInterruptConfig+0xf4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	79fa      	ldrb	r2, [r7, #7]
 8000fb4:	f002 021f 	and.w	r2, r2, #31
 8000fb8:	2101      	movs	r1, #1
 8000fba:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4a28      	ldr	r2, [pc, #160]	; (8001064 <SPI_IRQInterruptConfig+0xf4>)
 8000fc2:	430b      	orrs	r3, r1
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e046      	b.n	8001056 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b3f      	cmp	r3, #63	; 0x3f
 8000fcc:	d943      	bls.n	8001056 <SPI_IRQInterruptConfig+0xe6>
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b5f      	cmp	r3, #95	; 0x5f
 8000fd2:	d840      	bhi.n	8001056 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <SPI_IRQInterruptConfig+0xf8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	79fa      	ldrb	r2, [r7, #7]
 8000fda:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000fde:	2101      	movs	r1, #1
 8000fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4a20      	ldr	r2, [pc, #128]	; (8001068 <SPI_IRQInterruptConfig+0xf8>)
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	e033      	b.n	8001056 <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b1f      	cmp	r3, #31
 8000ff2:	d80a      	bhi.n	800100a <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <SPI_IRQInterruptConfig+0xfc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8001000:	4611      	mov	r1, r2
 8001002:	4a1a      	ldr	r2, [pc, #104]	; (800106c <SPI_IRQInterruptConfig+0xfc>)
 8001004:	430b      	orrs	r3, r1
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	e025      	b.n	8001056 <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b1f      	cmp	r3, #31
 800100e:	d90f      	bls.n	8001030 <SPI_IRQInterruptConfig+0xc0>
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b3f      	cmp	r3, #63	; 0x3f
 8001014:	d80c      	bhi.n	8001030 <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <SPI_IRQInterruptConfig+0x100>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	79fa      	ldrb	r2, [r7, #7]
 800101c:	f002 021f 	and.w	r2, r2, #31
 8001020:	2101      	movs	r1, #1
 8001022:	fa01 f202 	lsl.w	r2, r1, r2
 8001026:	4611      	mov	r1, r2
 8001028:	4a11      	ldr	r2, [pc, #68]	; (8001070 <SPI_IRQInterruptConfig+0x100>)
 800102a:	430b      	orrs	r3, r1
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e012      	b.n	8001056 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b05      	cmp	r3, #5
 8001034:	d90f      	bls.n	8001056 <SPI_IRQInterruptConfig+0xe6>
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b5f      	cmp	r3, #95	; 0x5f
 800103a:	d80c      	bhi.n	8001056 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <SPI_IRQInterruptConfig+0x104>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	79fa      	ldrb	r2, [r7, #7]
 8001042:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001046:	2101      	movs	r1, #1
 8001048:	fa01 f202 	lsl.w	r2, r1, r2
 800104c:	4611      	mov	r1, r2
 800104e:	4a09      	ldr	r2, [pc, #36]	; (8001074 <SPI_IRQInterruptConfig+0x104>)
 8001050:	430b      	orrs	r3, r1
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	e7ff      	b.n	8001056 <SPI_IRQInterruptConfig+0xe6>
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000e104 	.word	0xe000e104
 8001068:	e000e10c 	.word	0xe000e10c
 800106c:	e000e180 	.word	0xe000e180
 8001070:	e000e184 	.word	0xe000e184
 8001074:	e000e18c 	.word	0xe000e18c

08001078 <SPI_SendDataIT>:

}


uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle,uint8_t *pTxBuffer, uint32_t Len)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	7f1b      	ldrb	r3, [r3, #28]
 8001088:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX)
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d010      	beq.n	80010b2 <SPI_SendDataIT+0x3a>
	{
		//1 . Save the Tx buffer address and Len information in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	615a      	str	r2, [r3, #20]
		//2.  Mark the SPI state as busy in transmission so that
		//    no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2202      	movs	r2, #2
 80010a0:	771a      	strb	r2, [r3, #28]

		//3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_TXEIE );
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010b0:	605a      	str	r2, [r3, #4]

	}


	return state;
 80010b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	371c      	adds	r7, #28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <SPI_ReceiveDataIT>:


uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 80010be:	b480      	push	{r7}
 80010c0:	b087      	sub	sp, #28
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	7f5b      	ldrb	r3, [r3, #29]
 80010ce:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_RX)
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d010      	beq.n	80010f8 <SPI_ReceiveDataIT+0x3a>
	{
		//1 . Save the Rx buffer address and Len information in some global variables
		pSPIHandle->pRxBuffer = pRxBuffer;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Len;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	619a      	str	r2, [r3, #24]
		//2.  Mark the SPI state as busy in reception so that
		//    no other code can take over same SPI peripheral until reception is over
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2201      	movs	r2, #1
 80010e6:	775a      	strb	r2, [r3, #29]

		//3. Enable the RXNEIE control bit to get interrupt whenever RXNEIE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_RXNEIE );
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010f6:	605a      	str	r2, [r3, #4]

	}


	return state;
 80010f8:	7dfb      	ldrb	r3, [r7, #23]

}
 80010fa:	4618      	mov	r0, r3
 80010fc:	371c      	adds	r7, #28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <SPI_IRQHandling>:




void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

	uint8_t temp1 , temp2;
	//first lets check for TXE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_TXE);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_TXEIE);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001126:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d005      	beq.n	800113a <SPI_IRQHandling+0x36>
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <SPI_IRQHandling+0x36>
	{
		//handle TXE
		spi_txe_interrupt_handle(pHandle);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f832 	bl	800119e <spi_txe_interrupt_handle>
	}

	// check for RXNE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_RXNE);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_RXNEIE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001154:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <SPI_IRQHandling+0x64>
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <SPI_IRQHandling+0x64>
	{
		//handle RXNE
		spi_rxne_interrupt_handle(pHandle);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f85b 	bl	800121e <spi_rxne_interrupt_handle>
	}

	// check for ovr flag
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_OVR);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001174:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_ERRIE);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f003 0320 	and.w	r3, r3, #32
 8001182:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <SPI_IRQHandling+0x92>
 800118a:	7bbb      	ldrb	r3, [r7, #14]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <SPI_IRQHandling+0x92>
	{
		//handle ovr error
		spi_ovr_err_interrupt_handle(pHandle);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f886 	bl	80012a2 <spi_ovr_err_interrupt_handle>
	}

}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <spi_txe_interrupt_handle>:

//some helper function implementations

static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	// check the DFF bit in CR1
	if( (pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d015      	beq.n	80011e0 <spi_txe_interrupt_handle+0x42>
	{
		//16 bit DFF
		//1. load the data in to the DR
		pSPIHandle->pSPIx->DR =   *((uint16_t*)pSPIHandle->pTxBuffer);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	881a      	ldrh	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	1e5a      	subs	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	1e5a      	subs	r2, r3, #1
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	e00f      	b.n	8001200 <spi_txe_interrupt_handle+0x62>
	}else
	{
		//8 bit DFF
		pSPIHandle->pSPIx->DR =   *pSPIHandle->pTxBuffer;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	1e5a      	subs	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	60da      	str	r2, [r3, #12]
	}

	if(! pSPIHandle->TxLen)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d106      	bne.n	8001216 <spi_txe_interrupt_handle+0x78>
	{
		//TxLen is zero , so close the spi transmission and inform the application that
		//TX is over.

		//this prevents interrupts from setting up of TXE flag
		SPI_CloseTransmisson(pSPIHandle);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f862 	bl	80012d2 <SPI_CloseTransmisson>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_TX_CMPLT);
 800120e:	2101      	movs	r1, #1
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff f92d 	bl	8000470 <SPI_ApplicationEventCallback>
	}

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <spi_rxne_interrupt_handle>:


static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
	//do rxing as per the dff
	if(pSPIHandle->pSPIx->CR1 & ( 1 << 11))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001230:	2b00      	cmp	r3, #0
 8001232:	d016      	beq.n	8001262 <spi_rxne_interrupt_handle+0x44>
	{
		//16 bit
		*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	b292      	uxth	r2, r2
 8001240:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen -= 2;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	1e9a      	subs	r2, r3, #2
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	611a      	str	r2, [r3, #16]
		pSPIHandle->pRxBuffer++;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	611a      	str	r2, [r3, #16]
 8001260:	e010      	b.n	8001284 <spi_rxne_interrupt_handle+0x66>

	}else
	{
		//8 bit
		*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	611a      	str	r2, [r3, #16]
	}

	if(! pSPIHandle->RxLen)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d106      	bne.n	800129a <spi_rxne_interrupt_handle+0x7c>
	{
		//reception is complete
		SPI_CloseReception(pSPIHandle);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f83a 	bl	8001306 <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_RX_CMPLT);
 8001292:	2102      	movs	r1, #2
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff f8eb 	bl	8000470 <SPI_ApplicationEventCallback>
	}

}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <spi_ovr_err_interrupt_handle>:


static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]

	uint8_t temp;
	//1. clear the ovr flag
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7f1b      	ldrb	r3, [r3, #28]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d007      	beq.n	80012c2 <spi_ovr_err_interrupt_handle+0x20>
	{
		temp = pSPIHandle->pSPIx->DR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	//2. inform the application
	SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_OVR_ERR);
 80012c2:	2103      	movs	r1, #3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff f8d3 	bl	8000470 <SPI_ApplicationEventCallback>

}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <SPI_CloseTransmisson>:

void SPI_CloseTransmisson(SPI_Handle_t *pSPIHandle)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_TXEIE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e8:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	771a      	strb	r2, [r3, #28]

}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_RXNEIE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800131c:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	775a      	strb	r2, [r3, #29]

}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
	...

0800133c <__errno>:
 800133c:	4b01      	ldr	r3, [pc, #4]	; (8001344 <__errno+0x8>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000000 	.word	0x20000000

08001348 <__libc_init_array>:
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	4d0d      	ldr	r5, [pc, #52]	; (8001380 <__libc_init_array+0x38>)
 800134c:	4c0d      	ldr	r4, [pc, #52]	; (8001384 <__libc_init_array+0x3c>)
 800134e:	1b64      	subs	r4, r4, r5
 8001350:	10a4      	asrs	r4, r4, #2
 8001352:	2600      	movs	r6, #0
 8001354:	42a6      	cmp	r6, r4
 8001356:	d109      	bne.n	800136c <__libc_init_array+0x24>
 8001358:	4d0b      	ldr	r5, [pc, #44]	; (8001388 <__libc_init_array+0x40>)
 800135a:	4c0c      	ldr	r4, [pc, #48]	; (800138c <__libc_init_array+0x44>)
 800135c:	f000 ffe8 	bl	8002330 <_init>
 8001360:	1b64      	subs	r4, r4, r5
 8001362:	10a4      	asrs	r4, r4, #2
 8001364:	2600      	movs	r6, #0
 8001366:	42a6      	cmp	r6, r4
 8001368:	d105      	bne.n	8001376 <__libc_init_array+0x2e>
 800136a:	bd70      	pop	{r4, r5, r6, pc}
 800136c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001370:	4798      	blx	r3
 8001372:	3601      	adds	r6, #1
 8001374:	e7ee      	b.n	8001354 <__libc_init_array+0xc>
 8001376:	f855 3b04 	ldr.w	r3, [r5], #4
 800137a:	4798      	blx	r3
 800137c:	3601      	adds	r6, #1
 800137e:	e7f2      	b.n	8001366 <__libc_init_array+0x1e>
 8001380:	08002430 	.word	0x08002430
 8001384:	08002430 	.word	0x08002430
 8001388:	08002430 	.word	0x08002430
 800138c:	08002434 	.word	0x08002434

08001390 <memset>:
 8001390:	4402      	add	r2, r0
 8001392:	4603      	mov	r3, r0
 8001394:	4293      	cmp	r3, r2
 8001396:	d100      	bne.n	800139a <memset+0xa>
 8001398:	4770      	bx	lr
 800139a:	f803 1b01 	strb.w	r1, [r3], #1
 800139e:	e7f9      	b.n	8001394 <memset+0x4>

080013a0 <iprintf>:
 80013a0:	b40f      	push	{r0, r1, r2, r3}
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <iprintf+0x2c>)
 80013a4:	b513      	push	{r0, r1, r4, lr}
 80013a6:	681c      	ldr	r4, [r3, #0]
 80013a8:	b124      	cbz	r4, 80013b4 <iprintf+0x14>
 80013aa:	69a3      	ldr	r3, [r4, #24]
 80013ac:	b913      	cbnz	r3, 80013b4 <iprintf+0x14>
 80013ae:	4620      	mov	r0, r4
 80013b0:	f000 fa5e 	bl	8001870 <__sinit>
 80013b4:	ab05      	add	r3, sp, #20
 80013b6:	9a04      	ldr	r2, [sp, #16]
 80013b8:	68a1      	ldr	r1, [r4, #8]
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	4620      	mov	r0, r4
 80013be:	f000 fc2b 	bl	8001c18 <_vfiprintf_r>
 80013c2:	b002      	add	sp, #8
 80013c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013c8:	b004      	add	sp, #16
 80013ca:	4770      	bx	lr
 80013cc:	20000000 	.word	0x20000000

080013d0 <_puts_r>:
 80013d0:	b570      	push	{r4, r5, r6, lr}
 80013d2:	460e      	mov	r6, r1
 80013d4:	4605      	mov	r5, r0
 80013d6:	b118      	cbz	r0, 80013e0 <_puts_r+0x10>
 80013d8:	6983      	ldr	r3, [r0, #24]
 80013da:	b90b      	cbnz	r3, 80013e0 <_puts_r+0x10>
 80013dc:	f000 fa48 	bl	8001870 <__sinit>
 80013e0:	69ab      	ldr	r3, [r5, #24]
 80013e2:	68ac      	ldr	r4, [r5, #8]
 80013e4:	b913      	cbnz	r3, 80013ec <_puts_r+0x1c>
 80013e6:	4628      	mov	r0, r5
 80013e8:	f000 fa42 	bl	8001870 <__sinit>
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <_puts_r+0xd0>)
 80013ee:	429c      	cmp	r4, r3
 80013f0:	d120      	bne.n	8001434 <_puts_r+0x64>
 80013f2:	686c      	ldr	r4, [r5, #4]
 80013f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013f6:	07db      	lsls	r3, r3, #31
 80013f8:	d405      	bmi.n	8001406 <_puts_r+0x36>
 80013fa:	89a3      	ldrh	r3, [r4, #12]
 80013fc:	0598      	lsls	r0, r3, #22
 80013fe:	d402      	bmi.n	8001406 <_puts_r+0x36>
 8001400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001402:	f000 fad3 	bl	80019ac <__retarget_lock_acquire_recursive>
 8001406:	89a3      	ldrh	r3, [r4, #12]
 8001408:	0719      	lsls	r1, r3, #28
 800140a:	d51d      	bpl.n	8001448 <_puts_r+0x78>
 800140c:	6923      	ldr	r3, [r4, #16]
 800140e:	b1db      	cbz	r3, 8001448 <_puts_r+0x78>
 8001410:	3e01      	subs	r6, #1
 8001412:	68a3      	ldr	r3, [r4, #8]
 8001414:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001418:	3b01      	subs	r3, #1
 800141a:	60a3      	str	r3, [r4, #8]
 800141c:	bb39      	cbnz	r1, 800146e <_puts_r+0x9e>
 800141e:	2b00      	cmp	r3, #0
 8001420:	da38      	bge.n	8001494 <_puts_r+0xc4>
 8001422:	4622      	mov	r2, r4
 8001424:	210a      	movs	r1, #10
 8001426:	4628      	mov	r0, r5
 8001428:	f000 f848 	bl	80014bc <__swbuf_r>
 800142c:	3001      	adds	r0, #1
 800142e:	d011      	beq.n	8001454 <_puts_r+0x84>
 8001430:	250a      	movs	r5, #10
 8001432:	e011      	b.n	8001458 <_puts_r+0x88>
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <_puts_r+0xd4>)
 8001436:	429c      	cmp	r4, r3
 8001438:	d101      	bne.n	800143e <_puts_r+0x6e>
 800143a:	68ac      	ldr	r4, [r5, #8]
 800143c:	e7da      	b.n	80013f4 <_puts_r+0x24>
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <_puts_r+0xd8>)
 8001440:	429c      	cmp	r4, r3
 8001442:	bf08      	it	eq
 8001444:	68ec      	ldreq	r4, [r5, #12]
 8001446:	e7d5      	b.n	80013f4 <_puts_r+0x24>
 8001448:	4621      	mov	r1, r4
 800144a:	4628      	mov	r0, r5
 800144c:	f000 f888 	bl	8001560 <__swsetup_r>
 8001450:	2800      	cmp	r0, #0
 8001452:	d0dd      	beq.n	8001410 <_puts_r+0x40>
 8001454:	f04f 35ff 	mov.w	r5, #4294967295
 8001458:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800145a:	07da      	lsls	r2, r3, #31
 800145c:	d405      	bmi.n	800146a <_puts_r+0x9a>
 800145e:	89a3      	ldrh	r3, [r4, #12]
 8001460:	059b      	lsls	r3, r3, #22
 8001462:	d402      	bmi.n	800146a <_puts_r+0x9a>
 8001464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001466:	f000 faa2 	bl	80019ae <__retarget_lock_release_recursive>
 800146a:	4628      	mov	r0, r5
 800146c:	bd70      	pop	{r4, r5, r6, pc}
 800146e:	2b00      	cmp	r3, #0
 8001470:	da04      	bge.n	800147c <_puts_r+0xac>
 8001472:	69a2      	ldr	r2, [r4, #24]
 8001474:	429a      	cmp	r2, r3
 8001476:	dc06      	bgt.n	8001486 <_puts_r+0xb6>
 8001478:	290a      	cmp	r1, #10
 800147a:	d004      	beq.n	8001486 <_puts_r+0xb6>
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	6022      	str	r2, [r4, #0]
 8001482:	7019      	strb	r1, [r3, #0]
 8001484:	e7c5      	b.n	8001412 <_puts_r+0x42>
 8001486:	4622      	mov	r2, r4
 8001488:	4628      	mov	r0, r5
 800148a:	f000 f817 	bl	80014bc <__swbuf_r>
 800148e:	3001      	adds	r0, #1
 8001490:	d1bf      	bne.n	8001412 <_puts_r+0x42>
 8001492:	e7df      	b.n	8001454 <_puts_r+0x84>
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	250a      	movs	r5, #10
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	6022      	str	r2, [r4, #0]
 800149c:	701d      	strb	r5, [r3, #0]
 800149e:	e7db      	b.n	8001458 <_puts_r+0x88>
 80014a0:	080023bc 	.word	0x080023bc
 80014a4:	080023dc 	.word	0x080023dc
 80014a8:	0800239c 	.word	0x0800239c

080014ac <puts>:
 80014ac:	4b02      	ldr	r3, [pc, #8]	; (80014b8 <puts+0xc>)
 80014ae:	4601      	mov	r1, r0
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	f7ff bf8d 	b.w	80013d0 <_puts_r>
 80014b6:	bf00      	nop
 80014b8:	20000000 	.word	0x20000000

080014bc <__swbuf_r>:
 80014bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014be:	460e      	mov	r6, r1
 80014c0:	4614      	mov	r4, r2
 80014c2:	4605      	mov	r5, r0
 80014c4:	b118      	cbz	r0, 80014ce <__swbuf_r+0x12>
 80014c6:	6983      	ldr	r3, [r0, #24]
 80014c8:	b90b      	cbnz	r3, 80014ce <__swbuf_r+0x12>
 80014ca:	f000 f9d1 	bl	8001870 <__sinit>
 80014ce:	4b21      	ldr	r3, [pc, #132]	; (8001554 <__swbuf_r+0x98>)
 80014d0:	429c      	cmp	r4, r3
 80014d2:	d12b      	bne.n	800152c <__swbuf_r+0x70>
 80014d4:	686c      	ldr	r4, [r5, #4]
 80014d6:	69a3      	ldr	r3, [r4, #24]
 80014d8:	60a3      	str	r3, [r4, #8]
 80014da:	89a3      	ldrh	r3, [r4, #12]
 80014dc:	071a      	lsls	r2, r3, #28
 80014de:	d52f      	bpl.n	8001540 <__swbuf_r+0x84>
 80014e0:	6923      	ldr	r3, [r4, #16]
 80014e2:	b36b      	cbz	r3, 8001540 <__swbuf_r+0x84>
 80014e4:	6923      	ldr	r3, [r4, #16]
 80014e6:	6820      	ldr	r0, [r4, #0]
 80014e8:	1ac0      	subs	r0, r0, r3
 80014ea:	6963      	ldr	r3, [r4, #20]
 80014ec:	b2f6      	uxtb	r6, r6
 80014ee:	4283      	cmp	r3, r0
 80014f0:	4637      	mov	r7, r6
 80014f2:	dc04      	bgt.n	80014fe <__swbuf_r+0x42>
 80014f4:	4621      	mov	r1, r4
 80014f6:	4628      	mov	r0, r5
 80014f8:	f000 f926 	bl	8001748 <_fflush_r>
 80014fc:	bb30      	cbnz	r0, 800154c <__swbuf_r+0x90>
 80014fe:	68a3      	ldr	r3, [r4, #8]
 8001500:	3b01      	subs	r3, #1
 8001502:	60a3      	str	r3, [r4, #8]
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	6022      	str	r2, [r4, #0]
 800150a:	701e      	strb	r6, [r3, #0]
 800150c:	6963      	ldr	r3, [r4, #20]
 800150e:	3001      	adds	r0, #1
 8001510:	4283      	cmp	r3, r0
 8001512:	d004      	beq.n	800151e <__swbuf_r+0x62>
 8001514:	89a3      	ldrh	r3, [r4, #12]
 8001516:	07db      	lsls	r3, r3, #31
 8001518:	d506      	bpl.n	8001528 <__swbuf_r+0x6c>
 800151a:	2e0a      	cmp	r6, #10
 800151c:	d104      	bne.n	8001528 <__swbuf_r+0x6c>
 800151e:	4621      	mov	r1, r4
 8001520:	4628      	mov	r0, r5
 8001522:	f000 f911 	bl	8001748 <_fflush_r>
 8001526:	b988      	cbnz	r0, 800154c <__swbuf_r+0x90>
 8001528:	4638      	mov	r0, r7
 800152a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <__swbuf_r+0x9c>)
 800152e:	429c      	cmp	r4, r3
 8001530:	d101      	bne.n	8001536 <__swbuf_r+0x7a>
 8001532:	68ac      	ldr	r4, [r5, #8]
 8001534:	e7cf      	b.n	80014d6 <__swbuf_r+0x1a>
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <__swbuf_r+0xa0>)
 8001538:	429c      	cmp	r4, r3
 800153a:	bf08      	it	eq
 800153c:	68ec      	ldreq	r4, [r5, #12]
 800153e:	e7ca      	b.n	80014d6 <__swbuf_r+0x1a>
 8001540:	4621      	mov	r1, r4
 8001542:	4628      	mov	r0, r5
 8001544:	f000 f80c 	bl	8001560 <__swsetup_r>
 8001548:	2800      	cmp	r0, #0
 800154a:	d0cb      	beq.n	80014e4 <__swbuf_r+0x28>
 800154c:	f04f 37ff 	mov.w	r7, #4294967295
 8001550:	e7ea      	b.n	8001528 <__swbuf_r+0x6c>
 8001552:	bf00      	nop
 8001554:	080023bc 	.word	0x080023bc
 8001558:	080023dc 	.word	0x080023dc
 800155c:	0800239c 	.word	0x0800239c

08001560 <__swsetup_r>:
 8001560:	4b32      	ldr	r3, [pc, #200]	; (800162c <__swsetup_r+0xcc>)
 8001562:	b570      	push	{r4, r5, r6, lr}
 8001564:	681d      	ldr	r5, [r3, #0]
 8001566:	4606      	mov	r6, r0
 8001568:	460c      	mov	r4, r1
 800156a:	b125      	cbz	r5, 8001576 <__swsetup_r+0x16>
 800156c:	69ab      	ldr	r3, [r5, #24]
 800156e:	b913      	cbnz	r3, 8001576 <__swsetup_r+0x16>
 8001570:	4628      	mov	r0, r5
 8001572:	f000 f97d 	bl	8001870 <__sinit>
 8001576:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <__swsetup_r+0xd0>)
 8001578:	429c      	cmp	r4, r3
 800157a:	d10f      	bne.n	800159c <__swsetup_r+0x3c>
 800157c:	686c      	ldr	r4, [r5, #4]
 800157e:	89a3      	ldrh	r3, [r4, #12]
 8001580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001584:	0719      	lsls	r1, r3, #28
 8001586:	d42c      	bmi.n	80015e2 <__swsetup_r+0x82>
 8001588:	06dd      	lsls	r5, r3, #27
 800158a:	d411      	bmi.n	80015b0 <__swsetup_r+0x50>
 800158c:	2309      	movs	r3, #9
 800158e:	6033      	str	r3, [r6, #0]
 8001590:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001594:	81a3      	strh	r3, [r4, #12]
 8001596:	f04f 30ff 	mov.w	r0, #4294967295
 800159a:	e03e      	b.n	800161a <__swsetup_r+0xba>
 800159c:	4b25      	ldr	r3, [pc, #148]	; (8001634 <__swsetup_r+0xd4>)
 800159e:	429c      	cmp	r4, r3
 80015a0:	d101      	bne.n	80015a6 <__swsetup_r+0x46>
 80015a2:	68ac      	ldr	r4, [r5, #8]
 80015a4:	e7eb      	b.n	800157e <__swsetup_r+0x1e>
 80015a6:	4b24      	ldr	r3, [pc, #144]	; (8001638 <__swsetup_r+0xd8>)
 80015a8:	429c      	cmp	r4, r3
 80015aa:	bf08      	it	eq
 80015ac:	68ec      	ldreq	r4, [r5, #12]
 80015ae:	e7e6      	b.n	800157e <__swsetup_r+0x1e>
 80015b0:	0758      	lsls	r0, r3, #29
 80015b2:	d512      	bpl.n	80015da <__swsetup_r+0x7a>
 80015b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015b6:	b141      	cbz	r1, 80015ca <__swsetup_r+0x6a>
 80015b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015bc:	4299      	cmp	r1, r3
 80015be:	d002      	beq.n	80015c6 <__swsetup_r+0x66>
 80015c0:	4630      	mov	r0, r6
 80015c2:	f000 fa59 	bl	8001a78 <_free_r>
 80015c6:	2300      	movs	r3, #0
 80015c8:	6363      	str	r3, [r4, #52]	; 0x34
 80015ca:	89a3      	ldrh	r3, [r4, #12]
 80015cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80015d0:	81a3      	strh	r3, [r4, #12]
 80015d2:	2300      	movs	r3, #0
 80015d4:	6063      	str	r3, [r4, #4]
 80015d6:	6923      	ldr	r3, [r4, #16]
 80015d8:	6023      	str	r3, [r4, #0]
 80015da:	89a3      	ldrh	r3, [r4, #12]
 80015dc:	f043 0308 	orr.w	r3, r3, #8
 80015e0:	81a3      	strh	r3, [r4, #12]
 80015e2:	6923      	ldr	r3, [r4, #16]
 80015e4:	b94b      	cbnz	r3, 80015fa <__swsetup_r+0x9a>
 80015e6:	89a3      	ldrh	r3, [r4, #12]
 80015e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80015ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f0:	d003      	beq.n	80015fa <__swsetup_r+0x9a>
 80015f2:	4621      	mov	r1, r4
 80015f4:	4630      	mov	r0, r6
 80015f6:	f000 f9ff 	bl	80019f8 <__smakebuf_r>
 80015fa:	89a0      	ldrh	r0, [r4, #12]
 80015fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001600:	f010 0301 	ands.w	r3, r0, #1
 8001604:	d00a      	beq.n	800161c <__swsetup_r+0xbc>
 8001606:	2300      	movs	r3, #0
 8001608:	60a3      	str	r3, [r4, #8]
 800160a:	6963      	ldr	r3, [r4, #20]
 800160c:	425b      	negs	r3, r3
 800160e:	61a3      	str	r3, [r4, #24]
 8001610:	6923      	ldr	r3, [r4, #16]
 8001612:	b943      	cbnz	r3, 8001626 <__swsetup_r+0xc6>
 8001614:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001618:	d1ba      	bne.n	8001590 <__swsetup_r+0x30>
 800161a:	bd70      	pop	{r4, r5, r6, pc}
 800161c:	0781      	lsls	r1, r0, #30
 800161e:	bf58      	it	pl
 8001620:	6963      	ldrpl	r3, [r4, #20]
 8001622:	60a3      	str	r3, [r4, #8]
 8001624:	e7f4      	b.n	8001610 <__swsetup_r+0xb0>
 8001626:	2000      	movs	r0, #0
 8001628:	e7f7      	b.n	800161a <__swsetup_r+0xba>
 800162a:	bf00      	nop
 800162c:	20000000 	.word	0x20000000
 8001630:	080023bc 	.word	0x080023bc
 8001634:	080023dc 	.word	0x080023dc
 8001638:	0800239c 	.word	0x0800239c

0800163c <__sflush_r>:
 800163c:	898a      	ldrh	r2, [r1, #12]
 800163e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001642:	4605      	mov	r5, r0
 8001644:	0710      	lsls	r0, r2, #28
 8001646:	460c      	mov	r4, r1
 8001648:	d458      	bmi.n	80016fc <__sflush_r+0xc0>
 800164a:	684b      	ldr	r3, [r1, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	dc05      	bgt.n	800165c <__sflush_r+0x20>
 8001650:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001652:	2b00      	cmp	r3, #0
 8001654:	dc02      	bgt.n	800165c <__sflush_r+0x20>
 8001656:	2000      	movs	r0, #0
 8001658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800165c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800165e:	2e00      	cmp	r6, #0
 8001660:	d0f9      	beq.n	8001656 <__sflush_r+0x1a>
 8001662:	2300      	movs	r3, #0
 8001664:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001668:	682f      	ldr	r7, [r5, #0]
 800166a:	602b      	str	r3, [r5, #0]
 800166c:	d032      	beq.n	80016d4 <__sflush_r+0x98>
 800166e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001670:	89a3      	ldrh	r3, [r4, #12]
 8001672:	075a      	lsls	r2, r3, #29
 8001674:	d505      	bpl.n	8001682 <__sflush_r+0x46>
 8001676:	6863      	ldr	r3, [r4, #4]
 8001678:	1ac0      	subs	r0, r0, r3
 800167a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800167c:	b10b      	cbz	r3, 8001682 <__sflush_r+0x46>
 800167e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001680:	1ac0      	subs	r0, r0, r3
 8001682:	2300      	movs	r3, #0
 8001684:	4602      	mov	r2, r0
 8001686:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001688:	6a21      	ldr	r1, [r4, #32]
 800168a:	4628      	mov	r0, r5
 800168c:	47b0      	blx	r6
 800168e:	1c43      	adds	r3, r0, #1
 8001690:	89a3      	ldrh	r3, [r4, #12]
 8001692:	d106      	bne.n	80016a2 <__sflush_r+0x66>
 8001694:	6829      	ldr	r1, [r5, #0]
 8001696:	291d      	cmp	r1, #29
 8001698:	d82c      	bhi.n	80016f4 <__sflush_r+0xb8>
 800169a:	4a2a      	ldr	r2, [pc, #168]	; (8001744 <__sflush_r+0x108>)
 800169c:	40ca      	lsrs	r2, r1
 800169e:	07d6      	lsls	r6, r2, #31
 80016a0:	d528      	bpl.n	80016f4 <__sflush_r+0xb8>
 80016a2:	2200      	movs	r2, #0
 80016a4:	6062      	str	r2, [r4, #4]
 80016a6:	04d9      	lsls	r1, r3, #19
 80016a8:	6922      	ldr	r2, [r4, #16]
 80016aa:	6022      	str	r2, [r4, #0]
 80016ac:	d504      	bpl.n	80016b8 <__sflush_r+0x7c>
 80016ae:	1c42      	adds	r2, r0, #1
 80016b0:	d101      	bne.n	80016b6 <__sflush_r+0x7a>
 80016b2:	682b      	ldr	r3, [r5, #0]
 80016b4:	b903      	cbnz	r3, 80016b8 <__sflush_r+0x7c>
 80016b6:	6560      	str	r0, [r4, #84]	; 0x54
 80016b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016ba:	602f      	str	r7, [r5, #0]
 80016bc:	2900      	cmp	r1, #0
 80016be:	d0ca      	beq.n	8001656 <__sflush_r+0x1a>
 80016c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016c4:	4299      	cmp	r1, r3
 80016c6:	d002      	beq.n	80016ce <__sflush_r+0x92>
 80016c8:	4628      	mov	r0, r5
 80016ca:	f000 f9d5 	bl	8001a78 <_free_r>
 80016ce:	2000      	movs	r0, #0
 80016d0:	6360      	str	r0, [r4, #52]	; 0x34
 80016d2:	e7c1      	b.n	8001658 <__sflush_r+0x1c>
 80016d4:	6a21      	ldr	r1, [r4, #32]
 80016d6:	2301      	movs	r3, #1
 80016d8:	4628      	mov	r0, r5
 80016da:	47b0      	blx	r6
 80016dc:	1c41      	adds	r1, r0, #1
 80016de:	d1c7      	bne.n	8001670 <__sflush_r+0x34>
 80016e0:	682b      	ldr	r3, [r5, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0c4      	beq.n	8001670 <__sflush_r+0x34>
 80016e6:	2b1d      	cmp	r3, #29
 80016e8:	d001      	beq.n	80016ee <__sflush_r+0xb2>
 80016ea:	2b16      	cmp	r3, #22
 80016ec:	d101      	bne.n	80016f2 <__sflush_r+0xb6>
 80016ee:	602f      	str	r7, [r5, #0]
 80016f0:	e7b1      	b.n	8001656 <__sflush_r+0x1a>
 80016f2:	89a3      	ldrh	r3, [r4, #12]
 80016f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f8:	81a3      	strh	r3, [r4, #12]
 80016fa:	e7ad      	b.n	8001658 <__sflush_r+0x1c>
 80016fc:	690f      	ldr	r7, [r1, #16]
 80016fe:	2f00      	cmp	r7, #0
 8001700:	d0a9      	beq.n	8001656 <__sflush_r+0x1a>
 8001702:	0793      	lsls	r3, r2, #30
 8001704:	680e      	ldr	r6, [r1, #0]
 8001706:	bf08      	it	eq
 8001708:	694b      	ldreq	r3, [r1, #20]
 800170a:	600f      	str	r7, [r1, #0]
 800170c:	bf18      	it	ne
 800170e:	2300      	movne	r3, #0
 8001710:	eba6 0807 	sub.w	r8, r6, r7
 8001714:	608b      	str	r3, [r1, #8]
 8001716:	f1b8 0f00 	cmp.w	r8, #0
 800171a:	dd9c      	ble.n	8001656 <__sflush_r+0x1a>
 800171c:	6a21      	ldr	r1, [r4, #32]
 800171e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001720:	4643      	mov	r3, r8
 8001722:	463a      	mov	r2, r7
 8001724:	4628      	mov	r0, r5
 8001726:	47b0      	blx	r6
 8001728:	2800      	cmp	r0, #0
 800172a:	dc06      	bgt.n	800173a <__sflush_r+0xfe>
 800172c:	89a3      	ldrh	r3, [r4, #12]
 800172e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001732:	81a3      	strh	r3, [r4, #12]
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	e78e      	b.n	8001658 <__sflush_r+0x1c>
 800173a:	4407      	add	r7, r0
 800173c:	eba8 0800 	sub.w	r8, r8, r0
 8001740:	e7e9      	b.n	8001716 <__sflush_r+0xda>
 8001742:	bf00      	nop
 8001744:	20400001 	.word	0x20400001

08001748 <_fflush_r>:
 8001748:	b538      	push	{r3, r4, r5, lr}
 800174a:	690b      	ldr	r3, [r1, #16]
 800174c:	4605      	mov	r5, r0
 800174e:	460c      	mov	r4, r1
 8001750:	b913      	cbnz	r3, 8001758 <_fflush_r+0x10>
 8001752:	2500      	movs	r5, #0
 8001754:	4628      	mov	r0, r5
 8001756:	bd38      	pop	{r3, r4, r5, pc}
 8001758:	b118      	cbz	r0, 8001762 <_fflush_r+0x1a>
 800175a:	6983      	ldr	r3, [r0, #24]
 800175c:	b90b      	cbnz	r3, 8001762 <_fflush_r+0x1a>
 800175e:	f000 f887 	bl	8001870 <__sinit>
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <_fflush_r+0x6c>)
 8001764:	429c      	cmp	r4, r3
 8001766:	d11b      	bne.n	80017a0 <_fflush_r+0x58>
 8001768:	686c      	ldr	r4, [r5, #4]
 800176a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0ef      	beq.n	8001752 <_fflush_r+0xa>
 8001772:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001774:	07d0      	lsls	r0, r2, #31
 8001776:	d404      	bmi.n	8001782 <_fflush_r+0x3a>
 8001778:	0599      	lsls	r1, r3, #22
 800177a:	d402      	bmi.n	8001782 <_fflush_r+0x3a>
 800177c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800177e:	f000 f915 	bl	80019ac <__retarget_lock_acquire_recursive>
 8001782:	4628      	mov	r0, r5
 8001784:	4621      	mov	r1, r4
 8001786:	f7ff ff59 	bl	800163c <__sflush_r>
 800178a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800178c:	07da      	lsls	r2, r3, #31
 800178e:	4605      	mov	r5, r0
 8001790:	d4e0      	bmi.n	8001754 <_fflush_r+0xc>
 8001792:	89a3      	ldrh	r3, [r4, #12]
 8001794:	059b      	lsls	r3, r3, #22
 8001796:	d4dd      	bmi.n	8001754 <_fflush_r+0xc>
 8001798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800179a:	f000 f908 	bl	80019ae <__retarget_lock_release_recursive>
 800179e:	e7d9      	b.n	8001754 <_fflush_r+0xc>
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <_fflush_r+0x70>)
 80017a2:	429c      	cmp	r4, r3
 80017a4:	d101      	bne.n	80017aa <_fflush_r+0x62>
 80017a6:	68ac      	ldr	r4, [r5, #8]
 80017a8:	e7df      	b.n	800176a <_fflush_r+0x22>
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <_fflush_r+0x74>)
 80017ac:	429c      	cmp	r4, r3
 80017ae:	bf08      	it	eq
 80017b0:	68ec      	ldreq	r4, [r5, #12]
 80017b2:	e7da      	b.n	800176a <_fflush_r+0x22>
 80017b4:	080023bc 	.word	0x080023bc
 80017b8:	080023dc 	.word	0x080023dc
 80017bc:	0800239c 	.word	0x0800239c

080017c0 <std>:
 80017c0:	2300      	movs	r3, #0
 80017c2:	b510      	push	{r4, lr}
 80017c4:	4604      	mov	r4, r0
 80017c6:	e9c0 3300 	strd	r3, r3, [r0]
 80017ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80017ce:	6083      	str	r3, [r0, #8]
 80017d0:	8181      	strh	r1, [r0, #12]
 80017d2:	6643      	str	r3, [r0, #100]	; 0x64
 80017d4:	81c2      	strh	r2, [r0, #14]
 80017d6:	6183      	str	r3, [r0, #24]
 80017d8:	4619      	mov	r1, r3
 80017da:	2208      	movs	r2, #8
 80017dc:	305c      	adds	r0, #92	; 0x5c
 80017de:	f7ff fdd7 	bl	8001390 <memset>
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <std+0x38>)
 80017e4:	6263      	str	r3, [r4, #36]	; 0x24
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <std+0x3c>)
 80017e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <std+0x40>)
 80017ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <std+0x44>)
 80017f0:	6224      	str	r4, [r4, #32]
 80017f2:	6323      	str	r3, [r4, #48]	; 0x30
 80017f4:	bd10      	pop	{r4, pc}
 80017f6:	bf00      	nop
 80017f8:	080021c1 	.word	0x080021c1
 80017fc:	080021e3 	.word	0x080021e3
 8001800:	0800221b 	.word	0x0800221b
 8001804:	0800223f 	.word	0x0800223f

08001808 <_cleanup_r>:
 8001808:	4901      	ldr	r1, [pc, #4]	; (8001810 <_cleanup_r+0x8>)
 800180a:	f000 b8af 	b.w	800196c <_fwalk_reent>
 800180e:	bf00      	nop
 8001810:	08001749 	.word	0x08001749

08001814 <__sfmoreglue>:
 8001814:	b570      	push	{r4, r5, r6, lr}
 8001816:	1e4a      	subs	r2, r1, #1
 8001818:	2568      	movs	r5, #104	; 0x68
 800181a:	4355      	muls	r5, r2
 800181c:	460e      	mov	r6, r1
 800181e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001822:	f000 f977 	bl	8001b14 <_malloc_r>
 8001826:	4604      	mov	r4, r0
 8001828:	b140      	cbz	r0, 800183c <__sfmoreglue+0x28>
 800182a:	2100      	movs	r1, #0
 800182c:	e9c0 1600 	strd	r1, r6, [r0]
 8001830:	300c      	adds	r0, #12
 8001832:	60a0      	str	r0, [r4, #8]
 8001834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001838:	f7ff fdaa 	bl	8001390 <memset>
 800183c:	4620      	mov	r0, r4
 800183e:	bd70      	pop	{r4, r5, r6, pc}

08001840 <__sfp_lock_acquire>:
 8001840:	4801      	ldr	r0, [pc, #4]	; (8001848 <__sfp_lock_acquire+0x8>)
 8001842:	f000 b8b3 	b.w	80019ac <__retarget_lock_acquire_recursive>
 8001846:	bf00      	nop
 8001848:	200002b4 	.word	0x200002b4

0800184c <__sfp_lock_release>:
 800184c:	4801      	ldr	r0, [pc, #4]	; (8001854 <__sfp_lock_release+0x8>)
 800184e:	f000 b8ae 	b.w	80019ae <__retarget_lock_release_recursive>
 8001852:	bf00      	nop
 8001854:	200002b4 	.word	0x200002b4

08001858 <__sinit_lock_acquire>:
 8001858:	4801      	ldr	r0, [pc, #4]	; (8001860 <__sinit_lock_acquire+0x8>)
 800185a:	f000 b8a7 	b.w	80019ac <__retarget_lock_acquire_recursive>
 800185e:	bf00      	nop
 8001860:	200002af 	.word	0x200002af

08001864 <__sinit_lock_release>:
 8001864:	4801      	ldr	r0, [pc, #4]	; (800186c <__sinit_lock_release+0x8>)
 8001866:	f000 b8a2 	b.w	80019ae <__retarget_lock_release_recursive>
 800186a:	bf00      	nop
 800186c:	200002af 	.word	0x200002af

08001870 <__sinit>:
 8001870:	b510      	push	{r4, lr}
 8001872:	4604      	mov	r4, r0
 8001874:	f7ff fff0 	bl	8001858 <__sinit_lock_acquire>
 8001878:	69a3      	ldr	r3, [r4, #24]
 800187a:	b11b      	cbz	r3, 8001884 <__sinit+0x14>
 800187c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001880:	f7ff bff0 	b.w	8001864 <__sinit_lock_release>
 8001884:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001888:	6523      	str	r3, [r4, #80]	; 0x50
 800188a:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <__sinit+0x68>)
 800188c:	4a13      	ldr	r2, [pc, #76]	; (80018dc <__sinit+0x6c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	62a2      	str	r2, [r4, #40]	; 0x28
 8001892:	42a3      	cmp	r3, r4
 8001894:	bf04      	itt	eq
 8001896:	2301      	moveq	r3, #1
 8001898:	61a3      	streq	r3, [r4, #24]
 800189a:	4620      	mov	r0, r4
 800189c:	f000 f820 	bl	80018e0 <__sfp>
 80018a0:	6060      	str	r0, [r4, #4]
 80018a2:	4620      	mov	r0, r4
 80018a4:	f000 f81c 	bl	80018e0 <__sfp>
 80018a8:	60a0      	str	r0, [r4, #8]
 80018aa:	4620      	mov	r0, r4
 80018ac:	f000 f818 	bl	80018e0 <__sfp>
 80018b0:	2200      	movs	r2, #0
 80018b2:	60e0      	str	r0, [r4, #12]
 80018b4:	2104      	movs	r1, #4
 80018b6:	6860      	ldr	r0, [r4, #4]
 80018b8:	f7ff ff82 	bl	80017c0 <std>
 80018bc:	68a0      	ldr	r0, [r4, #8]
 80018be:	2201      	movs	r2, #1
 80018c0:	2109      	movs	r1, #9
 80018c2:	f7ff ff7d 	bl	80017c0 <std>
 80018c6:	68e0      	ldr	r0, [r4, #12]
 80018c8:	2202      	movs	r2, #2
 80018ca:	2112      	movs	r1, #18
 80018cc:	f7ff ff78 	bl	80017c0 <std>
 80018d0:	2301      	movs	r3, #1
 80018d2:	61a3      	str	r3, [r4, #24]
 80018d4:	e7d2      	b.n	800187c <__sinit+0xc>
 80018d6:	bf00      	nop
 80018d8:	08002398 	.word	0x08002398
 80018dc:	08001809 	.word	0x08001809

080018e0 <__sfp>:
 80018e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e2:	4607      	mov	r7, r0
 80018e4:	f7ff ffac 	bl	8001840 <__sfp_lock_acquire>
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <__sfp+0x84>)
 80018ea:	681e      	ldr	r6, [r3, #0]
 80018ec:	69b3      	ldr	r3, [r6, #24]
 80018ee:	b913      	cbnz	r3, 80018f6 <__sfp+0x16>
 80018f0:	4630      	mov	r0, r6
 80018f2:	f7ff ffbd 	bl	8001870 <__sinit>
 80018f6:	3648      	adds	r6, #72	; 0x48
 80018f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	d503      	bpl.n	8001908 <__sfp+0x28>
 8001900:	6833      	ldr	r3, [r6, #0]
 8001902:	b30b      	cbz	r3, 8001948 <__sfp+0x68>
 8001904:	6836      	ldr	r6, [r6, #0]
 8001906:	e7f7      	b.n	80018f8 <__sfp+0x18>
 8001908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800190c:	b9d5      	cbnz	r5, 8001944 <__sfp+0x64>
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <__sfp+0x88>)
 8001910:	60e3      	str	r3, [r4, #12]
 8001912:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001916:	6665      	str	r5, [r4, #100]	; 0x64
 8001918:	f000 f847 	bl	80019aa <__retarget_lock_init_recursive>
 800191c:	f7ff ff96 	bl	800184c <__sfp_lock_release>
 8001920:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001924:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001928:	6025      	str	r5, [r4, #0]
 800192a:	61a5      	str	r5, [r4, #24]
 800192c:	2208      	movs	r2, #8
 800192e:	4629      	mov	r1, r5
 8001930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001934:	f7ff fd2c 	bl	8001390 <memset>
 8001938:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800193c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001940:	4620      	mov	r0, r4
 8001942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001944:	3468      	adds	r4, #104	; 0x68
 8001946:	e7d9      	b.n	80018fc <__sfp+0x1c>
 8001948:	2104      	movs	r1, #4
 800194a:	4638      	mov	r0, r7
 800194c:	f7ff ff62 	bl	8001814 <__sfmoreglue>
 8001950:	4604      	mov	r4, r0
 8001952:	6030      	str	r0, [r6, #0]
 8001954:	2800      	cmp	r0, #0
 8001956:	d1d5      	bne.n	8001904 <__sfp+0x24>
 8001958:	f7ff ff78 	bl	800184c <__sfp_lock_release>
 800195c:	230c      	movs	r3, #12
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	e7ee      	b.n	8001940 <__sfp+0x60>
 8001962:	bf00      	nop
 8001964:	08002398 	.word	0x08002398
 8001968:	ffff0001 	.word	0xffff0001

0800196c <_fwalk_reent>:
 800196c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001970:	4606      	mov	r6, r0
 8001972:	4688      	mov	r8, r1
 8001974:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001978:	2700      	movs	r7, #0
 800197a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800197e:	f1b9 0901 	subs.w	r9, r9, #1
 8001982:	d505      	bpl.n	8001990 <_fwalk_reent+0x24>
 8001984:	6824      	ldr	r4, [r4, #0]
 8001986:	2c00      	cmp	r4, #0
 8001988:	d1f7      	bne.n	800197a <_fwalk_reent+0xe>
 800198a:	4638      	mov	r0, r7
 800198c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001990:	89ab      	ldrh	r3, [r5, #12]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d907      	bls.n	80019a6 <_fwalk_reent+0x3a>
 8001996:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800199a:	3301      	adds	r3, #1
 800199c:	d003      	beq.n	80019a6 <_fwalk_reent+0x3a>
 800199e:	4629      	mov	r1, r5
 80019a0:	4630      	mov	r0, r6
 80019a2:	47c0      	blx	r8
 80019a4:	4307      	orrs	r7, r0
 80019a6:	3568      	adds	r5, #104	; 0x68
 80019a8:	e7e9      	b.n	800197e <_fwalk_reent+0x12>

080019aa <__retarget_lock_init_recursive>:
 80019aa:	4770      	bx	lr

080019ac <__retarget_lock_acquire_recursive>:
 80019ac:	4770      	bx	lr

080019ae <__retarget_lock_release_recursive>:
 80019ae:	4770      	bx	lr

080019b0 <__swhatbuf_r>:
 80019b0:	b570      	push	{r4, r5, r6, lr}
 80019b2:	460e      	mov	r6, r1
 80019b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019b8:	2900      	cmp	r1, #0
 80019ba:	b096      	sub	sp, #88	; 0x58
 80019bc:	4614      	mov	r4, r2
 80019be:	461d      	mov	r5, r3
 80019c0:	da07      	bge.n	80019d2 <__swhatbuf_r+0x22>
 80019c2:	2300      	movs	r3, #0
 80019c4:	602b      	str	r3, [r5, #0]
 80019c6:	89b3      	ldrh	r3, [r6, #12]
 80019c8:	061a      	lsls	r2, r3, #24
 80019ca:	d410      	bmi.n	80019ee <__swhatbuf_r+0x3e>
 80019cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d0:	e00e      	b.n	80019f0 <__swhatbuf_r+0x40>
 80019d2:	466a      	mov	r2, sp
 80019d4:	f000 fc5a 	bl	800228c <_fstat_r>
 80019d8:	2800      	cmp	r0, #0
 80019da:	dbf2      	blt.n	80019c2 <__swhatbuf_r+0x12>
 80019dc:	9a01      	ldr	r2, [sp, #4]
 80019de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80019e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80019e6:	425a      	negs	r2, r3
 80019e8:	415a      	adcs	r2, r3
 80019ea:	602a      	str	r2, [r5, #0]
 80019ec:	e7ee      	b.n	80019cc <__swhatbuf_r+0x1c>
 80019ee:	2340      	movs	r3, #64	; 0x40
 80019f0:	2000      	movs	r0, #0
 80019f2:	6023      	str	r3, [r4, #0]
 80019f4:	b016      	add	sp, #88	; 0x58
 80019f6:	bd70      	pop	{r4, r5, r6, pc}

080019f8 <__smakebuf_r>:
 80019f8:	898b      	ldrh	r3, [r1, #12]
 80019fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019fc:	079d      	lsls	r5, r3, #30
 80019fe:	4606      	mov	r6, r0
 8001a00:	460c      	mov	r4, r1
 8001a02:	d507      	bpl.n	8001a14 <__smakebuf_r+0x1c>
 8001a04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a08:	6023      	str	r3, [r4, #0]
 8001a0a:	6123      	str	r3, [r4, #16]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	6163      	str	r3, [r4, #20]
 8001a10:	b002      	add	sp, #8
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
 8001a14:	ab01      	add	r3, sp, #4
 8001a16:	466a      	mov	r2, sp
 8001a18:	f7ff ffca 	bl	80019b0 <__swhatbuf_r>
 8001a1c:	9900      	ldr	r1, [sp, #0]
 8001a1e:	4605      	mov	r5, r0
 8001a20:	4630      	mov	r0, r6
 8001a22:	f000 f877 	bl	8001b14 <_malloc_r>
 8001a26:	b948      	cbnz	r0, 8001a3c <__smakebuf_r+0x44>
 8001a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a2c:	059a      	lsls	r2, r3, #22
 8001a2e:	d4ef      	bmi.n	8001a10 <__smakebuf_r+0x18>
 8001a30:	f023 0303 	bic.w	r3, r3, #3
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	81a3      	strh	r3, [r4, #12]
 8001a3a:	e7e3      	b.n	8001a04 <__smakebuf_r+0xc>
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <__smakebuf_r+0x7c>)
 8001a3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a40:	89a3      	ldrh	r3, [r4, #12]
 8001a42:	6020      	str	r0, [r4, #0]
 8001a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a48:	81a3      	strh	r3, [r4, #12]
 8001a4a:	9b00      	ldr	r3, [sp, #0]
 8001a4c:	6163      	str	r3, [r4, #20]
 8001a4e:	9b01      	ldr	r3, [sp, #4]
 8001a50:	6120      	str	r0, [r4, #16]
 8001a52:	b15b      	cbz	r3, 8001a6c <__smakebuf_r+0x74>
 8001a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a58:	4630      	mov	r0, r6
 8001a5a:	f000 fc29 	bl	80022b0 <_isatty_r>
 8001a5e:	b128      	cbz	r0, 8001a6c <__smakebuf_r+0x74>
 8001a60:	89a3      	ldrh	r3, [r4, #12]
 8001a62:	f023 0303 	bic.w	r3, r3, #3
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	81a3      	strh	r3, [r4, #12]
 8001a6c:	89a0      	ldrh	r0, [r4, #12]
 8001a6e:	4305      	orrs	r5, r0
 8001a70:	81a5      	strh	r5, [r4, #12]
 8001a72:	e7cd      	b.n	8001a10 <__smakebuf_r+0x18>
 8001a74:	08001809 	.word	0x08001809

08001a78 <_free_r>:
 8001a78:	b538      	push	{r3, r4, r5, lr}
 8001a7a:	4605      	mov	r5, r0
 8001a7c:	2900      	cmp	r1, #0
 8001a7e:	d045      	beq.n	8001b0c <_free_r+0x94>
 8001a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a84:	1f0c      	subs	r4, r1, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bfb8      	it	lt
 8001a8a:	18e4      	addlt	r4, r4, r3
 8001a8c:	f000 fc32 	bl	80022f4 <__malloc_lock>
 8001a90:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <_free_r+0x98>)
 8001a92:	6813      	ldr	r3, [r2, #0]
 8001a94:	4610      	mov	r0, r2
 8001a96:	b933      	cbnz	r3, 8001aa6 <_free_r+0x2e>
 8001a98:	6063      	str	r3, [r4, #4]
 8001a9a:	6014      	str	r4, [r2, #0]
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001aa2:	f000 bc2d 	b.w	8002300 <__malloc_unlock>
 8001aa6:	42a3      	cmp	r3, r4
 8001aa8:	d90b      	bls.n	8001ac2 <_free_r+0x4a>
 8001aaa:	6821      	ldr	r1, [r4, #0]
 8001aac:	1862      	adds	r2, r4, r1
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	bf04      	itt	eq
 8001ab2:	681a      	ldreq	r2, [r3, #0]
 8001ab4:	685b      	ldreq	r3, [r3, #4]
 8001ab6:	6063      	str	r3, [r4, #4]
 8001ab8:	bf04      	itt	eq
 8001aba:	1852      	addeq	r2, r2, r1
 8001abc:	6022      	streq	r2, [r4, #0]
 8001abe:	6004      	str	r4, [r0, #0]
 8001ac0:	e7ec      	b.n	8001a9c <_free_r+0x24>
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	b10b      	cbz	r3, 8001acc <_free_r+0x54>
 8001ac8:	42a3      	cmp	r3, r4
 8001aca:	d9fa      	bls.n	8001ac2 <_free_r+0x4a>
 8001acc:	6811      	ldr	r1, [r2, #0]
 8001ace:	1850      	adds	r0, r2, r1
 8001ad0:	42a0      	cmp	r0, r4
 8001ad2:	d10b      	bne.n	8001aec <_free_r+0x74>
 8001ad4:	6820      	ldr	r0, [r4, #0]
 8001ad6:	4401      	add	r1, r0
 8001ad8:	1850      	adds	r0, r2, r1
 8001ada:	4283      	cmp	r3, r0
 8001adc:	6011      	str	r1, [r2, #0]
 8001ade:	d1dd      	bne.n	8001a9c <_free_r+0x24>
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	6053      	str	r3, [r2, #4]
 8001ae6:	4401      	add	r1, r0
 8001ae8:	6011      	str	r1, [r2, #0]
 8001aea:	e7d7      	b.n	8001a9c <_free_r+0x24>
 8001aec:	d902      	bls.n	8001af4 <_free_r+0x7c>
 8001aee:	230c      	movs	r3, #12
 8001af0:	602b      	str	r3, [r5, #0]
 8001af2:	e7d3      	b.n	8001a9c <_free_r+0x24>
 8001af4:	6820      	ldr	r0, [r4, #0]
 8001af6:	1821      	adds	r1, r4, r0
 8001af8:	428b      	cmp	r3, r1
 8001afa:	bf04      	itt	eq
 8001afc:	6819      	ldreq	r1, [r3, #0]
 8001afe:	685b      	ldreq	r3, [r3, #4]
 8001b00:	6063      	str	r3, [r4, #4]
 8001b02:	bf04      	itt	eq
 8001b04:	1809      	addeq	r1, r1, r0
 8001b06:	6021      	streq	r1, [r4, #0]
 8001b08:	6054      	str	r4, [r2, #4]
 8001b0a:	e7c7      	b.n	8001a9c <_free_r+0x24>
 8001b0c:	bd38      	pop	{r3, r4, r5, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000008c 	.word	0x2000008c

08001b14 <_malloc_r>:
 8001b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b16:	1ccd      	adds	r5, r1, #3
 8001b18:	f025 0503 	bic.w	r5, r5, #3
 8001b1c:	3508      	adds	r5, #8
 8001b1e:	2d0c      	cmp	r5, #12
 8001b20:	bf38      	it	cc
 8001b22:	250c      	movcc	r5, #12
 8001b24:	2d00      	cmp	r5, #0
 8001b26:	4606      	mov	r6, r0
 8001b28:	db01      	blt.n	8001b2e <_malloc_r+0x1a>
 8001b2a:	42a9      	cmp	r1, r5
 8001b2c:	d903      	bls.n	8001b36 <_malloc_r+0x22>
 8001b2e:	230c      	movs	r3, #12
 8001b30:	6033      	str	r3, [r6, #0]
 8001b32:	2000      	movs	r0, #0
 8001b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b36:	f000 fbdd 	bl	80022f4 <__malloc_lock>
 8001b3a:	4921      	ldr	r1, [pc, #132]	; (8001bc0 <_malloc_r+0xac>)
 8001b3c:	680a      	ldr	r2, [r1, #0]
 8001b3e:	4614      	mov	r4, r2
 8001b40:	b99c      	cbnz	r4, 8001b6a <_malloc_r+0x56>
 8001b42:	4f20      	ldr	r7, [pc, #128]	; (8001bc4 <_malloc_r+0xb0>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b923      	cbnz	r3, 8001b52 <_malloc_r+0x3e>
 8001b48:	4621      	mov	r1, r4
 8001b4a:	4630      	mov	r0, r6
 8001b4c:	f000 fb28 	bl	80021a0 <_sbrk_r>
 8001b50:	6038      	str	r0, [r7, #0]
 8001b52:	4629      	mov	r1, r5
 8001b54:	4630      	mov	r0, r6
 8001b56:	f000 fb23 	bl	80021a0 <_sbrk_r>
 8001b5a:	1c43      	adds	r3, r0, #1
 8001b5c:	d123      	bne.n	8001ba6 <_malloc_r+0x92>
 8001b5e:	230c      	movs	r3, #12
 8001b60:	6033      	str	r3, [r6, #0]
 8001b62:	4630      	mov	r0, r6
 8001b64:	f000 fbcc 	bl	8002300 <__malloc_unlock>
 8001b68:	e7e3      	b.n	8001b32 <_malloc_r+0x1e>
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	1b5b      	subs	r3, r3, r5
 8001b6e:	d417      	bmi.n	8001ba0 <_malloc_r+0x8c>
 8001b70:	2b0b      	cmp	r3, #11
 8001b72:	d903      	bls.n	8001b7c <_malloc_r+0x68>
 8001b74:	6023      	str	r3, [r4, #0]
 8001b76:	441c      	add	r4, r3
 8001b78:	6025      	str	r5, [r4, #0]
 8001b7a:	e004      	b.n	8001b86 <_malloc_r+0x72>
 8001b7c:	6863      	ldr	r3, [r4, #4]
 8001b7e:	42a2      	cmp	r2, r4
 8001b80:	bf0c      	ite	eq
 8001b82:	600b      	streq	r3, [r1, #0]
 8001b84:	6053      	strne	r3, [r2, #4]
 8001b86:	4630      	mov	r0, r6
 8001b88:	f000 fbba 	bl	8002300 <__malloc_unlock>
 8001b8c:	f104 000b 	add.w	r0, r4, #11
 8001b90:	1d23      	adds	r3, r4, #4
 8001b92:	f020 0007 	bic.w	r0, r0, #7
 8001b96:	1ac2      	subs	r2, r0, r3
 8001b98:	d0cc      	beq.n	8001b34 <_malloc_r+0x20>
 8001b9a:	1a1b      	subs	r3, r3, r0
 8001b9c:	50a3      	str	r3, [r4, r2]
 8001b9e:	e7c9      	b.n	8001b34 <_malloc_r+0x20>
 8001ba0:	4622      	mov	r2, r4
 8001ba2:	6864      	ldr	r4, [r4, #4]
 8001ba4:	e7cc      	b.n	8001b40 <_malloc_r+0x2c>
 8001ba6:	1cc4      	adds	r4, r0, #3
 8001ba8:	f024 0403 	bic.w	r4, r4, #3
 8001bac:	42a0      	cmp	r0, r4
 8001bae:	d0e3      	beq.n	8001b78 <_malloc_r+0x64>
 8001bb0:	1a21      	subs	r1, r4, r0
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	f000 faf4 	bl	80021a0 <_sbrk_r>
 8001bb8:	3001      	adds	r0, #1
 8001bba:	d1dd      	bne.n	8001b78 <_malloc_r+0x64>
 8001bbc:	e7cf      	b.n	8001b5e <_malloc_r+0x4a>
 8001bbe:	bf00      	nop
 8001bc0:	2000008c 	.word	0x2000008c
 8001bc4:	20000090 	.word	0x20000090

08001bc8 <__sfputc_r>:
 8001bc8:	6893      	ldr	r3, [r2, #8]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	b410      	push	{r4}
 8001bd0:	6093      	str	r3, [r2, #8]
 8001bd2:	da07      	bge.n	8001be4 <__sfputc_r+0x1c>
 8001bd4:	6994      	ldr	r4, [r2, #24]
 8001bd6:	42a3      	cmp	r3, r4
 8001bd8:	db01      	blt.n	8001bde <__sfputc_r+0x16>
 8001bda:	290a      	cmp	r1, #10
 8001bdc:	d102      	bne.n	8001be4 <__sfputc_r+0x1c>
 8001bde:	bc10      	pop	{r4}
 8001be0:	f7ff bc6c 	b.w	80014bc <__swbuf_r>
 8001be4:	6813      	ldr	r3, [r2, #0]
 8001be6:	1c58      	adds	r0, r3, #1
 8001be8:	6010      	str	r0, [r2, #0]
 8001bea:	7019      	strb	r1, [r3, #0]
 8001bec:	4608      	mov	r0, r1
 8001bee:	bc10      	pop	{r4}
 8001bf0:	4770      	bx	lr

08001bf2 <__sfputs_r>:
 8001bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf4:	4606      	mov	r6, r0
 8001bf6:	460f      	mov	r7, r1
 8001bf8:	4614      	mov	r4, r2
 8001bfa:	18d5      	adds	r5, r2, r3
 8001bfc:	42ac      	cmp	r4, r5
 8001bfe:	d101      	bne.n	8001c04 <__sfputs_r+0x12>
 8001c00:	2000      	movs	r0, #0
 8001c02:	e007      	b.n	8001c14 <__sfputs_r+0x22>
 8001c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c08:	463a      	mov	r2, r7
 8001c0a:	4630      	mov	r0, r6
 8001c0c:	f7ff ffdc 	bl	8001bc8 <__sfputc_r>
 8001c10:	1c43      	adds	r3, r0, #1
 8001c12:	d1f3      	bne.n	8001bfc <__sfputs_r+0xa>
 8001c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c18 <_vfiprintf_r>:
 8001c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c1c:	460d      	mov	r5, r1
 8001c1e:	b09d      	sub	sp, #116	; 0x74
 8001c20:	4614      	mov	r4, r2
 8001c22:	4698      	mov	r8, r3
 8001c24:	4606      	mov	r6, r0
 8001c26:	b118      	cbz	r0, 8001c30 <_vfiprintf_r+0x18>
 8001c28:	6983      	ldr	r3, [r0, #24]
 8001c2a:	b90b      	cbnz	r3, 8001c30 <_vfiprintf_r+0x18>
 8001c2c:	f7ff fe20 	bl	8001870 <__sinit>
 8001c30:	4b89      	ldr	r3, [pc, #548]	; (8001e58 <_vfiprintf_r+0x240>)
 8001c32:	429d      	cmp	r5, r3
 8001c34:	d11b      	bne.n	8001c6e <_vfiprintf_r+0x56>
 8001c36:	6875      	ldr	r5, [r6, #4]
 8001c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c3a:	07d9      	lsls	r1, r3, #31
 8001c3c:	d405      	bmi.n	8001c4a <_vfiprintf_r+0x32>
 8001c3e:	89ab      	ldrh	r3, [r5, #12]
 8001c40:	059a      	lsls	r2, r3, #22
 8001c42:	d402      	bmi.n	8001c4a <_vfiprintf_r+0x32>
 8001c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c46:	f7ff feb1 	bl	80019ac <__retarget_lock_acquire_recursive>
 8001c4a:	89ab      	ldrh	r3, [r5, #12]
 8001c4c:	071b      	lsls	r3, r3, #28
 8001c4e:	d501      	bpl.n	8001c54 <_vfiprintf_r+0x3c>
 8001c50:	692b      	ldr	r3, [r5, #16]
 8001c52:	b9eb      	cbnz	r3, 8001c90 <_vfiprintf_r+0x78>
 8001c54:	4629      	mov	r1, r5
 8001c56:	4630      	mov	r0, r6
 8001c58:	f7ff fc82 	bl	8001560 <__swsetup_r>
 8001c5c:	b1c0      	cbz	r0, 8001c90 <_vfiprintf_r+0x78>
 8001c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c60:	07dc      	lsls	r4, r3, #31
 8001c62:	d50e      	bpl.n	8001c82 <_vfiprintf_r+0x6a>
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	b01d      	add	sp, #116	; 0x74
 8001c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c6e:	4b7b      	ldr	r3, [pc, #492]	; (8001e5c <_vfiprintf_r+0x244>)
 8001c70:	429d      	cmp	r5, r3
 8001c72:	d101      	bne.n	8001c78 <_vfiprintf_r+0x60>
 8001c74:	68b5      	ldr	r5, [r6, #8]
 8001c76:	e7df      	b.n	8001c38 <_vfiprintf_r+0x20>
 8001c78:	4b79      	ldr	r3, [pc, #484]	; (8001e60 <_vfiprintf_r+0x248>)
 8001c7a:	429d      	cmp	r5, r3
 8001c7c:	bf08      	it	eq
 8001c7e:	68f5      	ldreq	r5, [r6, #12]
 8001c80:	e7da      	b.n	8001c38 <_vfiprintf_r+0x20>
 8001c82:	89ab      	ldrh	r3, [r5, #12]
 8001c84:	0598      	lsls	r0, r3, #22
 8001c86:	d4ed      	bmi.n	8001c64 <_vfiprintf_r+0x4c>
 8001c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c8a:	f7ff fe90 	bl	80019ae <__retarget_lock_release_recursive>
 8001c8e:	e7e9      	b.n	8001c64 <_vfiprintf_r+0x4c>
 8001c90:	2300      	movs	r3, #0
 8001c92:	9309      	str	r3, [sp, #36]	; 0x24
 8001c94:	2320      	movs	r3, #32
 8001c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c9e:	2330      	movs	r3, #48	; 0x30
 8001ca0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001e64 <_vfiprintf_r+0x24c>
 8001ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ca8:	f04f 0901 	mov.w	r9, #1
 8001cac:	4623      	mov	r3, r4
 8001cae:	469a      	mov	sl, r3
 8001cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cb4:	b10a      	cbz	r2, 8001cba <_vfiprintf_r+0xa2>
 8001cb6:	2a25      	cmp	r2, #37	; 0x25
 8001cb8:	d1f9      	bne.n	8001cae <_vfiprintf_r+0x96>
 8001cba:	ebba 0b04 	subs.w	fp, sl, r4
 8001cbe:	d00b      	beq.n	8001cd8 <_vfiprintf_r+0xc0>
 8001cc0:	465b      	mov	r3, fp
 8001cc2:	4622      	mov	r2, r4
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	4630      	mov	r0, r6
 8001cc8:	f7ff ff93 	bl	8001bf2 <__sfputs_r>
 8001ccc:	3001      	adds	r0, #1
 8001cce:	f000 80aa 	beq.w	8001e26 <_vfiprintf_r+0x20e>
 8001cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001cd4:	445a      	add	r2, fp
 8001cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8001cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80a2 	beq.w	8001e26 <_vfiprintf_r+0x20e>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001cec:	f10a 0a01 	add.w	sl, sl, #1
 8001cf0:	9304      	str	r3, [sp, #16]
 8001cf2:	9307      	str	r3, [sp, #28]
 8001cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8001cfa:	4654      	mov	r4, sl
 8001cfc:	2205      	movs	r2, #5
 8001cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d02:	4858      	ldr	r0, [pc, #352]	; (8001e64 <_vfiprintf_r+0x24c>)
 8001d04:	f7fe fa74 	bl	80001f0 <memchr>
 8001d08:	9a04      	ldr	r2, [sp, #16]
 8001d0a:	b9d8      	cbnz	r0, 8001d44 <_vfiprintf_r+0x12c>
 8001d0c:	06d1      	lsls	r1, r2, #27
 8001d0e:	bf44      	itt	mi
 8001d10:	2320      	movmi	r3, #32
 8001d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d16:	0713      	lsls	r3, r2, #28
 8001d18:	bf44      	itt	mi
 8001d1a:	232b      	movmi	r3, #43	; 0x2b
 8001d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d20:	f89a 3000 	ldrb.w	r3, [sl]
 8001d24:	2b2a      	cmp	r3, #42	; 0x2a
 8001d26:	d015      	beq.n	8001d54 <_vfiprintf_r+0x13c>
 8001d28:	9a07      	ldr	r2, [sp, #28]
 8001d2a:	4654      	mov	r4, sl
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f04f 0c0a 	mov.w	ip, #10
 8001d32:	4621      	mov	r1, r4
 8001d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d38:	3b30      	subs	r3, #48	; 0x30
 8001d3a:	2b09      	cmp	r3, #9
 8001d3c:	d94e      	bls.n	8001ddc <_vfiprintf_r+0x1c4>
 8001d3e:	b1b0      	cbz	r0, 8001d6e <_vfiprintf_r+0x156>
 8001d40:	9207      	str	r2, [sp, #28]
 8001d42:	e014      	b.n	8001d6e <_vfiprintf_r+0x156>
 8001d44:	eba0 0308 	sub.w	r3, r0, r8
 8001d48:	fa09 f303 	lsl.w	r3, r9, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	9304      	str	r3, [sp, #16]
 8001d50:	46a2      	mov	sl, r4
 8001d52:	e7d2      	b.n	8001cfa <_vfiprintf_r+0xe2>
 8001d54:	9b03      	ldr	r3, [sp, #12]
 8001d56:	1d19      	adds	r1, r3, #4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	9103      	str	r1, [sp, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bfbb      	ittet	lt
 8001d60:	425b      	neglt	r3, r3
 8001d62:	f042 0202 	orrlt.w	r2, r2, #2
 8001d66:	9307      	strge	r3, [sp, #28]
 8001d68:	9307      	strlt	r3, [sp, #28]
 8001d6a:	bfb8      	it	lt
 8001d6c:	9204      	strlt	r2, [sp, #16]
 8001d6e:	7823      	ldrb	r3, [r4, #0]
 8001d70:	2b2e      	cmp	r3, #46	; 0x2e
 8001d72:	d10c      	bne.n	8001d8e <_vfiprintf_r+0x176>
 8001d74:	7863      	ldrb	r3, [r4, #1]
 8001d76:	2b2a      	cmp	r3, #42	; 0x2a
 8001d78:	d135      	bne.n	8001de6 <_vfiprintf_r+0x1ce>
 8001d7a:	9b03      	ldr	r3, [sp, #12]
 8001d7c:	1d1a      	adds	r2, r3, #4
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	9203      	str	r2, [sp, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	bfb8      	it	lt
 8001d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d8a:	3402      	adds	r4, #2
 8001d8c:	9305      	str	r3, [sp, #20]
 8001d8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001e74 <_vfiprintf_r+0x25c>
 8001d92:	7821      	ldrb	r1, [r4, #0]
 8001d94:	2203      	movs	r2, #3
 8001d96:	4650      	mov	r0, sl
 8001d98:	f7fe fa2a 	bl	80001f0 <memchr>
 8001d9c:	b140      	cbz	r0, 8001db0 <_vfiprintf_r+0x198>
 8001d9e:	2340      	movs	r3, #64	; 0x40
 8001da0:	eba0 000a 	sub.w	r0, r0, sl
 8001da4:	fa03 f000 	lsl.w	r0, r3, r0
 8001da8:	9b04      	ldr	r3, [sp, #16]
 8001daa:	4303      	orrs	r3, r0
 8001dac:	3401      	adds	r4, #1
 8001dae:	9304      	str	r3, [sp, #16]
 8001db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001db4:	482c      	ldr	r0, [pc, #176]	; (8001e68 <_vfiprintf_r+0x250>)
 8001db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001dba:	2206      	movs	r2, #6
 8001dbc:	f7fe fa18 	bl	80001f0 <memchr>
 8001dc0:	2800      	cmp	r0, #0
 8001dc2:	d03f      	beq.n	8001e44 <_vfiprintf_r+0x22c>
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <_vfiprintf_r+0x254>)
 8001dc6:	bb1b      	cbnz	r3, 8001e10 <_vfiprintf_r+0x1f8>
 8001dc8:	9b03      	ldr	r3, [sp, #12]
 8001dca:	3307      	adds	r3, #7
 8001dcc:	f023 0307 	bic.w	r3, r3, #7
 8001dd0:	3308      	adds	r3, #8
 8001dd2:	9303      	str	r3, [sp, #12]
 8001dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001dd6:	443b      	add	r3, r7
 8001dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8001dda:	e767      	b.n	8001cac <_vfiprintf_r+0x94>
 8001ddc:	fb0c 3202 	mla	r2, ip, r2, r3
 8001de0:	460c      	mov	r4, r1
 8001de2:	2001      	movs	r0, #1
 8001de4:	e7a5      	b.n	8001d32 <_vfiprintf_r+0x11a>
 8001de6:	2300      	movs	r3, #0
 8001de8:	3401      	adds	r4, #1
 8001dea:	9305      	str	r3, [sp, #20]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f04f 0c0a 	mov.w	ip, #10
 8001df2:	4620      	mov	r0, r4
 8001df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001df8:	3a30      	subs	r2, #48	; 0x30
 8001dfa:	2a09      	cmp	r2, #9
 8001dfc:	d903      	bls.n	8001e06 <_vfiprintf_r+0x1ee>
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0c5      	beq.n	8001d8e <_vfiprintf_r+0x176>
 8001e02:	9105      	str	r1, [sp, #20]
 8001e04:	e7c3      	b.n	8001d8e <_vfiprintf_r+0x176>
 8001e06:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e7f0      	b.n	8001df2 <_vfiprintf_r+0x1da>
 8001e10:	ab03      	add	r3, sp, #12
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	462a      	mov	r2, r5
 8001e16:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <_vfiprintf_r+0x258>)
 8001e18:	a904      	add	r1, sp, #16
 8001e1a:	4630      	mov	r0, r6
 8001e1c:	f3af 8000 	nop.w
 8001e20:	4607      	mov	r7, r0
 8001e22:	1c78      	adds	r0, r7, #1
 8001e24:	d1d6      	bne.n	8001dd4 <_vfiprintf_r+0x1bc>
 8001e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e28:	07d9      	lsls	r1, r3, #31
 8001e2a:	d405      	bmi.n	8001e38 <_vfiprintf_r+0x220>
 8001e2c:	89ab      	ldrh	r3, [r5, #12]
 8001e2e:	059a      	lsls	r2, r3, #22
 8001e30:	d402      	bmi.n	8001e38 <_vfiprintf_r+0x220>
 8001e32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e34:	f7ff fdbb 	bl	80019ae <__retarget_lock_release_recursive>
 8001e38:	89ab      	ldrh	r3, [r5, #12]
 8001e3a:	065b      	lsls	r3, r3, #25
 8001e3c:	f53f af12 	bmi.w	8001c64 <_vfiprintf_r+0x4c>
 8001e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e42:	e711      	b.n	8001c68 <_vfiprintf_r+0x50>
 8001e44:	ab03      	add	r3, sp, #12
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	462a      	mov	r2, r5
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <_vfiprintf_r+0x258>)
 8001e4c:	a904      	add	r1, sp, #16
 8001e4e:	4630      	mov	r0, r6
 8001e50:	f000 f880 	bl	8001f54 <_printf_i>
 8001e54:	e7e4      	b.n	8001e20 <_vfiprintf_r+0x208>
 8001e56:	bf00      	nop
 8001e58:	080023bc 	.word	0x080023bc
 8001e5c:	080023dc 	.word	0x080023dc
 8001e60:	0800239c 	.word	0x0800239c
 8001e64:	080023fc 	.word	0x080023fc
 8001e68:	08002406 	.word	0x08002406
 8001e6c:	00000000 	.word	0x00000000
 8001e70:	08001bf3 	.word	0x08001bf3
 8001e74:	08002402 	.word	0x08002402

08001e78 <_printf_common>:
 8001e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e7c:	4616      	mov	r6, r2
 8001e7e:	4699      	mov	r9, r3
 8001e80:	688a      	ldr	r2, [r1, #8]
 8001e82:	690b      	ldr	r3, [r1, #16]
 8001e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	bfb8      	it	lt
 8001e8c:	4613      	movlt	r3, r2
 8001e8e:	6033      	str	r3, [r6, #0]
 8001e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e94:	4607      	mov	r7, r0
 8001e96:	460c      	mov	r4, r1
 8001e98:	b10a      	cbz	r2, 8001e9e <_printf_common+0x26>
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	6033      	str	r3, [r6, #0]
 8001e9e:	6823      	ldr	r3, [r4, #0]
 8001ea0:	0699      	lsls	r1, r3, #26
 8001ea2:	bf42      	ittt	mi
 8001ea4:	6833      	ldrmi	r3, [r6, #0]
 8001ea6:	3302      	addmi	r3, #2
 8001ea8:	6033      	strmi	r3, [r6, #0]
 8001eaa:	6825      	ldr	r5, [r4, #0]
 8001eac:	f015 0506 	ands.w	r5, r5, #6
 8001eb0:	d106      	bne.n	8001ec0 <_printf_common+0x48>
 8001eb2:	f104 0a19 	add.w	sl, r4, #25
 8001eb6:	68e3      	ldr	r3, [r4, #12]
 8001eb8:	6832      	ldr	r2, [r6, #0]
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	42ab      	cmp	r3, r5
 8001ebe:	dc26      	bgt.n	8001f0e <_printf_common+0x96>
 8001ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ec4:	1e13      	subs	r3, r2, #0
 8001ec6:	6822      	ldr	r2, [r4, #0]
 8001ec8:	bf18      	it	ne
 8001eca:	2301      	movne	r3, #1
 8001ecc:	0692      	lsls	r2, r2, #26
 8001ece:	d42b      	bmi.n	8001f28 <_printf_common+0xb0>
 8001ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ed4:	4649      	mov	r1, r9
 8001ed6:	4638      	mov	r0, r7
 8001ed8:	47c0      	blx	r8
 8001eda:	3001      	adds	r0, #1
 8001edc:	d01e      	beq.n	8001f1c <_printf_common+0xa4>
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	68e5      	ldr	r5, [r4, #12]
 8001ee2:	6832      	ldr	r2, [r6, #0]
 8001ee4:	f003 0306 	and.w	r3, r3, #6
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	bf08      	it	eq
 8001eec:	1aad      	subeq	r5, r5, r2
 8001eee:	68a3      	ldr	r3, [r4, #8]
 8001ef0:	6922      	ldr	r2, [r4, #16]
 8001ef2:	bf0c      	ite	eq
 8001ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ef8:	2500      	movne	r5, #0
 8001efa:	4293      	cmp	r3, r2
 8001efc:	bfc4      	itt	gt
 8001efe:	1a9b      	subgt	r3, r3, r2
 8001f00:	18ed      	addgt	r5, r5, r3
 8001f02:	2600      	movs	r6, #0
 8001f04:	341a      	adds	r4, #26
 8001f06:	42b5      	cmp	r5, r6
 8001f08:	d11a      	bne.n	8001f40 <_printf_common+0xc8>
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	e008      	b.n	8001f20 <_printf_common+0xa8>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	4652      	mov	r2, sl
 8001f12:	4649      	mov	r1, r9
 8001f14:	4638      	mov	r0, r7
 8001f16:	47c0      	blx	r8
 8001f18:	3001      	adds	r0, #1
 8001f1a:	d103      	bne.n	8001f24 <_printf_common+0xac>
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f24:	3501      	adds	r5, #1
 8001f26:	e7c6      	b.n	8001eb6 <_printf_common+0x3e>
 8001f28:	18e1      	adds	r1, r4, r3
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	2030      	movs	r0, #48	; 0x30
 8001f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f32:	4422      	add	r2, r4
 8001f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	e7c7      	b.n	8001ed0 <_printf_common+0x58>
 8001f40:	2301      	movs	r3, #1
 8001f42:	4622      	mov	r2, r4
 8001f44:	4649      	mov	r1, r9
 8001f46:	4638      	mov	r0, r7
 8001f48:	47c0      	blx	r8
 8001f4a:	3001      	adds	r0, #1
 8001f4c:	d0e6      	beq.n	8001f1c <_printf_common+0xa4>
 8001f4e:	3601      	adds	r6, #1
 8001f50:	e7d9      	b.n	8001f06 <_printf_common+0x8e>
	...

08001f54 <_printf_i>:
 8001f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f58:	460c      	mov	r4, r1
 8001f5a:	4691      	mov	r9, r2
 8001f5c:	7e27      	ldrb	r7, [r4, #24]
 8001f5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001f60:	2f78      	cmp	r7, #120	; 0x78
 8001f62:	4680      	mov	r8, r0
 8001f64:	469a      	mov	sl, r3
 8001f66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f6a:	d807      	bhi.n	8001f7c <_printf_i+0x28>
 8001f6c:	2f62      	cmp	r7, #98	; 0x62
 8001f6e:	d80a      	bhi.n	8001f86 <_printf_i+0x32>
 8001f70:	2f00      	cmp	r7, #0
 8001f72:	f000 80d8 	beq.w	8002126 <_printf_i+0x1d2>
 8001f76:	2f58      	cmp	r7, #88	; 0x58
 8001f78:	f000 80a3 	beq.w	80020c2 <_printf_i+0x16e>
 8001f7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f84:	e03a      	b.n	8001ffc <_printf_i+0xa8>
 8001f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f8a:	2b15      	cmp	r3, #21
 8001f8c:	d8f6      	bhi.n	8001f7c <_printf_i+0x28>
 8001f8e:	a001      	add	r0, pc, #4	; (adr r0, 8001f94 <_printf_i+0x40>)
 8001f90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001f94:	08001fed 	.word	0x08001fed
 8001f98:	08002001 	.word	0x08002001
 8001f9c:	08001f7d 	.word	0x08001f7d
 8001fa0:	08001f7d 	.word	0x08001f7d
 8001fa4:	08001f7d 	.word	0x08001f7d
 8001fa8:	08001f7d 	.word	0x08001f7d
 8001fac:	08002001 	.word	0x08002001
 8001fb0:	08001f7d 	.word	0x08001f7d
 8001fb4:	08001f7d 	.word	0x08001f7d
 8001fb8:	08001f7d 	.word	0x08001f7d
 8001fbc:	08001f7d 	.word	0x08001f7d
 8001fc0:	0800210d 	.word	0x0800210d
 8001fc4:	08002031 	.word	0x08002031
 8001fc8:	080020ef 	.word	0x080020ef
 8001fcc:	08001f7d 	.word	0x08001f7d
 8001fd0:	08001f7d 	.word	0x08001f7d
 8001fd4:	0800212f 	.word	0x0800212f
 8001fd8:	08001f7d 	.word	0x08001f7d
 8001fdc:	08002031 	.word	0x08002031
 8001fe0:	08001f7d 	.word	0x08001f7d
 8001fe4:	08001f7d 	.word	0x08001f7d
 8001fe8:	080020f7 	.word	0x080020f7
 8001fec:	680b      	ldr	r3, [r1, #0]
 8001fee:	1d1a      	adds	r2, r3, #4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	600a      	str	r2, [r1, #0]
 8001ff4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0a3      	b.n	8002148 <_printf_i+0x1f4>
 8002000:	6825      	ldr	r5, [r4, #0]
 8002002:	6808      	ldr	r0, [r1, #0]
 8002004:	062e      	lsls	r6, r5, #24
 8002006:	f100 0304 	add.w	r3, r0, #4
 800200a:	d50a      	bpl.n	8002022 <_printf_i+0xce>
 800200c:	6805      	ldr	r5, [r0, #0]
 800200e:	600b      	str	r3, [r1, #0]
 8002010:	2d00      	cmp	r5, #0
 8002012:	da03      	bge.n	800201c <_printf_i+0xc8>
 8002014:	232d      	movs	r3, #45	; 0x2d
 8002016:	426d      	negs	r5, r5
 8002018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800201c:	485e      	ldr	r0, [pc, #376]	; (8002198 <_printf_i+0x244>)
 800201e:	230a      	movs	r3, #10
 8002020:	e019      	b.n	8002056 <_printf_i+0x102>
 8002022:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002026:	6805      	ldr	r5, [r0, #0]
 8002028:	600b      	str	r3, [r1, #0]
 800202a:	bf18      	it	ne
 800202c:	b22d      	sxthne	r5, r5
 800202e:	e7ef      	b.n	8002010 <_printf_i+0xbc>
 8002030:	680b      	ldr	r3, [r1, #0]
 8002032:	6825      	ldr	r5, [r4, #0]
 8002034:	1d18      	adds	r0, r3, #4
 8002036:	6008      	str	r0, [r1, #0]
 8002038:	0628      	lsls	r0, r5, #24
 800203a:	d501      	bpl.n	8002040 <_printf_i+0xec>
 800203c:	681d      	ldr	r5, [r3, #0]
 800203e:	e002      	b.n	8002046 <_printf_i+0xf2>
 8002040:	0669      	lsls	r1, r5, #25
 8002042:	d5fb      	bpl.n	800203c <_printf_i+0xe8>
 8002044:	881d      	ldrh	r5, [r3, #0]
 8002046:	4854      	ldr	r0, [pc, #336]	; (8002198 <_printf_i+0x244>)
 8002048:	2f6f      	cmp	r7, #111	; 0x6f
 800204a:	bf0c      	ite	eq
 800204c:	2308      	moveq	r3, #8
 800204e:	230a      	movne	r3, #10
 8002050:	2100      	movs	r1, #0
 8002052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002056:	6866      	ldr	r6, [r4, #4]
 8002058:	60a6      	str	r6, [r4, #8]
 800205a:	2e00      	cmp	r6, #0
 800205c:	bfa2      	ittt	ge
 800205e:	6821      	ldrge	r1, [r4, #0]
 8002060:	f021 0104 	bicge.w	r1, r1, #4
 8002064:	6021      	strge	r1, [r4, #0]
 8002066:	b90d      	cbnz	r5, 800206c <_printf_i+0x118>
 8002068:	2e00      	cmp	r6, #0
 800206a:	d04d      	beq.n	8002108 <_printf_i+0x1b4>
 800206c:	4616      	mov	r6, r2
 800206e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002072:	fb03 5711 	mls	r7, r3, r1, r5
 8002076:	5dc7      	ldrb	r7, [r0, r7]
 8002078:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800207c:	462f      	mov	r7, r5
 800207e:	42bb      	cmp	r3, r7
 8002080:	460d      	mov	r5, r1
 8002082:	d9f4      	bls.n	800206e <_printf_i+0x11a>
 8002084:	2b08      	cmp	r3, #8
 8002086:	d10b      	bne.n	80020a0 <_printf_i+0x14c>
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	07df      	lsls	r7, r3, #31
 800208c:	d508      	bpl.n	80020a0 <_printf_i+0x14c>
 800208e:	6923      	ldr	r3, [r4, #16]
 8002090:	6861      	ldr	r1, [r4, #4]
 8002092:	4299      	cmp	r1, r3
 8002094:	bfde      	ittt	le
 8002096:	2330      	movle	r3, #48	; 0x30
 8002098:	f806 3c01 	strble.w	r3, [r6, #-1]
 800209c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80020a0:	1b92      	subs	r2, r2, r6
 80020a2:	6122      	str	r2, [r4, #16]
 80020a4:	f8cd a000 	str.w	sl, [sp]
 80020a8:	464b      	mov	r3, r9
 80020aa:	aa03      	add	r2, sp, #12
 80020ac:	4621      	mov	r1, r4
 80020ae:	4640      	mov	r0, r8
 80020b0:	f7ff fee2 	bl	8001e78 <_printf_common>
 80020b4:	3001      	adds	r0, #1
 80020b6:	d14c      	bne.n	8002152 <_printf_i+0x1fe>
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	b004      	add	sp, #16
 80020be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020c2:	4835      	ldr	r0, [pc, #212]	; (8002198 <_printf_i+0x244>)
 80020c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	680e      	ldr	r6, [r1, #0]
 80020cc:	061f      	lsls	r7, r3, #24
 80020ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80020d2:	600e      	str	r6, [r1, #0]
 80020d4:	d514      	bpl.n	8002100 <_printf_i+0x1ac>
 80020d6:	07d9      	lsls	r1, r3, #31
 80020d8:	bf44      	itt	mi
 80020da:	f043 0320 	orrmi.w	r3, r3, #32
 80020de:	6023      	strmi	r3, [r4, #0]
 80020e0:	b91d      	cbnz	r5, 80020ea <_printf_i+0x196>
 80020e2:	6823      	ldr	r3, [r4, #0]
 80020e4:	f023 0320 	bic.w	r3, r3, #32
 80020e8:	6023      	str	r3, [r4, #0]
 80020ea:	2310      	movs	r3, #16
 80020ec:	e7b0      	b.n	8002050 <_printf_i+0xfc>
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	f043 0320 	orr.w	r3, r3, #32
 80020f4:	6023      	str	r3, [r4, #0]
 80020f6:	2378      	movs	r3, #120	; 0x78
 80020f8:	4828      	ldr	r0, [pc, #160]	; (800219c <_printf_i+0x248>)
 80020fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80020fe:	e7e3      	b.n	80020c8 <_printf_i+0x174>
 8002100:	065e      	lsls	r6, r3, #25
 8002102:	bf48      	it	mi
 8002104:	b2ad      	uxthmi	r5, r5
 8002106:	e7e6      	b.n	80020d6 <_printf_i+0x182>
 8002108:	4616      	mov	r6, r2
 800210a:	e7bb      	b.n	8002084 <_printf_i+0x130>
 800210c:	680b      	ldr	r3, [r1, #0]
 800210e:	6826      	ldr	r6, [r4, #0]
 8002110:	6960      	ldr	r0, [r4, #20]
 8002112:	1d1d      	adds	r5, r3, #4
 8002114:	600d      	str	r5, [r1, #0]
 8002116:	0635      	lsls	r5, r6, #24
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	d501      	bpl.n	8002120 <_printf_i+0x1cc>
 800211c:	6018      	str	r0, [r3, #0]
 800211e:	e002      	b.n	8002126 <_printf_i+0x1d2>
 8002120:	0671      	lsls	r1, r6, #25
 8002122:	d5fb      	bpl.n	800211c <_printf_i+0x1c8>
 8002124:	8018      	strh	r0, [r3, #0]
 8002126:	2300      	movs	r3, #0
 8002128:	6123      	str	r3, [r4, #16]
 800212a:	4616      	mov	r6, r2
 800212c:	e7ba      	b.n	80020a4 <_printf_i+0x150>
 800212e:	680b      	ldr	r3, [r1, #0]
 8002130:	1d1a      	adds	r2, r3, #4
 8002132:	600a      	str	r2, [r1, #0]
 8002134:	681e      	ldr	r6, [r3, #0]
 8002136:	6862      	ldr	r2, [r4, #4]
 8002138:	2100      	movs	r1, #0
 800213a:	4630      	mov	r0, r6
 800213c:	f7fe f858 	bl	80001f0 <memchr>
 8002140:	b108      	cbz	r0, 8002146 <_printf_i+0x1f2>
 8002142:	1b80      	subs	r0, r0, r6
 8002144:	6060      	str	r0, [r4, #4]
 8002146:	6863      	ldr	r3, [r4, #4]
 8002148:	6123      	str	r3, [r4, #16]
 800214a:	2300      	movs	r3, #0
 800214c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002150:	e7a8      	b.n	80020a4 <_printf_i+0x150>
 8002152:	6923      	ldr	r3, [r4, #16]
 8002154:	4632      	mov	r2, r6
 8002156:	4649      	mov	r1, r9
 8002158:	4640      	mov	r0, r8
 800215a:	47d0      	blx	sl
 800215c:	3001      	adds	r0, #1
 800215e:	d0ab      	beq.n	80020b8 <_printf_i+0x164>
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	079b      	lsls	r3, r3, #30
 8002164:	d413      	bmi.n	800218e <_printf_i+0x23a>
 8002166:	68e0      	ldr	r0, [r4, #12]
 8002168:	9b03      	ldr	r3, [sp, #12]
 800216a:	4298      	cmp	r0, r3
 800216c:	bfb8      	it	lt
 800216e:	4618      	movlt	r0, r3
 8002170:	e7a4      	b.n	80020bc <_printf_i+0x168>
 8002172:	2301      	movs	r3, #1
 8002174:	4632      	mov	r2, r6
 8002176:	4649      	mov	r1, r9
 8002178:	4640      	mov	r0, r8
 800217a:	47d0      	blx	sl
 800217c:	3001      	adds	r0, #1
 800217e:	d09b      	beq.n	80020b8 <_printf_i+0x164>
 8002180:	3501      	adds	r5, #1
 8002182:	68e3      	ldr	r3, [r4, #12]
 8002184:	9903      	ldr	r1, [sp, #12]
 8002186:	1a5b      	subs	r3, r3, r1
 8002188:	42ab      	cmp	r3, r5
 800218a:	dcf2      	bgt.n	8002172 <_printf_i+0x21e>
 800218c:	e7eb      	b.n	8002166 <_printf_i+0x212>
 800218e:	2500      	movs	r5, #0
 8002190:	f104 0619 	add.w	r6, r4, #25
 8002194:	e7f5      	b.n	8002182 <_printf_i+0x22e>
 8002196:	bf00      	nop
 8002198:	0800240d 	.word	0x0800240d
 800219c:	0800241e 	.word	0x0800241e

080021a0 <_sbrk_r>:
 80021a0:	b538      	push	{r3, r4, r5, lr}
 80021a2:	4d06      	ldr	r5, [pc, #24]	; (80021bc <_sbrk_r+0x1c>)
 80021a4:	2300      	movs	r3, #0
 80021a6:	4604      	mov	r4, r0
 80021a8:	4608      	mov	r0, r1
 80021aa:	602b      	str	r3, [r5, #0]
 80021ac:	f7fe fa32 	bl	8000614 <_sbrk>
 80021b0:	1c43      	adds	r3, r0, #1
 80021b2:	d102      	bne.n	80021ba <_sbrk_r+0x1a>
 80021b4:	682b      	ldr	r3, [r5, #0]
 80021b6:	b103      	cbz	r3, 80021ba <_sbrk_r+0x1a>
 80021b8:	6023      	str	r3, [r4, #0]
 80021ba:	bd38      	pop	{r3, r4, r5, pc}
 80021bc:	200002b8 	.word	0x200002b8

080021c0 <__sread>:
 80021c0:	b510      	push	{r4, lr}
 80021c2:	460c      	mov	r4, r1
 80021c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021c8:	f000 f8a0 	bl	800230c <_read_r>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	bfab      	itete	ge
 80021d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021d2:	89a3      	ldrhlt	r3, [r4, #12]
 80021d4:	181b      	addge	r3, r3, r0
 80021d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021da:	bfac      	ite	ge
 80021dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80021de:	81a3      	strhlt	r3, [r4, #12]
 80021e0:	bd10      	pop	{r4, pc}

080021e2 <__swrite>:
 80021e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021e6:	461f      	mov	r7, r3
 80021e8:	898b      	ldrh	r3, [r1, #12]
 80021ea:	05db      	lsls	r3, r3, #23
 80021ec:	4605      	mov	r5, r0
 80021ee:	460c      	mov	r4, r1
 80021f0:	4616      	mov	r6, r2
 80021f2:	d505      	bpl.n	8002200 <__swrite+0x1e>
 80021f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021f8:	2302      	movs	r3, #2
 80021fa:	2200      	movs	r2, #0
 80021fc:	f000 f868 	bl	80022d0 <_lseek_r>
 8002200:	89a3      	ldrh	r3, [r4, #12]
 8002202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800220a:	81a3      	strh	r3, [r4, #12]
 800220c:	4632      	mov	r2, r6
 800220e:	463b      	mov	r3, r7
 8002210:	4628      	mov	r0, r5
 8002212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002216:	f000 b817 	b.w	8002248 <_write_r>

0800221a <__sseek>:
 800221a:	b510      	push	{r4, lr}
 800221c:	460c      	mov	r4, r1
 800221e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002222:	f000 f855 	bl	80022d0 <_lseek_r>
 8002226:	1c43      	adds	r3, r0, #1
 8002228:	89a3      	ldrh	r3, [r4, #12]
 800222a:	bf15      	itete	ne
 800222c:	6560      	strne	r0, [r4, #84]	; 0x54
 800222e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002236:	81a3      	strheq	r3, [r4, #12]
 8002238:	bf18      	it	ne
 800223a:	81a3      	strhne	r3, [r4, #12]
 800223c:	bd10      	pop	{r4, pc}

0800223e <__sclose>:
 800223e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002242:	f000 b813 	b.w	800226c <_close_r>
	...

08002248 <_write_r>:
 8002248:	b538      	push	{r3, r4, r5, lr}
 800224a:	4d07      	ldr	r5, [pc, #28]	; (8002268 <_write_r+0x20>)
 800224c:	4604      	mov	r4, r0
 800224e:	4608      	mov	r0, r1
 8002250:	4611      	mov	r1, r2
 8002252:	2200      	movs	r2, #0
 8002254:	602a      	str	r2, [r5, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	f7fe f98f 	bl	800057a <_write>
 800225c:	1c43      	adds	r3, r0, #1
 800225e:	d102      	bne.n	8002266 <_write_r+0x1e>
 8002260:	682b      	ldr	r3, [r5, #0]
 8002262:	b103      	cbz	r3, 8002266 <_write_r+0x1e>
 8002264:	6023      	str	r3, [r4, #0]
 8002266:	bd38      	pop	{r3, r4, r5, pc}
 8002268:	200002b8 	.word	0x200002b8

0800226c <_close_r>:
 800226c:	b538      	push	{r3, r4, r5, lr}
 800226e:	4d06      	ldr	r5, [pc, #24]	; (8002288 <_close_r+0x1c>)
 8002270:	2300      	movs	r3, #0
 8002272:	4604      	mov	r4, r0
 8002274:	4608      	mov	r0, r1
 8002276:	602b      	str	r3, [r5, #0]
 8002278:	f7fe f99b 	bl	80005b2 <_close>
 800227c:	1c43      	adds	r3, r0, #1
 800227e:	d102      	bne.n	8002286 <_close_r+0x1a>
 8002280:	682b      	ldr	r3, [r5, #0]
 8002282:	b103      	cbz	r3, 8002286 <_close_r+0x1a>
 8002284:	6023      	str	r3, [r4, #0]
 8002286:	bd38      	pop	{r3, r4, r5, pc}
 8002288:	200002b8 	.word	0x200002b8

0800228c <_fstat_r>:
 800228c:	b538      	push	{r3, r4, r5, lr}
 800228e:	4d07      	ldr	r5, [pc, #28]	; (80022ac <_fstat_r+0x20>)
 8002290:	2300      	movs	r3, #0
 8002292:	4604      	mov	r4, r0
 8002294:	4608      	mov	r0, r1
 8002296:	4611      	mov	r1, r2
 8002298:	602b      	str	r3, [r5, #0]
 800229a:	f7fe f995 	bl	80005c8 <_fstat>
 800229e:	1c43      	adds	r3, r0, #1
 80022a0:	d102      	bne.n	80022a8 <_fstat_r+0x1c>
 80022a2:	682b      	ldr	r3, [r5, #0]
 80022a4:	b103      	cbz	r3, 80022a8 <_fstat_r+0x1c>
 80022a6:	6023      	str	r3, [r4, #0]
 80022a8:	bd38      	pop	{r3, r4, r5, pc}
 80022aa:	bf00      	nop
 80022ac:	200002b8 	.word	0x200002b8

080022b0 <_isatty_r>:
 80022b0:	b538      	push	{r3, r4, r5, lr}
 80022b2:	4d06      	ldr	r5, [pc, #24]	; (80022cc <_isatty_r+0x1c>)
 80022b4:	2300      	movs	r3, #0
 80022b6:	4604      	mov	r4, r0
 80022b8:	4608      	mov	r0, r1
 80022ba:	602b      	str	r3, [r5, #0]
 80022bc:	f7fe f993 	bl	80005e6 <_isatty>
 80022c0:	1c43      	adds	r3, r0, #1
 80022c2:	d102      	bne.n	80022ca <_isatty_r+0x1a>
 80022c4:	682b      	ldr	r3, [r5, #0]
 80022c6:	b103      	cbz	r3, 80022ca <_isatty_r+0x1a>
 80022c8:	6023      	str	r3, [r4, #0]
 80022ca:	bd38      	pop	{r3, r4, r5, pc}
 80022cc:	200002b8 	.word	0x200002b8

080022d0 <_lseek_r>:
 80022d0:	b538      	push	{r3, r4, r5, lr}
 80022d2:	4d07      	ldr	r5, [pc, #28]	; (80022f0 <_lseek_r+0x20>)
 80022d4:	4604      	mov	r4, r0
 80022d6:	4608      	mov	r0, r1
 80022d8:	4611      	mov	r1, r2
 80022da:	2200      	movs	r2, #0
 80022dc:	602a      	str	r2, [r5, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	f7fe f98b 	bl	80005fa <_lseek>
 80022e4:	1c43      	adds	r3, r0, #1
 80022e6:	d102      	bne.n	80022ee <_lseek_r+0x1e>
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	b103      	cbz	r3, 80022ee <_lseek_r+0x1e>
 80022ec:	6023      	str	r3, [r4, #0]
 80022ee:	bd38      	pop	{r3, r4, r5, pc}
 80022f0:	200002b8 	.word	0x200002b8

080022f4 <__malloc_lock>:
 80022f4:	4801      	ldr	r0, [pc, #4]	; (80022fc <__malloc_lock+0x8>)
 80022f6:	f7ff bb59 	b.w	80019ac <__retarget_lock_acquire_recursive>
 80022fa:	bf00      	nop
 80022fc:	200002b0 	.word	0x200002b0

08002300 <__malloc_unlock>:
 8002300:	4801      	ldr	r0, [pc, #4]	; (8002308 <__malloc_unlock+0x8>)
 8002302:	f7ff bb54 	b.w	80019ae <__retarget_lock_release_recursive>
 8002306:	bf00      	nop
 8002308:	200002b0 	.word	0x200002b0

0800230c <_read_r>:
 800230c:	b538      	push	{r3, r4, r5, lr}
 800230e:	4d07      	ldr	r5, [pc, #28]	; (800232c <_read_r+0x20>)
 8002310:	4604      	mov	r4, r0
 8002312:	4608      	mov	r0, r1
 8002314:	4611      	mov	r1, r2
 8002316:	2200      	movs	r2, #0
 8002318:	602a      	str	r2, [r5, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	f7fe f910 	bl	8000540 <_read>
 8002320:	1c43      	adds	r3, r0, #1
 8002322:	d102      	bne.n	800232a <_read_r+0x1e>
 8002324:	682b      	ldr	r3, [r5, #0]
 8002326:	b103      	cbz	r3, 800232a <_read_r+0x1e>
 8002328:	6023      	str	r3, [r4, #0]
 800232a:	bd38      	pop	{r3, r4, r5, pc}
 800232c:	200002b8 	.word	0x200002b8

08002330 <_init>:
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002332:	bf00      	nop
 8002334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002336:	bc08      	pop	{r3}
 8002338:	469e      	mov	lr, r3
 800233a:	4770      	bx	lr

0800233c <_fini>:
 800233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233e:	bf00      	nop
 8002340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002342:	bc08      	pop	{r3}
 8002344:	469e      	mov	lr, r3
 8002346:	4770      	bx	lr
