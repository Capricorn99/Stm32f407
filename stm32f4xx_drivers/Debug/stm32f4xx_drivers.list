
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008dc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a84  08000a84  00010a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a90  08000a90  00010a98  2**0
                  CONTENTS
  4 .ARM          00000000  08000a90  08000a90  00010a98  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a90  08000a98  00010a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a90  08000a90  00010a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a94  08000a94  00010a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a98  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a98  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010a98  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016fe  00000000  00000000  00010ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000436  00000000  00000000  000121c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000108  00000000  00000000  00012600  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000d0  00000000  00000000  00012708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001fc0  00000000  00000000  000127d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000113e  00000000  00000000  00014798  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008d82  00000000  00000000  000158d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001e658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000033c  00000000  00000000  0001e6d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a6c 	.word	0x08000a6c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000a6c 	.word	0x08000a6c

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI2_GPIOInits>:
 */
#include "stm32f4xx.h"
#include  <string.h>

void SPI2_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <SPI2_GPIOInits+0x34>)
 8000200:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000206:	2305      	movs	r3, #5
 8000208:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_PP;
 800020a:	2300      	movs	r3, #0
 800020c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800020e:	2300      	movs	r3, #0
 8000210:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000216:	230d      	movs	r3, #13
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f959 	bl	80004d4 <GPIO_Init>
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);



}
 8000222:	bf00      	nop
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40020400 	.word	0x40020400

08000230 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <SPI2_Inits+0x38>)
 8000238:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800023a:	2301      	movs	r3, #1
 800023c:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800023e:	2301      	movs	r3, #1
 8000240:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 8000242:	2300      	movs	r3, #0
 8000244:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000246:	2300      	movs	r3, #0
 8000248:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800024a:	2300      	movs	r3, #0
 800024c:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800024e:	2300      	movs	r3, #0
 8000250:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN;
 8000252:	2301      	movs	r3, #1
 8000254:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fb2b 	bl	80008b4 <SPI_Init>
}
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40003800 	.word	0x40003800

0800026c <main>:

int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
	char user_data[] ="Hello word";
 8000272:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <main+0x3c>)
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	ca07      	ldmia	r2, {r0, r1, r2}
 8000278:	c303      	stmia	r3!, {r0, r1}
 800027a:	801a      	strh	r2, [r3, #0]
 800027c:	3302      	adds	r3, #2
 800027e:	0c12      	lsrs	r2, r2, #16
 8000280:	701a      	strb	r2, [r3, #0]
	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000282:	f7ff ffb9 	bl	80001f8 <SPI2_GPIOInits>

	//this function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000286:	f7ff ffd3 	bl	8000230 <SPI2_Inits>

	//enable the SPI2 peropheral
	SPI_PeripheralControl(SPI2, ENABLE);
 800028a:	2101      	movs	r1, #1
 800028c:	4807      	ldr	r0, [pc, #28]	; (80002ac <main+0x40>)
 800028e:	f000 fbac 	bl	80009ea <SPI_PeripheralControl>

	SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f7ff ffa7 	bl	80001e8 <strlen>
 800029a:	4602      	mov	r2, r0
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4619      	mov	r1, r3
 80002a0:	4802      	ldr	r0, [pc, #8]	; (80002ac <main+0x40>)
 80002a2:	f000 fb6f 	bl	8000984 <SPI_SendData>

	while(1);
 80002a6:	e7fe      	b.n	80002a6 <main+0x3a>
 80002a8:	08000a84 	.word	0x08000a84
 80002ac:	40003800 	.word	0x40003800

080002b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480c      	ldr	r0, [pc, #48]	; (80002ec <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490d      	ldr	r1, [pc, #52]	; (80002f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0a      	ldr	r4, [pc, #40]	; (80002fc <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002de:	f000 fba1 	bl	8000a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e2:	f7ff ffc3 	bl	800026c <main>

080002e6 <LoopForever>:

LoopForever:
    b LoopForever
 80002e6:	e7fe      	b.n	80002e6 <LoopForever>
  ldr   r0, =_estack
 80002e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f4:	08000a98 	.word	0x08000a98
  ldr r2, =_sbss
 80002f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002fc:	2000001c 	.word	0x2000001c

08000300 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC_IRQHandler>
	...

08000304 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t*pGPIOx, uint8_t EnorDi)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000310:	78fb      	ldrb	r3, [r7, #3]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d162      	bne.n	80003dc <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a64      	ldr	r2, [pc, #400]	; (80004ac <GPIO_PeriClockControl+0x1a8>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d106      	bne.n	800032c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800031e:	4b64      	ldr	r3, [pc, #400]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000322:	4a63      	ldr	r2, [pc, #396]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800032a:	e0b9      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a61      	ldr	r2, [pc, #388]	; (80004b4 <GPIO_PeriClockControl+0x1b0>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d106      	bne.n	8000342 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000334:	4b5e      	ldr	r3, [pc, #376]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000338:	4a5d      	ldr	r2, [pc, #372]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 800033a:	f043 0302 	orr.w	r3, r3, #2
 800033e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000340:	e0ae      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a5c      	ldr	r2, [pc, #368]	; (80004b8 <GPIO_PeriClockControl+0x1b4>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800034a:	4b59      	ldr	r3, [pc, #356]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	4a58      	ldr	r2, [pc, #352]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000356:	e0a3      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a58      	ldr	r2, [pc, #352]	; (80004bc <GPIO_PeriClockControl+0x1b8>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000360:	4b53      	ldr	r3, [pc, #332]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a52      	ldr	r2, [pc, #328]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036c:	e098      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a53      	ldr	r2, [pc, #332]	; (80004c0 <GPIO_PeriClockControl+0x1bc>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000376:	4b4e      	ldr	r3, [pc, #312]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037a:	4a4d      	ldr	r2, [pc, #308]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 800037c:	f043 0310 	orr.w	r3, r3, #16
 8000380:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000382:	e08d      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a4f      	ldr	r2, [pc, #316]	; (80004c4 <GPIO_PeriClockControl+0x1c0>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800038c:	4b48      	ldr	r3, [pc, #288]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a47      	ldr	r2, [pc, #284]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000398:	e082      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a4a      	ldr	r2, [pc, #296]	; (80004c8 <GPIO_PeriClockControl+0x1c4>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003a2:	4b43      	ldr	r3, [pc, #268]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a6:	4a42      	ldr	r2, [pc, #264]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 80003a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ae:	e077      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a46      	ldr	r2, [pc, #280]	; (80004cc <GPIO_PeriClockControl+0x1c8>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003b8:	4b3d      	ldr	r3, [pc, #244]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003bc:	4a3c      	ldr	r2, [pc, #240]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 80003be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c4:	e06c      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a41      	ldr	r2, [pc, #260]	; (80004d0 <GPIO_PeriClockControl+0x1cc>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d168      	bne.n	80004a0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80003ce:	4b38      	ldr	r3, [pc, #224]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d2:	4a37      	ldr	r2, [pc, #220]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 80003d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003da:	e061      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a33      	ldr	r2, [pc, #204]	; (80004ac <GPIO_PeriClockControl+0x1a8>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80003e4:	4b32      	ldr	r3, [pc, #200]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e8:	4a31      	ldr	r2, [pc, #196]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 80003ea:	f023 0301 	bic.w	r3, r3, #1
 80003ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f0:	e056      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a2f      	ldr	r2, [pc, #188]	; (80004b4 <GPIO_PeriClockControl+0x1b0>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80003fa:	4b2d      	ldr	r3, [pc, #180]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fe:	4a2c      	ldr	r2, [pc, #176]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000400:	f023 0302 	bic.w	r3, r3, #2
 8000404:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000406:	e04b      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a2b      	ldr	r2, [pc, #172]	; (80004b8 <GPIO_PeriClockControl+0x1b4>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000410:	4b27      	ldr	r3, [pc, #156]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000414:	4a26      	ldr	r2, [pc, #152]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000416:	f023 0304 	bic.w	r3, r3, #4
 800041a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041c:	e040      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a26      	ldr	r2, [pc, #152]	; (80004bc <GPIO_PeriClockControl+0x1b8>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d106      	bne.n	8000434 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000426:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	4a21      	ldr	r2, [pc, #132]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 800042c:	f023 0308 	bic.w	r3, r3, #8
 8000430:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000432:	e035      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a22      	ldr	r2, [pc, #136]	; (80004c0 <GPIO_PeriClockControl+0x1bc>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800043c:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000440:	4a1b      	ldr	r2, [pc, #108]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000442:	f023 0310 	bic.w	r3, r3, #16
 8000446:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000448:	e02a      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a1d      	ldr	r2, [pc, #116]	; (80004c4 <GPIO_PeriClockControl+0x1c0>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	4a16      	ldr	r2, [pc, #88]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000458:	f023 0320 	bic.w	r3, r3, #32
 800045c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045e:	e01f      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a19      	ldr	r2, [pc, #100]	; (80004c8 <GPIO_PeriClockControl+0x1c4>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046c:	4a10      	ldr	r2, [pc, #64]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 800046e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000472:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000474:	e014      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a14      	ldr	r2, [pc, #80]	; (80004cc <GPIO_PeriClockControl+0x1c8>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000482:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000488:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048a:	e009      	b.n	80004a0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <GPIO_PeriClockControl+0x1cc>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d105      	bne.n	80004a0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000498:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <GPIO_PeriClockControl+0x1ac>)
 800049a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800049e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	40020000 	.word	0x40020000
 80004b0:	40023800 	.word	0x40023800
 80004b4:	40020400 	.word	0x40020400
 80004b8:	40020800 	.word	0x40020800
 80004bc:	40020c00 	.word	0x40020c00
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40021400 	.word	0x40021400
 80004c8:	40021800 	.word	0x40021800
 80004cc:	40021c00 	.word	0x40021c00
 80004d0:	40022000 	.word	0x40022000

080004d4 <GPIO_Init>:

/*
 * Init & De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2101      	movs	r1, #1
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff0c 	bl	8000304 <GPIO_PeriClockControl>

	//1. configure the mode of gpio
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d81f      	bhi.n	8000534 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	461a      	mov	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	791b      	ldrb	r3, [r3, #4]
 8000510:	4619      	mov	r1, r3
 8000512:	2303      	movs	r3, #3
 8000514:	408b      	lsls	r3, r1
 8000516:	43db      	mvns	r3, r3
 8000518:	4619      	mov	r1, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	400a      	ands	r2, r1
 8000520:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx ->MODER |= temp; //setting
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6819      	ldr	r1, [r3, #0]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	430a      	orrs	r2, r1
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	e0c2      	b.n	80006ba <GPIO_Init+0x1e6>

	}else
	{
		//code later
		if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	795b      	ldrb	r3, [r3, #5]
 8000538:	2b04      	cmp	r3, #4
 800053a:	d817      	bhi.n	800056c <GPIO_Init+0x98>
		{
			//1. configure the FTSR
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 800053c:	4b47      	ldr	r3, [pc, #284]	; (800065c <GPIO_Init+0x188>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	7912      	ldrb	r2, [r2, #4]
 8000544:	4611      	mov	r1, r2
 8000546:	2201      	movs	r2, #1
 8000548:	408a      	lsls	r2, r1
 800054a:	4611      	mov	r1, r2
 800054c:	4a43      	ldr	r2, [pc, #268]	; (800065c <GPIO_Init+0x188>)
 800054e:	430b      	orrs	r3, r1
 8000550:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI ->RTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000552:	4b42      	ldr	r3, [pc, #264]	; (800065c <GPIO_Init+0x188>)
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	7912      	ldrb	r2, [r2, #4]
 800055a:	4611      	mov	r1, r2
 800055c:	2201      	movs	r2, #1
 800055e:	408a      	lsls	r2, r1
 8000560:	43d2      	mvns	r2, r2
 8000562:	4611      	mov	r1, r2
 8000564:	4a3d      	ldr	r2, [pc, #244]	; (800065c <GPIO_Init+0x188>)
 8000566:	400b      	ands	r3, r1
 8000568:	6093      	str	r3, [r2, #8]
 800056a:	e035      	b.n	80005d8 <GPIO_Init+0x104>
		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	2b05      	cmp	r3, #5
 8000572:	d817      	bhi.n	80005a4 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000574:	4b39      	ldr	r3, [pc, #228]	; (800065c <GPIO_Init+0x188>)
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	7912      	ldrb	r2, [r2, #4]
 800057c:	4611      	mov	r1, r2
 800057e:	2201      	movs	r2, #1
 8000580:	408a      	lsls	r2, r1
 8000582:	4611      	mov	r1, r2
 8000584:	4a35      	ldr	r2, [pc, #212]	; (800065c <GPIO_Init+0x188>)
 8000586:	430b      	orrs	r3, r1
 8000588:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 800058a:	4b34      	ldr	r3, [pc, #208]	; (800065c <GPIO_Init+0x188>)
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	7912      	ldrb	r2, [r2, #4]
 8000592:	4611      	mov	r1, r2
 8000594:	2201      	movs	r2, #1
 8000596:	408a      	lsls	r2, r1
 8000598:	43d2      	mvns	r2, r2
 800059a:	4611      	mov	r1, r2
 800059c:	4a2f      	ldr	r2, [pc, #188]	; (800065c <GPIO_Init+0x188>)
 800059e:	400b      	ands	r3, r1
 80005a0:	60d3      	str	r3, [r2, #12]
 80005a2:	e019      	b.n	80005d8 <GPIO_Init+0x104>

		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	2b06      	cmp	r3, #6
 80005aa:	d815      	bhi.n	80005d8 <GPIO_Init+0x104>
		{
			//1. configure the both FTSR and RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 80005ac:	4b2b      	ldr	r3, [pc, #172]	; (800065c <GPIO_Init+0x188>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7912      	ldrb	r2, [r2, #4]
 80005b4:	4611      	mov	r1, r2
 80005b6:	2201      	movs	r2, #1
 80005b8:	408a      	lsls	r2, r1
 80005ba:	4611      	mov	r1, r2
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <GPIO_Init+0x188>)
 80005be:	430b      	orrs	r3, r1
 80005c0:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 80005c2:	4b26      	ldr	r3, [pc, #152]	; (800065c <GPIO_Init+0x188>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	7912      	ldrb	r2, [r2, #4]
 80005ca:	4611      	mov	r1, r2
 80005cc:	2201      	movs	r2, #1
 80005ce:	408a      	lsls	r2, r1
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a22      	ldr	r2, [pc, #136]	; (800065c <GPIO_Init+0x188>)
 80005d4:	430b      	orrs	r3, r1
 80005d6:	60d3      	str	r3, [r2, #12]

		}

		//2. configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	089b      	lsrs	r3, r3, #2
 80005de:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	f003 0303 	and.w	r3, r3, #3
 80005e8:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <GPIO_Init+0x18c>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d045      	beq.n	8000680 <GPIO_Init+0x1ac>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1a      	ldr	r2, [pc, #104]	; (8000664 <GPIO_Init+0x190>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d02b      	beq.n	8000656 <GPIO_Init+0x182>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <GPIO_Init+0x194>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d024      	beq.n	8000652 <GPIO_Init+0x17e>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a17      	ldr	r2, [pc, #92]	; (800066c <GPIO_Init+0x198>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d01d      	beq.n	800064e <GPIO_Init+0x17a>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a16      	ldr	r2, [pc, #88]	; (8000670 <GPIO_Init+0x19c>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d016      	beq.n	800064a <GPIO_Init+0x176>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a14      	ldr	r2, [pc, #80]	; (8000674 <GPIO_Init+0x1a0>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d00f      	beq.n	8000646 <GPIO_Init+0x172>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a13      	ldr	r2, [pc, #76]	; (8000678 <GPIO_Init+0x1a4>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d008      	beq.n	8000642 <GPIO_Init+0x16e>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a11      	ldr	r2, [pc, #68]	; (800067c <GPIO_Init+0x1a8>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d101      	bne.n	800063e <GPIO_Init+0x16a>
 800063a:	2307      	movs	r3, #7
 800063c:	e021      	b.n	8000682 <GPIO_Init+0x1ae>
 800063e:	2300      	movs	r3, #0
 8000640:	e01f      	b.n	8000682 <GPIO_Init+0x1ae>
 8000642:	2306      	movs	r3, #6
 8000644:	e01d      	b.n	8000682 <GPIO_Init+0x1ae>
 8000646:	2305      	movs	r3, #5
 8000648:	e01b      	b.n	8000682 <GPIO_Init+0x1ae>
 800064a:	2304      	movs	r3, #4
 800064c:	e019      	b.n	8000682 <GPIO_Init+0x1ae>
 800064e:	2303      	movs	r3, #3
 8000650:	e017      	b.n	8000682 <GPIO_Init+0x1ae>
 8000652:	2302      	movs	r3, #2
 8000654:	e015      	b.n	8000682 <GPIO_Init+0x1ae>
 8000656:	2301      	movs	r3, #1
 8000658:	e013      	b.n	8000682 <GPIO_Init+0x1ae>
 800065a:	bf00      	nop
 800065c:	40013c00 	.word	0x40013c00
 8000660:	40020000 	.word	0x40020000
 8000664:	40020400 	.word	0x40020400
 8000668:	40020800 	.word	0x40020800
 800066c:	40020c00 	.word	0x40020c00
 8000670:	40021000 	.word	0x40021000
 8000674:	40021400 	.word	0x40021400
 8000678:	40021800 	.word	0x40021800
 800067c:	40021c00 	.word	0x40021c00
 8000680:	2300      	movs	r3, #0
 8000682:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000684:	4b5c      	ldr	r3, [pc, #368]	; (80007f8 <GPIO_Init+0x324>)
 8000686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000688:	4a5b      	ldr	r2, [pc, #364]	; (80007f8 <GPIO_Init+0x324>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]= portcode << (temp2*4);
 8000690:	7c7a      	ldrb	r2, [r7, #17]
 8000692:	7cbb      	ldrb	r3, [r7, #18]
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	fa02 f103 	lsl.w	r1, r2, r3
 800069a:	4a58      	ldr	r2, [pc, #352]	; (80007fc <GPIO_Init+0x328>)
 800069c:	7cfb      	ldrb	r3, [r7, #19]
 800069e:	3302      	adds	r3, #2
 80006a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI ->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006a4:	4b56      	ldr	r3, [pc, #344]	; (8000800 <GPIO_Init+0x32c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	7912      	ldrb	r2, [r2, #4]
 80006ac:	4611      	mov	r1, r2
 80006ae:	2201      	movs	r2, #1
 80006b0:	408a      	lsls	r2, r1
 80006b2:	4611      	mov	r1, r2
 80006b4:	4a52      	ldr	r2, [pc, #328]	; (8000800 <GPIO_Init+0x32c>)
 80006b6:	430b      	orrs	r3, r1
 80006b8:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
	//2. configure the speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	799b      	ldrb	r3, [r3, #6]
 80006c2:	461a      	mov	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	791b      	ldrb	r3, [r3, #4]
 80006da:	4619      	mov	r1, r3
 80006dc:	2303      	movs	r3, #3
 80006de:	408b      	lsls	r3, r1
 80006e0:	43db      	mvns	r3, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	400a      	ands	r2, r1
 80006ea:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OSPEEDR |= temp;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	6899      	ldr	r1, [r3, #8]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	430a      	orrs	r2, r1
 80006fa:	609a      	str	r2, [r3, #8]

	temp =0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
	//3. configure the pu pd settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	79db      	ldrb	r3, [r3, #7]
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	791b      	ldrb	r3, [r3, #4]
 800071c:	4619      	mov	r1, r3
 800071e:	2303      	movs	r3, #3
 8000720:	408b      	lsls	r3, r1
 8000722:	43db      	mvns	r3, r3
 8000724:	4619      	mov	r1, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	400a      	ands	r2, r1
 800072c:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->PUPDR |= temp;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	68d9      	ldr	r1, [r3, #12]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	430a      	orrs	r2, r1
 800073c:	60da      	str	r2, [r3, #12]

	temp =0;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]

	//4. configure
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinoType << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	7a1b      	ldrb	r3, [r3, #8]
 8000746:	461a      	mov	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x01 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	4619      	mov	r1, r3
 800075e:	2301      	movs	r3, #1
 8000760:	408b      	lsls	r3, r1
 8000762:	43db      	mvns	r3, r3
 8000764:	4619      	mov	r1, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	400a      	ands	r2, r1
 800076c:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OTYPER |= temp;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	6859      	ldr	r1, [r3, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	697a      	ldr	r2, [r7, #20]
 800077a:	430a      	orrs	r2, r1
 800077c:	605a      	str	r2, [r3, #4]

	temp =0;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]

	//5. configure
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	795b      	ldrb	r3, [r3, #5]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d132      	bne.n	80007f0 <GPIO_Init+0x31c>
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	08db      	lsrs	r3, r3, #3
 8000790:	b2db      	uxtb	r3, r3
 8000792:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	3208      	adds	r2, #8
 80007a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	210f      	movs	r1, #15
 80007b0:	fa01 f303 	lsl.w	r3, r1, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	4619      	mov	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4011      	ands	r1, r2
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	3208      	adds	r2, #8
 80007c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	3208      	adds	r2, #8
 80007ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7a5b      	ldrb	r3, [r3, #9]
 80007d6:	4619      	mov	r1, r3
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	fa01 f303 	lsl.w	r3, r1, r3
 80007e0:	4619      	mov	r1, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4311      	orrs	r1, r2
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	3208      	adds	r2, #8
 80007ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40013800 	.word	0x40013800
 8000800:	40013c00 	.word	0x40013c00

08000804 <SPI_PeriClockControl>:
 *
 */
#include "stm32f4xx_spi_driver.h"

void SPI_PeriClockControl(SPI_RegDef_t*pSPIx, uint8_t EnorDi)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d120      	bne.n	8000858 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <SPI_PeriClockControl+0xa0>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d106      	bne.n	800082c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <SPI_PeriClockControl+0xa4>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <SPI_PeriClockControl+0xa4>)
 8000824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000828:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI3_PCLK_DI();
		}
	}

}
 800082a:	e035      	b.n	8000898 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a1f      	ldr	r2, [pc, #124]	; (80008ac <SPI_PeriClockControl+0xa8>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d106      	bne.n	8000842 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <SPI_PeriClockControl+0xa4>)
 8000836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000838:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <SPI_PeriClockControl+0xa4>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000840:	e02a      	b.n	8000898 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a1a      	ldr	r2, [pc, #104]	; (80008b0 <SPI_PeriClockControl+0xac>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d126      	bne.n	8000898 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <SPI_PeriClockControl+0xa4>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <SPI_PeriClockControl+0xa4>)
 8000850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000854:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000856:	e01f      	b.n	8000898 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <SPI_PeriClockControl+0xa0>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d106      	bne.n	800086e <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <SPI_PeriClockControl+0xa4>)
 8000862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000864:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <SPI_PeriClockControl+0xa4>)
 8000866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800086a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800086c:	e014      	b.n	8000898 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <SPI_PeriClockControl+0xa8>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d106      	bne.n	8000884 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <SPI_PeriClockControl+0xa4>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <SPI_PeriClockControl+0xa4>)
 800087c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000882:	e009      	b.n	8000898 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <SPI_PeriClockControl+0xac>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d105      	bne.n	8000898 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <SPI_PeriClockControl+0xa4>)
 800088e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000890:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <SPI_PeriClockControl+0xa4>)
 8000892:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000896:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	40013000 	.word	0x40013000
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40003800 	.word	0x40003800
 80008b0:	40003c00 	.word	0x40003c00

080008b4 <SPI_Init>:
/************************
 *
 */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2101      	movs	r1, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff9e 	bl	8000804 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	461a      	mov	r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	795b      	ldrb	r3, [r3, #5]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d104      	bne.n	80008ec <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &=~ (1<<15);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	e014      	b.n	8000916 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	795b      	ldrb	r3, [r3, #5]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d104      	bne.n	80008fe <SPI_Init+0x4a>
	{
		//BIDI mode should be set
		tempreg |= ~ (1<<15);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	e00b      	b.n	8000916 <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	795b      	ldrb	r3, [r3, #5]
 8000902:	2b03      	cmp	r3, #3
 8000904:	d107      	bne.n	8000916 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~ (1<<15);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800090c:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1<<10);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000914:	60fb      	str	r3, [r7, #12]
	}
	//3. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	799b      	ldrb	r3, [r3, #6]
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	461a      	mov	r2, r3
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	4313      	orrs	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
	//4. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	79db      	ldrb	r3, [r3, #7]
 8000928:	02db      	lsls	r3, r3, #11
 800092a:	461a      	mov	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4313      	orrs	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]
	//5. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	7a1b      	ldrb	r3, [r3, #8]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	461a      	mov	r2, r3
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4313      	orrs	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
	//6. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << 0;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7a5b      	ldrb	r3, [r3, #9]
 8000944:	461a      	mov	r2, r3
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	4313      	orrs	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 =tempreg;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	601a      	str	r2, [r3, #0]

}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <SPI_GetFlagStatus>:
/*************************
 *
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	689a      	ldr	r2, [r3, #8]
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	4013      	ands	r3, r2
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000972:	2301      	movs	r3, #1
 8000974:	e000      	b.n	8000978 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000976:	2300      	movs	r3, #0

}
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <SPI_SendData>:
/**************************
 *
 */

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	while(Len >0)
 8000990:	e024      	b.n	80009dc <SPI_SendData+0x58>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000992:	bf00      	nop
 8000994:	2102      	movs	r1, #2
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f7ff ffe0 	bl	800095c <SPI_GetFlagStatus>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d0f8      	beq.n	8000994 <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if (pSPIx->CR1 & (1<<SPI_CR1_DFF))
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d00e      	beq.n	80009cc <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	60da      	str	r2, [r3, #12]
			Len--;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	607b      	str	r3, [r7, #4]
			Len--;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3b01      	subs	r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	3301      	adds	r3, #1
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	e007      	b.n	80009dc <SPI_SendData+0x58>
		}else
		{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	60da      	str	r2, [r3, #12]
			Len--;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3b01      	subs	r3, #1
 80009da:	607b      	str	r3, [r7, #4]
	while(Len >0)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1d7      	bne.n	8000992 <SPI_SendData+0xe>
		}
	}
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <SPI_PeripheralControl>:
/**************************
 *
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	460b      	mov	r3, r1
 80009f4:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009f6:	78fb      	ldrb	r3, [r7, #3]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d106      	bne.n	8000a0a <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 8000a08:	e005      	b.n	8000a16 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	601a      	str	r2, [r3, #0]
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <__libc_init_array>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	4e0d      	ldr	r6, [pc, #52]	; (8000a5c <__libc_init_array+0x38>)
 8000a28:	4c0d      	ldr	r4, [pc, #52]	; (8000a60 <__libc_init_array+0x3c>)
 8000a2a:	1ba4      	subs	r4, r4, r6
 8000a2c:	10a4      	asrs	r4, r4, #2
 8000a2e:	2500      	movs	r5, #0
 8000a30:	42a5      	cmp	r5, r4
 8000a32:	d109      	bne.n	8000a48 <__libc_init_array+0x24>
 8000a34:	4e0b      	ldr	r6, [pc, #44]	; (8000a64 <__libc_init_array+0x40>)
 8000a36:	4c0c      	ldr	r4, [pc, #48]	; (8000a68 <__libc_init_array+0x44>)
 8000a38:	f000 f818 	bl	8000a6c <_init>
 8000a3c:	1ba4      	subs	r4, r4, r6
 8000a3e:	10a4      	asrs	r4, r4, #2
 8000a40:	2500      	movs	r5, #0
 8000a42:	42a5      	cmp	r5, r4
 8000a44:	d105      	bne.n	8000a52 <__libc_init_array+0x2e>
 8000a46:	bd70      	pop	{r4, r5, r6, pc}
 8000a48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a4c:	4798      	blx	r3
 8000a4e:	3501      	adds	r5, #1
 8000a50:	e7ee      	b.n	8000a30 <__libc_init_array+0xc>
 8000a52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a56:	4798      	blx	r3
 8000a58:	3501      	adds	r5, #1
 8000a5a:	e7f2      	b.n	8000a42 <__libc_init_array+0x1e>
 8000a5c:	08000a90 	.word	0x08000a90
 8000a60:	08000a90 	.word	0x08000a90
 8000a64:	08000a90 	.word	0x08000a90
 8000a68:	08000a94 	.word	0x08000a94

08000a6c <_init>:
 8000a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6e:	bf00      	nop
 8000a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a72:	bc08      	pop	{r3}
 8000a74:	469e      	mov	lr, r3
 8000a76:	4770      	bx	lr

08000a78 <_fini>:
 8000a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7a:	bf00      	nop
 8000a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7e:	bc08      	pop	{r3}
 8000a80:	469e      	mov	lr, r3
 8000a82:	4770      	bx	lr
