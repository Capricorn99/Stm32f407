
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002324  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080024d4  080024d4  000124d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800265c  0800265c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800265c  0800265c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800265c  0800265c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800265c  0800265c  0001265c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002660  08002660  00012660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  080026d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080026d4  00020148  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001934  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004cb  00000000  00000000  000219ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000138  00000000  00000000  00021ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000100  00000000  00000000  00021fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002593  00000000  00000000  000220d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001345  00000000  00000000  0002466b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a0ef  00000000  00000000  000259b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002fa9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f18  00000000  00000000  0002fb1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080024bc 	.word	0x080024bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080024bc 	.word	0x080024bc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <delay>:
//arduino led

#define LED_PIN  9

void delay(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e002      	b.n	80002b2 <delay+0x12>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a03      	ldr	r2, [pc, #12]	; (80002c4 <delay+0x24>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d9f8      	bls.n	80002ac <delay+0xc>
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	0003d08f 	.word	0x0003d08f

080002c8 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <SPI2_GPIOInits+0x58>)
 80002d0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALFN;
 80002d2:	2302      	movs	r3, #2
 80002d4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002d6:	2305      	movs	r3, #5
 80002d8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinoType= GPIO_OP_TYPE_PP;
 80002da:	2300      	movs	r3, #0
 80002dc:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002de:	2300      	movs	r3, #0
 80002e0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002e2:	2302      	movs	r3, #2
 80002e4:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002e6:	230d      	movs	r3, #13
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fb8b 	bl	8000a08 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002f2:	230f      	movs	r3, #15
 80002f4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fb85 	bl	8000a08 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002fe:	230e      	movs	r3, #14
 8000300:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fb7f 	bl	8000a08 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800030a:	230c      	movs	r3, #12
 800030c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f000 fb79 	bl	8000a08 <GPIO_Init>


}
 8000316:	bf00      	nop
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40020400 	.word	0x40020400

08000324 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <SPI2_Inits+0x34>)
 800032c:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800032e:	2301      	movs	r3, #1
 8000330:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000332:	2301      	movs	r3, #1
 8000334:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000336:	2304      	movs	r3, #4
 8000338:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800033a:	2300      	movs	r3, #0
 800033c:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800033e:	2300      	movs	r3, #0
 8000340:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 8000342:	2300      	movs	r3, #0
 8000344:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fd7e 	bl	8000e4a <SPI_Init>
}
 800034e:	bf00      	nop
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40003800 	.word	0x40003800

0800035c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000362:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <GPIO_ButtonInit+0x54>)
 8000364:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000366:	2300      	movs	r3, #0
 8000368:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800036a:	2300      	movs	r3, #0
 800036c:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800036e:	2302      	movs	r3, #2
 8000370:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000372:	2300      	movs	r3, #0
 8000374:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 8000376:	f107 030c 	add.w	r3, r7, #12
 800037a:	4618      	mov	r0, r3
 800037c:	f000 fb44 	bl	8000a08 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <GPIO_ButtonInit+0x58>)
 8000382:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000384:	230c      	movs	r3, #12
 8000386:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000388:	2301      	movs	r3, #1
 800038a:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800038c:	2302      	movs	r3, #2
 800038e:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinoType = GPIO_OP_TYPE_OD;
 8000390:	2301      	movs	r3, #1
 8000392:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000394:	2300      	movs	r3, #0
 8000396:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 8000398:	2101      	movs	r1, #1
 800039a:	4806      	ldr	r0, [pc, #24]	; (80003b4 <GPIO_ButtonInit+0x58>)
 800039c:	f000 fa4c 	bl	8000838 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 80003a0:	463b      	mov	r3, r7
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 fb30 	bl	8000a08 <GPIO_Init>

}
 80003a8:	bf00      	nop
 80003aa:	3718      	adds	r7, #24
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40020000 	.word	0x40020000
 80003b4:	40020c00 	.word	0x40020c00

080003b8 <SPI_VerifyResponse>:


uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]

	if(ackbyte == (uint8_t)0xF5)
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	2bf5      	cmp	r3, #245	; 0xf5
 80003c6:	d101      	bne.n	80003cc <SPI_VerifyResponse+0x14>
	{
		//ack
		return 1;
 80003c8:	2301      	movs	r3, #1
 80003ca:	e000      	b.n	80003ce <SPI_VerifyResponse+0x16>
	}

	return 0;
 80003cc:	2300      	movs	r3, #0
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <main>:

int main(void)
{
 80003d8:	b5b0      	push	{r4, r5, r7, lr}
 80003da:	b08e      	sub	sp, #56	; 0x38
 80003dc:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 80003de:	f001 ffed 	bl	80023bc <initialise_monitor_handles>

	uint8_t dummy_write = 0xff;
 80003e2:	23ff      	movs	r3, #255	; 0xff
 80003e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t dummy_read;

	printf("Application is running\n");
 80003e8:	48b2      	ldr	r0, [pc, #712]	; (80006b4 <main+0x2dc>)
 80003ea:	f000 fec3 	bl	8001174 <puts>

	GPIO_ButtonInit();
 80003ee:	f7ff ffb5 	bl	800035c <GPIO_ButtonInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80003f2:	f7ff ff69 	bl	80002c8 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80003f6:	f7ff ff95 	bl	8000324 <SPI2_Inits>

	printf("SPI Init. done\n");
 80003fa:	48af      	ldr	r0, [pc, #700]	; (80006b8 <main+0x2e0>)
 80003fc:	f000 feba 	bl	8001174 <puts>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000400:	2101      	movs	r1, #1
 8000402:	48ae      	ldr	r0, [pc, #696]	; (80006bc <main+0x2e4>)
 8000404:	f000 fd06 	bl	8000e14 <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000408:	bf00      	nop
 800040a:	2100      	movs	r1, #0
 800040c:	48ac      	ldr	r0, [pc, #688]	; (80006c0 <main+0x2e8>)
 800040e:	f000 fc93 	bl	8000d38 <GPIO_ReadFromInputPin>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f8      	beq.n	800040a <main+0x32>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000418:	f7ff ff42 	bl	80002a0 <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 800041c:	2101      	movs	r1, #1
 800041e:	48a7      	ldr	r0, [pc, #668]	; (80006bc <main+0x2e4>)
 8000420:	f000 fded 	bl	8000ffe <SPI_PeripheralControl>

	    //1. CMD_LED_CTRL  	<pin no(1)>     <value(1)>

		uint8_t commandcode = COMMAND_LED_CTRL;
 8000424:	2350      	movs	r3, #80	; 0x50
 8000426:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		uint8_t ackbyte;
		uint8_t args[2];

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 800042a:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800042e:	2201      	movs	r2, #1
 8000430:	4619      	mov	r1, r3
 8000432:	48a2      	ldr	r0, [pc, #648]	; (80006bc <main+0x2e4>)
 8000434:	f000 fd77 	bl	8000f26 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000438:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800043c:	2201      	movs	r2, #1
 800043e:	4619      	mov	r1, r3
 8000440:	489e      	ldr	r0, [pc, #632]	; (80006bc <main+0x2e4>)
 8000442:	f000 fda6 	bl	8000f92 <SPI_ReceiveData>


		//Send some dummy bits (1 byte) fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000446:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800044a:	2201      	movs	r2, #1
 800044c:	4619      	mov	r1, r3
 800044e:	489b      	ldr	r0, [pc, #620]	; (80006bc <main+0x2e4>)
 8000450:	f000 fd69 	bl	8000f26 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000458:	2201      	movs	r2, #1
 800045a:	4619      	mov	r1, r3
 800045c:	4897      	ldr	r0, [pc, #604]	; (80006bc <main+0x2e4>)
 800045e:	f000 fd98 	bl	8000f92 <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 8000462:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ffa6 	bl	80003b8 <SPI_VerifyResponse>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d016      	beq.n	80004a0 <main+0xc8>
		{
			args[0] = LED_PIN;
 8000472:	2309      	movs	r3, #9
 8000474:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			args[1] = LED_ON;
 8000478:	2301      	movs	r3, #1
 800047a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			//send arguments
			SPI_SendData(SPI2,args,2);
 800047e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000482:	2202      	movs	r2, #2
 8000484:	4619      	mov	r1, r3
 8000486:	488d      	ldr	r0, [pc, #564]	; (80006bc <main+0x2e4>)
 8000488:	f000 fd4d 	bl	8000f26 <SPI_SendData>
			// dummy read
			SPI_ReceiveData(SPI2,args,2);
 800048c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000490:	2202      	movs	r2, #2
 8000492:	4619      	mov	r1, r3
 8000494:	4889      	ldr	r0, [pc, #548]	; (80006bc <main+0x2e4>)
 8000496:	f000 fd7c 	bl	8000f92 <SPI_ReceiveData>
			printf("COMMAND_LED_CTRL Executed\n");
 800049a:	488a      	ldr	r0, [pc, #552]	; (80006c4 <main+0x2ec>)
 800049c:	f000 fe6a 	bl	8001174 <puts>


		//2. CMD_SENOSR_READ   <analog pin number(1) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80004a0:	bf00      	nop
 80004a2:	2100      	movs	r1, #0
 80004a4:	4886      	ldr	r0, [pc, #536]	; (80006c0 <main+0x2e8>)
 80004a6:	f000 fc47 	bl	8000d38 <GPIO_ReadFromInputPin>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0f8      	beq.n	80004a2 <main+0xca>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80004b0:	f7ff fef6 	bl	80002a0 <delay>

		commandcode = COMMAND_SENSOR_READ;
 80004b4:	2351      	movs	r3, #81	; 0x51
 80004b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 80004ba:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80004be:	2201      	movs	r2, #1
 80004c0:	4619      	mov	r1, r3
 80004c2:	487e      	ldr	r0, [pc, #504]	; (80006bc <main+0x2e4>)
 80004c4:	f000 fd2f 	bl	8000f26 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 80004c8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80004cc:	2201      	movs	r2, #1
 80004ce:	4619      	mov	r1, r3
 80004d0:	487a      	ldr	r0, [pc, #488]	; (80006bc <main+0x2e4>)
 80004d2:	f000 fd5e 	bl	8000f92 <SPI_ReceiveData>

		//insert some delay so that slave can ready with the data
		delay();
 80004d6:	f7ff fee3 	bl	80002a0 <delay>


		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 80004da:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80004de:	2201      	movs	r2, #1
 80004e0:	4619      	mov	r1, r3
 80004e2:	4876      	ldr	r0, [pc, #472]	; (80006bc <main+0x2e4>)
 80004e4:	f000 fd1f 	bl	8000f26 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 80004e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004ec:	2201      	movs	r2, #1
 80004ee:	4619      	mov	r1, r3
 80004f0:	4872      	ldr	r0, [pc, #456]	; (80006bc <main+0x2e4>)
 80004f2:	f000 fd4e 	bl	8000f92 <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 80004f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff5c 	bl	80003b8 <SPI_VerifyResponse>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d024      	beq.n	8000550 <main+0x178>
		{
			args[0] = ANALOG_PIN0;
 8000506:	2300      	movs	r3, #0
 8000508:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending one byte of
 800050c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000510:	2201      	movs	r2, #1
 8000512:	4619      	mov	r1, r3
 8000514:	4869      	ldr	r0, [pc, #420]	; (80006bc <main+0x2e4>)
 8000516:	f000 fd06 	bl	8000f26 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 800051a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800051e:	2201      	movs	r2, #1
 8000520:	4619      	mov	r1, r3
 8000522:	4866      	ldr	r0, [pc, #408]	; (80006bc <main+0x2e4>)
 8000524:	f000 fd35 	bl	8000f92 <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 8000528:	f7ff feba 	bl	80002a0 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 800052c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000530:	2201      	movs	r2, #1
 8000532:	4619      	mov	r1, r3
 8000534:	4861      	ldr	r0, [pc, #388]	; (80006bc <main+0x2e4>)
 8000536:	f000 fcf6 	bl	8000f26 <SPI_SendData>

			uint8_t analog_read;
			SPI_ReceiveData(SPI2,&analog_read,1);
 800053a:	1cfb      	adds	r3, r7, #3
 800053c:	2201      	movs	r2, #1
 800053e:	4619      	mov	r1, r3
 8000540:	485e      	ldr	r0, [pc, #376]	; (80006bc <main+0x2e4>)
 8000542:	f000 fd26 	bl	8000f92 <SPI_ReceiveData>
			printf("COMMAND_SENSOR_READ %d\n",analog_read);
 8000546:	78fb      	ldrb	r3, [r7, #3]
 8000548:	4619      	mov	r1, r3
 800054a:	485f      	ldr	r0, [pc, #380]	; (80006c8 <main+0x2f0>)
 800054c:	f000 fd9e 	bl	800108c <iprintf>
		}

		//3.  CMD_LED_READ 	 <pin no(1) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000550:	bf00      	nop
 8000552:	2100      	movs	r1, #0
 8000554:	485a      	ldr	r0, [pc, #360]	; (80006c0 <main+0x2e8>)
 8000556:	f000 fbef 	bl	8000d38 <GPIO_ReadFromInputPin>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0f8      	beq.n	8000552 <main+0x17a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000560:	f7ff fe9e 	bl	80002a0 <delay>

		commandcode = COMMAND_LED_READ;
 8000564:	2352      	movs	r3, #82	; 0x52
 8000566:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 800056a:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	4852      	ldr	r0, [pc, #328]	; (80006bc <main+0x2e4>)
 8000574:	f000 fcd7 	bl	8000f26 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000578:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800057c:	2201      	movs	r2, #1
 800057e:	4619      	mov	r1, r3
 8000580:	484e      	ldr	r0, [pc, #312]	; (80006bc <main+0x2e4>)
 8000582:	f000 fd06 	bl	8000f92 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000586:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800058a:	2201      	movs	r2, #1
 800058c:	4619      	mov	r1, r3
 800058e:	484b      	ldr	r0, [pc, #300]	; (80006bc <main+0x2e4>)
 8000590:	f000 fcc9 	bl	8000f26 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000594:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000598:	2201      	movs	r2, #1
 800059a:	4619      	mov	r1, r3
 800059c:	4847      	ldr	r0, [pc, #284]	; (80006bc <main+0x2e4>)
 800059e:	f000 fcf8 	bl	8000f92 <SPI_ReceiveData>

		if( SPI_VerifyResponse(ackbyte))
 80005a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ff06 	bl	80003b8 <SPI_VerifyResponse>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d024      	beq.n	80005fc <main+0x224>
		{
			args[0] = LED_PIN;
 80005b2:	2309      	movs	r3, #9
 80005b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending one byte of
 80005b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005bc:	2201      	movs	r2, #1
 80005be:	4619      	mov	r1, r3
 80005c0:	483e      	ldr	r0, [pc, #248]	; (80006bc <main+0x2e4>)
 80005c2:	f000 fcb0 	bl	8000f26 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 80005c6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80005ca:	2201      	movs	r2, #1
 80005cc:	4619      	mov	r1, r3
 80005ce:	483b      	ldr	r0, [pc, #236]	; (80006bc <main+0x2e4>)
 80005d0:	f000 fcdf 	bl	8000f92 <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 80005d4:	f7ff fe64 	bl	80002a0 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 80005d8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	4836      	ldr	r0, [pc, #216]	; (80006bc <main+0x2e4>)
 80005e2:	f000 fca0 	bl	8000f26 <SPI_SendData>

			uint8_t led_status;
			SPI_ReceiveData(SPI2,&led_status,1);
 80005e6:	1cbb      	adds	r3, r7, #2
 80005e8:	2201      	movs	r2, #1
 80005ea:	4619      	mov	r1, r3
 80005ec:	4833      	ldr	r0, [pc, #204]	; (80006bc <main+0x2e4>)
 80005ee:	f000 fcd0 	bl	8000f92 <SPI_ReceiveData>
			printf("COMMAND_READ_LED %d\n",led_status);
 80005f2:	78bb      	ldrb	r3, [r7, #2]
 80005f4:	4619      	mov	r1, r3
 80005f6:	4835      	ldr	r0, [pc, #212]	; (80006cc <main+0x2f4>)
 80005f8:	f000 fd48 	bl	800108c <iprintf>
		}

		//4. CMD_PRINT 		<len(2)>  <message(len) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80005fc:	bf00      	nop
 80005fe:	2100      	movs	r1, #0
 8000600:	482f      	ldr	r0, [pc, #188]	; (80006c0 <main+0x2e8>)
 8000602:	f000 fb99 	bl	8000d38 <GPIO_ReadFromInputPin>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0f8      	beq.n	80005fe <main+0x226>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800060c:	f7ff fe48 	bl	80002a0 <delay>

		commandcode = COMMAND_PRINT;
 8000610:	2353      	movs	r3, #83	; 0x53
 8000612:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000616:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800061a:	2201      	movs	r2, #1
 800061c:	4619      	mov	r1, r3
 800061e:	4827      	ldr	r0, [pc, #156]	; (80006bc <main+0x2e4>)
 8000620:	f000 fc81 	bl	8000f26 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000624:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000628:	2201      	movs	r2, #1
 800062a:	4619      	mov	r1, r3
 800062c:	4823      	ldr	r0, [pc, #140]	; (80006bc <main+0x2e4>)
 800062e:	f000 fcb0 	bl	8000f92 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000632:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000636:	2201      	movs	r2, #1
 8000638:	4619      	mov	r1, r3
 800063a:	4820      	ldr	r0, [pc, #128]	; (80006bc <main+0x2e4>)
 800063c:	f000 fc73 	bl	8000f26 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000644:	2201      	movs	r2, #1
 8000646:	4619      	mov	r1, r3
 8000648:	481c      	ldr	r0, [pc, #112]	; (80006bc <main+0x2e4>)
 800064a:	f000 fca2 	bl	8000f92 <SPI_ReceiveData>

		uint8_t message[] = "Hello ! How are you ??";
 800064e:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <main+0x2f8>)
 8000650:	f107 0410 	add.w	r4, r7, #16
 8000654:	461d      	mov	r5, r3
 8000656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800065e:	6020      	str	r0, [r4, #0]
 8000660:	3404      	adds	r4, #4
 8000662:	8021      	strh	r1, [r4, #0]
 8000664:	3402      	adds	r4, #2
 8000666:	0c0b      	lsrs	r3, r1, #16
 8000668:	7023      	strb	r3, [r4, #0]
		if( SPI_VerifyResponse(ackbyte))
 800066a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fea2 	bl	80003b8 <SPI_VerifyResponse>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d048      	beq.n	800070c <main+0x334>
		{
			args[0] = strlen((char*)message);
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fdb6 	bl	80001f0 <strlen>
 8000684:	4603      	mov	r3, r0
 8000686:	b2db      	uxtb	r3, r3
 8000688:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending length
 800068c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <main+0x2e4>)
 8000696:	f000 fc46 	bl	8000f26 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 800069a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800069e:	2201      	movs	r2, #1
 80006a0:	4619      	mov	r1, r3
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <main+0x2e4>)
 80006a4:	f000 fc75 	bl	8000f92 <SPI_ReceiveData>

			delay();
 80006a8:	f7ff fdfa 	bl	80002a0 <delay>

			//send message
			for(int i = 0 ; i < args[0] ; i++){
 80006ac:	2300      	movs	r3, #0
 80006ae:	637b      	str	r3, [r7, #52]	; 0x34
 80006b0:	e023      	b.n	80006fa <main+0x322>
 80006b2:	bf00      	nop
 80006b4:	080024d4 	.word	0x080024d4
 80006b8:	080024ec 	.word	0x080024ec
 80006bc:	40003800 	.word	0x40003800
 80006c0:	40020000 	.word	0x40020000
 80006c4:	080024fc 	.word	0x080024fc
 80006c8:	08002518 	.word	0x08002518
 80006cc:	08002530 	.word	0x08002530
 80006d0:	08002590 	.word	0x08002590
				SPI_SendData(SPI2,&message[i],1);
 80006d4:	f107 0210 	add.w	r2, r7, #16
 80006d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006da:	4413      	add	r3, r2
 80006dc:	2201      	movs	r2, #1
 80006de:	4619      	mov	r1, r3
 80006e0:	483b      	ldr	r0, [pc, #236]	; (80007d0 <main+0x3f8>)
 80006e2:	f000 fc20 	bl	8000f26 <SPI_SendData>
				SPI_ReceiveData(SPI2,&dummy_read,1);
 80006e6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80006ea:	2201      	movs	r2, #1
 80006ec:	4619      	mov	r1, r3
 80006ee:	4838      	ldr	r0, [pc, #224]	; (80007d0 <main+0x3f8>)
 80006f0:	f000 fc4f 	bl	8000f92 <SPI_ReceiveData>
			for(int i = 0 ; i < args[0] ; i++){
 80006f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f6:	3301      	adds	r3, #1
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
 80006fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006fe:	461a      	mov	r2, r3
 8000700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000702:	4293      	cmp	r3, r2
 8000704:	dbe6      	blt.n	80006d4 <main+0x2fc>
			}

			printf("COMMAND_PRINT Executed \n");
 8000706:	4833      	ldr	r0, [pc, #204]	; (80007d4 <main+0x3fc>)
 8000708:	f000 fd34 	bl	8001174 <puts>

		}

		//5. CMD_ID_READ
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800070c:	bf00      	nop
 800070e:	2100      	movs	r1, #0
 8000710:	4831      	ldr	r0, [pc, #196]	; (80007d8 <main+0x400>)
 8000712:	f000 fb11 	bl	8000d38 <GPIO_ReadFromInputPin>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0f8      	beq.n	800070e <main+0x336>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800071c:	f7ff fdc0 	bl	80002a0 <delay>

		commandcode = COMMAND_ID_READ;
 8000720:	2354      	movs	r3, #84	; 0x54
 8000722:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 8000726:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800072a:	2201      	movs	r2, #1
 800072c:	4619      	mov	r1, r3
 800072e:	4828      	ldr	r0, [pc, #160]	; (80007d0 <main+0x3f8>)
 8000730:	f000 fbf9 	bl	8000f26 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000734:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000738:	2201      	movs	r2, #1
 800073a:	4619      	mov	r1, r3
 800073c:	4824      	ldr	r0, [pc, #144]	; (80007d0 <main+0x3f8>)
 800073e:	f000 fc28 	bl	8000f92 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000742:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000746:	2201      	movs	r2, #1
 8000748:	4619      	mov	r1, r3
 800074a:	4821      	ldr	r0, [pc, #132]	; (80007d0 <main+0x3f8>)
 800074c:	f000 fbeb 	bl	8000f26 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000754:	2201      	movs	r2, #1
 8000756:	4619      	mov	r1, r3
 8000758:	481d      	ldr	r0, [pc, #116]	; (80007d0 <main+0x3f8>)
 800075a:	f000 fc1a 	bl	8000f92 <SPI_ReceiveData>

		uint8_t id[11];
		uint32_t i=0;
 800075e:	2300      	movs	r3, #0
 8000760:	633b      	str	r3, [r7, #48]	; 0x30
		if( SPI_VerifyResponse(ackbyte))
 8000762:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fe26 	bl	80003b8 <SPI_VerifyResponse>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d01e      	beq.n	80007b0 <main+0x3d8>
		{
			//read 10 bytes id from the slave
			for(  i = 0 ; i < 10 ; i++)
 8000772:	2300      	movs	r3, #0
 8000774:	633b      	str	r3, [r7, #48]	; 0x30
 8000776:	e011      	b.n	800079c <main+0x3c4>
			{
				//send dummy byte to fetch data from slave
				SPI_SendData(SPI2,&dummy_write,1);
 8000778:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	4813      	ldr	r0, [pc, #76]	; (80007d0 <main+0x3f8>)
 8000782:	f000 fbd0 	bl	8000f26 <SPI_SendData>
				SPI_ReceiveData(SPI2,&id[i],1);
 8000786:	1d3a      	adds	r2, r7, #4
 8000788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800078a:	4413      	add	r3, r2
 800078c:	2201      	movs	r2, #1
 800078e:	4619      	mov	r1, r3
 8000790:	480f      	ldr	r0, [pc, #60]	; (80007d0 <main+0x3f8>)
 8000792:	f000 fbfe 	bl	8000f92 <SPI_ReceiveData>
			for(  i = 0 ; i < 10 ; i++)
 8000796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000798:	3301      	adds	r3, #1
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
 800079c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800079e:	2b09      	cmp	r3, #9
 80007a0:	d9ea      	bls.n	8000778 <main+0x3a0>
			}

			id[10] = '\0';
 80007a2:	2300      	movs	r3, #0
 80007a4:	73bb      	strb	r3, [r7, #14]

			printf("COMMAND_ID : %s \n",id);
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	480c      	ldr	r0, [pc, #48]	; (80007dc <main+0x404>)
 80007ac:	f000 fc6e 	bl	800108c <iprintf>

		}

		//lets confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 80007b0:	bf00      	nop
 80007b2:	2180      	movs	r1, #128	; 0x80
 80007b4:	4806      	ldr	r0, [pc, #24]	; (80007d0 <main+0x3f8>)
 80007b6:	f000 fba3 	bl	8000f00 <SPI_GetFlagStatus>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1f8      	bne.n	80007b2 <main+0x3da>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 80007c0:	2100      	movs	r1, #0
 80007c2:	4803      	ldr	r0, [pc, #12]	; (80007d0 <main+0x3f8>)
 80007c4:	f000 fc1b 	bl	8000ffe <SPI_PeripheralControl>

		printf("SPI Communication Closed\n");
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <main+0x408>)
 80007ca:	f000 fcd3 	bl	8001174 <puts>
	{
 80007ce:	e61b      	b.n	8000408 <main+0x30>
 80007d0:	40003800 	.word	0x40003800
 80007d4:	08002548 	.word	0x08002548
 80007d8:	40020000 	.word	0x40020000
 80007dc:	08002560 	.word	0x08002560
 80007e0:	08002574 	.word	0x08002574

080007e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007e6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ee:	490d      	ldr	r1, [pc, #52]	; (8000824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <LoopForever+0xe>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000804:	4c0a      	ldr	r4, [pc, #40]	; (8000830 <LoopForever+0x16>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000812:	f000 fc0f 	bl	8001034 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000816:	f7ff fddf 	bl	80003d8 <main>

0800081a <LoopForever>:

LoopForever:
    b LoopForever
 800081a:	e7fe      	b.n	800081a <LoopForever>
  ldr   r0, =_estack
 800081c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000828:	08002664 	.word	0x08002664
  ldr r2, =_sbss
 800082c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000830:	20000148 	.word	0x20000148

08000834 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC_IRQHandler>
	...

08000838 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t*pGPIOx, uint8_t EnorDi)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000844:	78fb      	ldrb	r3, [r7, #3]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d162      	bne.n	8000910 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a64      	ldr	r2, [pc, #400]	; (80009e0 <GPIO_PeriClockControl+0x1a8>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d106      	bne.n	8000860 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000852:	4b64      	ldr	r3, [pc, #400]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a63      	ldr	r2, [pc, #396]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800085e:	e0b9      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a61      	ldr	r2, [pc, #388]	; (80009e8 <GPIO_PeriClockControl+0x1b0>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d106      	bne.n	8000876 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000868:	4b5e      	ldr	r3, [pc, #376]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	4a5d      	ldr	r2, [pc, #372]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 800086e:	f043 0302 	orr.w	r3, r3, #2
 8000872:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000874:	e0ae      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a5c      	ldr	r2, [pc, #368]	; (80009ec <GPIO_PeriClockControl+0x1b4>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d106      	bne.n	800088c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800087e:	4b59      	ldr	r3, [pc, #356]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a58      	ldr	r2, [pc, #352]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
}
 800088a:	e0a3      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a58      	ldr	r2, [pc, #352]	; (80009f0 <GPIO_PeriClockControl+0x1b8>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d106      	bne.n	80008a2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000894:	4b53      	ldr	r3, [pc, #332]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a52      	ldr	r2, [pc, #328]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 800089a:	f043 0308 	orr.w	r3, r3, #8
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008a0:	e098      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a53      	ldr	r2, [pc, #332]	; (80009f4 <GPIO_PeriClockControl+0x1bc>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d106      	bne.n	80008b8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80008aa:	4b4e      	ldr	r3, [pc, #312]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a4d      	ldr	r2, [pc, #308]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008b6:	e08d      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a4f      	ldr	r2, [pc, #316]	; (80009f8 <GPIO_PeriClockControl+0x1c0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d106      	bne.n	80008ce <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80008c0:	4b48      	ldr	r3, [pc, #288]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	4a47      	ldr	r2, [pc, #284]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 80008c6:	f043 0320 	orr.w	r3, r3, #32
 80008ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008cc:	e082      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a4a      	ldr	r2, [pc, #296]	; (80009fc <GPIO_PeriClockControl+0x1c4>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d106      	bne.n	80008e4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80008d6:	4b43      	ldr	r3, [pc, #268]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a42      	ldr	r2, [pc, #264]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 80008dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008e2:	e077      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a46      	ldr	r2, [pc, #280]	; (8000a00 <GPIO_PeriClockControl+0x1c8>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d106      	bne.n	80008fa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80008ec:	4b3d      	ldr	r3, [pc, #244]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	4a3c      	ldr	r2, [pc, #240]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 80008f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008f8:	e06c      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a41      	ldr	r2, [pc, #260]	; (8000a04 <GPIO_PeriClockControl+0x1cc>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d168      	bne.n	80009d4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000902:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a37      	ldr	r2, [pc, #220]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 8000908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800090e:	e061      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a33      	ldr	r2, [pc, #204]	; (80009e0 <GPIO_PeriClockControl+0x1a8>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d106      	bne.n	8000926 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000918:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	4a31      	ldr	r2, [pc, #196]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 800091e:	f023 0301 	bic.w	r3, r3, #1
 8000922:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000924:	e056      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a2f      	ldr	r2, [pc, #188]	; (80009e8 <GPIO_PeriClockControl+0x1b0>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d106      	bne.n	800093c <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a2c      	ldr	r2, [pc, #176]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 8000934:	f023 0302 	bic.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
}
 800093a:	e04b      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <GPIO_PeriClockControl+0x1b4>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d106      	bne.n	8000952 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000944:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000948:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 800094a:	f023 0304 	bic.w	r3, r3, #4
 800094e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000950:	e040      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a26      	ldr	r2, [pc, #152]	; (80009f0 <GPIO_PeriClockControl+0x1b8>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d106      	bne.n	8000968 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800095a:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a21      	ldr	r2, [pc, #132]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 8000960:	f023 0308 	bic.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000966:	e035      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <GPIO_PeriClockControl+0x1bc>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d106      	bne.n	800097e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 8000976:	f023 0310 	bic.w	r3, r3, #16
 800097a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800097c:	e02a      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a1d      	ldr	r2, [pc, #116]	; (80009f8 <GPIO_PeriClockControl+0x1c0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d106      	bne.n	8000994 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a16      	ldr	r2, [pc, #88]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 800098c:	f023 0320 	bic.w	r3, r3, #32
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000992:	e01f      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a19      	ldr	r2, [pc, #100]	; (80009fc <GPIO_PeriClockControl+0x1c4>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d106      	bne.n	80009aa <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 80009a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009a8:	e014      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <GPIO_PeriClockControl+0x1c8>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d106      	bne.n	80009c0 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 80009b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009be:	e009      	b.n	80009d4 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <GPIO_PeriClockControl+0x1cc>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d105      	bne.n	80009d4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <GPIO_PeriClockControl+0x1ac>)
 80009ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40021400 	.word	0x40021400
 80009fc:	40021800 	.word	0x40021800
 8000a00:	40021c00 	.word	0x40021c00
 8000a04:	40022000 	.word	0x40022000

08000a08 <GPIO_Init>:

/*
 * Init & De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ff0c 	bl	8000838 <GPIO_PeriClockControl>

	//1. configure the mode of gpio
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	795b      	ldrb	r3, [r3, #5]
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	d81f      	bhi.n	8000a68 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	795b      	ldrb	r3, [r3, #5]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	791b      	ldrb	r3, [r3, #4]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	617b      	str	r3, [r7, #20]
		pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	791b      	ldrb	r3, [r3, #4]
 8000a44:	4619      	mov	r1, r3
 8000a46:	2303      	movs	r3, #3
 8000a48:	408b      	lsls	r3, r1
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	400a      	ands	r2, r1
 8000a54:	601a      	str	r2, [r3, #0]
		pGPIOHandle ->pGPIOx ->MODER |= temp; //setting
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	430a      	orrs	r2, r1
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	e0c2      	b.n	8000bee <GPIO_Init+0x1e6>

	}else
	{
		//code later
		if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	795b      	ldrb	r3, [r3, #5]
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d817      	bhi.n	8000aa0 <GPIO_Init+0x98>
		{
			//1. configure the FTSR
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000a70:	4b47      	ldr	r3, [pc, #284]	; (8000b90 <GPIO_Init+0x188>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	7912      	ldrb	r2, [r2, #4]
 8000a78:	4611      	mov	r1, r2
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	408a      	lsls	r2, r1
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4a43      	ldr	r2, [pc, #268]	; (8000b90 <GPIO_Init+0x188>)
 8000a82:	430b      	orrs	r3, r1
 8000a84:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI ->RTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000a86:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <GPIO_Init+0x188>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	7912      	ldrb	r2, [r2, #4]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	2201      	movs	r2, #1
 8000a92:	408a      	lsls	r2, r1
 8000a94:	43d2      	mvns	r2, r2
 8000a96:	4611      	mov	r1, r2
 8000a98:	4a3d      	ldr	r2, [pc, #244]	; (8000b90 <GPIO_Init+0x188>)
 8000a9a:	400b      	ands	r3, r1
 8000a9c:	6093      	str	r3, [r2, #8]
 8000a9e:	e035      	b.n	8000b0c <GPIO_Init+0x104>
		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	795b      	ldrb	r3, [r3, #5]
 8000aa4:	2b05      	cmp	r3, #5
 8000aa6:	d817      	bhi.n	8000ad8 <GPIO_Init+0xd0>
		{
			//1. configure the RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000aa8:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <GPIO_Init+0x188>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	7912      	ldrb	r2, [r2, #4]
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	408a      	lsls	r2, r1
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4a35      	ldr	r2, [pc, #212]	; (8000b90 <GPIO_Init+0x188>)
 8000aba:	430b      	orrs	r3, r1
 8000abc:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR &= ~(1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000abe:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <GPIO_Init+0x188>)
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	7912      	ldrb	r2, [r2, #4]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	2201      	movs	r2, #1
 8000aca:	408a      	lsls	r2, r1
 8000acc:	43d2      	mvns	r2, r2
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <GPIO_Init+0x188>)
 8000ad2:	400b      	ands	r3, r1
 8000ad4:	60d3      	str	r3, [r2, #12]
 8000ad6:	e019      	b.n	8000b0c <GPIO_Init+0x104>

		}else if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	795b      	ldrb	r3, [r3, #5]
 8000adc:	2b06      	cmp	r3, #6
 8000ade:	d815      	bhi.n	8000b0c <GPIO_Init+0x104>
		{
			//1. configure the both FTSR and RTSR
			EXTI ->RTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000ae0:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <GPIO_Init+0x188>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	7912      	ldrb	r2, [r2, #4]
 8000ae8:	4611      	mov	r1, r2
 8000aea:	2201      	movs	r2, #1
 8000aec:	408a      	lsls	r2, r1
 8000aee:	4611      	mov	r1, r2
 8000af0:	4a27      	ldr	r2, [pc, #156]	; (8000b90 <GPIO_Init+0x188>)
 8000af2:	430b      	orrs	r3, r1
 8000af4:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI ->FTSR |= (1<< pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000af6:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <GPIO_Init+0x188>)
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	7912      	ldrb	r2, [r2, #4]
 8000afe:	4611      	mov	r1, r2
 8000b00:	2201      	movs	r2, #1
 8000b02:	408a      	lsls	r2, r1
 8000b04:	4611      	mov	r1, r2
 8000b06:	4a22      	ldr	r2, [pc, #136]	; (8000b90 <GPIO_Init+0x188>)
 8000b08:	430b      	orrs	r3, r1
 8000b0a:	60d3      	str	r3, [r2, #12]

		}

		//2. configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	791b      	ldrb	r3, [r3, #4]
 8000b10:	089b      	lsrs	r3, r3, #2
 8000b12:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	791b      	ldrb	r3, [r3, #4]
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <GPIO_Init+0x18c>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d045      	beq.n	8000bb4 <GPIO_Init+0x1ac>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a1a      	ldr	r2, [pc, #104]	; (8000b98 <GPIO_Init+0x190>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d02b      	beq.n	8000b8a <GPIO_Init+0x182>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a19      	ldr	r2, [pc, #100]	; (8000b9c <GPIO_Init+0x194>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d024      	beq.n	8000b86 <GPIO_Init+0x17e>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <GPIO_Init+0x198>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d01d      	beq.n	8000b82 <GPIO_Init+0x17a>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <GPIO_Init+0x19c>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d016      	beq.n	8000b7e <GPIO_Init+0x176>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <GPIO_Init+0x1a0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d00f      	beq.n	8000b7a <GPIO_Init+0x172>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a13      	ldr	r2, [pc, #76]	; (8000bac <GPIO_Init+0x1a4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d008      	beq.n	8000b76 <GPIO_Init+0x16e>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a11      	ldr	r2, [pc, #68]	; (8000bb0 <GPIO_Init+0x1a8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d101      	bne.n	8000b72 <GPIO_Init+0x16a>
 8000b6e:	2307      	movs	r3, #7
 8000b70:	e021      	b.n	8000bb6 <GPIO_Init+0x1ae>
 8000b72:	2300      	movs	r3, #0
 8000b74:	e01f      	b.n	8000bb6 <GPIO_Init+0x1ae>
 8000b76:	2306      	movs	r3, #6
 8000b78:	e01d      	b.n	8000bb6 <GPIO_Init+0x1ae>
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	e01b      	b.n	8000bb6 <GPIO_Init+0x1ae>
 8000b7e:	2304      	movs	r3, #4
 8000b80:	e019      	b.n	8000bb6 <GPIO_Init+0x1ae>
 8000b82:	2303      	movs	r3, #3
 8000b84:	e017      	b.n	8000bb6 <GPIO_Init+0x1ae>
 8000b86:	2302      	movs	r3, #2
 8000b88:	e015      	b.n	8000bb6 <GPIO_Init+0x1ae>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e013      	b.n	8000bb6 <GPIO_Init+0x1ae>
 8000b8e:	bf00      	nop
 8000b90:	40013c00 	.word	0x40013c00
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020400 	.word	0x40020400
 8000b9c:	40020800 	.word	0x40020800
 8000ba0:	40020c00 	.word	0x40020c00
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40021400 	.word	0x40021400
 8000bac:	40021800 	.word	0x40021800
 8000bb0:	40021c00 	.word	0x40021c00
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000bb8:	4b5c      	ldr	r3, [pc, #368]	; (8000d2c <GPIO_Init+0x324>)
 8000bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbc:	4a5b      	ldr	r2, [pc, #364]	; (8000d2c <GPIO_Init+0x324>)
 8000bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1]= portcode << (temp2*4);
 8000bc4:	7c7a      	ldrb	r2, [r7, #17]
 8000bc6:	7cbb      	ldrb	r3, [r7, #18]
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	fa02 f103 	lsl.w	r1, r2, r3
 8000bce:	4a58      	ldr	r2, [pc, #352]	; (8000d30 <GPIO_Init+0x328>)
 8000bd0:	7cfb      	ldrb	r3, [r7, #19]
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti interrupt delivery using IMR
		EXTI ->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000bd8:	4b56      	ldr	r3, [pc, #344]	; (8000d34 <GPIO_Init+0x32c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	7912      	ldrb	r2, [r2, #4]
 8000be0:	4611      	mov	r1, r2
 8000be2:	2201      	movs	r2, #1
 8000be4:	408a      	lsls	r2, r1
 8000be6:	4611      	mov	r1, r2
 8000be8:	4a52      	ldr	r2, [pc, #328]	; (8000d34 <GPIO_Init+0x32c>)
 8000bea:	430b      	orrs	r3, r1
 8000bec:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
	//2. configure the speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	799b      	ldrb	r3, [r3, #6]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	791b      	ldrb	r3, [r3, #4]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	791b      	ldrb	r3, [r3, #4]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	2303      	movs	r3, #3
 8000c12:	408b      	lsls	r3, r1
 8000c14:	43db      	mvns	r3, r3
 8000c16:	4619      	mov	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OSPEEDR |= temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	6899      	ldr	r1, [r3, #8]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	609a      	str	r2, [r3, #8]

	temp =0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
	//3. configure the pu pd settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	79db      	ldrb	r3, [r3, #7]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	791b      	ldrb	r3, [r3, #4]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x03 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	791b      	ldrb	r3, [r3, #4]
 8000c50:	4619      	mov	r1, r3
 8000c52:	2303      	movs	r3, #3
 8000c54:	408b      	lsls	r3, r1
 8000c56:	43db      	mvns	r3, r3
 8000c58:	4619      	mov	r1, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	400a      	ands	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->PUPDR |= temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68d9      	ldr	r1, [r3, #12]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	60da      	str	r2, [r3, #12]

	temp =0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]

	//4. configure
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinoType << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7a1b      	ldrb	r3, [r3, #8]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	791b      	ldrb	r3, [r3, #4]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	617b      	str	r3, [r7, #20]
	pGPIOHandle ->pGPIOx ->MODER &= ~(0x01 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	4619      	mov	r1, r3
 8000c92:	2301      	movs	r3, #1
 8000c94:	408b      	lsls	r3, r1
 8000c96:	43db      	mvns	r3, r3
 8000c98:	4619      	mov	r1, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]
	pGPIOHandle ->pGPIOx ->OTYPER |= temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6859      	ldr	r1, [r3, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	605a      	str	r2, [r3, #4]

	temp =0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]

	//5. configure
	if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	795b      	ldrb	r3, [r3, #5]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d132      	bne.n	8000d24 <GPIO_Init+0x31c>
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	791b      	ldrb	r3, [r3, #4]
 8000cc2:	08db      	lsrs	r3, r3, #3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	791b      	ldrb	r3, [r3, #4]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	3208      	adds	r2, #8
 8000cda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	4619      	mov	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4011      	ands	r1, r2
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	3208      	adds	r2, #8
 8000cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	3208      	adds	r2, #8
 8000d02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	7a5b      	ldrb	r3, [r3, #9]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	4619      	mov	r1, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4311      	orrs	r1, r2
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	3208      	adds	r2, #8
 8000d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40013800 	.word	0x40013800
 8000d34:	40013c00 	.word	0x40013c00

08000d38 <GPIO_ReadFromInputPin>:

/*
 * Data read & write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (pGPIOx->IDR >> PinNumber) & 0x00000001;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691a      	ldr	r2, [r3, #16]
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	73fb      	strb	r3, [r7, #15]
	return value;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
	...

08000d64 <SPI_PeriClockControl>:
 *
 */
#include "stm32f4xx_spi_driver.h"

void SPI_PeriClockControl(SPI_RegDef_t*pSPIx, uint8_t EnorDi)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d120      	bne.n	8000db8 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <SPI_PeriClockControl+0xa0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d106      	bne.n	8000d8c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000d7e:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <SPI_PeriClockControl+0xa4>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a21      	ldr	r2, [pc, #132]	; (8000e08 <SPI_PeriClockControl+0xa4>)
 8000d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI3_PCLK_DI();
		}
	}

}
 8000d8a:	e035      	b.n	8000df8 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <SPI_PeriClockControl+0xa8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d106      	bne.n	8000da2 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <SPI_PeriClockControl+0xa4>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <SPI_PeriClockControl+0xa4>)
 8000d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000da0:	e02a      	b.n	8000df8 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a1a      	ldr	r2, [pc, #104]	; (8000e10 <SPI_PeriClockControl+0xac>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d126      	bne.n	8000df8 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <SPI_PeriClockControl+0xa4>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a16      	ldr	r2, [pc, #88]	; (8000e08 <SPI_PeriClockControl+0xa4>)
 8000db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000db6:	e01f      	b.n	8000df8 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <SPI_PeriClockControl+0xa0>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d106      	bne.n	8000dce <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <SPI_PeriClockControl+0xa4>)
 8000dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc4:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <SPI_PeriClockControl+0xa4>)
 8000dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dca:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000dcc:	e014      	b.n	8000df8 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <SPI_PeriClockControl+0xa8>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d106      	bne.n	8000de4 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <SPI_PeriClockControl+0xa4>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <SPI_PeriClockControl+0xa4>)
 8000ddc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000de0:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000de2:	e009      	b.n	8000df8 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <SPI_PeriClockControl+0xac>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d105      	bne.n	8000df8 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <SPI_PeriClockControl+0xa4>)
 8000dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df0:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <SPI_PeriClockControl+0xa4>)
 8000df2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000df6:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40013000 	.word	0x40013000
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40003800 	.word	0x40003800
 8000e10:	40003c00 	.word	0x40003c00

08000e14 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000e20:	78fb      	ldrb	r3, [r7, #3]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d106      	bne.n	8000e34 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f043 0204 	orr.w	r2, r3, #4
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000e32:	e005      	b.n	8000e40 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f023 0204 	bic.w	r2, r3, #4
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	605a      	str	r2, [r3, #4]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <SPI_Init>:
/************************
 *
 */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2101      	movs	r1, #1
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff83 	bl	8000d64 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	791b      	ldrb	r3, [r3, #4]
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	461a      	mov	r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	795b      	ldrb	r3, [r3, #5]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d104      	bne.n	8000e82 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1<< SPI_CR1_BIDIMODE);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	e014      	b.n	8000eac <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	795b      	ldrb	r3, [r3, #5]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d104      	bne.n	8000e94 <SPI_Init+0x4a>
	{
		//BIDI mode should be set
		tempreg |= ~(1<<SPI_CR1_BIDIMODE);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f463 4300 	orn	r3, r3, #32768	; 0x8000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	e00b      	b.n	8000eac <SPI_Init+0x62>
	}else if (pSPIHandle ->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	795b      	ldrb	r3, [r3, #5]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d107      	bne.n	8000eac <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ea2:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1<<SPI_CR1_RXONLY);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eaa:	60fb      	str	r3, [r7, #12]
	}
	//3. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	799b      	ldrb	r3, [r3, #6]
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
	//4. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	79db      	ldrb	r3, [r3, #7]
 8000ebe:	02db      	lsls	r3, r3, #11
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
	//5. configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7a1b      	ldrb	r3, [r3, #8]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7a5b      	ldrb	r3, [r3, #9]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7a9b      	ldrb	r3, [r3, #10]
 8000ee6:	025b      	lsls	r3, r3, #9
 8000ee8:	461a      	mov	r2, r3
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <SPI_GetFlagStatus>:
/*************************
 *
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000f1a:	2300      	movs	r3, #0

}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr

08000f26 <SPI_SendData>:
/**************************
 *
 */

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
	while(Len >0)
 8000f32:	e027      	b.n	8000f84 <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000f34:	bf00      	nop
 8000f36:	2102      	movs	r1, #2
 8000f38:	68f8      	ldr	r0, [r7, #12]
 8000f3a:	f7ff ffe1 	bl	8000f00 <SPI_GetFlagStatus>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0f8      	beq.n	8000f36 <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if ((pSPIx->CR1 & (1<< SPI_CR1_DFF)))
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00e      	beq.n	8000f6e <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	60da      	str	r2, [r3, #12]
			Len--;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
			Len--;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	e00a      	b.n	8000f84 <SPI_SendData+0x5e>
		}else
		{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	60da      	str	r2, [r3, #12]
			Len--;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	3301      	adds	r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
	while(Len >0)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1d4      	bne.n	8000f34 <SPI_SendData+0xe>
		}
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <SPI_ReceiveData>:
 * @return            -
 *
 * @Note              -
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000f9e:	e027      	b.n	8000ff0 <SPI_ReceiveData+0x5e>
		{
			//1. wait until RXNE is set
			while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );
 8000fa0:	bf00      	nop
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff ffab 	bl	8000f00 <SPI_GetFlagStatus>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f8      	beq.n	8000fa2 <SPI_ReceiveData+0x10>

			//2. check the DFF bit in CR1
			if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00e      	beq.n	8000fda <SPI_ReceiveData+0x48>
			{
				//16 bit DFF
				//1. load the data from DR to Rxbuffer address
				 *((uint16_t*)pRxBuffer) = pSPIx->DR ;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	801a      	strh	r2, [r3, #0]
				Len--;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
				Len--;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	e00a      	b.n	8000ff0 <SPI_ReceiveData+0x5e>
			}else
			{
				//8 bit DFF
				*(pRxBuffer) = pSPIx->DR ;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	701a      	strb	r2, [r3, #0]
				Len--;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	3301      	adds	r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1d4      	bne.n	8000fa0 <SPI_ReceiveData+0xe>
			}
		}

}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <SPI_PeripheralControl>:
/**************************
 *
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d106      	bne.n	800101e <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<< SPI_CR1_SPE);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
	}
}
 800101c:	e005      	b.n	800102a <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<< SPI_CR1_SPE);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	601a      	str	r2, [r3, #0]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <__libc_init_array>:
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	4e0d      	ldr	r6, [pc, #52]	; (800106c <__libc_init_array+0x38>)
 8001038:	4c0d      	ldr	r4, [pc, #52]	; (8001070 <__libc_init_array+0x3c>)
 800103a:	1ba4      	subs	r4, r4, r6
 800103c:	10a4      	asrs	r4, r4, #2
 800103e:	2500      	movs	r5, #0
 8001040:	42a5      	cmp	r5, r4
 8001042:	d109      	bne.n	8001058 <__libc_init_array+0x24>
 8001044:	4e0b      	ldr	r6, [pc, #44]	; (8001074 <__libc_init_array+0x40>)
 8001046:	4c0c      	ldr	r4, [pc, #48]	; (8001078 <__libc_init_array+0x44>)
 8001048:	f001 fa38 	bl	80024bc <_init>
 800104c:	1ba4      	subs	r4, r4, r6
 800104e:	10a4      	asrs	r4, r4, #2
 8001050:	2500      	movs	r5, #0
 8001052:	42a5      	cmp	r5, r4
 8001054:	d105      	bne.n	8001062 <__libc_init_array+0x2e>
 8001056:	bd70      	pop	{r4, r5, r6, pc}
 8001058:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800105c:	4798      	blx	r3
 800105e:	3501      	adds	r5, #1
 8001060:	e7ee      	b.n	8001040 <__libc_init_array+0xc>
 8001062:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001066:	4798      	blx	r3
 8001068:	3501      	adds	r5, #1
 800106a:	e7f2      	b.n	8001052 <__libc_init_array+0x1e>
 800106c:	0800265c 	.word	0x0800265c
 8001070:	0800265c 	.word	0x0800265c
 8001074:	0800265c 	.word	0x0800265c
 8001078:	08002660 	.word	0x08002660

0800107c <memset>:
 800107c:	4402      	add	r2, r0
 800107e:	4603      	mov	r3, r0
 8001080:	4293      	cmp	r3, r2
 8001082:	d100      	bne.n	8001086 <memset+0xa>
 8001084:	4770      	bx	lr
 8001086:	f803 1b01 	strb.w	r1, [r3], #1
 800108a:	e7f9      	b.n	8001080 <memset+0x4>

0800108c <iprintf>:
 800108c:	b40f      	push	{r0, r1, r2, r3}
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <iprintf+0x2c>)
 8001090:	b513      	push	{r0, r1, r4, lr}
 8001092:	681c      	ldr	r4, [r3, #0]
 8001094:	b124      	cbz	r4, 80010a0 <iprintf+0x14>
 8001096:	69a3      	ldr	r3, [r4, #24]
 8001098:	b913      	cbnz	r3, 80010a0 <iprintf+0x14>
 800109a:	4620      	mov	r0, r4
 800109c:	f000 fa22 	bl	80014e4 <__sinit>
 80010a0:	ab05      	add	r3, sp, #20
 80010a2:	9a04      	ldr	r2, [sp, #16]
 80010a4:	68a1      	ldr	r1, [r4, #8]
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	4620      	mov	r0, r4
 80010aa:	f000 fbd9 	bl	8001860 <_vfiprintf_r>
 80010ae:	b002      	add	sp, #8
 80010b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010b4:	b004      	add	sp, #16
 80010b6:	4770      	bx	lr
 80010b8:	20000000 	.word	0x20000000

080010bc <_puts_r>:
 80010bc:	b570      	push	{r4, r5, r6, lr}
 80010be:	460e      	mov	r6, r1
 80010c0:	4605      	mov	r5, r0
 80010c2:	b118      	cbz	r0, 80010cc <_puts_r+0x10>
 80010c4:	6983      	ldr	r3, [r0, #24]
 80010c6:	b90b      	cbnz	r3, 80010cc <_puts_r+0x10>
 80010c8:	f000 fa0c 	bl	80014e4 <__sinit>
 80010cc:	69ab      	ldr	r3, [r5, #24]
 80010ce:	68ac      	ldr	r4, [r5, #8]
 80010d0:	b913      	cbnz	r3, 80010d8 <_puts_r+0x1c>
 80010d2:	4628      	mov	r0, r5
 80010d4:	f000 fa06 	bl	80014e4 <__sinit>
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <_puts_r+0xac>)
 80010da:	429c      	cmp	r4, r3
 80010dc:	d117      	bne.n	800110e <_puts_r+0x52>
 80010de:	686c      	ldr	r4, [r5, #4]
 80010e0:	89a3      	ldrh	r3, [r4, #12]
 80010e2:	071b      	lsls	r3, r3, #28
 80010e4:	d51d      	bpl.n	8001122 <_puts_r+0x66>
 80010e6:	6923      	ldr	r3, [r4, #16]
 80010e8:	b1db      	cbz	r3, 8001122 <_puts_r+0x66>
 80010ea:	3e01      	subs	r6, #1
 80010ec:	68a3      	ldr	r3, [r4, #8]
 80010ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80010f2:	3b01      	subs	r3, #1
 80010f4:	60a3      	str	r3, [r4, #8]
 80010f6:	b9e9      	cbnz	r1, 8001134 <_puts_r+0x78>
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	da2e      	bge.n	800115a <_puts_r+0x9e>
 80010fc:	4622      	mov	r2, r4
 80010fe:	210a      	movs	r1, #10
 8001100:	4628      	mov	r0, r5
 8001102:	f000 f83f 	bl	8001184 <__swbuf_r>
 8001106:	3001      	adds	r0, #1
 8001108:	d011      	beq.n	800112e <_puts_r+0x72>
 800110a:	200a      	movs	r0, #10
 800110c:	e011      	b.n	8001132 <_puts_r+0x76>
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <_puts_r+0xb0>)
 8001110:	429c      	cmp	r4, r3
 8001112:	d101      	bne.n	8001118 <_puts_r+0x5c>
 8001114:	68ac      	ldr	r4, [r5, #8]
 8001116:	e7e3      	b.n	80010e0 <_puts_r+0x24>
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <_puts_r+0xb4>)
 800111a:	429c      	cmp	r4, r3
 800111c:	bf08      	it	eq
 800111e:	68ec      	ldreq	r4, [r5, #12]
 8001120:	e7de      	b.n	80010e0 <_puts_r+0x24>
 8001122:	4621      	mov	r1, r4
 8001124:	4628      	mov	r0, r5
 8001126:	f000 f87f 	bl	8001228 <__swsetup_r>
 800112a:	2800      	cmp	r0, #0
 800112c:	d0dd      	beq.n	80010ea <_puts_r+0x2e>
 800112e:	f04f 30ff 	mov.w	r0, #4294967295
 8001132:	bd70      	pop	{r4, r5, r6, pc}
 8001134:	2b00      	cmp	r3, #0
 8001136:	da04      	bge.n	8001142 <_puts_r+0x86>
 8001138:	69a2      	ldr	r2, [r4, #24]
 800113a:	429a      	cmp	r2, r3
 800113c:	dc06      	bgt.n	800114c <_puts_r+0x90>
 800113e:	290a      	cmp	r1, #10
 8001140:	d004      	beq.n	800114c <_puts_r+0x90>
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	6022      	str	r2, [r4, #0]
 8001148:	7019      	strb	r1, [r3, #0]
 800114a:	e7cf      	b.n	80010ec <_puts_r+0x30>
 800114c:	4622      	mov	r2, r4
 800114e:	4628      	mov	r0, r5
 8001150:	f000 f818 	bl	8001184 <__swbuf_r>
 8001154:	3001      	adds	r0, #1
 8001156:	d1c9      	bne.n	80010ec <_puts_r+0x30>
 8001158:	e7e9      	b.n	800112e <_puts_r+0x72>
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	200a      	movs	r0, #10
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	6022      	str	r2, [r4, #0]
 8001162:	7018      	strb	r0, [r3, #0]
 8001164:	e7e5      	b.n	8001132 <_puts_r+0x76>
 8001166:	bf00      	nop
 8001168:	080025cc 	.word	0x080025cc
 800116c:	080025ec 	.word	0x080025ec
 8001170:	080025ac 	.word	0x080025ac

08001174 <puts>:
 8001174:	4b02      	ldr	r3, [pc, #8]	; (8001180 <puts+0xc>)
 8001176:	4601      	mov	r1, r0
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	f7ff bf9f 	b.w	80010bc <_puts_r>
 800117e:	bf00      	nop
 8001180:	20000000 	.word	0x20000000

08001184 <__swbuf_r>:
 8001184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001186:	460e      	mov	r6, r1
 8001188:	4614      	mov	r4, r2
 800118a:	4605      	mov	r5, r0
 800118c:	b118      	cbz	r0, 8001196 <__swbuf_r+0x12>
 800118e:	6983      	ldr	r3, [r0, #24]
 8001190:	b90b      	cbnz	r3, 8001196 <__swbuf_r+0x12>
 8001192:	f000 f9a7 	bl	80014e4 <__sinit>
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <__swbuf_r+0x98>)
 8001198:	429c      	cmp	r4, r3
 800119a:	d12a      	bne.n	80011f2 <__swbuf_r+0x6e>
 800119c:	686c      	ldr	r4, [r5, #4]
 800119e:	69a3      	ldr	r3, [r4, #24]
 80011a0:	60a3      	str	r3, [r4, #8]
 80011a2:	89a3      	ldrh	r3, [r4, #12]
 80011a4:	071a      	lsls	r2, r3, #28
 80011a6:	d52e      	bpl.n	8001206 <__swbuf_r+0x82>
 80011a8:	6923      	ldr	r3, [r4, #16]
 80011aa:	b363      	cbz	r3, 8001206 <__swbuf_r+0x82>
 80011ac:	6923      	ldr	r3, [r4, #16]
 80011ae:	6820      	ldr	r0, [r4, #0]
 80011b0:	1ac0      	subs	r0, r0, r3
 80011b2:	6963      	ldr	r3, [r4, #20]
 80011b4:	b2f6      	uxtb	r6, r6
 80011b6:	4283      	cmp	r3, r0
 80011b8:	4637      	mov	r7, r6
 80011ba:	dc04      	bgt.n	80011c6 <__swbuf_r+0x42>
 80011bc:	4621      	mov	r1, r4
 80011be:	4628      	mov	r0, r5
 80011c0:	f000 f926 	bl	8001410 <_fflush_r>
 80011c4:	bb28      	cbnz	r0, 8001212 <__swbuf_r+0x8e>
 80011c6:	68a3      	ldr	r3, [r4, #8]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60a3      	str	r3, [r4, #8]
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	6022      	str	r2, [r4, #0]
 80011d2:	701e      	strb	r6, [r3, #0]
 80011d4:	6963      	ldr	r3, [r4, #20]
 80011d6:	3001      	adds	r0, #1
 80011d8:	4283      	cmp	r3, r0
 80011da:	d004      	beq.n	80011e6 <__swbuf_r+0x62>
 80011dc:	89a3      	ldrh	r3, [r4, #12]
 80011de:	07db      	lsls	r3, r3, #31
 80011e0:	d519      	bpl.n	8001216 <__swbuf_r+0x92>
 80011e2:	2e0a      	cmp	r6, #10
 80011e4:	d117      	bne.n	8001216 <__swbuf_r+0x92>
 80011e6:	4621      	mov	r1, r4
 80011e8:	4628      	mov	r0, r5
 80011ea:	f000 f911 	bl	8001410 <_fflush_r>
 80011ee:	b190      	cbz	r0, 8001216 <__swbuf_r+0x92>
 80011f0:	e00f      	b.n	8001212 <__swbuf_r+0x8e>
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <__swbuf_r+0x9c>)
 80011f4:	429c      	cmp	r4, r3
 80011f6:	d101      	bne.n	80011fc <__swbuf_r+0x78>
 80011f8:	68ac      	ldr	r4, [r5, #8]
 80011fa:	e7d0      	b.n	800119e <__swbuf_r+0x1a>
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <__swbuf_r+0xa0>)
 80011fe:	429c      	cmp	r4, r3
 8001200:	bf08      	it	eq
 8001202:	68ec      	ldreq	r4, [r5, #12]
 8001204:	e7cb      	b.n	800119e <__swbuf_r+0x1a>
 8001206:	4621      	mov	r1, r4
 8001208:	4628      	mov	r0, r5
 800120a:	f000 f80d 	bl	8001228 <__swsetup_r>
 800120e:	2800      	cmp	r0, #0
 8001210:	d0cc      	beq.n	80011ac <__swbuf_r+0x28>
 8001212:	f04f 37ff 	mov.w	r7, #4294967295
 8001216:	4638      	mov	r0, r7
 8001218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800121a:	bf00      	nop
 800121c:	080025cc 	.word	0x080025cc
 8001220:	080025ec 	.word	0x080025ec
 8001224:	080025ac 	.word	0x080025ac

08001228 <__swsetup_r>:
 8001228:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <__swsetup_r+0xcc>)
 800122a:	b570      	push	{r4, r5, r6, lr}
 800122c:	681d      	ldr	r5, [r3, #0]
 800122e:	4606      	mov	r6, r0
 8001230:	460c      	mov	r4, r1
 8001232:	b125      	cbz	r5, 800123e <__swsetup_r+0x16>
 8001234:	69ab      	ldr	r3, [r5, #24]
 8001236:	b913      	cbnz	r3, 800123e <__swsetup_r+0x16>
 8001238:	4628      	mov	r0, r5
 800123a:	f000 f953 	bl	80014e4 <__sinit>
 800123e:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <__swsetup_r+0xd0>)
 8001240:	429c      	cmp	r4, r3
 8001242:	d10f      	bne.n	8001264 <__swsetup_r+0x3c>
 8001244:	686c      	ldr	r4, [r5, #4]
 8001246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800124a:	b29a      	uxth	r2, r3
 800124c:	0715      	lsls	r5, r2, #28
 800124e:	d42c      	bmi.n	80012aa <__swsetup_r+0x82>
 8001250:	06d0      	lsls	r0, r2, #27
 8001252:	d411      	bmi.n	8001278 <__swsetup_r+0x50>
 8001254:	2209      	movs	r2, #9
 8001256:	6032      	str	r2, [r6, #0]
 8001258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125c:	81a3      	strh	r3, [r4, #12]
 800125e:	f04f 30ff 	mov.w	r0, #4294967295
 8001262:	e03e      	b.n	80012e2 <__swsetup_r+0xba>
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <__swsetup_r+0xd4>)
 8001266:	429c      	cmp	r4, r3
 8001268:	d101      	bne.n	800126e <__swsetup_r+0x46>
 800126a:	68ac      	ldr	r4, [r5, #8]
 800126c:	e7eb      	b.n	8001246 <__swsetup_r+0x1e>
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <__swsetup_r+0xd8>)
 8001270:	429c      	cmp	r4, r3
 8001272:	bf08      	it	eq
 8001274:	68ec      	ldreq	r4, [r5, #12]
 8001276:	e7e6      	b.n	8001246 <__swsetup_r+0x1e>
 8001278:	0751      	lsls	r1, r2, #29
 800127a:	d512      	bpl.n	80012a2 <__swsetup_r+0x7a>
 800127c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800127e:	b141      	cbz	r1, 8001292 <__swsetup_r+0x6a>
 8001280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001284:	4299      	cmp	r1, r3
 8001286:	d002      	beq.n	800128e <__swsetup_r+0x66>
 8001288:	4630      	mov	r0, r6
 800128a:	f000 fa19 	bl	80016c0 <_free_r>
 800128e:	2300      	movs	r3, #0
 8001290:	6363      	str	r3, [r4, #52]	; 0x34
 8001292:	89a3      	ldrh	r3, [r4, #12]
 8001294:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001298:	81a3      	strh	r3, [r4, #12]
 800129a:	2300      	movs	r3, #0
 800129c:	6063      	str	r3, [r4, #4]
 800129e:	6923      	ldr	r3, [r4, #16]
 80012a0:	6023      	str	r3, [r4, #0]
 80012a2:	89a3      	ldrh	r3, [r4, #12]
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	81a3      	strh	r3, [r4, #12]
 80012aa:	6923      	ldr	r3, [r4, #16]
 80012ac:	b94b      	cbnz	r3, 80012c2 <__swsetup_r+0x9a>
 80012ae:	89a3      	ldrh	r3, [r4, #12]
 80012b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b8:	d003      	beq.n	80012c2 <__swsetup_r+0x9a>
 80012ba:	4621      	mov	r1, r4
 80012bc:	4630      	mov	r0, r6
 80012be:	f000 f9bf 	bl	8001640 <__smakebuf_r>
 80012c2:	89a2      	ldrh	r2, [r4, #12]
 80012c4:	f012 0301 	ands.w	r3, r2, #1
 80012c8:	d00c      	beq.n	80012e4 <__swsetup_r+0xbc>
 80012ca:	2300      	movs	r3, #0
 80012cc:	60a3      	str	r3, [r4, #8]
 80012ce:	6963      	ldr	r3, [r4, #20]
 80012d0:	425b      	negs	r3, r3
 80012d2:	61a3      	str	r3, [r4, #24]
 80012d4:	6923      	ldr	r3, [r4, #16]
 80012d6:	b953      	cbnz	r3, 80012ee <__swsetup_r+0xc6>
 80012d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80012e0:	d1ba      	bne.n	8001258 <__swsetup_r+0x30>
 80012e2:	bd70      	pop	{r4, r5, r6, pc}
 80012e4:	0792      	lsls	r2, r2, #30
 80012e6:	bf58      	it	pl
 80012e8:	6963      	ldrpl	r3, [r4, #20]
 80012ea:	60a3      	str	r3, [r4, #8]
 80012ec:	e7f2      	b.n	80012d4 <__swsetup_r+0xac>
 80012ee:	2000      	movs	r0, #0
 80012f0:	e7f7      	b.n	80012e2 <__swsetup_r+0xba>
 80012f2:	bf00      	nop
 80012f4:	20000000 	.word	0x20000000
 80012f8:	080025cc 	.word	0x080025cc
 80012fc:	080025ec 	.word	0x080025ec
 8001300:	080025ac 	.word	0x080025ac

08001304 <__sflush_r>:
 8001304:	898a      	ldrh	r2, [r1, #12]
 8001306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800130a:	4605      	mov	r5, r0
 800130c:	0710      	lsls	r0, r2, #28
 800130e:	460c      	mov	r4, r1
 8001310:	d458      	bmi.n	80013c4 <__sflush_r+0xc0>
 8001312:	684b      	ldr	r3, [r1, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	dc05      	bgt.n	8001324 <__sflush_r+0x20>
 8001318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800131a:	2b00      	cmp	r3, #0
 800131c:	dc02      	bgt.n	8001324 <__sflush_r+0x20>
 800131e:	2000      	movs	r0, #0
 8001320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001326:	2e00      	cmp	r6, #0
 8001328:	d0f9      	beq.n	800131e <__sflush_r+0x1a>
 800132a:	2300      	movs	r3, #0
 800132c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001330:	682f      	ldr	r7, [r5, #0]
 8001332:	6a21      	ldr	r1, [r4, #32]
 8001334:	602b      	str	r3, [r5, #0]
 8001336:	d032      	beq.n	800139e <__sflush_r+0x9a>
 8001338:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800133a:	89a3      	ldrh	r3, [r4, #12]
 800133c:	075a      	lsls	r2, r3, #29
 800133e:	d505      	bpl.n	800134c <__sflush_r+0x48>
 8001340:	6863      	ldr	r3, [r4, #4]
 8001342:	1ac0      	subs	r0, r0, r3
 8001344:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001346:	b10b      	cbz	r3, 800134c <__sflush_r+0x48>
 8001348:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800134a:	1ac0      	subs	r0, r0, r3
 800134c:	2300      	movs	r3, #0
 800134e:	4602      	mov	r2, r0
 8001350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001352:	6a21      	ldr	r1, [r4, #32]
 8001354:	4628      	mov	r0, r5
 8001356:	47b0      	blx	r6
 8001358:	1c43      	adds	r3, r0, #1
 800135a:	89a3      	ldrh	r3, [r4, #12]
 800135c:	d106      	bne.n	800136c <__sflush_r+0x68>
 800135e:	6829      	ldr	r1, [r5, #0]
 8001360:	291d      	cmp	r1, #29
 8001362:	d848      	bhi.n	80013f6 <__sflush_r+0xf2>
 8001364:	4a29      	ldr	r2, [pc, #164]	; (800140c <__sflush_r+0x108>)
 8001366:	40ca      	lsrs	r2, r1
 8001368:	07d6      	lsls	r6, r2, #31
 800136a:	d544      	bpl.n	80013f6 <__sflush_r+0xf2>
 800136c:	2200      	movs	r2, #0
 800136e:	6062      	str	r2, [r4, #4]
 8001370:	04d9      	lsls	r1, r3, #19
 8001372:	6922      	ldr	r2, [r4, #16]
 8001374:	6022      	str	r2, [r4, #0]
 8001376:	d504      	bpl.n	8001382 <__sflush_r+0x7e>
 8001378:	1c42      	adds	r2, r0, #1
 800137a:	d101      	bne.n	8001380 <__sflush_r+0x7c>
 800137c:	682b      	ldr	r3, [r5, #0]
 800137e:	b903      	cbnz	r3, 8001382 <__sflush_r+0x7e>
 8001380:	6560      	str	r0, [r4, #84]	; 0x54
 8001382:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001384:	602f      	str	r7, [r5, #0]
 8001386:	2900      	cmp	r1, #0
 8001388:	d0c9      	beq.n	800131e <__sflush_r+0x1a>
 800138a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800138e:	4299      	cmp	r1, r3
 8001390:	d002      	beq.n	8001398 <__sflush_r+0x94>
 8001392:	4628      	mov	r0, r5
 8001394:	f000 f994 	bl	80016c0 <_free_r>
 8001398:	2000      	movs	r0, #0
 800139a:	6360      	str	r0, [r4, #52]	; 0x34
 800139c:	e7c0      	b.n	8001320 <__sflush_r+0x1c>
 800139e:	2301      	movs	r3, #1
 80013a0:	4628      	mov	r0, r5
 80013a2:	47b0      	blx	r6
 80013a4:	1c41      	adds	r1, r0, #1
 80013a6:	d1c8      	bne.n	800133a <__sflush_r+0x36>
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0c5      	beq.n	800133a <__sflush_r+0x36>
 80013ae:	2b1d      	cmp	r3, #29
 80013b0:	d001      	beq.n	80013b6 <__sflush_r+0xb2>
 80013b2:	2b16      	cmp	r3, #22
 80013b4:	d101      	bne.n	80013ba <__sflush_r+0xb6>
 80013b6:	602f      	str	r7, [r5, #0]
 80013b8:	e7b1      	b.n	800131e <__sflush_r+0x1a>
 80013ba:	89a3      	ldrh	r3, [r4, #12]
 80013bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c0:	81a3      	strh	r3, [r4, #12]
 80013c2:	e7ad      	b.n	8001320 <__sflush_r+0x1c>
 80013c4:	690f      	ldr	r7, [r1, #16]
 80013c6:	2f00      	cmp	r7, #0
 80013c8:	d0a9      	beq.n	800131e <__sflush_r+0x1a>
 80013ca:	0793      	lsls	r3, r2, #30
 80013cc:	680e      	ldr	r6, [r1, #0]
 80013ce:	bf08      	it	eq
 80013d0:	694b      	ldreq	r3, [r1, #20]
 80013d2:	600f      	str	r7, [r1, #0]
 80013d4:	bf18      	it	ne
 80013d6:	2300      	movne	r3, #0
 80013d8:	eba6 0807 	sub.w	r8, r6, r7
 80013dc:	608b      	str	r3, [r1, #8]
 80013de:	f1b8 0f00 	cmp.w	r8, #0
 80013e2:	dd9c      	ble.n	800131e <__sflush_r+0x1a>
 80013e4:	4643      	mov	r3, r8
 80013e6:	463a      	mov	r2, r7
 80013e8:	6a21      	ldr	r1, [r4, #32]
 80013ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013ec:	4628      	mov	r0, r5
 80013ee:	47b0      	blx	r6
 80013f0:	2800      	cmp	r0, #0
 80013f2:	dc06      	bgt.n	8001402 <__sflush_r+0xfe>
 80013f4:	89a3      	ldrh	r3, [r4, #12]
 80013f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013fa:	81a3      	strh	r3, [r4, #12]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	e78e      	b.n	8001320 <__sflush_r+0x1c>
 8001402:	4407      	add	r7, r0
 8001404:	eba8 0800 	sub.w	r8, r8, r0
 8001408:	e7e9      	b.n	80013de <__sflush_r+0xda>
 800140a:	bf00      	nop
 800140c:	20400001 	.word	0x20400001

08001410 <_fflush_r>:
 8001410:	b538      	push	{r3, r4, r5, lr}
 8001412:	690b      	ldr	r3, [r1, #16]
 8001414:	4605      	mov	r5, r0
 8001416:	460c      	mov	r4, r1
 8001418:	b1db      	cbz	r3, 8001452 <_fflush_r+0x42>
 800141a:	b118      	cbz	r0, 8001424 <_fflush_r+0x14>
 800141c:	6983      	ldr	r3, [r0, #24]
 800141e:	b90b      	cbnz	r3, 8001424 <_fflush_r+0x14>
 8001420:	f000 f860 	bl	80014e4 <__sinit>
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <_fflush_r+0x48>)
 8001426:	429c      	cmp	r4, r3
 8001428:	d109      	bne.n	800143e <_fflush_r+0x2e>
 800142a:	686c      	ldr	r4, [r5, #4]
 800142c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001430:	b17b      	cbz	r3, 8001452 <_fflush_r+0x42>
 8001432:	4621      	mov	r1, r4
 8001434:	4628      	mov	r0, r5
 8001436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800143a:	f7ff bf63 	b.w	8001304 <__sflush_r>
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <_fflush_r+0x4c>)
 8001440:	429c      	cmp	r4, r3
 8001442:	d101      	bne.n	8001448 <_fflush_r+0x38>
 8001444:	68ac      	ldr	r4, [r5, #8]
 8001446:	e7f1      	b.n	800142c <_fflush_r+0x1c>
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <_fflush_r+0x50>)
 800144a:	429c      	cmp	r4, r3
 800144c:	bf08      	it	eq
 800144e:	68ec      	ldreq	r4, [r5, #12]
 8001450:	e7ec      	b.n	800142c <_fflush_r+0x1c>
 8001452:	2000      	movs	r0, #0
 8001454:	bd38      	pop	{r3, r4, r5, pc}
 8001456:	bf00      	nop
 8001458:	080025cc 	.word	0x080025cc
 800145c:	080025ec 	.word	0x080025ec
 8001460:	080025ac 	.word	0x080025ac

08001464 <std>:
 8001464:	2300      	movs	r3, #0
 8001466:	b510      	push	{r4, lr}
 8001468:	4604      	mov	r4, r0
 800146a:	e9c0 3300 	strd	r3, r3, [r0]
 800146e:	6083      	str	r3, [r0, #8]
 8001470:	8181      	strh	r1, [r0, #12]
 8001472:	6643      	str	r3, [r0, #100]	; 0x64
 8001474:	81c2      	strh	r2, [r0, #14]
 8001476:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800147a:	6183      	str	r3, [r0, #24]
 800147c:	4619      	mov	r1, r3
 800147e:	2208      	movs	r2, #8
 8001480:	305c      	adds	r0, #92	; 0x5c
 8001482:	f7ff fdfb 	bl	800107c <memset>
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <std+0x38>)
 8001488:	6263      	str	r3, [r4, #36]	; 0x24
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <std+0x3c>)
 800148c:	62a3      	str	r3, [r4, #40]	; 0x28
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <std+0x40>)
 8001490:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <std+0x44>)
 8001494:	6224      	str	r4, [r4, #32]
 8001496:	6323      	str	r3, [r4, #48]	; 0x30
 8001498:	bd10      	pop	{r4, pc}
 800149a:	bf00      	nop
 800149c:	08001dbd 	.word	0x08001dbd
 80014a0:	08001ddf 	.word	0x08001ddf
 80014a4:	08001e17 	.word	0x08001e17
 80014a8:	08001e3b 	.word	0x08001e3b

080014ac <_cleanup_r>:
 80014ac:	4901      	ldr	r1, [pc, #4]	; (80014b4 <_cleanup_r+0x8>)
 80014ae:	f000 b885 	b.w	80015bc <_fwalk_reent>
 80014b2:	bf00      	nop
 80014b4:	08001411 	.word	0x08001411

080014b8 <__sfmoreglue>:
 80014b8:	b570      	push	{r4, r5, r6, lr}
 80014ba:	1e4a      	subs	r2, r1, #1
 80014bc:	2568      	movs	r5, #104	; 0x68
 80014be:	4355      	muls	r5, r2
 80014c0:	460e      	mov	r6, r1
 80014c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014c6:	f000 f949 	bl	800175c <_malloc_r>
 80014ca:	4604      	mov	r4, r0
 80014cc:	b140      	cbz	r0, 80014e0 <__sfmoreglue+0x28>
 80014ce:	2100      	movs	r1, #0
 80014d0:	e9c0 1600 	strd	r1, r6, [r0]
 80014d4:	300c      	adds	r0, #12
 80014d6:	60a0      	str	r0, [r4, #8]
 80014d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014dc:	f7ff fdce 	bl	800107c <memset>
 80014e0:	4620      	mov	r0, r4
 80014e2:	bd70      	pop	{r4, r5, r6, pc}

080014e4 <__sinit>:
 80014e4:	6983      	ldr	r3, [r0, #24]
 80014e6:	b510      	push	{r4, lr}
 80014e8:	4604      	mov	r4, r0
 80014ea:	bb33      	cbnz	r3, 800153a <__sinit+0x56>
 80014ec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80014f0:	6503      	str	r3, [r0, #80]	; 0x50
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <__sinit+0x58>)
 80014f4:	4a12      	ldr	r2, [pc, #72]	; (8001540 <__sinit+0x5c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6282      	str	r2, [r0, #40]	; 0x28
 80014fa:	4298      	cmp	r0, r3
 80014fc:	bf04      	itt	eq
 80014fe:	2301      	moveq	r3, #1
 8001500:	6183      	streq	r3, [r0, #24]
 8001502:	f000 f81f 	bl	8001544 <__sfp>
 8001506:	6060      	str	r0, [r4, #4]
 8001508:	4620      	mov	r0, r4
 800150a:	f000 f81b 	bl	8001544 <__sfp>
 800150e:	60a0      	str	r0, [r4, #8]
 8001510:	4620      	mov	r0, r4
 8001512:	f000 f817 	bl	8001544 <__sfp>
 8001516:	2200      	movs	r2, #0
 8001518:	60e0      	str	r0, [r4, #12]
 800151a:	2104      	movs	r1, #4
 800151c:	6860      	ldr	r0, [r4, #4]
 800151e:	f7ff ffa1 	bl	8001464 <std>
 8001522:	2201      	movs	r2, #1
 8001524:	2109      	movs	r1, #9
 8001526:	68a0      	ldr	r0, [r4, #8]
 8001528:	f7ff ff9c 	bl	8001464 <std>
 800152c:	2202      	movs	r2, #2
 800152e:	2112      	movs	r1, #18
 8001530:	68e0      	ldr	r0, [r4, #12]
 8001532:	f7ff ff97 	bl	8001464 <std>
 8001536:	2301      	movs	r3, #1
 8001538:	61a3      	str	r3, [r4, #24]
 800153a:	bd10      	pop	{r4, pc}
 800153c:	080025a8 	.word	0x080025a8
 8001540:	080014ad 	.word	0x080014ad

08001544 <__sfp>:
 8001544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <__sfp+0x70>)
 8001548:	681e      	ldr	r6, [r3, #0]
 800154a:	69b3      	ldr	r3, [r6, #24]
 800154c:	4607      	mov	r7, r0
 800154e:	b913      	cbnz	r3, 8001556 <__sfp+0x12>
 8001550:	4630      	mov	r0, r6
 8001552:	f7ff ffc7 	bl	80014e4 <__sinit>
 8001556:	3648      	adds	r6, #72	; 0x48
 8001558:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800155c:	3b01      	subs	r3, #1
 800155e:	d503      	bpl.n	8001568 <__sfp+0x24>
 8001560:	6833      	ldr	r3, [r6, #0]
 8001562:	b133      	cbz	r3, 8001572 <__sfp+0x2e>
 8001564:	6836      	ldr	r6, [r6, #0]
 8001566:	e7f7      	b.n	8001558 <__sfp+0x14>
 8001568:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800156c:	b16d      	cbz	r5, 800158a <__sfp+0x46>
 800156e:	3468      	adds	r4, #104	; 0x68
 8001570:	e7f4      	b.n	800155c <__sfp+0x18>
 8001572:	2104      	movs	r1, #4
 8001574:	4638      	mov	r0, r7
 8001576:	f7ff ff9f 	bl	80014b8 <__sfmoreglue>
 800157a:	6030      	str	r0, [r6, #0]
 800157c:	2800      	cmp	r0, #0
 800157e:	d1f1      	bne.n	8001564 <__sfp+0x20>
 8001580:	230c      	movs	r3, #12
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	4604      	mov	r4, r0
 8001586:	4620      	mov	r0, r4
 8001588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <__sfp+0x74>)
 800158c:	6665      	str	r5, [r4, #100]	; 0x64
 800158e:	e9c4 5500 	strd	r5, r5, [r4]
 8001592:	60a5      	str	r5, [r4, #8]
 8001594:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001598:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800159c:	2208      	movs	r2, #8
 800159e:	4629      	mov	r1, r5
 80015a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80015a4:	f7ff fd6a 	bl	800107c <memset>
 80015a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80015ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80015b0:	e7e9      	b.n	8001586 <__sfp+0x42>
 80015b2:	bf00      	nop
 80015b4:	080025a8 	.word	0x080025a8
 80015b8:	ffff0001 	.word	0xffff0001

080015bc <_fwalk_reent>:
 80015bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015c0:	4680      	mov	r8, r0
 80015c2:	4689      	mov	r9, r1
 80015c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80015c8:	2600      	movs	r6, #0
 80015ca:	b914      	cbnz	r4, 80015d2 <_fwalk_reent+0x16>
 80015cc:	4630      	mov	r0, r6
 80015ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015d2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80015d6:	3f01      	subs	r7, #1
 80015d8:	d501      	bpl.n	80015de <_fwalk_reent+0x22>
 80015da:	6824      	ldr	r4, [r4, #0]
 80015dc:	e7f5      	b.n	80015ca <_fwalk_reent+0xe>
 80015de:	89ab      	ldrh	r3, [r5, #12]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d907      	bls.n	80015f4 <_fwalk_reent+0x38>
 80015e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015e8:	3301      	adds	r3, #1
 80015ea:	d003      	beq.n	80015f4 <_fwalk_reent+0x38>
 80015ec:	4629      	mov	r1, r5
 80015ee:	4640      	mov	r0, r8
 80015f0:	47c8      	blx	r9
 80015f2:	4306      	orrs	r6, r0
 80015f4:	3568      	adds	r5, #104	; 0x68
 80015f6:	e7ee      	b.n	80015d6 <_fwalk_reent+0x1a>

080015f8 <__swhatbuf_r>:
 80015f8:	b570      	push	{r4, r5, r6, lr}
 80015fa:	460e      	mov	r6, r1
 80015fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001600:	2900      	cmp	r1, #0
 8001602:	b096      	sub	sp, #88	; 0x58
 8001604:	4614      	mov	r4, r2
 8001606:	461d      	mov	r5, r3
 8001608:	da07      	bge.n	800161a <__swhatbuf_r+0x22>
 800160a:	2300      	movs	r3, #0
 800160c:	602b      	str	r3, [r5, #0]
 800160e:	89b3      	ldrh	r3, [r6, #12]
 8001610:	061a      	lsls	r2, r3, #24
 8001612:	d410      	bmi.n	8001636 <__swhatbuf_r+0x3e>
 8001614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001618:	e00e      	b.n	8001638 <__swhatbuf_r+0x40>
 800161a:	466a      	mov	r2, sp
 800161c:	f000 fc34 	bl	8001e88 <_fstat_r>
 8001620:	2800      	cmp	r0, #0
 8001622:	dbf2      	blt.n	800160a <__swhatbuf_r+0x12>
 8001624:	9a01      	ldr	r2, [sp, #4]
 8001626:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800162a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800162e:	425a      	negs	r2, r3
 8001630:	415a      	adcs	r2, r3
 8001632:	602a      	str	r2, [r5, #0]
 8001634:	e7ee      	b.n	8001614 <__swhatbuf_r+0x1c>
 8001636:	2340      	movs	r3, #64	; 0x40
 8001638:	2000      	movs	r0, #0
 800163a:	6023      	str	r3, [r4, #0]
 800163c:	b016      	add	sp, #88	; 0x58
 800163e:	bd70      	pop	{r4, r5, r6, pc}

08001640 <__smakebuf_r>:
 8001640:	898b      	ldrh	r3, [r1, #12]
 8001642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001644:	079d      	lsls	r5, r3, #30
 8001646:	4606      	mov	r6, r0
 8001648:	460c      	mov	r4, r1
 800164a:	d507      	bpl.n	800165c <__smakebuf_r+0x1c>
 800164c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001650:	6023      	str	r3, [r4, #0]
 8001652:	6123      	str	r3, [r4, #16]
 8001654:	2301      	movs	r3, #1
 8001656:	6163      	str	r3, [r4, #20]
 8001658:	b002      	add	sp, #8
 800165a:	bd70      	pop	{r4, r5, r6, pc}
 800165c:	ab01      	add	r3, sp, #4
 800165e:	466a      	mov	r2, sp
 8001660:	f7ff ffca 	bl	80015f8 <__swhatbuf_r>
 8001664:	9900      	ldr	r1, [sp, #0]
 8001666:	4605      	mov	r5, r0
 8001668:	4630      	mov	r0, r6
 800166a:	f000 f877 	bl	800175c <_malloc_r>
 800166e:	b948      	cbnz	r0, 8001684 <__smakebuf_r+0x44>
 8001670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001674:	059a      	lsls	r2, r3, #22
 8001676:	d4ef      	bmi.n	8001658 <__smakebuf_r+0x18>
 8001678:	f023 0303 	bic.w	r3, r3, #3
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	81a3      	strh	r3, [r4, #12]
 8001682:	e7e3      	b.n	800164c <__smakebuf_r+0xc>
 8001684:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <__smakebuf_r+0x7c>)
 8001686:	62b3      	str	r3, [r6, #40]	; 0x28
 8001688:	89a3      	ldrh	r3, [r4, #12]
 800168a:	6020      	str	r0, [r4, #0]
 800168c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001690:	81a3      	strh	r3, [r4, #12]
 8001692:	9b00      	ldr	r3, [sp, #0]
 8001694:	6163      	str	r3, [r4, #20]
 8001696:	9b01      	ldr	r3, [sp, #4]
 8001698:	6120      	str	r0, [r4, #16]
 800169a:	b15b      	cbz	r3, 80016b4 <__smakebuf_r+0x74>
 800169c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016a0:	4630      	mov	r0, r6
 80016a2:	f000 fc03 	bl	8001eac <_isatty_r>
 80016a6:	b128      	cbz	r0, 80016b4 <__smakebuf_r+0x74>
 80016a8:	89a3      	ldrh	r3, [r4, #12]
 80016aa:	f023 0303 	bic.w	r3, r3, #3
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	81a3      	strh	r3, [r4, #12]
 80016b4:	89a3      	ldrh	r3, [r4, #12]
 80016b6:	431d      	orrs	r5, r3
 80016b8:	81a5      	strh	r5, [r4, #12]
 80016ba:	e7cd      	b.n	8001658 <__smakebuf_r+0x18>
 80016bc:	080014ad 	.word	0x080014ad

080016c0 <_free_r>:
 80016c0:	b538      	push	{r3, r4, r5, lr}
 80016c2:	4605      	mov	r5, r0
 80016c4:	2900      	cmp	r1, #0
 80016c6:	d045      	beq.n	8001754 <_free_r+0x94>
 80016c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016cc:	1f0c      	subs	r4, r1, #4
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	bfb8      	it	lt
 80016d2:	18e4      	addlt	r4, r4, r3
 80016d4:	f000 fc0c 	bl	8001ef0 <__malloc_lock>
 80016d8:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <_free_r+0x98>)
 80016da:	6813      	ldr	r3, [r2, #0]
 80016dc:	4610      	mov	r0, r2
 80016de:	b933      	cbnz	r3, 80016ee <_free_r+0x2e>
 80016e0:	6063      	str	r3, [r4, #4]
 80016e2:	6014      	str	r4, [r2, #0]
 80016e4:	4628      	mov	r0, r5
 80016e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016ea:	f000 bc02 	b.w	8001ef2 <__malloc_unlock>
 80016ee:	42a3      	cmp	r3, r4
 80016f0:	d90c      	bls.n	800170c <_free_r+0x4c>
 80016f2:	6821      	ldr	r1, [r4, #0]
 80016f4:	1862      	adds	r2, r4, r1
 80016f6:	4293      	cmp	r3, r2
 80016f8:	bf04      	itt	eq
 80016fa:	681a      	ldreq	r2, [r3, #0]
 80016fc:	685b      	ldreq	r3, [r3, #4]
 80016fe:	6063      	str	r3, [r4, #4]
 8001700:	bf04      	itt	eq
 8001702:	1852      	addeq	r2, r2, r1
 8001704:	6022      	streq	r2, [r4, #0]
 8001706:	6004      	str	r4, [r0, #0]
 8001708:	e7ec      	b.n	80016e4 <_free_r+0x24>
 800170a:	4613      	mov	r3, r2
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	b10a      	cbz	r2, 8001714 <_free_r+0x54>
 8001710:	42a2      	cmp	r2, r4
 8001712:	d9fa      	bls.n	800170a <_free_r+0x4a>
 8001714:	6819      	ldr	r1, [r3, #0]
 8001716:	1858      	adds	r0, r3, r1
 8001718:	42a0      	cmp	r0, r4
 800171a:	d10b      	bne.n	8001734 <_free_r+0x74>
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	4401      	add	r1, r0
 8001720:	1858      	adds	r0, r3, r1
 8001722:	4282      	cmp	r2, r0
 8001724:	6019      	str	r1, [r3, #0]
 8001726:	d1dd      	bne.n	80016e4 <_free_r+0x24>
 8001728:	6810      	ldr	r0, [r2, #0]
 800172a:	6852      	ldr	r2, [r2, #4]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	4401      	add	r1, r0
 8001730:	6019      	str	r1, [r3, #0]
 8001732:	e7d7      	b.n	80016e4 <_free_r+0x24>
 8001734:	d902      	bls.n	800173c <_free_r+0x7c>
 8001736:	230c      	movs	r3, #12
 8001738:	602b      	str	r3, [r5, #0]
 800173a:	e7d3      	b.n	80016e4 <_free_r+0x24>
 800173c:	6820      	ldr	r0, [r4, #0]
 800173e:	1821      	adds	r1, r4, r0
 8001740:	428a      	cmp	r2, r1
 8001742:	bf04      	itt	eq
 8001744:	6811      	ldreq	r1, [r2, #0]
 8001746:	6852      	ldreq	r2, [r2, #4]
 8001748:	6062      	str	r2, [r4, #4]
 800174a:	bf04      	itt	eq
 800174c:	1809      	addeq	r1, r1, r0
 800174e:	6021      	streq	r1, [r4, #0]
 8001750:	605c      	str	r4, [r3, #4]
 8001752:	e7c7      	b.n	80016e4 <_free_r+0x24>
 8001754:	bd38      	pop	{r3, r4, r5, pc}
 8001756:	bf00      	nop
 8001758:	2000008c 	.word	0x2000008c

0800175c <_malloc_r>:
 800175c:	b570      	push	{r4, r5, r6, lr}
 800175e:	1ccd      	adds	r5, r1, #3
 8001760:	f025 0503 	bic.w	r5, r5, #3
 8001764:	3508      	adds	r5, #8
 8001766:	2d0c      	cmp	r5, #12
 8001768:	bf38      	it	cc
 800176a:	250c      	movcc	r5, #12
 800176c:	2d00      	cmp	r5, #0
 800176e:	4606      	mov	r6, r0
 8001770:	db01      	blt.n	8001776 <_malloc_r+0x1a>
 8001772:	42a9      	cmp	r1, r5
 8001774:	d903      	bls.n	800177e <_malloc_r+0x22>
 8001776:	230c      	movs	r3, #12
 8001778:	6033      	str	r3, [r6, #0]
 800177a:	2000      	movs	r0, #0
 800177c:	bd70      	pop	{r4, r5, r6, pc}
 800177e:	f000 fbb7 	bl	8001ef0 <__malloc_lock>
 8001782:	4a21      	ldr	r2, [pc, #132]	; (8001808 <_malloc_r+0xac>)
 8001784:	6814      	ldr	r4, [r2, #0]
 8001786:	4621      	mov	r1, r4
 8001788:	b991      	cbnz	r1, 80017b0 <_malloc_r+0x54>
 800178a:	4c20      	ldr	r4, [pc, #128]	; (800180c <_malloc_r+0xb0>)
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	b91b      	cbnz	r3, 8001798 <_malloc_r+0x3c>
 8001790:	4630      	mov	r0, r6
 8001792:	f000 fb03 	bl	8001d9c <_sbrk_r>
 8001796:	6020      	str	r0, [r4, #0]
 8001798:	4629      	mov	r1, r5
 800179a:	4630      	mov	r0, r6
 800179c:	f000 fafe 	bl	8001d9c <_sbrk_r>
 80017a0:	1c43      	adds	r3, r0, #1
 80017a2:	d124      	bne.n	80017ee <_malloc_r+0x92>
 80017a4:	230c      	movs	r3, #12
 80017a6:	6033      	str	r3, [r6, #0]
 80017a8:	4630      	mov	r0, r6
 80017aa:	f000 fba2 	bl	8001ef2 <__malloc_unlock>
 80017ae:	e7e4      	b.n	800177a <_malloc_r+0x1e>
 80017b0:	680b      	ldr	r3, [r1, #0]
 80017b2:	1b5b      	subs	r3, r3, r5
 80017b4:	d418      	bmi.n	80017e8 <_malloc_r+0x8c>
 80017b6:	2b0b      	cmp	r3, #11
 80017b8:	d90f      	bls.n	80017da <_malloc_r+0x7e>
 80017ba:	600b      	str	r3, [r1, #0]
 80017bc:	50cd      	str	r5, [r1, r3]
 80017be:	18cc      	adds	r4, r1, r3
 80017c0:	4630      	mov	r0, r6
 80017c2:	f000 fb96 	bl	8001ef2 <__malloc_unlock>
 80017c6:	f104 000b 	add.w	r0, r4, #11
 80017ca:	1d23      	adds	r3, r4, #4
 80017cc:	f020 0007 	bic.w	r0, r0, #7
 80017d0:	1ac3      	subs	r3, r0, r3
 80017d2:	d0d3      	beq.n	800177c <_malloc_r+0x20>
 80017d4:	425a      	negs	r2, r3
 80017d6:	50e2      	str	r2, [r4, r3]
 80017d8:	e7d0      	b.n	800177c <_malloc_r+0x20>
 80017da:	428c      	cmp	r4, r1
 80017dc:	684b      	ldr	r3, [r1, #4]
 80017de:	bf16      	itet	ne
 80017e0:	6063      	strne	r3, [r4, #4]
 80017e2:	6013      	streq	r3, [r2, #0]
 80017e4:	460c      	movne	r4, r1
 80017e6:	e7eb      	b.n	80017c0 <_malloc_r+0x64>
 80017e8:	460c      	mov	r4, r1
 80017ea:	6849      	ldr	r1, [r1, #4]
 80017ec:	e7cc      	b.n	8001788 <_malloc_r+0x2c>
 80017ee:	1cc4      	adds	r4, r0, #3
 80017f0:	f024 0403 	bic.w	r4, r4, #3
 80017f4:	42a0      	cmp	r0, r4
 80017f6:	d005      	beq.n	8001804 <_malloc_r+0xa8>
 80017f8:	1a21      	subs	r1, r4, r0
 80017fa:	4630      	mov	r0, r6
 80017fc:	f000 face 	bl	8001d9c <_sbrk_r>
 8001800:	3001      	adds	r0, #1
 8001802:	d0cf      	beq.n	80017a4 <_malloc_r+0x48>
 8001804:	6025      	str	r5, [r4, #0]
 8001806:	e7db      	b.n	80017c0 <_malloc_r+0x64>
 8001808:	2000008c 	.word	0x2000008c
 800180c:	20000090 	.word	0x20000090

08001810 <__sfputc_r>:
 8001810:	6893      	ldr	r3, [r2, #8]
 8001812:	3b01      	subs	r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	b410      	push	{r4}
 8001818:	6093      	str	r3, [r2, #8]
 800181a:	da07      	bge.n	800182c <__sfputc_r+0x1c>
 800181c:	6994      	ldr	r4, [r2, #24]
 800181e:	42a3      	cmp	r3, r4
 8001820:	db01      	blt.n	8001826 <__sfputc_r+0x16>
 8001822:	290a      	cmp	r1, #10
 8001824:	d102      	bne.n	800182c <__sfputc_r+0x1c>
 8001826:	bc10      	pop	{r4}
 8001828:	f7ff bcac 	b.w	8001184 <__swbuf_r>
 800182c:	6813      	ldr	r3, [r2, #0]
 800182e:	1c58      	adds	r0, r3, #1
 8001830:	6010      	str	r0, [r2, #0]
 8001832:	7019      	strb	r1, [r3, #0]
 8001834:	4608      	mov	r0, r1
 8001836:	bc10      	pop	{r4}
 8001838:	4770      	bx	lr

0800183a <__sfputs_r>:
 800183a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183c:	4606      	mov	r6, r0
 800183e:	460f      	mov	r7, r1
 8001840:	4614      	mov	r4, r2
 8001842:	18d5      	adds	r5, r2, r3
 8001844:	42ac      	cmp	r4, r5
 8001846:	d101      	bne.n	800184c <__sfputs_r+0x12>
 8001848:	2000      	movs	r0, #0
 800184a:	e007      	b.n	800185c <__sfputs_r+0x22>
 800184c:	463a      	mov	r2, r7
 800184e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001852:	4630      	mov	r0, r6
 8001854:	f7ff ffdc 	bl	8001810 <__sfputc_r>
 8001858:	1c43      	adds	r3, r0, #1
 800185a:	d1f3      	bne.n	8001844 <__sfputs_r+0xa>
 800185c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001860 <_vfiprintf_r>:
 8001860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001864:	460c      	mov	r4, r1
 8001866:	b09d      	sub	sp, #116	; 0x74
 8001868:	4617      	mov	r7, r2
 800186a:	461d      	mov	r5, r3
 800186c:	4606      	mov	r6, r0
 800186e:	b118      	cbz	r0, 8001878 <_vfiprintf_r+0x18>
 8001870:	6983      	ldr	r3, [r0, #24]
 8001872:	b90b      	cbnz	r3, 8001878 <_vfiprintf_r+0x18>
 8001874:	f7ff fe36 	bl	80014e4 <__sinit>
 8001878:	4b7c      	ldr	r3, [pc, #496]	; (8001a6c <_vfiprintf_r+0x20c>)
 800187a:	429c      	cmp	r4, r3
 800187c:	d158      	bne.n	8001930 <_vfiprintf_r+0xd0>
 800187e:	6874      	ldr	r4, [r6, #4]
 8001880:	89a3      	ldrh	r3, [r4, #12]
 8001882:	0718      	lsls	r0, r3, #28
 8001884:	d55e      	bpl.n	8001944 <_vfiprintf_r+0xe4>
 8001886:	6923      	ldr	r3, [r4, #16]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d05b      	beq.n	8001944 <_vfiprintf_r+0xe4>
 800188c:	2300      	movs	r3, #0
 800188e:	9309      	str	r3, [sp, #36]	; 0x24
 8001890:	2320      	movs	r3, #32
 8001892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001896:	2330      	movs	r3, #48	; 0x30
 8001898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800189c:	9503      	str	r5, [sp, #12]
 800189e:	f04f 0b01 	mov.w	fp, #1
 80018a2:	46b8      	mov	r8, r7
 80018a4:	4645      	mov	r5, r8
 80018a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80018aa:	b10b      	cbz	r3, 80018b0 <_vfiprintf_r+0x50>
 80018ac:	2b25      	cmp	r3, #37	; 0x25
 80018ae:	d154      	bne.n	800195a <_vfiprintf_r+0xfa>
 80018b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80018b4:	d00b      	beq.n	80018ce <_vfiprintf_r+0x6e>
 80018b6:	4653      	mov	r3, sl
 80018b8:	463a      	mov	r2, r7
 80018ba:	4621      	mov	r1, r4
 80018bc:	4630      	mov	r0, r6
 80018be:	f7ff ffbc 	bl	800183a <__sfputs_r>
 80018c2:	3001      	adds	r0, #1
 80018c4:	f000 80c2 	beq.w	8001a4c <_vfiprintf_r+0x1ec>
 80018c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018ca:	4453      	add	r3, sl
 80018cc:	9309      	str	r3, [sp, #36]	; 0x24
 80018ce:	f898 3000 	ldrb.w	r3, [r8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80ba 	beq.w	8001a4c <_vfiprintf_r+0x1ec>
 80018d8:	2300      	movs	r3, #0
 80018da:	f04f 32ff 	mov.w	r2, #4294967295
 80018de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018e2:	9304      	str	r3, [sp, #16]
 80018e4:	9307      	str	r3, [sp, #28]
 80018e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018ea:	931a      	str	r3, [sp, #104]	; 0x68
 80018ec:	46a8      	mov	r8, r5
 80018ee:	2205      	movs	r2, #5
 80018f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80018f4:	485e      	ldr	r0, [pc, #376]	; (8001a70 <_vfiprintf_r+0x210>)
 80018f6:	f7fe fc83 	bl	8000200 <memchr>
 80018fa:	9b04      	ldr	r3, [sp, #16]
 80018fc:	bb78      	cbnz	r0, 800195e <_vfiprintf_r+0xfe>
 80018fe:	06d9      	lsls	r1, r3, #27
 8001900:	bf44      	itt	mi
 8001902:	2220      	movmi	r2, #32
 8001904:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001908:	071a      	lsls	r2, r3, #28
 800190a:	bf44      	itt	mi
 800190c:	222b      	movmi	r2, #43	; 0x2b
 800190e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001912:	782a      	ldrb	r2, [r5, #0]
 8001914:	2a2a      	cmp	r2, #42	; 0x2a
 8001916:	d02a      	beq.n	800196e <_vfiprintf_r+0x10e>
 8001918:	9a07      	ldr	r2, [sp, #28]
 800191a:	46a8      	mov	r8, r5
 800191c:	2000      	movs	r0, #0
 800191e:	250a      	movs	r5, #10
 8001920:	4641      	mov	r1, r8
 8001922:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001926:	3b30      	subs	r3, #48	; 0x30
 8001928:	2b09      	cmp	r3, #9
 800192a:	d969      	bls.n	8001a00 <_vfiprintf_r+0x1a0>
 800192c:	b360      	cbz	r0, 8001988 <_vfiprintf_r+0x128>
 800192e:	e024      	b.n	800197a <_vfiprintf_r+0x11a>
 8001930:	4b50      	ldr	r3, [pc, #320]	; (8001a74 <_vfiprintf_r+0x214>)
 8001932:	429c      	cmp	r4, r3
 8001934:	d101      	bne.n	800193a <_vfiprintf_r+0xda>
 8001936:	68b4      	ldr	r4, [r6, #8]
 8001938:	e7a2      	b.n	8001880 <_vfiprintf_r+0x20>
 800193a:	4b4f      	ldr	r3, [pc, #316]	; (8001a78 <_vfiprintf_r+0x218>)
 800193c:	429c      	cmp	r4, r3
 800193e:	bf08      	it	eq
 8001940:	68f4      	ldreq	r4, [r6, #12]
 8001942:	e79d      	b.n	8001880 <_vfiprintf_r+0x20>
 8001944:	4621      	mov	r1, r4
 8001946:	4630      	mov	r0, r6
 8001948:	f7ff fc6e 	bl	8001228 <__swsetup_r>
 800194c:	2800      	cmp	r0, #0
 800194e:	d09d      	beq.n	800188c <_vfiprintf_r+0x2c>
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	b01d      	add	sp, #116	; 0x74
 8001956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800195a:	46a8      	mov	r8, r5
 800195c:	e7a2      	b.n	80018a4 <_vfiprintf_r+0x44>
 800195e:	4a44      	ldr	r2, [pc, #272]	; (8001a70 <_vfiprintf_r+0x210>)
 8001960:	1a80      	subs	r0, r0, r2
 8001962:	fa0b f000 	lsl.w	r0, fp, r0
 8001966:	4318      	orrs	r0, r3
 8001968:	9004      	str	r0, [sp, #16]
 800196a:	4645      	mov	r5, r8
 800196c:	e7be      	b.n	80018ec <_vfiprintf_r+0x8c>
 800196e:	9a03      	ldr	r2, [sp, #12]
 8001970:	1d11      	adds	r1, r2, #4
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	9103      	str	r1, [sp, #12]
 8001976:	2a00      	cmp	r2, #0
 8001978:	db01      	blt.n	800197e <_vfiprintf_r+0x11e>
 800197a:	9207      	str	r2, [sp, #28]
 800197c:	e004      	b.n	8001988 <_vfiprintf_r+0x128>
 800197e:	4252      	negs	r2, r2
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	9207      	str	r2, [sp, #28]
 8001986:	9304      	str	r3, [sp, #16]
 8001988:	f898 3000 	ldrb.w	r3, [r8]
 800198c:	2b2e      	cmp	r3, #46	; 0x2e
 800198e:	d10e      	bne.n	80019ae <_vfiprintf_r+0x14e>
 8001990:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001994:	2b2a      	cmp	r3, #42	; 0x2a
 8001996:	d138      	bne.n	8001a0a <_vfiprintf_r+0x1aa>
 8001998:	9b03      	ldr	r3, [sp, #12]
 800199a:	1d1a      	adds	r2, r3, #4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	9203      	str	r2, [sp, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bfb8      	it	lt
 80019a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80019a8:	f108 0802 	add.w	r8, r8, #2
 80019ac:	9305      	str	r3, [sp, #20]
 80019ae:	4d33      	ldr	r5, [pc, #204]	; (8001a7c <_vfiprintf_r+0x21c>)
 80019b0:	f898 1000 	ldrb.w	r1, [r8]
 80019b4:	2203      	movs	r2, #3
 80019b6:	4628      	mov	r0, r5
 80019b8:	f7fe fc22 	bl	8000200 <memchr>
 80019bc:	b140      	cbz	r0, 80019d0 <_vfiprintf_r+0x170>
 80019be:	2340      	movs	r3, #64	; 0x40
 80019c0:	1b40      	subs	r0, r0, r5
 80019c2:	fa03 f000 	lsl.w	r0, r3, r0
 80019c6:	9b04      	ldr	r3, [sp, #16]
 80019c8:	4303      	orrs	r3, r0
 80019ca:	f108 0801 	add.w	r8, r8, #1
 80019ce:	9304      	str	r3, [sp, #16]
 80019d0:	f898 1000 	ldrb.w	r1, [r8]
 80019d4:	482a      	ldr	r0, [pc, #168]	; (8001a80 <_vfiprintf_r+0x220>)
 80019d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019da:	2206      	movs	r2, #6
 80019dc:	f108 0701 	add.w	r7, r8, #1
 80019e0:	f7fe fc0e 	bl	8000200 <memchr>
 80019e4:	2800      	cmp	r0, #0
 80019e6:	d037      	beq.n	8001a58 <_vfiprintf_r+0x1f8>
 80019e8:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <_vfiprintf_r+0x224>)
 80019ea:	bb1b      	cbnz	r3, 8001a34 <_vfiprintf_r+0x1d4>
 80019ec:	9b03      	ldr	r3, [sp, #12]
 80019ee:	3307      	adds	r3, #7
 80019f0:	f023 0307 	bic.w	r3, r3, #7
 80019f4:	3308      	adds	r3, #8
 80019f6:	9303      	str	r3, [sp, #12]
 80019f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019fa:	444b      	add	r3, r9
 80019fc:	9309      	str	r3, [sp, #36]	; 0x24
 80019fe:	e750      	b.n	80018a2 <_vfiprintf_r+0x42>
 8001a00:	fb05 3202 	mla	r2, r5, r2, r3
 8001a04:	2001      	movs	r0, #1
 8001a06:	4688      	mov	r8, r1
 8001a08:	e78a      	b.n	8001920 <_vfiprintf_r+0xc0>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f108 0801 	add.w	r8, r8, #1
 8001a10:	9305      	str	r3, [sp, #20]
 8001a12:	4619      	mov	r1, r3
 8001a14:	250a      	movs	r5, #10
 8001a16:	4640      	mov	r0, r8
 8001a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a1c:	3a30      	subs	r2, #48	; 0x30
 8001a1e:	2a09      	cmp	r2, #9
 8001a20:	d903      	bls.n	8001a2a <_vfiprintf_r+0x1ca>
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0c3      	beq.n	80019ae <_vfiprintf_r+0x14e>
 8001a26:	9105      	str	r1, [sp, #20]
 8001a28:	e7c1      	b.n	80019ae <_vfiprintf_r+0x14e>
 8001a2a:	fb05 2101 	mla	r1, r5, r1, r2
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4680      	mov	r8, r0
 8001a32:	e7f0      	b.n	8001a16 <_vfiprintf_r+0x1b6>
 8001a34:	ab03      	add	r3, sp, #12
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	4622      	mov	r2, r4
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <_vfiprintf_r+0x228>)
 8001a3c:	a904      	add	r1, sp, #16
 8001a3e:	4630      	mov	r0, r6
 8001a40:	f3af 8000 	nop.w
 8001a44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001a48:	4681      	mov	r9, r0
 8001a4a:	d1d5      	bne.n	80019f8 <_vfiprintf_r+0x198>
 8001a4c:	89a3      	ldrh	r3, [r4, #12]
 8001a4e:	065b      	lsls	r3, r3, #25
 8001a50:	f53f af7e 	bmi.w	8001950 <_vfiprintf_r+0xf0>
 8001a54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a56:	e77d      	b.n	8001954 <_vfiprintf_r+0xf4>
 8001a58:	ab03      	add	r3, sp, #12
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	4622      	mov	r2, r4
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <_vfiprintf_r+0x228>)
 8001a60:	a904      	add	r1, sp, #16
 8001a62:	4630      	mov	r0, r6
 8001a64:	f000 f888 	bl	8001b78 <_printf_i>
 8001a68:	e7ec      	b.n	8001a44 <_vfiprintf_r+0x1e4>
 8001a6a:	bf00      	nop
 8001a6c:	080025cc 	.word	0x080025cc
 8001a70:	0800260c 	.word	0x0800260c
 8001a74:	080025ec 	.word	0x080025ec
 8001a78:	080025ac 	.word	0x080025ac
 8001a7c:	08002612 	.word	0x08002612
 8001a80:	08002616 	.word	0x08002616
 8001a84:	00000000 	.word	0x00000000
 8001a88:	0800183b 	.word	0x0800183b

08001a8c <_printf_common>:
 8001a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a90:	4691      	mov	r9, r2
 8001a92:	461f      	mov	r7, r3
 8001a94:	688a      	ldr	r2, [r1, #8]
 8001a96:	690b      	ldr	r3, [r1, #16]
 8001a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	bfb8      	it	lt
 8001aa0:	4613      	movlt	r3, r2
 8001aa2:	f8c9 3000 	str.w	r3, [r9]
 8001aa6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001aaa:	4606      	mov	r6, r0
 8001aac:	460c      	mov	r4, r1
 8001aae:	b112      	cbz	r2, 8001ab6 <_printf_common+0x2a>
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	f8c9 3000 	str.w	r3, [r9]
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	0699      	lsls	r1, r3, #26
 8001aba:	bf42      	ittt	mi
 8001abc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ac0:	3302      	addmi	r3, #2
 8001ac2:	f8c9 3000 	strmi.w	r3, [r9]
 8001ac6:	6825      	ldr	r5, [r4, #0]
 8001ac8:	f015 0506 	ands.w	r5, r5, #6
 8001acc:	d107      	bne.n	8001ade <_printf_common+0x52>
 8001ace:	f104 0a19 	add.w	sl, r4, #25
 8001ad2:	68e3      	ldr	r3, [r4, #12]
 8001ad4:	f8d9 2000 	ldr.w	r2, [r9]
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	42ab      	cmp	r3, r5
 8001adc:	dc28      	bgt.n	8001b30 <_printf_common+0xa4>
 8001ade:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001ae2:	6822      	ldr	r2, [r4, #0]
 8001ae4:	3300      	adds	r3, #0
 8001ae6:	bf18      	it	ne
 8001ae8:	2301      	movne	r3, #1
 8001aea:	0692      	lsls	r2, r2, #26
 8001aec:	d42d      	bmi.n	8001b4a <_printf_common+0xbe>
 8001aee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001af2:	4639      	mov	r1, r7
 8001af4:	4630      	mov	r0, r6
 8001af6:	47c0      	blx	r8
 8001af8:	3001      	adds	r0, #1
 8001afa:	d020      	beq.n	8001b3e <_printf_common+0xb2>
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	68e5      	ldr	r5, [r4, #12]
 8001b00:	f8d9 2000 	ldr.w	r2, [r9]
 8001b04:	f003 0306 	and.w	r3, r3, #6
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	bf08      	it	eq
 8001b0c:	1aad      	subeq	r5, r5, r2
 8001b0e:	68a3      	ldr	r3, [r4, #8]
 8001b10:	6922      	ldr	r2, [r4, #16]
 8001b12:	bf0c      	ite	eq
 8001b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b18:	2500      	movne	r5, #0
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	bfc4      	itt	gt
 8001b1e:	1a9b      	subgt	r3, r3, r2
 8001b20:	18ed      	addgt	r5, r5, r3
 8001b22:	f04f 0900 	mov.w	r9, #0
 8001b26:	341a      	adds	r4, #26
 8001b28:	454d      	cmp	r5, r9
 8001b2a:	d11a      	bne.n	8001b62 <_printf_common+0xd6>
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	e008      	b.n	8001b42 <_printf_common+0xb6>
 8001b30:	2301      	movs	r3, #1
 8001b32:	4652      	mov	r2, sl
 8001b34:	4639      	mov	r1, r7
 8001b36:	4630      	mov	r0, r6
 8001b38:	47c0      	blx	r8
 8001b3a:	3001      	adds	r0, #1
 8001b3c:	d103      	bne.n	8001b46 <_printf_common+0xba>
 8001b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b46:	3501      	adds	r5, #1
 8001b48:	e7c3      	b.n	8001ad2 <_printf_common+0x46>
 8001b4a:	18e1      	adds	r1, r4, r3
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	2030      	movs	r0, #48	; 0x30
 8001b50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b54:	4422      	add	r2, r4
 8001b56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b5e:	3302      	adds	r3, #2
 8001b60:	e7c5      	b.n	8001aee <_printf_common+0x62>
 8001b62:	2301      	movs	r3, #1
 8001b64:	4622      	mov	r2, r4
 8001b66:	4639      	mov	r1, r7
 8001b68:	4630      	mov	r0, r6
 8001b6a:	47c0      	blx	r8
 8001b6c:	3001      	adds	r0, #1
 8001b6e:	d0e6      	beq.n	8001b3e <_printf_common+0xb2>
 8001b70:	f109 0901 	add.w	r9, r9, #1
 8001b74:	e7d8      	b.n	8001b28 <_printf_common+0x9c>
	...

08001b78 <_printf_i>:
 8001b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001b80:	460c      	mov	r4, r1
 8001b82:	7e09      	ldrb	r1, [r1, #24]
 8001b84:	b085      	sub	sp, #20
 8001b86:	296e      	cmp	r1, #110	; 0x6e
 8001b88:	4617      	mov	r7, r2
 8001b8a:	4606      	mov	r6, r0
 8001b8c:	4698      	mov	r8, r3
 8001b8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001b90:	f000 80b3 	beq.w	8001cfa <_printf_i+0x182>
 8001b94:	d822      	bhi.n	8001bdc <_printf_i+0x64>
 8001b96:	2963      	cmp	r1, #99	; 0x63
 8001b98:	d036      	beq.n	8001c08 <_printf_i+0x90>
 8001b9a:	d80a      	bhi.n	8001bb2 <_printf_i+0x3a>
 8001b9c:	2900      	cmp	r1, #0
 8001b9e:	f000 80b9 	beq.w	8001d14 <_printf_i+0x19c>
 8001ba2:	2958      	cmp	r1, #88	; 0x58
 8001ba4:	f000 8083 	beq.w	8001cae <_printf_i+0x136>
 8001ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001bb0:	e032      	b.n	8001c18 <_printf_i+0xa0>
 8001bb2:	2964      	cmp	r1, #100	; 0x64
 8001bb4:	d001      	beq.n	8001bba <_printf_i+0x42>
 8001bb6:	2969      	cmp	r1, #105	; 0x69
 8001bb8:	d1f6      	bne.n	8001ba8 <_printf_i+0x30>
 8001bba:	6820      	ldr	r0, [r4, #0]
 8001bbc:	6813      	ldr	r3, [r2, #0]
 8001bbe:	0605      	lsls	r5, r0, #24
 8001bc0:	f103 0104 	add.w	r1, r3, #4
 8001bc4:	d52a      	bpl.n	8001c1c <_printf_i+0xa4>
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6011      	str	r1, [r2, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	da03      	bge.n	8001bd6 <_printf_i+0x5e>
 8001bce:	222d      	movs	r2, #45	; 0x2d
 8001bd0:	425b      	negs	r3, r3
 8001bd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001bd6:	486f      	ldr	r0, [pc, #444]	; (8001d94 <_printf_i+0x21c>)
 8001bd8:	220a      	movs	r2, #10
 8001bda:	e039      	b.n	8001c50 <_printf_i+0xd8>
 8001bdc:	2973      	cmp	r1, #115	; 0x73
 8001bde:	f000 809d 	beq.w	8001d1c <_printf_i+0x1a4>
 8001be2:	d808      	bhi.n	8001bf6 <_printf_i+0x7e>
 8001be4:	296f      	cmp	r1, #111	; 0x6f
 8001be6:	d020      	beq.n	8001c2a <_printf_i+0xb2>
 8001be8:	2970      	cmp	r1, #112	; 0x70
 8001bea:	d1dd      	bne.n	8001ba8 <_printf_i+0x30>
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	f043 0320 	orr.w	r3, r3, #32
 8001bf2:	6023      	str	r3, [r4, #0]
 8001bf4:	e003      	b.n	8001bfe <_printf_i+0x86>
 8001bf6:	2975      	cmp	r1, #117	; 0x75
 8001bf8:	d017      	beq.n	8001c2a <_printf_i+0xb2>
 8001bfa:	2978      	cmp	r1, #120	; 0x78
 8001bfc:	d1d4      	bne.n	8001ba8 <_printf_i+0x30>
 8001bfe:	2378      	movs	r3, #120	; 0x78
 8001c00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c04:	4864      	ldr	r0, [pc, #400]	; (8001d98 <_printf_i+0x220>)
 8001c06:	e055      	b.n	8001cb4 <_printf_i+0x13c>
 8001c08:	6813      	ldr	r3, [r2, #0]
 8001c0a:	1d19      	adds	r1, r3, #4
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6011      	str	r1, [r2, #0]
 8001c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e08c      	b.n	8001d36 <_printf_i+0x1be>
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6011      	str	r1, [r2, #0]
 8001c20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c24:	bf18      	it	ne
 8001c26:	b21b      	sxthne	r3, r3
 8001c28:	e7cf      	b.n	8001bca <_printf_i+0x52>
 8001c2a:	6813      	ldr	r3, [r2, #0]
 8001c2c:	6825      	ldr	r5, [r4, #0]
 8001c2e:	1d18      	adds	r0, r3, #4
 8001c30:	6010      	str	r0, [r2, #0]
 8001c32:	0628      	lsls	r0, r5, #24
 8001c34:	d501      	bpl.n	8001c3a <_printf_i+0xc2>
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	e002      	b.n	8001c40 <_printf_i+0xc8>
 8001c3a:	0668      	lsls	r0, r5, #25
 8001c3c:	d5fb      	bpl.n	8001c36 <_printf_i+0xbe>
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	4854      	ldr	r0, [pc, #336]	; (8001d94 <_printf_i+0x21c>)
 8001c42:	296f      	cmp	r1, #111	; 0x6f
 8001c44:	bf14      	ite	ne
 8001c46:	220a      	movne	r2, #10
 8001c48:	2208      	moveq	r2, #8
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c50:	6865      	ldr	r5, [r4, #4]
 8001c52:	60a5      	str	r5, [r4, #8]
 8001c54:	2d00      	cmp	r5, #0
 8001c56:	f2c0 8095 	blt.w	8001d84 <_printf_i+0x20c>
 8001c5a:	6821      	ldr	r1, [r4, #0]
 8001c5c:	f021 0104 	bic.w	r1, r1, #4
 8001c60:	6021      	str	r1, [r4, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d13d      	bne.n	8001ce2 <_printf_i+0x16a>
 8001c66:	2d00      	cmp	r5, #0
 8001c68:	f040 808e 	bne.w	8001d88 <_printf_i+0x210>
 8001c6c:	4665      	mov	r5, ip
 8001c6e:	2a08      	cmp	r2, #8
 8001c70:	d10b      	bne.n	8001c8a <_printf_i+0x112>
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	07db      	lsls	r3, r3, #31
 8001c76:	d508      	bpl.n	8001c8a <_printf_i+0x112>
 8001c78:	6923      	ldr	r3, [r4, #16]
 8001c7a:	6862      	ldr	r2, [r4, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	bfde      	ittt	le
 8001c80:	2330      	movle	r3, #48	; 0x30
 8001c82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c8a:	ebac 0305 	sub.w	r3, ip, r5
 8001c8e:	6123      	str	r3, [r4, #16]
 8001c90:	f8cd 8000 	str.w	r8, [sp]
 8001c94:	463b      	mov	r3, r7
 8001c96:	aa03      	add	r2, sp, #12
 8001c98:	4621      	mov	r1, r4
 8001c9a:	4630      	mov	r0, r6
 8001c9c:	f7ff fef6 	bl	8001a8c <_printf_common>
 8001ca0:	3001      	adds	r0, #1
 8001ca2:	d14d      	bne.n	8001d40 <_printf_i+0x1c8>
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	b005      	add	sp, #20
 8001caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cae:	4839      	ldr	r0, [pc, #228]	; (8001d94 <_printf_i+0x21c>)
 8001cb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001cb4:	6813      	ldr	r3, [r2, #0]
 8001cb6:	6821      	ldr	r1, [r4, #0]
 8001cb8:	1d1d      	adds	r5, r3, #4
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6015      	str	r5, [r2, #0]
 8001cbe:	060a      	lsls	r2, r1, #24
 8001cc0:	d50b      	bpl.n	8001cda <_printf_i+0x162>
 8001cc2:	07ca      	lsls	r2, r1, #31
 8001cc4:	bf44      	itt	mi
 8001cc6:	f041 0120 	orrmi.w	r1, r1, #32
 8001cca:	6021      	strmi	r1, [r4, #0]
 8001ccc:	b91b      	cbnz	r3, 8001cd6 <_printf_i+0x15e>
 8001cce:	6822      	ldr	r2, [r4, #0]
 8001cd0:	f022 0220 	bic.w	r2, r2, #32
 8001cd4:	6022      	str	r2, [r4, #0]
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	e7b7      	b.n	8001c4a <_printf_i+0xd2>
 8001cda:	064d      	lsls	r5, r1, #25
 8001cdc:	bf48      	it	mi
 8001cde:	b29b      	uxthmi	r3, r3
 8001ce0:	e7ef      	b.n	8001cc2 <_printf_i+0x14a>
 8001ce2:	4665      	mov	r5, ip
 8001ce4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ce8:	fb02 3311 	mls	r3, r2, r1, r3
 8001cec:	5cc3      	ldrb	r3, [r0, r3]
 8001cee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	2900      	cmp	r1, #0
 8001cf6:	d1f5      	bne.n	8001ce4 <_printf_i+0x16c>
 8001cf8:	e7b9      	b.n	8001c6e <_printf_i+0xf6>
 8001cfa:	6813      	ldr	r3, [r2, #0]
 8001cfc:	6825      	ldr	r5, [r4, #0]
 8001cfe:	6961      	ldr	r1, [r4, #20]
 8001d00:	1d18      	adds	r0, r3, #4
 8001d02:	6010      	str	r0, [r2, #0]
 8001d04:	0628      	lsls	r0, r5, #24
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	d501      	bpl.n	8001d0e <_printf_i+0x196>
 8001d0a:	6019      	str	r1, [r3, #0]
 8001d0c:	e002      	b.n	8001d14 <_printf_i+0x19c>
 8001d0e:	066a      	lsls	r2, r5, #25
 8001d10:	d5fb      	bpl.n	8001d0a <_printf_i+0x192>
 8001d12:	8019      	strh	r1, [r3, #0]
 8001d14:	2300      	movs	r3, #0
 8001d16:	6123      	str	r3, [r4, #16]
 8001d18:	4665      	mov	r5, ip
 8001d1a:	e7b9      	b.n	8001c90 <_printf_i+0x118>
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	1d19      	adds	r1, r3, #4
 8001d20:	6011      	str	r1, [r2, #0]
 8001d22:	681d      	ldr	r5, [r3, #0]
 8001d24:	6862      	ldr	r2, [r4, #4]
 8001d26:	2100      	movs	r1, #0
 8001d28:	4628      	mov	r0, r5
 8001d2a:	f7fe fa69 	bl	8000200 <memchr>
 8001d2e:	b108      	cbz	r0, 8001d34 <_printf_i+0x1bc>
 8001d30:	1b40      	subs	r0, r0, r5
 8001d32:	6060      	str	r0, [r4, #4]
 8001d34:	6863      	ldr	r3, [r4, #4]
 8001d36:	6123      	str	r3, [r4, #16]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d3e:	e7a7      	b.n	8001c90 <_printf_i+0x118>
 8001d40:	6923      	ldr	r3, [r4, #16]
 8001d42:	462a      	mov	r2, r5
 8001d44:	4639      	mov	r1, r7
 8001d46:	4630      	mov	r0, r6
 8001d48:	47c0      	blx	r8
 8001d4a:	3001      	adds	r0, #1
 8001d4c:	d0aa      	beq.n	8001ca4 <_printf_i+0x12c>
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	079b      	lsls	r3, r3, #30
 8001d52:	d413      	bmi.n	8001d7c <_printf_i+0x204>
 8001d54:	68e0      	ldr	r0, [r4, #12]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	4298      	cmp	r0, r3
 8001d5a:	bfb8      	it	lt
 8001d5c:	4618      	movlt	r0, r3
 8001d5e:	e7a3      	b.n	8001ca8 <_printf_i+0x130>
 8001d60:	2301      	movs	r3, #1
 8001d62:	464a      	mov	r2, r9
 8001d64:	4639      	mov	r1, r7
 8001d66:	4630      	mov	r0, r6
 8001d68:	47c0      	blx	r8
 8001d6a:	3001      	adds	r0, #1
 8001d6c:	d09a      	beq.n	8001ca4 <_printf_i+0x12c>
 8001d6e:	3501      	adds	r5, #1
 8001d70:	68e3      	ldr	r3, [r4, #12]
 8001d72:	9a03      	ldr	r2, [sp, #12]
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	42ab      	cmp	r3, r5
 8001d78:	dcf2      	bgt.n	8001d60 <_printf_i+0x1e8>
 8001d7a:	e7eb      	b.n	8001d54 <_printf_i+0x1dc>
 8001d7c:	2500      	movs	r5, #0
 8001d7e:	f104 0919 	add.w	r9, r4, #25
 8001d82:	e7f5      	b.n	8001d70 <_printf_i+0x1f8>
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1ac      	bne.n	8001ce2 <_printf_i+0x16a>
 8001d88:	7803      	ldrb	r3, [r0, #0]
 8001d8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d92:	e76c      	b.n	8001c6e <_printf_i+0xf6>
 8001d94:	0800261d 	.word	0x0800261d
 8001d98:	0800262e 	.word	0x0800262e

08001d9c <_sbrk_r>:
 8001d9c:	b538      	push	{r3, r4, r5, lr}
 8001d9e:	4c06      	ldr	r4, [pc, #24]	; (8001db8 <_sbrk_r+0x1c>)
 8001da0:	2300      	movs	r3, #0
 8001da2:	4605      	mov	r5, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	6023      	str	r3, [r4, #0]
 8001da8:	f000 f9bc 	bl	8002124 <_sbrk>
 8001dac:	1c43      	adds	r3, r0, #1
 8001dae:	d102      	bne.n	8001db6 <_sbrk_r+0x1a>
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	b103      	cbz	r3, 8001db6 <_sbrk_r+0x1a>
 8001db4:	602b      	str	r3, [r5, #0]
 8001db6:	bd38      	pop	{r3, r4, r5, pc}
 8001db8:	20000144 	.word	0x20000144

08001dbc <__sread>:
 8001dbc:	b510      	push	{r4, lr}
 8001dbe:	460c      	mov	r4, r1
 8001dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dc4:	f000 f896 	bl	8001ef4 <_read_r>
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	bfab      	itete	ge
 8001dcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001dce:	89a3      	ldrhlt	r3, [r4, #12]
 8001dd0:	181b      	addge	r3, r3, r0
 8001dd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001dd6:	bfac      	ite	ge
 8001dd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001dda:	81a3      	strhlt	r3, [r4, #12]
 8001ddc:	bd10      	pop	{r4, pc}

08001dde <__swrite>:
 8001dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001de2:	461f      	mov	r7, r3
 8001de4:	898b      	ldrh	r3, [r1, #12]
 8001de6:	05db      	lsls	r3, r3, #23
 8001de8:	4605      	mov	r5, r0
 8001dea:	460c      	mov	r4, r1
 8001dec:	4616      	mov	r6, r2
 8001dee:	d505      	bpl.n	8001dfc <__swrite+0x1e>
 8001df0:	2302      	movs	r3, #2
 8001df2:	2200      	movs	r2, #0
 8001df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001df8:	f000 f868 	bl	8001ecc <_lseek_r>
 8001dfc:	89a3      	ldrh	r3, [r4, #12]
 8001dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e06:	81a3      	strh	r3, [r4, #12]
 8001e08:	4632      	mov	r2, r6
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e12:	f000 b817 	b.w	8001e44 <_write_r>

08001e16 <__sseek>:
 8001e16:	b510      	push	{r4, lr}
 8001e18:	460c      	mov	r4, r1
 8001e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e1e:	f000 f855 	bl	8001ecc <_lseek_r>
 8001e22:	1c43      	adds	r3, r0, #1
 8001e24:	89a3      	ldrh	r3, [r4, #12]
 8001e26:	bf15      	itete	ne
 8001e28:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e32:	81a3      	strheq	r3, [r4, #12]
 8001e34:	bf18      	it	ne
 8001e36:	81a3      	strhne	r3, [r4, #12]
 8001e38:	bd10      	pop	{r4, pc}

08001e3a <__sclose>:
 8001e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e3e:	f000 b813 	b.w	8001e68 <_close_r>
	...

08001e44 <_write_r>:
 8001e44:	b538      	push	{r3, r4, r5, lr}
 8001e46:	4c07      	ldr	r4, [pc, #28]	; (8001e64 <_write_r+0x20>)
 8001e48:	4605      	mov	r5, r0
 8001e4a:	4608      	mov	r0, r1
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	2200      	movs	r2, #0
 8001e50:	6022      	str	r2, [r4, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	f000 f911 	bl	800207a <_write>
 8001e58:	1c43      	adds	r3, r0, #1
 8001e5a:	d102      	bne.n	8001e62 <_write_r+0x1e>
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	b103      	cbz	r3, 8001e62 <_write_r+0x1e>
 8001e60:	602b      	str	r3, [r5, #0]
 8001e62:	bd38      	pop	{r3, r4, r5, pc}
 8001e64:	20000144 	.word	0x20000144

08001e68 <_close_r>:
 8001e68:	b538      	push	{r3, r4, r5, lr}
 8001e6a:	4c06      	ldr	r4, [pc, #24]	; (8001e84 <_close_r+0x1c>)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	4605      	mov	r5, r0
 8001e70:	4608      	mov	r0, r1
 8001e72:	6023      	str	r3, [r4, #0]
 8001e74:	f000 f930 	bl	80020d8 <_close>
 8001e78:	1c43      	adds	r3, r0, #1
 8001e7a:	d102      	bne.n	8001e82 <_close_r+0x1a>
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	b103      	cbz	r3, 8001e82 <_close_r+0x1a>
 8001e80:	602b      	str	r3, [r5, #0]
 8001e82:	bd38      	pop	{r3, r4, r5, pc}
 8001e84:	20000144 	.word	0x20000144

08001e88 <_fstat_r>:
 8001e88:	b538      	push	{r3, r4, r5, lr}
 8001e8a:	4c07      	ldr	r4, [pc, #28]	; (8001ea8 <_fstat_r+0x20>)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	4605      	mov	r5, r0
 8001e90:	4608      	mov	r0, r1
 8001e92:	4611      	mov	r1, r2
 8001e94:	6023      	str	r3, [r4, #0]
 8001e96:	f000 f98a 	bl	80021ae <_fstat>
 8001e9a:	1c43      	adds	r3, r0, #1
 8001e9c:	d102      	bne.n	8001ea4 <_fstat_r+0x1c>
 8001e9e:	6823      	ldr	r3, [r4, #0]
 8001ea0:	b103      	cbz	r3, 8001ea4 <_fstat_r+0x1c>
 8001ea2:	602b      	str	r3, [r5, #0]
 8001ea4:	bd38      	pop	{r3, r4, r5, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000144 	.word	0x20000144

08001eac <_isatty_r>:
 8001eac:	b538      	push	{r3, r4, r5, lr}
 8001eae:	4c06      	ldr	r4, [pc, #24]	; (8001ec8 <_isatty_r+0x1c>)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	4605      	mov	r5, r0
 8001eb4:	4608      	mov	r0, r1
 8001eb6:	6023      	str	r3, [r4, #0]
 8001eb8:	f000 fade 	bl	8002478 <_isatty>
 8001ebc:	1c43      	adds	r3, r0, #1
 8001ebe:	d102      	bne.n	8001ec6 <_isatty_r+0x1a>
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	b103      	cbz	r3, 8001ec6 <_isatty_r+0x1a>
 8001ec4:	602b      	str	r3, [r5, #0]
 8001ec6:	bd38      	pop	{r3, r4, r5, pc}
 8001ec8:	20000144 	.word	0x20000144

08001ecc <_lseek_r>:
 8001ecc:	b538      	push	{r3, r4, r5, lr}
 8001ece:	4c07      	ldr	r4, [pc, #28]	; (8001eec <_lseek_r+0x20>)
 8001ed0:	4605      	mov	r5, r0
 8001ed2:	4608      	mov	r0, r1
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	6022      	str	r2, [r4, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	f000 f8bb 	bl	8002056 <_lseek>
 8001ee0:	1c43      	adds	r3, r0, #1
 8001ee2:	d102      	bne.n	8001eea <_lseek_r+0x1e>
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	b103      	cbz	r3, 8001eea <_lseek_r+0x1e>
 8001ee8:	602b      	str	r3, [r5, #0]
 8001eea:	bd38      	pop	{r3, r4, r5, pc}
 8001eec:	20000144 	.word	0x20000144

08001ef0 <__malloc_lock>:
 8001ef0:	4770      	bx	lr

08001ef2 <__malloc_unlock>:
 8001ef2:	4770      	bx	lr

08001ef4 <_read_r>:
 8001ef4:	b538      	push	{r3, r4, r5, lr}
 8001ef6:	4c07      	ldr	r4, [pc, #28]	; (8001f14 <_read_r+0x20>)
 8001ef8:	4605      	mov	r5, r0
 8001efa:	4608      	mov	r0, r1
 8001efc:	4611      	mov	r1, r2
 8001efe:	2200      	movs	r2, #0
 8001f00:	6022      	str	r2, [r4, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	f000 f850 	bl	8001fa8 <_read>
 8001f08:	1c43      	adds	r3, r0, #1
 8001f0a:	d102      	bne.n	8001f12 <_read_r+0x1e>
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	b103      	cbz	r3, 8001f12 <_read_r+0x1e>
 8001f10:	602b      	str	r3, [r5, #0]
 8001f12:	bd38      	pop	{r3, r4, r5, pc}
 8001f14:	20000144 	.word	0x20000144

08001f18 <findslot>:
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <findslot+0x2c>)
 8001f1a:	b510      	push	{r4, lr}
 8001f1c:	4604      	mov	r4, r0
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	b118      	cbz	r0, 8001f2a <findslot+0x12>
 8001f22:	6983      	ldr	r3, [r0, #24]
 8001f24:	b90b      	cbnz	r3, 8001f2a <findslot+0x12>
 8001f26:	f7ff fadd 	bl	80014e4 <__sinit>
 8001f2a:	2c13      	cmp	r4, #19
 8001f2c:	d807      	bhi.n	8001f3e <findslot+0x26>
 8001f2e:	4806      	ldr	r0, [pc, #24]	; (8001f48 <findslot+0x30>)
 8001f30:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001f34:	3301      	adds	r3, #1
 8001f36:	d002      	beq.n	8001f3e <findslot+0x26>
 8001f38:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001f3c:	bd10      	pop	{r4, pc}
 8001f3e:	2000      	movs	r0, #0
 8001f40:	e7fc      	b.n	8001f3c <findslot+0x24>
 8001f42:	bf00      	nop
 8001f44:	20000000 	.word	0x20000000
 8001f48:	200000a4 	.word	0x200000a4

08001f4c <checkerror>:
 8001f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4e:	1c43      	adds	r3, r0, #1
 8001f50:	4605      	mov	r5, r0
 8001f52:	d109      	bne.n	8001f68 <checkerror+0x1c>
 8001f54:	f000 faac 	bl	80024b0 <__errno>
 8001f58:	2413      	movs	r4, #19
 8001f5a:	4606      	mov	r6, r0
 8001f5c:	2700      	movs	r7, #0
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4639      	mov	r1, r7
 8001f62:	beab      	bkpt	0x00ab
 8001f64:	4604      	mov	r4, r0
 8001f66:	6034      	str	r4, [r6, #0]
 8001f68:	4628      	mov	r0, r5
 8001f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f6c <error>:
 8001f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6e:	4605      	mov	r5, r0
 8001f70:	f000 fa9e 	bl	80024b0 <__errno>
 8001f74:	2413      	movs	r4, #19
 8001f76:	4606      	mov	r6, r0
 8001f78:	2700      	movs	r7, #0
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	4639      	mov	r1, r7
 8001f7e:	beab      	bkpt	0x00ab
 8001f80:	4604      	mov	r4, r0
 8001f82:	6034      	str	r4, [r6, #0]
 8001f84:	4628      	mov	r0, r5
 8001f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f88 <_swiread>:
 8001f88:	b530      	push	{r4, r5, lr}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f90:	9203      	str	r2, [sp, #12]
 8001f92:	2406      	movs	r4, #6
 8001f94:	ad01      	add	r5, sp, #4
 8001f96:	4620      	mov	r0, r4
 8001f98:	4629      	mov	r1, r5
 8001f9a:	beab      	bkpt	0x00ab
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff ffd4 	bl	8001f4c <checkerror>
 8001fa4:	b005      	add	sp, #20
 8001fa6:	bd30      	pop	{r4, r5, pc}

08001fa8 <_read>:
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	460e      	mov	r6, r1
 8001fac:	4615      	mov	r5, r2
 8001fae:	f7ff ffb3 	bl	8001f18 <findslot>
 8001fb2:	4604      	mov	r4, r0
 8001fb4:	b930      	cbnz	r0, 8001fc4 <_read+0x1c>
 8001fb6:	f000 fa7b 	bl	80024b0 <__errno>
 8001fba:	2309      	movs	r3, #9
 8001fbc:	6003      	str	r3, [r0, #0]
 8001fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc2:	bd70      	pop	{r4, r5, r6, pc}
 8001fc4:	462a      	mov	r2, r5
 8001fc6:	4631      	mov	r1, r6
 8001fc8:	6800      	ldr	r0, [r0, #0]
 8001fca:	f7ff ffdd 	bl	8001f88 <_swiread>
 8001fce:	1c43      	adds	r3, r0, #1
 8001fd0:	bf1f      	itttt	ne
 8001fd2:	6863      	ldrne	r3, [r4, #4]
 8001fd4:	1a28      	subne	r0, r5, r0
 8001fd6:	181b      	addne	r3, r3, r0
 8001fd8:	6063      	strne	r3, [r4, #4]
 8001fda:	e7f2      	b.n	8001fc2 <_read+0x1a>

08001fdc <_swilseek>:
 8001fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fde:	460c      	mov	r4, r1
 8001fe0:	4616      	mov	r6, r2
 8001fe2:	f7ff ff99 	bl	8001f18 <findslot>
 8001fe6:	4605      	mov	r5, r0
 8001fe8:	b940      	cbnz	r0, 8001ffc <_swilseek+0x20>
 8001fea:	f000 fa61 	bl	80024b0 <__errno>
 8001fee:	2309      	movs	r3, #9
 8001ff0:	6003      	str	r3, [r0, #0]
 8001ff2:	f04f 34ff 	mov.w	r4, #4294967295
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	b003      	add	sp, #12
 8001ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ffc:	2e02      	cmp	r6, #2
 8001ffe:	d903      	bls.n	8002008 <_swilseek+0x2c>
 8002000:	f000 fa56 	bl	80024b0 <__errno>
 8002004:	2316      	movs	r3, #22
 8002006:	e7f3      	b.n	8001ff0 <_swilseek+0x14>
 8002008:	2e01      	cmp	r6, #1
 800200a:	d112      	bne.n	8002032 <_swilseek+0x56>
 800200c:	6843      	ldr	r3, [r0, #4]
 800200e:	18e4      	adds	r4, r4, r3
 8002010:	d4f6      	bmi.n	8002000 <_swilseek+0x24>
 8002012:	682b      	ldr	r3, [r5, #0]
 8002014:	260a      	movs	r6, #10
 8002016:	e9cd 3400 	strd	r3, r4, [sp]
 800201a:	466f      	mov	r7, sp
 800201c:	4630      	mov	r0, r6
 800201e:	4639      	mov	r1, r7
 8002020:	beab      	bkpt	0x00ab
 8002022:	4606      	mov	r6, r0
 8002024:	4630      	mov	r0, r6
 8002026:	f7ff ff91 	bl	8001f4c <checkerror>
 800202a:	2800      	cmp	r0, #0
 800202c:	dbe1      	blt.n	8001ff2 <_swilseek+0x16>
 800202e:	606c      	str	r4, [r5, #4]
 8002030:	e7e1      	b.n	8001ff6 <_swilseek+0x1a>
 8002032:	2e02      	cmp	r6, #2
 8002034:	d1ed      	bne.n	8002012 <_swilseek+0x36>
 8002036:	af02      	add	r7, sp, #8
 8002038:	6803      	ldr	r3, [r0, #0]
 800203a:	f847 3d08 	str.w	r3, [r7, #-8]!
 800203e:	260c      	movs	r6, #12
 8002040:	4630      	mov	r0, r6
 8002042:	4639      	mov	r1, r7
 8002044:	beab      	bkpt	0x00ab
 8002046:	4606      	mov	r6, r0
 8002048:	4630      	mov	r0, r6
 800204a:	f7ff ff7f 	bl	8001f4c <checkerror>
 800204e:	1c43      	adds	r3, r0, #1
 8002050:	d0cf      	beq.n	8001ff2 <_swilseek+0x16>
 8002052:	4404      	add	r4, r0
 8002054:	e7dd      	b.n	8002012 <_swilseek+0x36>

08002056 <_lseek>:
 8002056:	f7ff bfc1 	b.w	8001fdc <_swilseek>

0800205a <_swiwrite>:
 800205a:	b530      	push	{r4, r5, lr}
 800205c:	b085      	sub	sp, #20
 800205e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002062:	9203      	str	r2, [sp, #12]
 8002064:	2405      	movs	r4, #5
 8002066:	ad01      	add	r5, sp, #4
 8002068:	4620      	mov	r0, r4
 800206a:	4629      	mov	r1, r5
 800206c:	beab      	bkpt	0x00ab
 800206e:	4604      	mov	r4, r0
 8002070:	4620      	mov	r0, r4
 8002072:	f7ff ff6b 	bl	8001f4c <checkerror>
 8002076:	b005      	add	sp, #20
 8002078:	bd30      	pop	{r4, r5, pc}

0800207a <_write>:
 800207a:	b570      	push	{r4, r5, r6, lr}
 800207c:	460e      	mov	r6, r1
 800207e:	4615      	mov	r5, r2
 8002080:	f7ff ff4a 	bl	8001f18 <findslot>
 8002084:	4604      	mov	r4, r0
 8002086:	b930      	cbnz	r0, 8002096 <_write+0x1c>
 8002088:	f000 fa12 	bl	80024b0 <__errno>
 800208c:	2309      	movs	r3, #9
 800208e:	6003      	str	r3, [r0, #0]
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	bd70      	pop	{r4, r5, r6, pc}
 8002096:	462a      	mov	r2, r5
 8002098:	4631      	mov	r1, r6
 800209a:	6800      	ldr	r0, [r0, #0]
 800209c:	f7ff ffdd 	bl	800205a <_swiwrite>
 80020a0:	1e02      	subs	r2, r0, #0
 80020a2:	dbf5      	blt.n	8002090 <_write+0x16>
 80020a4:	6863      	ldr	r3, [r4, #4]
 80020a6:	1aa8      	subs	r0, r5, r2
 80020a8:	4403      	add	r3, r0
 80020aa:	42aa      	cmp	r2, r5
 80020ac:	6063      	str	r3, [r4, #4]
 80020ae:	d1f1      	bne.n	8002094 <_write+0x1a>
 80020b0:	2000      	movs	r0, #0
 80020b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80020b6:	f7ff bf59 	b.w	8001f6c <error>

080020ba <_swiclose>:
 80020ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020bc:	ad02      	add	r5, sp, #8
 80020be:	2402      	movs	r4, #2
 80020c0:	f845 0d04 	str.w	r0, [r5, #-4]!
 80020c4:	4620      	mov	r0, r4
 80020c6:	4629      	mov	r1, r5
 80020c8:	beab      	bkpt	0x00ab
 80020ca:	4604      	mov	r4, r0
 80020cc:	4620      	mov	r0, r4
 80020ce:	f7ff ff3d 	bl	8001f4c <checkerror>
 80020d2:	b003      	add	sp, #12
 80020d4:	bd30      	pop	{r4, r5, pc}
	...

080020d8 <_close>:
 80020d8:	b538      	push	{r3, r4, r5, lr}
 80020da:	4605      	mov	r5, r0
 80020dc:	f7ff ff1c 	bl	8001f18 <findslot>
 80020e0:	4604      	mov	r4, r0
 80020e2:	b930      	cbnz	r0, 80020f2 <_close+0x1a>
 80020e4:	f000 f9e4 	bl	80024b0 <__errno>
 80020e8:	2309      	movs	r3, #9
 80020ea:	6003      	str	r3, [r0, #0]
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	bd38      	pop	{r3, r4, r5, pc}
 80020f2:	3d01      	subs	r5, #1
 80020f4:	2d01      	cmp	r5, #1
 80020f6:	d809      	bhi.n	800210c <_close+0x34>
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <_close+0x48>)
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d104      	bne.n	800210c <_close+0x34>
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	6003      	str	r3, [r0, #0]
 8002108:	2000      	movs	r0, #0
 800210a:	e7f1      	b.n	80020f0 <_close+0x18>
 800210c:	6820      	ldr	r0, [r4, #0]
 800210e:	f7ff ffd4 	bl	80020ba <_swiclose>
 8002112:	2800      	cmp	r0, #0
 8002114:	d1ec      	bne.n	80020f0 <_close+0x18>
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
 800211a:	6023      	str	r3, [r4, #0]
 800211c:	e7e8      	b.n	80020f0 <_close+0x18>
 800211e:	bf00      	nop
 8002120:	200000a4 	.word	0x200000a4

08002124 <_sbrk>:
 8002124:	4b0d      	ldr	r3, [pc, #52]	; (800215c <_sbrk+0x38>)
 8002126:	6819      	ldr	r1, [r3, #0]
 8002128:	b510      	push	{r4, lr}
 800212a:	4602      	mov	r2, r0
 800212c:	b909      	cbnz	r1, 8002132 <_sbrk+0xe>
 800212e:	490c      	ldr	r1, [pc, #48]	; (8002160 <_sbrk+0x3c>)
 8002130:	6019      	str	r1, [r3, #0]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	4669      	mov	r1, sp
 8002136:	4402      	add	r2, r0
 8002138:	428a      	cmp	r2, r1
 800213a:	d806      	bhi.n	800214a <_sbrk+0x26>
 800213c:	4909      	ldr	r1, [pc, #36]	; (8002164 <_sbrk+0x40>)
 800213e:	4c0a      	ldr	r4, [pc, #40]	; (8002168 <_sbrk+0x44>)
 8002140:	6809      	ldr	r1, [r1, #0]
 8002142:	42a1      	cmp	r1, r4
 8002144:	d008      	beq.n	8002158 <_sbrk+0x34>
 8002146:	428a      	cmp	r2, r1
 8002148:	d906      	bls.n	8002158 <_sbrk+0x34>
 800214a:	f000 f9b1 	bl	80024b0 <__errno>
 800214e:	230c      	movs	r3, #12
 8002150:	6003      	str	r3, [r0, #0]
 8002152:	f04f 30ff 	mov.w	r0, #4294967295
 8002156:	bd10      	pop	{r4, pc}
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e7fc      	b.n	8002156 <_sbrk+0x32>
 800215c:	20000094 	.word	0x20000094
 8002160:	20000148 	.word	0x20000148
 8002164:	20000064 	.word	0x20000064
 8002168:	cafedead 	.word	0xcafedead

0800216c <_swistat>:
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	460c      	mov	r4, r1
 8002170:	f7ff fed2 	bl	8001f18 <findslot>
 8002174:	4606      	mov	r6, r0
 8002176:	b930      	cbnz	r0, 8002186 <_swistat+0x1a>
 8002178:	f000 f99a 	bl	80024b0 <__errno>
 800217c:	2309      	movs	r3, #9
 800217e:	6003      	str	r3, [r0, #0]
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	bd70      	pop	{r4, r5, r6, pc}
 8002186:	6863      	ldr	r3, [r4, #4]
 8002188:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800218c:	6063      	str	r3, [r4, #4]
 800218e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002192:	6463      	str	r3, [r4, #68]	; 0x44
 8002194:	250c      	movs	r5, #12
 8002196:	4628      	mov	r0, r5
 8002198:	4631      	mov	r1, r6
 800219a:	beab      	bkpt	0x00ab
 800219c:	4605      	mov	r5, r0
 800219e:	4628      	mov	r0, r5
 80021a0:	f7ff fed4 	bl	8001f4c <checkerror>
 80021a4:	1c43      	adds	r3, r0, #1
 80021a6:	bf1c      	itt	ne
 80021a8:	6120      	strne	r0, [r4, #16]
 80021aa:	2000      	movne	r0, #0
 80021ac:	e7ea      	b.n	8002184 <_swistat+0x18>

080021ae <_fstat>:
 80021ae:	460b      	mov	r3, r1
 80021b0:	b510      	push	{r4, lr}
 80021b2:	2100      	movs	r1, #0
 80021b4:	4604      	mov	r4, r0
 80021b6:	2258      	movs	r2, #88	; 0x58
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe ff5f 	bl	800107c <memset>
 80021be:	4601      	mov	r1, r0
 80021c0:	4620      	mov	r0, r4
 80021c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021c6:	f7ff bfd1 	b.w	800216c <_swistat>

080021ca <_stat>:
 80021ca:	b538      	push	{r3, r4, r5, lr}
 80021cc:	460d      	mov	r5, r1
 80021ce:	4604      	mov	r4, r0
 80021d0:	2258      	movs	r2, #88	; 0x58
 80021d2:	2100      	movs	r1, #0
 80021d4:	4628      	mov	r0, r5
 80021d6:	f7fe ff51 	bl	800107c <memset>
 80021da:	4620      	mov	r0, r4
 80021dc:	2100      	movs	r1, #0
 80021de:	f000 f811 	bl	8002204 <_swiopen>
 80021e2:	1c43      	adds	r3, r0, #1
 80021e4:	4604      	mov	r4, r0
 80021e6:	d00b      	beq.n	8002200 <_stat+0x36>
 80021e8:	686b      	ldr	r3, [r5, #4]
 80021ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80021ee:	606b      	str	r3, [r5, #4]
 80021f0:	4629      	mov	r1, r5
 80021f2:	f7ff ffbb 	bl	800216c <_swistat>
 80021f6:	4605      	mov	r5, r0
 80021f8:	4620      	mov	r0, r4
 80021fa:	f7ff ff6d 	bl	80020d8 <_close>
 80021fe:	462c      	mov	r4, r5
 8002200:	4620      	mov	r0, r4
 8002202:	bd38      	pop	{r3, r4, r5, pc}

08002204 <_swiopen>:
 8002204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002208:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <_swiopen+0xb4>)
 800220a:	b096      	sub	sp, #88	; 0x58
 800220c:	4682      	mov	sl, r0
 800220e:	460e      	mov	r6, r1
 8002210:	2500      	movs	r5, #0
 8002212:	4698      	mov	r8, r3
 8002214:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8002218:	1c61      	adds	r1, r4, #1
 800221a:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 800221e:	d036      	beq.n	800228e <_swiopen+0x8a>
 8002220:	3501      	adds	r5, #1
 8002222:	2d14      	cmp	r5, #20
 8002224:	d1f6      	bne.n	8002214 <_swiopen+0x10>
 8002226:	f000 f943 	bl	80024b0 <__errno>
 800222a:	2318      	movs	r3, #24
 800222c:	6003      	str	r3, [r0, #0]
 800222e:	f04f 34ff 	mov.w	r4, #4294967295
 8002232:	e03c      	b.n	80022ae <_swiopen+0xaa>
 8002234:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002238:	f240 6301 	movw	r3, #1537	; 0x601
 800223c:	07b2      	lsls	r2, r6, #30
 800223e:	bf48      	it	mi
 8002240:	f044 0402 	orrmi.w	r4, r4, #2
 8002244:	421e      	tst	r6, r3
 8002246:	bf18      	it	ne
 8002248:	f044 0404 	orrne.w	r4, r4, #4
 800224c:	0733      	lsls	r3, r6, #28
 800224e:	bf48      	it	mi
 8002250:	f024 0404 	bicmi.w	r4, r4, #4
 8002254:	4650      	mov	r0, sl
 8002256:	bf48      	it	mi
 8002258:	f044 0408 	orrmi.w	r4, r4, #8
 800225c:	f8cd a000 	str.w	sl, [sp]
 8002260:	f7fd ffc6 	bl	80001f0 <strlen>
 8002264:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002268:	2401      	movs	r4, #1
 800226a:	4620      	mov	r0, r4
 800226c:	4649      	mov	r1, r9
 800226e:	beab      	bkpt	0x00ab
 8002270:	4604      	mov	r4, r0
 8002272:	2c00      	cmp	r4, #0
 8002274:	db06      	blt.n	8002284 <_swiopen+0x80>
 8002276:	4447      	add	r7, r8
 8002278:	2300      	movs	r3, #0
 800227a:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	462c      	mov	r4, r5
 8002282:	e014      	b.n	80022ae <_swiopen+0xaa>
 8002284:	4620      	mov	r0, r4
 8002286:	f7ff fe71 	bl	8001f6c <error>
 800228a:	4604      	mov	r4, r0
 800228c:	e00f      	b.n	80022ae <_swiopen+0xaa>
 800228e:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002292:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002296:	46e9      	mov	r9, sp
 8002298:	d1cc      	bne.n	8002234 <_swiopen+0x30>
 800229a:	4649      	mov	r1, r9
 800229c:	4650      	mov	r0, sl
 800229e:	f7ff ff94 	bl	80021ca <_stat>
 80022a2:	3001      	adds	r0, #1
 80022a4:	d0c6      	beq.n	8002234 <_swiopen+0x30>
 80022a6:	f000 f903 	bl	80024b0 <__errno>
 80022aa:	2311      	movs	r3, #17
 80022ac:	6003      	str	r3, [r0, #0]
 80022ae:	4620      	mov	r0, r4
 80022b0:	b016      	add	sp, #88	; 0x58
 80022b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022b6:	bf00      	nop
 80022b8:	200000a4 	.word	0x200000a4

080022bc <_get_semihosting_exts>:
 80022bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80022c0:	4607      	mov	r7, r0
 80022c2:	4688      	mov	r8, r1
 80022c4:	4829      	ldr	r0, [pc, #164]	; (800236c <_get_semihosting_exts+0xb0>)
 80022c6:	2100      	movs	r1, #0
 80022c8:	4615      	mov	r5, r2
 80022ca:	f7ff ff9b 	bl	8002204 <_swiopen>
 80022ce:	462a      	mov	r2, r5
 80022d0:	4604      	mov	r4, r0
 80022d2:	2100      	movs	r1, #0
 80022d4:	4638      	mov	r0, r7
 80022d6:	f7fe fed1 	bl	800107c <memset>
 80022da:	1c63      	adds	r3, r4, #1
 80022dc:	d015      	beq.n	800230a <_get_semihosting_exts+0x4e>
 80022de:	4620      	mov	r0, r4
 80022e0:	f7ff fe1a 	bl	8001f18 <findslot>
 80022e4:	260c      	movs	r6, #12
 80022e6:	4681      	mov	r9, r0
 80022e8:	4630      	mov	r0, r6
 80022ea:	4649      	mov	r1, r9
 80022ec:	beab      	bkpt	0x00ab
 80022ee:	4606      	mov	r6, r0
 80022f0:	4630      	mov	r0, r6
 80022f2:	f7ff fe2b 	bl	8001f4c <checkerror>
 80022f6:	2803      	cmp	r0, #3
 80022f8:	dd02      	ble.n	8002300 <_get_semihosting_exts+0x44>
 80022fa:	3803      	subs	r0, #3
 80022fc:	42a8      	cmp	r0, r5
 80022fe:	dc08      	bgt.n	8002312 <_get_semihosting_exts+0x56>
 8002300:	4620      	mov	r0, r4
 8002302:	f7ff fee9 	bl	80020d8 <_close>
 8002306:	f04f 34ff 	mov.w	r4, #4294967295
 800230a:	4620      	mov	r0, r4
 800230c:	b003      	add	sp, #12
 800230e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002312:	2204      	movs	r2, #4
 8002314:	eb0d 0102 	add.w	r1, sp, r2
 8002318:	4620      	mov	r0, r4
 800231a:	f7ff fe45 	bl	8001fa8 <_read>
 800231e:	2803      	cmp	r0, #3
 8002320:	ddee      	ble.n	8002300 <_get_semihosting_exts+0x44>
 8002322:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002326:	2b53      	cmp	r3, #83	; 0x53
 8002328:	d1ea      	bne.n	8002300 <_get_semihosting_exts+0x44>
 800232a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800232e:	2b48      	cmp	r3, #72	; 0x48
 8002330:	d1e6      	bne.n	8002300 <_get_semihosting_exts+0x44>
 8002332:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002336:	2b46      	cmp	r3, #70	; 0x46
 8002338:	d1e2      	bne.n	8002300 <_get_semihosting_exts+0x44>
 800233a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800233e:	2b42      	cmp	r3, #66	; 0x42
 8002340:	d1de      	bne.n	8002300 <_get_semihosting_exts+0x44>
 8002342:	2201      	movs	r2, #1
 8002344:	4641      	mov	r1, r8
 8002346:	4620      	mov	r0, r4
 8002348:	f7ff fe48 	bl	8001fdc <_swilseek>
 800234c:	2800      	cmp	r0, #0
 800234e:	dbd7      	blt.n	8002300 <_get_semihosting_exts+0x44>
 8002350:	462a      	mov	r2, r5
 8002352:	4639      	mov	r1, r7
 8002354:	4620      	mov	r0, r4
 8002356:	f7ff fe27 	bl	8001fa8 <_read>
 800235a:	4605      	mov	r5, r0
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff febb 	bl	80020d8 <_close>
 8002362:	4628      	mov	r0, r5
 8002364:	f7ff fdf2 	bl	8001f4c <checkerror>
 8002368:	4604      	mov	r4, r0
 800236a:	e7ce      	b.n	800230a <_get_semihosting_exts+0x4e>
 800236c:	0800263f 	.word	0x0800263f

08002370 <initialise_semihosting_exts>:
 8002370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002372:	4d0a      	ldr	r5, [pc, #40]	; (800239c <initialise_semihosting_exts+0x2c>)
 8002374:	4c0a      	ldr	r4, [pc, #40]	; (80023a0 <initialise_semihosting_exts+0x30>)
 8002376:	2100      	movs	r1, #0
 8002378:	2201      	movs	r2, #1
 800237a:	a801      	add	r0, sp, #4
 800237c:	6029      	str	r1, [r5, #0]
 800237e:	6022      	str	r2, [r4, #0]
 8002380:	f7ff ff9c 	bl	80022bc <_get_semihosting_exts>
 8002384:	2800      	cmp	r0, #0
 8002386:	dd07      	ble.n	8002398 <initialise_semihosting_exts+0x28>
 8002388:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800238c:	f003 0201 	and.w	r2, r3, #1
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	602a      	str	r2, [r5, #0]
 8002396:	6023      	str	r3, [r4, #0]
 8002398:	b003      	add	sp, #12
 800239a:	bd30      	pop	{r4, r5, pc}
 800239c:	20000068 	.word	0x20000068
 80023a0:	2000006c 	.word	0x2000006c

080023a4 <_has_ext_stdout_stderr>:
 80023a4:	b510      	push	{r4, lr}
 80023a6:	4c04      	ldr	r4, [pc, #16]	; (80023b8 <_has_ext_stdout_stderr+0x14>)
 80023a8:	6822      	ldr	r2, [r4, #0]
 80023aa:	2a00      	cmp	r2, #0
 80023ac:	da01      	bge.n	80023b2 <_has_ext_stdout_stderr+0xe>
 80023ae:	f7ff ffdf 	bl	8002370 <initialise_semihosting_exts>
 80023b2:	6820      	ldr	r0, [r4, #0]
 80023b4:	bd10      	pop	{r4, pc}
 80023b6:	bf00      	nop
 80023b8:	2000006c 	.word	0x2000006c

080023bc <initialise_monitor_handles>:
 80023bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c0:	b085      	sub	sp, #20
 80023c2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002474 <initialise_monitor_handles+0xb8>
 80023c6:	f8cd 9004 	str.w	r9, [sp, #4]
 80023ca:	2303      	movs	r3, #3
 80023cc:	2400      	movs	r4, #0
 80023ce:	9303      	str	r3, [sp, #12]
 80023d0:	f10d 0804 	add.w	r8, sp, #4
 80023d4:	9402      	str	r4, [sp, #8]
 80023d6:	2501      	movs	r5, #1
 80023d8:	4628      	mov	r0, r5
 80023da:	4641      	mov	r1, r8
 80023dc:	beab      	bkpt	0x00ab
 80023de:	4605      	mov	r5, r0
 80023e0:	4e20      	ldr	r6, [pc, #128]	; (8002464 <initialise_monitor_handles+0xa8>)
 80023e2:	4a21      	ldr	r2, [pc, #132]	; (8002468 <initialise_monitor_handles+0xac>)
 80023e4:	6035      	str	r5, [r6, #0]
 80023e6:	4623      	mov	r3, r4
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	4614      	mov	r4, r2
 80023ee:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80023f2:	3301      	adds	r3, #1
 80023f4:	2b14      	cmp	r3, #20
 80023f6:	d1fa      	bne.n	80023ee <initialise_monitor_handles+0x32>
 80023f8:	f7ff ffd4 	bl	80023a4 <_has_ext_stdout_stderr>
 80023fc:	4d1b      	ldr	r5, [pc, #108]	; (800246c <initialise_monitor_handles+0xb0>)
 80023fe:	b1d0      	cbz	r0, 8002436 <initialise_monitor_handles+0x7a>
 8002400:	f04f 0a03 	mov.w	sl, #3
 8002404:	2304      	movs	r3, #4
 8002406:	f8cd 9004 	str.w	r9, [sp, #4]
 800240a:	2701      	movs	r7, #1
 800240c:	f8cd a00c 	str.w	sl, [sp, #12]
 8002410:	9302      	str	r3, [sp, #8]
 8002412:	4638      	mov	r0, r7
 8002414:	4641      	mov	r1, r8
 8002416:	beab      	bkpt	0x00ab
 8002418:	4683      	mov	fp, r0
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <initialise_monitor_handles+0xb4>)
 800241c:	f8cd 9004 	str.w	r9, [sp, #4]
 8002420:	f8c3 b000 	str.w	fp, [r3]
 8002424:	2308      	movs	r3, #8
 8002426:	f8cd a00c 	str.w	sl, [sp, #12]
 800242a:	9302      	str	r3, [sp, #8]
 800242c:	4638      	mov	r0, r7
 800242e:	4641      	mov	r1, r8
 8002430:	beab      	bkpt	0x00ab
 8002432:	4607      	mov	r7, r0
 8002434:	602f      	str	r7, [r5, #0]
 8002436:	682b      	ldr	r3, [r5, #0]
 8002438:	3301      	adds	r3, #1
 800243a:	bf02      	ittt	eq
 800243c:	4b0c      	ldreq	r3, [pc, #48]	; (8002470 <initialise_monitor_handles+0xb4>)
 800243e:	681b      	ldreq	r3, [r3, #0]
 8002440:	602b      	streq	r3, [r5, #0]
 8002442:	6833      	ldr	r3, [r6, #0]
 8002444:	6023      	str	r3, [r4, #0]
 8002446:	2600      	movs	r6, #0
 8002448:	6066      	str	r6, [r4, #4]
 800244a:	f7ff ffab 	bl	80023a4 <_has_ext_stdout_stderr>
 800244e:	b130      	cbz	r0, 800245e <initialise_monitor_handles+0xa2>
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <initialise_monitor_handles+0xb4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002458:	682b      	ldr	r3, [r5, #0]
 800245a:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800245e:	b005      	add	sp, #20
 8002460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002464:	2000009c 	.word	0x2000009c
 8002468:	200000a4 	.word	0x200000a4
 800246c:	20000098 	.word	0x20000098
 8002470:	200000a0 	.word	0x200000a0
 8002474:	08002655 	.word	0x08002655

08002478 <_isatty>:
 8002478:	b570      	push	{r4, r5, r6, lr}
 800247a:	f7ff fd4d 	bl	8001f18 <findslot>
 800247e:	2509      	movs	r5, #9
 8002480:	4604      	mov	r4, r0
 8002482:	b920      	cbnz	r0, 800248e <_isatty+0x16>
 8002484:	f000 f814 	bl	80024b0 <__errno>
 8002488:	6005      	str	r5, [r0, #0]
 800248a:	4620      	mov	r0, r4
 800248c:	bd70      	pop	{r4, r5, r6, pc}
 800248e:	4628      	mov	r0, r5
 8002490:	4621      	mov	r1, r4
 8002492:	beab      	bkpt	0x00ab
 8002494:	4604      	mov	r4, r0
 8002496:	2c01      	cmp	r4, #1
 8002498:	d0f7      	beq.n	800248a <_isatty+0x12>
 800249a:	f000 f809 	bl	80024b0 <__errno>
 800249e:	2400      	movs	r4, #0
 80024a0:	4606      	mov	r6, r0
 80024a2:	2513      	movs	r5, #19
 80024a4:	4628      	mov	r0, r5
 80024a6:	4621      	mov	r1, r4
 80024a8:	beab      	bkpt	0x00ab
 80024aa:	4605      	mov	r5, r0
 80024ac:	6035      	str	r5, [r6, #0]
 80024ae:	e7ec      	b.n	800248a <_isatty+0x12>

080024b0 <__errno>:
 80024b0:	4b01      	ldr	r3, [pc, #4]	; (80024b8 <__errno+0x8>)
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000000 	.word	0x20000000

080024bc <_init>:
 80024bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024be:	bf00      	nop
 80024c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c2:	bc08      	pop	{r3}
 80024c4:	469e      	mov	lr, r3
 80024c6:	4770      	bx	lr

080024c8 <_fini>:
 80024c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ca:	bf00      	nop
 80024cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ce:	bc08      	pop	{r3}
 80024d0:	469e      	mov	lr, r3
 80024d2:	4770      	bx	lr
